// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class ContactModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ContactModel.class.getName());
    
    // Hubs
    protected Hub<Contact> hub;
    // selected contacts
    protected Hub<Contact> hubMultiSelect;
    // detail hubs
    protected Hub<Customer> hubCustomer;
    protected Hub<OrderContact> hubOrderContacts;
    protected Hub<Phone> hubPhones;
    
    // ObjectModels
    protected CustomerModel modelCustomer;
    protected OrderContactModel modelOrderContacts;
    protected PhoneModel modelPhones;
    
    public ContactModel() {
        setDisplayName("Contact");
        setPluralDisplayName("Contacts");
    }
    
    public ContactModel(Hub<Contact> hubContact) {
        this();
        if (hubContact != null) HubDelegate.setObjectClass(hubContact, Contact.class);
        this.hub = hubContact;
    }
    public ContactModel(Contact contact) {
        this();
        getHub().add(contact);
        getHub().setPos(0);
    }
    
    public Hub<Contact> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Customer> getCustomerHub() {
        if (hubCustomer != null) return hubCustomer;
        // this is the owner, use detailHub
        hubCustomer = getHub().getDetailHub(Contact.P_Customer);
        return hubCustomer;
    }
    public Hub<OrderContact> getOrderContacts() {
        if (hubOrderContacts == null) {
            hubOrderContacts = getHub().getDetailHub(Contact.P_OrderContacts);
        }
        return hubOrderContacts;
    }
    public Hub<Phone> getPhones() {
        if (hubPhones == null) {
            hubPhones = getHub().getDetailHub(Contact.P_Phones);
        }
        return hubPhones;
    }
    public Contact getContact() {
        return getHub().getAO();
    }
    
    public Hub<Contact> getHub() {
        if (hub == null) {
            hub = new Hub<Contact>(Contact.class);
        }
        return hub;
    }
    
    public Hub<Contact> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Contact>(Contact.class);
        }
        return hubMultiSelect;
    }
    
    public CustomerModel getCustomerModel() {
        if (modelCustomer != null) return modelCustomer;
        modelCustomer = new CustomerModel(getCustomerHub());
        modelCustomer.setDisplayName("Customer");
        modelCustomer.setPluralDisplayName("Customers");
        modelCustomer.setForJfc(getForJfc());
        modelCustomer.setAllowNew(false);
        modelCustomer.setAllowSave(true);
        modelCustomer.setAllowAdd(false);
        modelCustomer.setAllowRemove(false);
        modelCustomer.setAllowClear(false);
        modelCustomer.setAllowDelete(false);
        modelCustomer.setAllowSearch(false);
        modelCustomer.setAllowHubSearch(true);
        modelCustomer.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelCustomer.setCreateUI(li == null || !Contact.P_Customer.equals(li.getName()) );
        modelCustomer.setViewOnly(getViewOnly());
        // call Contact.onEditQueryCustomer(CustomerModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Contact.class, Contact.P_Customer, modelCustomer);
    
        return modelCustomer;
    }
    public OrderContactModel getOrderContactsModel() {
        if (modelOrderContacts != null) return modelOrderContacts;
        modelOrderContacts = new OrderContactModel(getOrderContacts());
        modelOrderContacts.setDisplayName("Order Contact");
        modelOrderContacts.setPluralDisplayName("Order Contacts");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getOrderContacts())) {
            modelOrderContacts.setCreateUI(false);
        }
        modelOrderContacts.setForJfc(getForJfc());
        modelOrderContacts.setAllowNew(false);
        modelOrderContacts.setAllowSave(true);
        modelOrderContacts.setAllowAdd(false);
        modelOrderContacts.setAllowMove(false);
        modelOrderContacts.setAllowRemove(false);
        modelOrderContacts.setAllowDelete(true);
        modelOrderContacts.setAllowSearch(false);
        modelOrderContacts.setAllowHubSearch(true);
        modelOrderContacts.setAllowGotoEdit(true);
        modelOrderContacts.setViewOnly(getViewOnly());
        modelOrderContacts.setAllowTableFilter(true);
        modelOrderContacts.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelOrderContacts.setAllowMultiSelect(false);
        modelOrderContacts.setAllowCopy(false);
        modelOrderContacts.setAllowCut(false);
        modelOrderContacts.setAllowPaste(false);
        // call Contact.onEditQueryOrderContacts(OrderContactModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Contact.class, Contact.P_OrderContacts, modelOrderContacts);
    
        return modelOrderContacts;
    }
    public PhoneModel getPhonesModel() {
        if (modelPhones != null) return modelPhones;
        modelPhones = new PhoneModel(getPhones());
        modelPhones.setDisplayName("Phone");
        modelPhones.setPluralDisplayName("Phones");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getPhones())) {
            modelPhones.setCreateUI(false);
        }
        modelPhones.setForJfc(getForJfc());
        modelPhones.setAllowNew(true);
        modelPhones.setAllowSave(true);
        modelPhones.setAllowAdd(false);
        modelPhones.setAllowMove(false);
        modelPhones.setAllowRemove(false);
        modelPhones.setAllowDelete(true);
        modelPhones.setAllowSearch(false);
        modelPhones.setAllowHubSearch(true);
        modelPhones.setAllowGotoEdit(true);
        modelPhones.setViewOnly(getViewOnly());
        modelPhones.setAllowTableFilter(true);
        modelPhones.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelPhones.setAllowMultiSelect(false);
        modelPhones.setAllowCopy(false);
        modelPhones.setAllowCut(false);
        modelPhones.setAllowPaste(false);
        // call Contact.onEditQueryPhones(PhoneModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Contact.class, Contact.P_Phones, modelPhones);
    
        return modelPhones;
    }
    
    public HubCopy<Contact> createHubCopy() {
        Hub<Contact> hubContactx = new Hub<>(Contact.class);
        HubCopy<Contact> hc = new HubCopy<>(getHub(), hubContactx, true);
        return hc;
    }
    public ContactModel createCopy() {
        ContactModel mod = new ContactModel(createHubCopy().getHub());
        return mod;
    }
}

