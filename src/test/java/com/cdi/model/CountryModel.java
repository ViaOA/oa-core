// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class CountryModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(CountryModel.class.getName());
    
    // Hubs
    protected Hub<Country> hub;
    // selected countries
    protected Hub<Country> hubMultiSelect;
    
    
    public CountryModel() {
        setDisplayName("Country");
        setPluralDisplayName("Countries");
    }
    
    public CountryModel(Hub<Country> hubCountry) {
        this();
        if (hubCountry != null) HubDelegate.setObjectClass(hubCountry, Country.class);
        this.hub = hubCountry;
    }
    public CountryModel(Country country) {
        this();
        getHub().add(country);
        getHub().setPos(0);
    }
    
    public Hub<Country> getOriginalHub() {
        return getHub();
    }
    
    public Country getCountry() {
        return getHub().getAO();
    }
    
    public Hub<Country> getHub() {
        if (hub == null) {
            hub = new Hub<Country>(Country.class);
        }
        return hub;
    }
    
    public Hub<Country> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Country>(Country.class);
        }
        return hubMultiSelect;
    }
    
    public HubCopy<Country> createHubCopy() {
        Hub<Country> hubCountryx = new Hub<>(Country.class);
        HubCopy<Country> hc = new HubCopy<>(getHub(), hubCountryx, true);
        return hc;
    }
    public CountryModel createCopy() {
        CountryModel mod = new CountryModel(createHubCopy().getHub());
        return mod;
    }
}

