// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class CustomerModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(CustomerModel.class.getName());
    
    // Hubs
    protected Hub<Customer> hub;
    // selected customers
    protected Hub<Customer> hubMultiSelect;
    // detail hubs
    protected Hub<Region> hubRegion;
    protected Hub<TaxCode> hubTaxCode;
    protected Hub<Contact> hubContacts;
    protected Hub<Order> hubOrders;
    
    // ObjectModels
    protected RegionModel modelRegion;
    protected TaxCodeModel modelTaxCode;
    protected ContactModel modelContacts;
    protected OrderModel modelOrders;
    
    public CustomerModel() {
        setDisplayName("Customer");
        setPluralDisplayName("Customers");
    }
    
    public CustomerModel(Hub<Customer> hubCustomer) {
        this();
        if (hubCustomer != null) HubDelegate.setObjectClass(hubCustomer, Customer.class);
        this.hub = hubCustomer;
    }
    public CustomerModel(Customer customer) {
        this();
        getHub().add(customer);
        getHub().setPos(0);
    }
    
    public Hub<Customer> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Region> getRegionHub() {
        if (hubRegion != null) return hubRegion;
        hubRegion = new Hub<>(Region.class);
        Hub<Region> hub = ModelDelegate.getRegions();
        HubCopy<Region> hc = new HubCopy<>(hub, hubRegion, false);
        hubRegion.setLinkHub(getHub(), Customer.P_Region); 
        return hubRegion;
    }
    public Hub<TaxCode> getTaxCodeHub() {
        if (hubTaxCode != null) return hubTaxCode;
        hubTaxCode = new Hub<>(TaxCode.class);
        Hub<TaxCode> hub = ModelDelegate.getTaxCodes();
        HubCopy<TaxCode> hc = new HubCopy<>(hub, hubTaxCode, false);
        hubTaxCode.setLinkHub(getHub(), Customer.P_TaxCode); 
        return hubTaxCode;
    }
    public Hub<Contact> getContacts() {
        if (hubContacts == null) {
            hubContacts = getHub().getDetailHub(Customer.P_Contacts);
        }
        return hubContacts;
    }
    public Hub<Order> getOrders() {
        if (hubOrders == null) {
            hubOrders = getHub().getDetailHub(Customer.P_Orders);
        }
        return hubOrders;
    }
    public Customer getCustomer() {
        return getHub().getAO();
    }
    
    public Hub<Customer> getHub() {
        if (hub == null) {
            hub = new Hub<Customer>(Customer.class);
        }
        return hub;
    }
    
    public Hub<Customer> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Customer>(Customer.class);
        }
        return hubMultiSelect;
    }
    
    public RegionModel getRegionModel() {
        if (modelRegion != null) return modelRegion;
        modelRegion = new RegionModel(getRegionHub());
        modelRegion.setDisplayName("Region");
        modelRegion.setPluralDisplayName("Regions");
        modelRegion.setForJfc(getForJfc());
        modelRegion.setAllowNew(false);
        modelRegion.setAllowSave(true);
        modelRegion.setAllowAdd(false);
        modelRegion.setAllowRemove(false);
        modelRegion.setAllowClear(false);
        modelRegion.setAllowDelete(false);
        modelRegion.setAllowSearch(false);
        modelRegion.setAllowHubSearch(true);
        modelRegion.setAllowGotoEdit(false);
        modelRegion.setViewOnly(true);
        // call Customer.onEditQueryRegion(RegionModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Customer.class, Customer.P_Region, modelRegion);
    
        return modelRegion;
    }
    public TaxCodeModel getTaxCodeModel() {
        if (modelTaxCode != null) return modelTaxCode;
        modelTaxCode = new TaxCodeModel(getTaxCodeHub());
        modelTaxCode.setDisplayName("Tax Code");
        modelTaxCode.setPluralDisplayName("Tax Codes");
        modelTaxCode.setForJfc(getForJfc());
        modelTaxCode.setAllowNew(false);
        modelTaxCode.setAllowSave(true);
        modelTaxCode.setAllowAdd(false);
        modelTaxCode.setAllowRemove(false);
        modelTaxCode.setAllowClear(false);
        modelTaxCode.setAllowDelete(false);
        modelTaxCode.setAllowSearch(false);
        modelTaxCode.setAllowHubSearch(true);
        modelTaxCode.setAllowGotoEdit(false);
        modelTaxCode.setViewOnly(true);
        // call Customer.onEditQueryTaxCode(TaxCodeModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Customer.class, Customer.P_TaxCode, modelTaxCode);
    
        return modelTaxCode;
    }
    public ContactModel getContactsModel() {
        if (modelContacts != null) return modelContacts;
        modelContacts = new ContactModel(getContacts());
        modelContacts.setDisplayName("Contact");
        modelContacts.setPluralDisplayName("Contacts");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getContacts())) {
            modelContacts.setCreateUI(false);
        }
        modelContacts.setForJfc(getForJfc());
        modelContacts.setAllowNew(true);
        modelContacts.setAllowSave(true);
        modelContacts.setAllowAdd(false);
        modelContacts.setAllowMove(false);
        modelContacts.setAllowRemove(false);
        modelContacts.setAllowDelete(true);
        modelContacts.setAllowSearch(false);
        modelContacts.setAllowHubSearch(true);
        modelContacts.setAllowGotoEdit(true);
        modelContacts.setViewOnly(getViewOnly());
        modelContacts.setAllowTableFilter(true);
        modelContacts.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelContacts.setAllowMultiSelect(false);
        modelContacts.setAllowCopy(false);
        modelContacts.setAllowCut(false);
        modelContacts.setAllowPaste(false);
        // call Customer.onEditQueryContacts(ContactModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Customer.class, Customer.P_Contacts, modelContacts);
    
        return modelContacts;
    }
    public OrderModel getOrdersModel() {
        if (modelOrders != null) return modelOrders;
        modelOrders = new OrderModel(getOrders());
        modelOrders.setDisplayName("Order");
        modelOrders.setPluralDisplayName("Orders");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getOrders())) {
            modelOrders.setCreateUI(false);
        }
        modelOrders.setForJfc(getForJfc());
        modelOrders.setAllowNew(false);
        modelOrders.setAllowSave(true);
        modelOrders.setAllowAdd(false);
        modelOrders.setAllowMove(false);
        modelOrders.setAllowRemove(false);
        modelOrders.setAllowDelete(true);
        modelOrders.setAllowSearch(false);
        modelOrders.setAllowHubSearch(true);
        modelOrders.setAllowGotoEdit(true);
        modelOrders.setViewOnly(getViewOnly());
        modelOrders.setAllowTableFilter(true);
        modelOrders.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelOrders.setAllowMultiSelect(false);
        modelOrders.setAllowCopy(false);
        modelOrders.setAllowCut(false);
        modelOrders.setAllowPaste(false);
        // call Customer.onEditQueryOrders(OrderModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Customer.class, Customer.P_Orders, modelOrders);
    
        return modelOrders;
    }
    
    public HubCopy<Customer> createHubCopy() {
        Hub<Customer> hubCustomerx = new Hub<>(Customer.class);
        HubCopy<Customer> hc = new HubCopy<>(getHub(), hubCustomerx, true);
        return hc;
    }
    public CustomerModel createCopy() {
        CustomerModel mod = new CustomerModel(createHubCopy().getHub());
        return mod;
    }
}

