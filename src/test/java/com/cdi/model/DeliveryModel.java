// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class DeliveryModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(DeliveryModel.class.getName());
    
    // Hubs
    protected Hub<Delivery> hub;
    // selected deliveries
    protected Hub<Delivery> hubMultiSelect;
    // detail hubs
    protected Hub<DeliveryTruck> hubDeliveryTrucks;
    protected Hub<WODelivery> hubWODeliveries;
    
    // ObjectModels
    protected DeliveryTruckModel modelDeliveryTrucks;
    protected WODeliveryModel modelWODeliveries;
    
    public DeliveryModel() {
        setDisplayName("Delivery");
        setPluralDisplayName("Deliveries");
    }
    
    public DeliveryModel(Hub<Delivery> hubDelivery) {
        this();
        if (hubDelivery != null) HubDelegate.setObjectClass(hubDelivery, Delivery.class);
        this.hub = hubDelivery;
    }
    public DeliveryModel(Delivery delivery) {
        this();
        getHub().add(delivery);
        getHub().setPos(0);
    }
    
    public Hub<Delivery> getOriginalHub() {
        return getHub();
    }
    
    public Hub<DeliveryTruck> getDeliveryTrucks() {
        if (hubDeliveryTrucks == null) {
            hubDeliveryTrucks = getHub().getDetailHub(Delivery.P_DeliveryTrucks);
        }
        return hubDeliveryTrucks;
    }
    public Hub<WODelivery> getWODeliveries() {
        if (hubWODeliveries == null) {
            hubWODeliveries = getHub().getDetailHub(Delivery.P_WODeliveries);
        }
        return hubWODeliveries;
    }
    public Delivery getDelivery() {
        return getHub().getAO();
    }
    
    public Hub<Delivery> getHub() {
        if (hub == null) {
            hub = new Hub<Delivery>(Delivery.class);
        }
        return hub;
    }
    
    public Hub<Delivery> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Delivery>(Delivery.class);
        }
        return hubMultiSelect;
    }
    
    public DeliveryTruckModel getDeliveryTrucksModel() {
        if (modelDeliveryTrucks != null) return modelDeliveryTrucks;
        modelDeliveryTrucks = new DeliveryTruckModel(getDeliveryTrucks());
        modelDeliveryTrucks.setDisplayName("Delivery Truck");
        modelDeliveryTrucks.setPluralDisplayName("Delivery Trucks");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getDeliveryTrucks())) {
            modelDeliveryTrucks.setCreateUI(false);
        }
        modelDeliveryTrucks.setForJfc(getForJfc());
        modelDeliveryTrucks.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Truck
        modelDeliveryTrucks.setAllowSave(true);
        modelDeliveryTrucks.setAllowAdd(true); // Add is overwritten to create new DeliveryTruck by first selecting Truck
        modelDeliveryTrucks.setAllowMove(false);
        modelDeliveryTrucks.setAllowRemove(false);
        modelDeliveryTrucks.setAllowDelete(true);
        modelDeliveryTrucks.setAllowSearch(false);
        modelDeliveryTrucks.setAllowHubSearch(true);
        modelDeliveryTrucks.setAllowGotoEdit(true);
        modelDeliveryTrucks.setViewOnly(getViewOnly());
        modelDeliveryTrucks.setAllowTableFilter(true);
        modelDeliveryTrucks.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelDeliveryTrucks.setAllowMultiSelect(false);
        modelDeliveryTrucks.setAllowCopy(false);
        modelDeliveryTrucks.setAllowCut(false);
        modelDeliveryTrucks.setAllowPaste(false);
        // call Delivery.onEditQueryDeliveryTrucks(DeliveryTruckModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Delivery.class, Delivery.P_DeliveryTrucks, modelDeliveryTrucks);
    
        return modelDeliveryTrucks;
    }
    public WODeliveryModel getWODeliveriesModel() {
        if (modelWODeliveries != null) return modelWODeliveries;
        modelWODeliveries = new WODeliveryModel(getWODeliveries());
        modelWODeliveries.setDisplayName("WO Delivery");
        modelWODeliveries.setPluralDisplayName("WO Deliveries");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getWODeliveries())) {
            modelWODeliveries.setCreateUI(false);
        }
        modelWODeliveries.setForJfc(getForJfc());
        modelWODeliveries.setAllowNew(false);
        modelWODeliveries.setAllowSave(true);
        modelWODeliveries.setAllowAdd(false);
        modelWODeliveries.setAllowMove(false);
        modelWODeliveries.setAllowRemove(false);
        modelWODeliveries.setAllowDelete(true);
        modelWODeliveries.setAllowSearch(false);
        modelWODeliveries.setAllowHubSearch(false);
        modelWODeliveries.setAllowGotoEdit(true);
        modelWODeliveries.setViewOnly(getViewOnly());
        modelWODeliveries.setAllowTableFilter(true);
        modelWODeliveries.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelWODeliveries.setAllowMultiSelect(false);
        modelWODeliveries.setAllowCopy(false);
        modelWODeliveries.setAllowCut(false);
        modelWODeliveries.setAllowPaste(false);
        // call Delivery.onEditQueryWODeliveries(WODeliveryModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Delivery.class, Delivery.P_WODeliveries, modelWODeliveries);
    
        return modelWODeliveries;
    }
    
    public HubCopy<Delivery> createHubCopy() {
        Hub<Delivery> hubDeliveryx = new Hub<>(Delivery.class);
        HubCopy<Delivery> hc = new HubCopy<>(getHub(), hubDeliveryx, true);
        return hc;
    }
    public DeliveryModel createCopy() {
        DeliveryModel mod = new DeliveryModel(createHubCopy().getHub());
        return mod;
    }
}

