// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class ItemAddOnModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ItemAddOnModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      activeFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<ItemAddOn> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<ItemAddOn> hubUnfiltered;
    protected Hub<ItemAddOn> hubActiveFilteredHub;
    // main hub that points to hubUnfiltered, hubActiveFilteredHub
    protected Hub<ItemAddOn> hub;
    // selected itemAddOns
    protected Hub<ItemAddOn> hubMultiSelect;
    
    
    // FilterModels
    protected ItemAddOnActiveFilterModel modelItemAddOnActiveFilter;
    
    public ItemAddOnModel() {
        setDisplayName("Item Add On");
        setPluralDisplayName("Item Add Ons");
    }
    
    public ItemAddOnModel(Hub<ItemAddOn> hubItemAddOn) {
        this();
        if (hubItemAddOn != null) HubDelegate.setObjectClass(hubItemAddOn, ItemAddOn.class);
        this.hubOriginal = hubItemAddOn;
    }
    public ItemAddOnModel(ItemAddOn itemAddOn) {
        this();
        getHub().add(itemAddOn);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useActiveFilteredHub() {
        getHub().setSharedHub(getActiveFilteredHub(), true);
    }
    
    public Hub<ItemAddOn> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<ItemAddOn>(ItemAddOn.class);
        }
        return hubOriginal;
    }
    
    public Hub<ItemAddOn> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<ItemAddOn>(ItemAddOn.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<ItemAddOn> getActiveFilteredHub() {
        if (hubActiveFilteredHub == null) {
            hubActiveFilteredHub = new Hub<ItemAddOn>(ItemAddOn.class);
        }
        return hubActiveFilteredHub;
    }
    
    public ItemAddOn getItemAddOn() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<ItemAddOn> getHub() {
        if (hub == null) {
            hub = new Hub<ItemAddOn>(ItemAddOn.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<ItemAddOn> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ItemAddOn>(ItemAddOn.class);
        }
        return hubMultiSelect;
    }
    
    public ItemAddOnActiveFilterModel getItemAddOnActiveFilterModel() {
        if (modelItemAddOnActiveFilter == null) {
            modelItemAddOnActiveFilter = new ItemAddOnActiveFilterModel(getUnfilteredHub(), getActiveFilteredHub());
            new HubShareAO(getUnfilteredHub(), getActiveFilteredHub());
        }
        return modelItemAddOnActiveFilter;
    }
    
    public HubCopy<ItemAddOn> createHubCopy() {
        Hub<ItemAddOn> hubItemAddOnx = new Hub<>(ItemAddOn.class);
        HubCopy<ItemAddOn> hc = new HubCopy<>(getHub(), hubItemAddOnx, true);
        return hc;
    }
    public ItemAddOnModel createCopy() {
        ItemAddOnModel mod = new ItemAddOnModel(createHubCopy().getHub());
        return mod;
    }
}

