// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;
import com.viaoa.model.oa.VInteger;

import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class ItemCategoryModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ItemCategoryModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      rootHub       - for recursive, root
      recursiveHub  - will be shared with root or child hub
      flattenedHub  - will merge all recursive child hubs into one
      treeTableHub  - will have root objects and all expanded child hub objects
    */
    
    // types of ways to view the original hub
    public static final int TYPE_Original = 0;
    public static final int TYPE_TreeTable = 1;
    public static final int TYPE_Root = 2;
    public static final int TYPE_Flattened = 3;
    public static final int TYPE_Recursive = 4;
    
    // Hubs
    protected Hub<ItemCategory> hubOriginal;
    // hubs needed since ItemCategory is recursive
    protected Hub<ItemCategory> hubRecursive; // used by tree, points to root or child hub
    protected Hub<ItemCategory> hubTreeTable; // hub of root and the expanded node objects
    protected Hub<ItemCategory> hubFlattenedTreeTable; // works with tree
    protected Hub<ItemCategory> hubRoot;      // recursive root
    protected Hub<ItemCategory> hubFlattened; // recursive flattened
    
    // main hub that points to hubOriginal, hubRoot, hubRecursive, hubFlattened, hubTreeTable
    protected Hub<ItemCategory> hub;
    // selected itemCategories
    protected Hub<ItemCategory> hubMultiSelect;
    // detail hubs
    protected Hub<ItemCategory> hubParentItemCategory;
    protected Hub<ItemCategory> hubItemCategories;
    protected Hub<Item> hubItems;
    
    // ObjectModels
    protected ItemCategoryModel modelParentItemCategory;
    protected ItemCategoryModel modelItemCategories;
    protected ItemModel modelItems;
    
    // SearchModels used for references
    protected ItemCategorySearchModel modelParentItemCategorySearch;
    
    public ItemCategoryModel() {
        setDisplayName("Item Category");
        setPluralDisplayName("Item Categories");
        setAllowRecursive(true);
    }
    
    public ItemCategoryModel(Hub<ItemCategory> hubItemCategory) {
        this();
        if (hubItemCategory != null) HubDelegate.setObjectClass(hubItemCategory, ItemCategory.class);
        this.hubOriginal = hubItemCategory;
        setType(TYPE_Original);
    }
    public ItemCategoryModel(ItemCategory itemCategory) {
        this();
        getOriginalHub().add(itemCategory);
        getOriginalHub().setPos(0);
        setType(TYPE_Original);
    }
    
    public ItemCategoryModel(Hub<ItemCategory> hubRootItemCategory, Hub<ItemCategory> hubItemCategory) {
        this();
        hubOriginal = hubRootItemCategory;
        hubRecursive = hubItemCategory;
        setType(TYPE_Recursive);
    }
    
    // the type of hub that is active
    public void setType(int type) {
        updateType(type);
        getVType().setValue(type);
    }
    public int getType() {
        return getVType().getValue();
    }
    // listen to type change
    public void addTypeListener(HubListener hl) {
        if (hl != null) getTypeHub().addHubListener(hl);
    }
    // used to listen to type change
    private Hub<VInteger> hubType;
    private VInteger type;
    private VInteger getVType() {
        if (type == null) {
            type = new VInteger();
        }
        return type;
    }
    private Hub<VInteger> getTypeHub() {
        if (hubType == null) {
            hubType = new Hub<VInteger>(VInteger.class);
            hubType.add(getVType());
            hubType.setPos(0);
        }
        return hubType;
    }
    private void updateType(int newValue) {
        if (!getAllowRecursive()) newValue = TYPE_Original;
        switch (newValue) {
        case TYPE_Original:
            getHub().setSharedHub(getOriginalHub(), true);
            break;
        case TYPE_TreeTable:
            getHub().setSharedHub(getFlattenedTreeTableHub(), true);
            break;
        case TYPE_Root:
            getHub().setSharedHub(getRootHub(), true);
            break;
        case TYPE_Flattened:
            getHub().setSharedHub(getFlattenedHub(), true);
            break;
        case TYPE_Recursive:
            getHub().setSharedHub(getRecursiveHub(), true);
            break;
        }
    }
    
    public Hub<ItemCategory> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<ItemCategory>(ItemCategory.class);
        }
        return hubOriginal;
    }
    
    // the root hub of a recursive hub
    public Hub<ItemCategory> getRootHub() {
        if (hubRoot == null) {
            hubRoot = new Hub<ItemCategory>(ItemCategory.class);
            new HubRoot(getOriginalHub(), hubRoot);
        }
        return hubRoot;
    }
    
    // This will point/share to the root or child hub that is active.
    public Hub<ItemCategory> getRecursiveHub() {
        if (hubRecursive == null) {
            hubRecursive = new Hub<ItemCategory>(ItemCategory.class);
            hubRecursive.setSharedHub(getOriginalHub());
        }
        return hubRecursive;
    }
    
    // flattened hub for a recursive hub
    public Hub<ItemCategory> getFlattenedHub() {
        if (hubFlattened == null) {
            hubFlattened = new Hub<ItemCategory>(ItemCategory.class);
            HubFlattened hf = new HubFlattened(getOriginalHub(), hubFlattened);
        }
        return hubFlattened;
    }
    
    // hub of expanded nodes in treeTable
    public Hub<ItemCategory> getTreeTableHub() {
        if (hubTreeTable == null) {
            hubTreeTable = new Hub<ItemCategory>(ItemCategory.class);
        }
        return hubTreeTable;
    }
    public Hub<ItemCategory> getFlattenedTreeTableHub() {
        if (hubFlattenedTreeTable == null) {
            hubFlattenedTreeTable = new Hub<ItemCategory>(ItemCategory.class);
            new HubFlattened(getOriginalHub(), hubFlattenedTreeTable);
        }
        return hubFlattenedTreeTable;
    }
    
    protected Hub<ItemCategory>hubRootParentItemCategory;
    public Hub<ItemCategory> getRootParentItemCategoryHub() {
        if (hubRootParentItemCategory != null) return hubRootParentItemCategory;
        hubRootParentItemCategory = ModelDelegate.getItemCategories().createSharedHub();
        return hubRootParentItemCategory;
    }
    public Hub<ItemCategory> getParentItemCategoryHub() {
        if (hubParentItemCategory != null) return hubParentItemCategory;
        hubParentItemCategory = new Hub<>(ItemCategory.class);
        hubParentItemCategory.setSharedHub(getRootParentItemCategoryHub());
        hubParentItemCategory.setLinkHub(getHub(), ItemCategory.P_ParentItemCategory); 
        return hubParentItemCategory;
    }
    public Hub<ItemCategory> getItemCategories() {
        if (hubItemCategories == null) {
            hubItemCategories = getHub().getDetailHub(ItemCategory.P_ItemCategories);
        }
        return hubItemCategories;
    }
    public Hub<Item> getItems() {
        if (hubItems == null) {
            hubItems = getHub().getDetailHub(ItemCategory.P_Items);
        }
        return hubItems;
    }
    public ItemCategory getItemCategory() {
        return getHub().getAO();
    }
    
    // points to one: hubOriginal, hubFlattened, hubRecursive, hubTreeTable
    public Hub<ItemCategory> getHub() {
        if (hub == null) {
            hub = new Hub<ItemCategory>(ItemCategory.class);
            hub.setSharedHub(getOriginalHub(), true);
        }
        return hub;
    }
    
    public Hub<ItemCategory> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ItemCategory>(ItemCategory.class);
        }
        return hubMultiSelect;
    }
    
    public ItemCategoryModel getParentItemCategoryModel() {
        if (modelParentItemCategory != null) return modelParentItemCategory;
        modelParentItemCategory = new ItemCategoryModel(getRootParentItemCategoryHub(), getParentItemCategoryHub());
        modelParentItemCategory.setDisplayName("Parent Item Category");
        modelParentItemCategory.setPluralDisplayName("Item Categories");
        modelParentItemCategory.setForJfc(getForJfc());
        modelParentItemCategory.setAllowNew(false);
        modelParentItemCategory.setAllowSave(true);
        modelParentItemCategory.setAllowAdd(false);
        modelParentItemCategory.setAllowRemove(true);
        modelParentItemCategory.setAllowClear(true);
        modelParentItemCategory.setAllowDelete(false);
        modelParentItemCategory.setAllowSearch(true);
        modelParentItemCategory.setAllowHubSearch(true);
        modelParentItemCategory.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelParentItemCategory.setCreateUI(li == null || !ItemCategory.P_ParentItemCategory.equals(li.getName()) );
        modelParentItemCategory.setViewOnly(true);
        // call ItemCategory.onEditQueryParentItemCategory(ItemCategoryModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(ItemCategory.class, ItemCategory.P_ParentItemCategory, modelParentItemCategory);
    
        return modelParentItemCategory;
    }
    public ItemCategoryModel getItemCategoriesModel() {
        if (modelItemCategories != null) return modelItemCategories;
        modelItemCategories = new ItemCategoryModel(getItemCategories());
        modelItemCategories.setDisplayName("Item Category");
        modelItemCategories.setPluralDisplayName("Item Categories");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getItemCategories())) {
            modelItemCategories.setCreateUI(false);
        }
        modelItemCategories.setForJfc(getForJfc());
        modelItemCategories.setAllowNew(true);
        modelItemCategories.setAllowSave(true);
        modelItemCategories.setAllowAdd(false);
        modelItemCategories.setAllowMove(false);
        modelItemCategories.setAllowRemove(false);
        modelItemCategories.setAllowDelete(true);
        modelItemCategories.setAllowSearch(false);
        modelItemCategories.setAllowHubSearch(true);
        modelItemCategories.setAllowGotoEdit(false);
        modelItemCategories.setViewOnly(getViewOnly());
        modelItemCategories.setAllowTableFilter(true);
        modelItemCategories.setAllowTableSorting(true);
        modelItemCategories.setAllowRecursive(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelItemCategories.setAllowMultiSelect(false);
        modelItemCategories.setAllowCopy(false);
        modelItemCategories.setAllowCut(false);
        modelItemCategories.setAllowPaste(false);
        // call ItemCategory.onEditQueryItemCategories(ItemCategoryModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(ItemCategory.class, ItemCategory.P_ItemCategories, modelItemCategories);
    
        return modelItemCategories;
    }
    public ItemModel getItemsModel() {
        if (modelItems != null) return modelItems;
        modelItems = new ItemModel(getItems());
        modelItems.setDisplayName("Item");
        modelItems.setPluralDisplayName("Items");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getItems())) {
            modelItems.setCreateUI(false);
        }
        modelItems.setForJfc(getForJfc());
        modelItems.setAllowNew(false);
        modelItems.setAllowSave(true);
        modelItems.setAllowAdd(false);
        modelItems.setAllowMove(false);
        modelItems.setAllowRemove(false);
        modelItems.setAllowDelete(true);
        modelItems.setAllowSearch(false);
        modelItems.setAllowHubSearch(true);
        modelItems.setAllowGotoEdit(true);
        modelItems.setViewOnly(getViewOnly());
        modelItems.setAllowTableFilter(true);
        modelItems.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelItems.setAllowMultiSelect(false);
        modelItems.setAllowCopy(false);
        modelItems.setAllowCut(false);
        modelItems.setAllowPaste(false);
        // call ItemCategory.onEditQueryItems(ItemModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(ItemCategory.class, ItemCategory.P_Items, modelItems);
    
        return modelItems;
    }
    
    public ItemCategorySearchModel getParentItemCategorySearchModel() {
        if (modelParentItemCategorySearch != null) return modelParentItemCategorySearch;
        modelParentItemCategorySearch = new ItemCategorySearchModel();
        return modelParentItemCategorySearch;
    }
    
    public HubCopy<ItemCategory> createHubCopy() {
        Hub<ItemCategory> hubItemCategoryx = new Hub<>(ItemCategory.class);
        HubCopy<ItemCategory> hc = new HubCopy<>(getHub(), hubItemCategoryx, true);
        return hc;
    }
    public ItemCategoryModel createCopy() {
        ItemCategoryModel mod = new ItemCategoryModel(createHubCopy().getHub());
        return mod;
    }
}

