// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class ItemModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ItemModel.class.getName());
    
    // Hubs
    protected Hub<Item> hub;
    // selected items
    protected Hub<Item> hubMultiSelect;
    // detail hubs
    protected Hub<FileInfo> hubFileInfo;
    protected Hub<ImageStore> hubImageStore;
    protected Hub<ItemCategory> hubItemCategory;
    protected Hub<Mold> hubMold;
    protected Hub<ProductionArea> hubProductionArea;
    protected Hub<OrderItem> hubOpenOrderItems;
    protected Hub<WebItem> hubWebItems;
    
    // ObjectModels
    protected FileInfoModel modelFileInfo;
    protected ImageStoreModel modelImageStore;
    protected ItemCategoryModel modelItemCategory;
    protected MoldModel modelMold;
    protected ProductionAreaModel modelProductionArea;
    protected OrderItemModel modelOpenOrderItems;
    protected WebItemModel modelWebItems;
    
    // SearchModels used for references
    protected ItemCategorySearchModel modelItemCategorySearch;
    protected MoldSearchModel modelMoldSearch;
    protected WebItemSearchModel modelWebItemsSearch;
    
    public ItemModel() {
        setDisplayName("Item");
        setPluralDisplayName("Items");
    }
    
    public ItemModel(Hub<Item> hubItem) {
        this();
        if (hubItem != null) HubDelegate.setObjectClass(hubItem, Item.class);
        this.hub = hubItem;
    }
    public ItemModel(Item item) {
        this();
        getHub().add(item);
        getHub().setPos(0);
    }
    
    public Hub<Item> getOriginalHub() {
        return getHub();
    }
    
    public Hub<FileInfo> getFileInfoHub() {
        if (hubFileInfo != null) return hubFileInfo;
        hubFileInfo = getHub().getDetailHub(Item.P_FileInfo);
        return hubFileInfo;
    }
    public Hub<ImageStore> getImageStoreHub() {
        if (hubImageStore != null) return hubImageStore;
        hubImageStore = getHub().getDetailHub(Item.P_ImageStore);
        return hubImageStore;
    }
    protected Hub<ItemCategory>hubRootItemCategory;
    public Hub<ItemCategory> getRootItemCategoryHub() {
        if (hubRootItemCategory != null) return hubRootItemCategory;
        hubRootItemCategory = ModelDelegate.getItemCategories().createSharedHub();
        return hubRootItemCategory;
    }
    public Hub<ItemCategory> getItemCategoryHub() {
        if (hubItemCategory != null) return hubItemCategory;
        hubItemCategory = new Hub<>(ItemCategory.class);
        hubItemCategory.setSharedHub(getRootItemCategoryHub());
        hubItemCategory.setLinkHub(getHub(), Item.P_ItemCategory); 
        return hubItemCategory;
    }
    public Hub<Mold> getMoldHub() {
        if (hubMold != null) return hubMold;
        hubMold = getHub().getDetailHub(Item.P_Mold);
        return hubMold;
    }
    public Hub<ProductionArea> getProductionAreaHub() {
        if (hubProductionArea != null) return hubProductionArea;
        hubProductionArea = new Hub<>(ProductionArea.class);
        Hub<ProductionArea> hub = ModelDelegate.getProductionAreas();
        HubCopy<ProductionArea> hc = new HubCopy<>(hub, hubProductionArea, false);
        hubProductionArea.setLinkHub(getHub(), Item.P_ProductionArea); 
        return hubProductionArea;
    }
    public Hub<OrderItem> getOpenOrderItems() {
        if (hubOpenOrderItems == null) {
            hubOpenOrderItems = getHub().getDetailHub(Item.P_OpenOrderItems);
        }
        return hubOpenOrderItems;
    }
    public Hub<WebItem> getWebItems() {
        if (hubWebItems == null) {
            hubWebItems = getHub().getDetailHub(Item.P_WebItems);
        }
        return hubWebItems;
    }
    public Item getItem() {
        return getHub().getAO();
    }
    
    public Hub<Item> getHub() {
        if (hub == null) {
            hub = new Hub<Item>(Item.class);
        }
        return hub;
    }
    
    public Hub<Item> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Item>(Item.class);
        }
        return hubMultiSelect;
    }
    
    public FileInfoModel getFileInfoModel() {
        if (modelFileInfo != null) return modelFileInfo;
        modelFileInfo = new FileInfoModel(getFileInfoHub());
        modelFileInfo.setDisplayName("File Info");
        modelFileInfo.setPluralDisplayName("File Infos");
        modelFileInfo.setForJfc(getForJfc());
        modelFileInfo.setAllowNew(true);
        modelFileInfo.setAllowSave(true);
        modelFileInfo.setAllowAdd(false);
        modelFileInfo.setAllowRemove(false);
        modelFileInfo.setAllowClear(false);
        modelFileInfo.setAllowDelete(true);
        modelFileInfo.setAllowSearch(false);
        modelFileInfo.setAllowHubSearch(true);
        modelFileInfo.setAllowGotoEdit(true);
        modelFileInfo.setViewOnly(getViewOnly());
        // call Item.onEditQueryFileInfo(FileInfoModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Item.class, Item.P_FileInfo, modelFileInfo);
    
        return modelFileInfo;
    }
    public ImageStoreModel getImageStoreModel() {
        if (modelImageStore != null) return modelImageStore;
        modelImageStore = new ImageStoreModel(getImageStoreHub());
        modelImageStore.setDisplayName("Image Store");
        modelImageStore.setPluralDisplayName("Images");
        modelImageStore.setForJfc(getForJfc());
        modelImageStore.setAllowNew(false);
        modelImageStore.setAllowSave(true);
        modelImageStore.setAllowAdd(false);
        modelImageStore.setAllowRemove(false);
        modelImageStore.setAllowClear(false);
        modelImageStore.setAllowDelete(false);
        modelImageStore.setAllowSearch(false);
        modelImageStore.setAllowHubSearch(true);
        modelImageStore.setAllowGotoEdit(true);
        modelImageStore.setViewOnly(getViewOnly());
        // call Item.onEditQueryImageStore(ImageStoreModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Item.class, Item.P_ImageStore, modelImageStore);
    
        return modelImageStore;
    }
    public ItemCategoryModel getItemCategoryModel() {
        if (modelItemCategory != null) return modelItemCategory;
        modelItemCategory = new ItemCategoryModel(getRootItemCategoryHub(), getItemCategoryHub());
        modelItemCategory.setDisplayName("Item Category");
        modelItemCategory.setPluralDisplayName("Item Categories");
        modelItemCategory.setForJfc(getForJfc());
        modelItemCategory.setAllowNew(false);
        modelItemCategory.setAllowSave(true);
        modelItemCategory.setAllowAdd(false);
        modelItemCategory.setAllowRemove(true);
        modelItemCategory.setAllowClear(true);
        modelItemCategory.setAllowDelete(false);
        modelItemCategory.setAllowSearch(true);
        modelItemCategory.setAllowHubSearch(true);
        modelItemCategory.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelItemCategory.setCreateUI(li == null || !Item.P_ItemCategory.equals(li.getName()) );
        modelItemCategory.setViewOnly(true);
        // call Item.onEditQueryItemCategory(ItemCategoryModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Item.class, Item.P_ItemCategory, modelItemCategory);
    
        return modelItemCategory;
    }
    public MoldModel getMoldModel() {
        if (modelMold != null) return modelMold;
        modelMold = new MoldModel(getMoldHub());
        modelMold.setDisplayName("Mold");
        modelMold.setPluralDisplayName("Molds");
        modelMold.setForJfc(getForJfc());
        modelMold.setAllowNew(true);
        modelMold.setAllowSave(true);
        modelMold.setAllowAdd(false);
        modelMold.setAllowRemove(true);
        modelMold.setAllowClear(true);
        modelMold.setAllowDelete(false);
        modelMold.setAllowSearch(true);
        modelMold.setAllowHubSearch(true);
        modelMold.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelMold.setCreateUI(li == null || !Item.P_Mold.equals(li.getName()) );
        modelMold.setViewOnly(getViewOnly());
        // call Item.onEditQueryMold(MoldModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Item.class, Item.P_Mold, modelMold);
    
        return modelMold;
    }
    public ProductionAreaModel getProductionAreaModel() {
        if (modelProductionArea != null) return modelProductionArea;
        modelProductionArea = new ProductionAreaModel(getProductionAreaHub());
        modelProductionArea.setDisplayName("Production Area");
        modelProductionArea.setPluralDisplayName("Production Areas");
        modelProductionArea.setForJfc(getForJfc());
        modelProductionArea.setAllowNew(false);
        modelProductionArea.setAllowSave(true);
        modelProductionArea.setAllowAdd(false);
        modelProductionArea.setAllowRemove(false);
        modelProductionArea.setAllowClear(false);
        modelProductionArea.setAllowDelete(false);
        modelProductionArea.setAllowSearch(false);
        modelProductionArea.setAllowHubSearch(true);
        modelProductionArea.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelProductionArea.setCreateUI(li == null || !Item.P_ProductionArea.equals(li.getName()) );
        modelProductionArea.setViewOnly(true);
        // call Item.onEditQueryProductionArea(ProductionAreaModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Item.class, Item.P_ProductionArea, modelProductionArea);
    
        return modelProductionArea;
    }
    public OrderItemModel getOpenOrderItemsModel() {
        if (modelOpenOrderItems != null) return modelOpenOrderItems;
        modelOpenOrderItems = new OrderItemModel(getOpenOrderItems());
        modelOpenOrderItems.setDisplayName("Order Item");
        modelOpenOrderItems.setPluralDisplayName("Order Items");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getOpenOrderItems())) {
            modelOpenOrderItems.setCreateUI(false);
        }
        modelOpenOrderItems.setForJfc(getForJfc());
        modelOpenOrderItems.setAllowNew(false);
        modelOpenOrderItems.setAllowSave(false);
        modelOpenOrderItems.setAllowAdd(false);
        modelOpenOrderItems.setAllowMove(false);
        modelOpenOrderItems.setAllowRemove(false);
        modelOpenOrderItems.setAllowDelete(false);
        modelOpenOrderItems.setAllowSearch(false);
        modelOpenOrderItems.setAllowHubSearch(true);
        modelOpenOrderItems.setAllowGotoEdit(true);
        modelOpenOrderItems.setViewOnly(getViewOnly());
        modelOpenOrderItems.setAllowTableFilter(true);
        modelOpenOrderItems.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelOpenOrderItems.setAllowMultiSelect(false);
        modelOpenOrderItems.setAllowCopy(false);
        modelOpenOrderItems.setAllowCut(false);
        modelOpenOrderItems.setAllowPaste(false);
        // call Item.onEditQueryOpenOrderItems(OrderItemModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Item.class, Item.P_OpenOrderItems, modelOpenOrderItems);
    
        return modelOpenOrderItems;
    }
    public WebItemModel getWebItemsModel() {
        if (modelWebItems != null) return modelWebItems;
        modelWebItems = new WebItemModel(getWebItems());
        modelWebItems.setDisplayName("Web Item");
        modelWebItems.setPluralDisplayName("Web Items");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getWebItems())) {
            modelWebItems.setCreateUI(false);
        }
        modelWebItems.setForJfc(getForJfc());
        modelWebItems.setAllowNew(false);
        modelWebItems.setAllowSave(true);
        modelWebItems.setAllowAdd(true);
        modelWebItems.setAllowMove(false);
        modelWebItems.setAllowRemove(true);
        modelWebItems.setAllowDelete(false);
        modelWebItems.setAllowSearch(false);
        modelWebItems.setAllowHubSearch(true);
        modelWebItems.setAllowGotoEdit(true);
        modelWebItems.setViewOnly(getViewOnly());
        modelWebItems.setAllowTableFilter(true);
        modelWebItems.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelWebItems.setAllowMultiSelect(false);
        modelWebItems.setAllowCopy(false);
        modelWebItems.setAllowCut(false);
        modelWebItems.setAllowPaste(false);
        // call Item.onEditQueryWebItems(WebItemModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Item.class, Item.P_WebItems, modelWebItems);
    
        return modelWebItems;
    }
    
    public ItemCategorySearchModel getItemCategorySearchModel() {
        if (modelItemCategorySearch != null) return modelItemCategorySearch;
        modelItemCategorySearch = new ItemCategorySearchModel();
        return modelItemCategorySearch;
    }
    public MoldSearchModel getMoldSearchModel() {
        if (modelMoldSearch != null) return modelMoldSearch;
        modelMoldSearch = new MoldSearchModel();
        return modelMoldSearch;
    }
    public WebItemSearchModel getWebItemsSearchModel() {
        if (modelWebItemsSearch != null) return modelWebItemsSearch;
        modelWebItemsSearch = new WebItemSearchModel();
        return modelWebItemsSearch;
    }
    
    public HubCopy<Item> createHubCopy() {
        Hub<Item> hubItemx = new Hub<>(Item.class);
        HubCopy<Item> hc = new HubCopy<>(getHub(), hubItemx, true);
        return hc;
    }
    public ItemModel createCopy() {
        ItemModel mod = new ItemModel(createHubCopy().getHub());
        return mod;
    }
}

