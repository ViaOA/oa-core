// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class ItemQuoteModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ItemQuoteModel.class.getName());
    
    // Hubs
    protected Hub<ItemQuote> hub;
    // selected itemQuotes
    protected Hub<ItemQuote> hubMultiSelect;
    // detail hubs
    protected Hub<Item> hubItem;
    protected Hub<ItemAddOn> hubItemAddOn;
    protected Hub<PriceCode> hubPriceCode;
    
    // ObjectModels
    protected ItemModel modelItem;
    protected ItemAddOnModel modelItemAddOn;
    protected PriceCodeModel modelPriceCode;
    
    public ItemQuoteModel() {
        setDisplayName("Item Quote");
        setPluralDisplayName("Item Quotes");
    }
    
    public ItemQuoteModel(Hub<ItemQuote> hubItemQuote) {
        this();
        if (hubItemQuote != null) HubDelegate.setObjectClass(hubItemQuote, ItemQuote.class);
        this.hub = hubItemQuote;
    }
    public ItemQuoteModel(ItemQuote itemQuote) {
        this();
        getHub().add(itemQuote);
        getHub().setPos(0);
    }
    
    public Hub<ItemQuote> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Item> getItemHub() {
        if (hubItem != null) return hubItem;
        hubItem = new Hub<>(Item.class);
        Hub<Item> hub = ModelDelegate.getActiveItems();
        HubCopy<Item> hc = new HubCopy<>(hub, hubItem, false);
        hubItem.setLinkHub(getHub(), ItemQuote.P_Item); 
        return hubItem;
    }
    public Hub<ItemAddOn> getItemAddOnHub() {
        if (hubItemAddOn != null) return hubItemAddOn;
        hubItemAddOn = new Hub<>(ItemAddOn.class);
        Hub<ItemAddOn> hub = ModelDelegate.getItemAddOns();
        HubCopy<ItemAddOn> hc = new HubCopy<>(hub, hubItemAddOn, false);
        hubItemAddOn.setLinkHub(getHub(), ItemQuote.P_ItemAddOn); 
        return hubItemAddOn;
    }
    public Hub<PriceCode> getPriceCodeHub() {
        if (hubPriceCode != null) return hubPriceCode;
        hubPriceCode = new Hub<>(PriceCode.class);
        Hub<PriceCode> hub = ModelDelegate.getPriceCodes();
        HubCopy<PriceCode> hc = new HubCopy<>(hub, hubPriceCode, false);
        hubPriceCode.setLinkHub(getHub(), ItemQuote.P_PriceCode); 
        return hubPriceCode;
    }
    public ItemQuote getItemQuote() {
        return getHub().getAO();
    }
    
    public Hub<ItemQuote> getHub() {
        if (hub == null) {
            hub = new Hub<ItemQuote>(ItemQuote.class);
        }
        return hub;
    }
    
    public Hub<ItemQuote> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ItemQuote>(ItemQuote.class);
        }
        return hubMultiSelect;
    }
    
    public ItemModel getItemModel() {
        if (modelItem != null) return modelItem;
        modelItem = new ItemModel(getItemHub());
        modelItem.setDisplayName("Item");
        modelItem.setPluralDisplayName("Items");
        modelItem.setForJfc(getForJfc());
        modelItem.setAllowNew(false);
        modelItem.setAllowSave(true);
        modelItem.setAllowAdd(false);
        modelItem.setAllowRemove(true);
        modelItem.setAllowClear(true);
        modelItem.setAllowDelete(false);
        modelItem.setAllowSearch(false);
        modelItem.setAllowHubSearch(true);
        modelItem.setAllowGotoEdit(true);
        modelItem.setViewOnly(true);
        // call ItemQuote.onEditQueryItem(ItemModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ItemQuote.class, ItemQuote.P_Item, modelItem);
    
        return modelItem;
    }
    public ItemAddOnModel getItemAddOnModel() {
        if (modelItemAddOn != null) return modelItemAddOn;
        modelItemAddOn = new ItemAddOnModel(getItemAddOnHub());
        modelItemAddOn.setDisplayName("Item Add On");
        modelItemAddOn.setPluralDisplayName("Item Add Ons");
        modelItemAddOn.setForJfc(getForJfc());
        modelItemAddOn.setAllowNew(false);
        modelItemAddOn.setAllowSave(true);
        modelItemAddOn.setAllowAdd(false);
        modelItemAddOn.setAllowRemove(false);
        modelItemAddOn.setAllowClear(false);
        modelItemAddOn.setAllowDelete(false);
        modelItemAddOn.setAllowSearch(false);
        modelItemAddOn.setAllowHubSearch(true);
        modelItemAddOn.setAllowGotoEdit(false);
        modelItemAddOn.setViewOnly(true);
        // call ItemQuote.onEditQueryItemAddOn(ItemAddOnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ItemQuote.class, ItemQuote.P_ItemAddOn, modelItemAddOn);
    
        return modelItemAddOn;
    }
    public PriceCodeModel getPriceCodeModel() {
        if (modelPriceCode != null) return modelPriceCode;
        modelPriceCode = new PriceCodeModel(getPriceCodeHub());
        modelPriceCode.setDisplayName("Price Code");
        modelPriceCode.setPluralDisplayName("Price Codes");
        modelPriceCode.setForJfc(getForJfc());
        modelPriceCode.setAllowNew(false);
        modelPriceCode.setAllowSave(true);
        modelPriceCode.setAllowAdd(false);
        modelPriceCode.setAllowRemove(false);
        modelPriceCode.setAllowClear(false);
        modelPriceCode.setAllowDelete(false);
        modelPriceCode.setAllowSearch(false);
        modelPriceCode.setAllowHubSearch(true);
        modelPriceCode.setAllowGotoEdit(false);
        modelPriceCode.setViewOnly(true);
        // call ItemQuote.onEditQueryPriceCode(PriceCodeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ItemQuote.class, ItemQuote.P_PriceCode, modelPriceCode);
    
        return modelPriceCode;
    }
    
    public HubCopy<ItemQuote> createHubCopy() {
        Hub<ItemQuote> hubItemQuotex = new Hub<>(ItemQuote.class);
        HubCopy<ItemQuote> hc = new HubCopy<>(getHub(), hubItemQuotex, true);
        return hc;
    }
    public ItemQuoteModel createCopy() {
        ItemQuoteModel mod = new ItemQuoteModel(createHubCopy().getHub());
        return mod;
    }
}

