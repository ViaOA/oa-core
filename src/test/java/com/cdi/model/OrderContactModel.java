// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class OrderContactModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(OrderContactModel.class.getName());
    
    // Hubs
    protected Hub<OrderContact> hub;
    // selected orderContacts
    protected Hub<OrderContact> hubMultiSelect;
    // detail hubs
    protected Hub<Contact> hubContact;
    protected Hub<Order> hubOrder;
    
    // ObjectModels
    protected ContactModel modelContact;
    protected OrderModel modelOrder;
    
    public OrderContactModel() {
        setDisplayName("Order Contact");
        setPluralDisplayName("Order Contacts");
    }
    
    public OrderContactModel(Hub<OrderContact> hubOrderContact) {
        this();
        if (hubOrderContact != null) HubDelegate.setObjectClass(hubOrderContact, OrderContact.class);
        this.hub = hubOrderContact;
    }
    public OrderContactModel(OrderContact orderContact) {
        this();
        getHub().add(orderContact);
        getHub().setPos(0);
    }
    
    public Hub<OrderContact> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Contact> getContactHub() {
        if (hubContact != null) return hubContact;
        hubContact = new Hub<Contact>(Contact.class);
        Hub<Contact> hubContact1;
        // this will check to see if the masterHub can be used, so that an Add can be used to create new
        if (OrderContact.P_Order.equalsIgnoreCase(HubDetailDelegate.getPropertyFromDetailToMaster(getHub()))) {
            hubContact1 = getHub().getMasterHub().getDetailHub(OAString.cpp(Order.P_Customer, Customer.P_Contacts));
        }
        else {
            hubContact1 = getHub().getDetailHub(OrderContactPP.order().customer().contacts().pp);
        }
        Hub<Contact> hubContact2 = getHub().getDetailHub(OrderContact.P_Contact);
        HubCombined<Item> hubCombined = new HubCombined(hubContact, hubContact1, hubContact2);
        hubContact.setLinkHub(getHub(), OrderContact.P_Contact); 
        return hubContact;
    }
    public Hub<Order> getOrderHub() {
        if (hubOrder != null) return hubOrder;
        // this is the owner, use detailHub
        hubOrder = getHub().getDetailHub(OrderContact.P_Order);
        return hubOrder;
    }
    public OrderContact getOrderContact() {
        return getHub().getAO();
    }
    
    public Hub<OrderContact> getHub() {
        if (hub == null) {
            hub = new Hub<OrderContact>(OrderContact.class);
        }
        return hub;
    }
    
    public Hub<OrderContact> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<OrderContact>(OrderContact.class);
        }
        return hubMultiSelect;
    }
    
    public ContactModel getContactModel() {
        if (modelContact != null) return modelContact;
        modelContact = new ContactModel(getContactHub());
        modelContact.setDisplayName("Contact");
        modelContact.setPluralDisplayName("Contacts");
        modelContact.setForJfc(getForJfc());
        modelContact.setAllowNew(true);
        modelContact.setAllowSave(true);
        modelContact.setAllowAdd(false);
        modelContact.setAllowRemove(true);
        modelContact.setAllowClear(true);
        modelContact.setAllowDelete(false);
        modelContact.setAllowSearch(false);
        modelContact.setAllowHubSearch(true);
        modelContact.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelContact.setCreateUI(li == null || !OrderContact.P_Contact.equals(li.getName()) );
        modelContact.setViewOnly(getViewOnly());
        // call OrderContact.onEditQueryContact(ContactModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(OrderContact.class, OrderContact.P_Contact, modelContact);
    
        return modelContact;
    }
    public OrderModel getOrderModel() {
        if (modelOrder != null) return modelOrder;
        modelOrder = new OrderModel(getOrderHub());
        modelOrder.setDisplayName("Order");
        modelOrder.setPluralDisplayName("Orders");
        modelOrder.setForJfc(getForJfc());
        modelOrder.setAllowNew(false);
        modelOrder.setAllowSave(true);
        modelOrder.setAllowAdd(false);
        modelOrder.setAllowRemove(false);
        modelOrder.setAllowClear(false);
        modelOrder.setAllowDelete(false);
        modelOrder.setAllowSearch(false);
        modelOrder.setAllowHubSearch(true);
        modelOrder.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelOrder.setCreateUI(li == null || !OrderContact.P_Order.equals(li.getName()) );
        modelOrder.setViewOnly(getViewOnly());
        // call OrderContact.onEditQueryOrder(OrderModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(OrderContact.class, OrderContact.P_Order, modelOrder);
    
        return modelOrder;
    }
    
    public HubCopy<OrderContact> createHubCopy() {
        Hub<OrderContact> hubOrderContactx = new Hub<>(OrderContact.class);
        HubCopy<OrderContact> hc = new HubCopy<>(getHub(), hubOrderContactx, true);
        return hc;
    }
    public OrderContactModel createCopy() {
        OrderContactModel mod = new OrderContactModel(createHubCopy().getHub());
        return mod;
    }
}

