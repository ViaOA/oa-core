// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class OrderItemModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(OrderItemModel.class.getName());
    
    // Hubs
    protected Hub<OrderItem> hub;
    // selected orderItems
    protected Hub<OrderItem> hubMultiSelect;
    // detail hubs
    protected Hub<Item> hubItem;
    protected Hub<Order> hubOrder;
    protected Hub<OrderItemComment> hubOrderItemComments;
    protected Hub<WOItem> hubWOItems;
    
    // ObjectModels
    protected ItemModel modelItem;
    protected OrderModel modelOrder;
    protected OrderItemCommentModel modelOrderItemComments;
    protected WOItemModel modelWOItems;
    
    // SearchModels used for references
    protected ItemSearchModel modelItemSearch;
    
    public OrderItemModel() {
        setDisplayName("Order Item");
        setPluralDisplayName("Order Items");
    }
    
    public OrderItemModel(Hub<OrderItem> hubOrderItem) {
        this();
        if (hubOrderItem != null) HubDelegate.setObjectClass(hubOrderItem, OrderItem.class);
        this.hub = hubOrderItem;
    }
    public OrderItemModel(OrderItem orderItem) {
        this();
        getHub().add(orderItem);
        getHub().setPos(0);
    }
    
    public Hub<OrderItem> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Item> getItemHub() {
        if (hubItem != null) return hubItem;
        hubItem = getHub().getDetailHub(OrderItem.P_Item);
        return hubItem;
    }
    public Hub<Order> getOrderHub() {
        if (hubOrder != null) return hubOrder;
        // this is the owner, use detailHub
        hubOrder = getHub().getDetailHub(OrderItem.P_Order);
        return hubOrder;
    }
    public Hub<OrderItemComment> getOrderItemComments() {
        if (hubOrderItemComments == null) {
            hubOrderItemComments = getHub().getDetailHub(OrderItem.P_OrderItemComments);
        }
        return hubOrderItemComments;
    }
    public Hub<WOItem> getWOItems() {
        if (hubWOItems == null) {
            hubWOItems = getHub().getDetailHub(OrderItem.P_WOItems);
        }
        return hubWOItems;
    }
    public OrderItem getOrderItem() {
        return getHub().getAO();
    }
    
    public Hub<OrderItem> getHub() {
        if (hub == null) {
            hub = new Hub<OrderItem>(OrderItem.class);
        }
        return hub;
    }
    
    public Hub<OrderItem> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<OrderItem>(OrderItem.class);
        }
        return hubMultiSelect;
    }
    
    public ItemModel getItemModel() {
        if (modelItem != null) return modelItem;
        modelItem = new ItemModel(getItemHub());
        modelItem.setDisplayName("Item");
        modelItem.setPluralDisplayName("Items");
        modelItem.setForJfc(getForJfc());
        modelItem.setAllowNew(false);
        modelItem.setAllowSave(true);
        modelItem.setAllowAdd(false);
        modelItem.setAllowRemove(true);
        modelItem.setAllowClear(true);
        modelItem.setAllowDelete(false);
        modelItem.setAllowSearch(true);
        modelItem.setAllowHubSearch(true);
        modelItem.setAllowGotoEdit(true);
        modelItem.setViewOnly(true);
        // call OrderItem.onEditQueryItem(ItemModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(OrderItem.class, OrderItem.P_Item, modelItem);
    
        return modelItem;
    }
    public OrderModel getOrderModel() {
        if (modelOrder != null) return modelOrder;
        modelOrder = new OrderModel(getOrderHub());
        modelOrder.setDisplayName("Order");
        modelOrder.setPluralDisplayName("Orders");
        modelOrder.setForJfc(getForJfc());
        modelOrder.setAllowNew(false);
        modelOrder.setAllowSave(true);
        modelOrder.setAllowAdd(false);
        modelOrder.setAllowRemove(false);
        modelOrder.setAllowClear(false);
        modelOrder.setAllowDelete(false);
        modelOrder.setAllowSearch(false);
        modelOrder.setAllowHubSearch(true);
        modelOrder.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelOrder.setCreateUI(li == null || !OrderItem.P_Order.equals(li.getName()) );
        modelOrder.setViewOnly(getViewOnly());
        // call OrderItem.onEditQueryOrder(OrderModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(OrderItem.class, OrderItem.P_Order, modelOrder);
    
        return modelOrder;
    }
    public OrderItemCommentModel getOrderItemCommentsModel() {
        if (modelOrderItemComments != null) return modelOrderItemComments;
        modelOrderItemComments = new OrderItemCommentModel(getOrderItemComments());
        modelOrderItemComments.setDisplayName("Order Item Comment");
        modelOrderItemComments.setPluralDisplayName("Order Item Comments");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getOrderItemComments())) {
            modelOrderItemComments.setCreateUI(false);
        }
        modelOrderItemComments.setForJfc(getForJfc());
        modelOrderItemComments.setAllowNew(true);
        modelOrderItemComments.setAllowSave(true);
        modelOrderItemComments.setAllowAdd(false);
        modelOrderItemComments.setAllowMove(false);
        modelOrderItemComments.setAllowRemove(false);
        modelOrderItemComments.setAllowDelete(true);
        modelOrderItemComments.setAllowSearch(false);
        modelOrderItemComments.setAllowHubSearch(true);
        modelOrderItemComments.setAllowGotoEdit(true);
        modelOrderItemComments.setViewOnly(getViewOnly());
        modelOrderItemComments.setAllowTableFilter(true);
        modelOrderItemComments.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelOrderItemComments.setAllowMultiSelect(false);
        modelOrderItemComments.setAllowCopy(false);
        modelOrderItemComments.setAllowCut(false);
        modelOrderItemComments.setAllowPaste(false);
        // call OrderItem.onEditQueryOrderItemComments(OrderItemCommentModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(OrderItem.class, OrderItem.P_OrderItemComments, modelOrderItemComments);
    
        return modelOrderItemComments;
    }
    public WOItemModel getWOItemsModel() {
        if (modelWOItems != null) return modelWOItems;
        modelWOItems = new WOItemModel(getWOItems());
        modelWOItems.setDisplayName("WOItem");
        modelWOItems.setPluralDisplayName("WOItems");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getWOItems())) {
            modelWOItems.setCreateUI(false);
        }
        modelWOItems.setForJfc(getForJfc());
        modelWOItems.setAllowNew(false);
        modelWOItems.setAllowSave(true);
        modelWOItems.setAllowAdd(false);
        modelWOItems.setAllowMove(false);
        modelWOItems.setAllowRemove(false);
        modelWOItems.setAllowDelete(true);
        modelWOItems.setAllowSearch(false);
        modelWOItems.setAllowHubSearch(true);
        modelWOItems.setAllowGotoEdit(true);
        modelWOItems.setViewOnly(getViewOnly());
        modelWOItems.setAllowTableFilter(true);
        modelWOItems.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelWOItems.setAllowMultiSelect(false);
        modelWOItems.setAllowCopy(false);
        modelWOItems.setAllowCut(false);
        modelWOItems.setAllowPaste(false);
        // call OrderItem.onEditQueryWOItems(WOItemModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(OrderItem.class, OrderItem.P_WOItems, modelWOItems);
    
        return modelWOItems;
    }
    
    public ItemSearchModel getItemSearchModel() {
        if (modelItemSearch != null) return modelItemSearch;
        modelItemSearch = new ItemSearchModel();
        return modelItemSearch;
    }
    
    public HubCopy<OrderItem> createHubCopy() {
        Hub<OrderItem> hubOrderItemx = new Hub<>(OrderItem.class);
        HubCopy<OrderItem> hc = new HubCopy<>(getHub(), hubOrderItemx, true);
        return hc;
    }
    public OrderItemModel createCopy() {
        OrderItemModel mod = new OrderItemModel(createHubCopy().getHub());
        return mod;
    }
}

