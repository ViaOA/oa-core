// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class OrderModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(OrderModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      openFilteredHub;
      invalidFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<Order> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<Order> hubUnfiltered;
    protected Hub<Order> hubOpenFilteredHub;
    protected Hub<Order> hubInvalidFilteredHub;
    // main hub that points to hubUnfiltered, hubOpenFilteredHub, hubInvalidFilteredHub
    protected Hub<Order> hub;
    // selected orders
    protected Hub<Order> hubMultiSelect;
    // detail hubs
    protected Hub<ColorCode> hubColorCode;
    protected Hub<Customer> hubCustomer;
    protected Hub<Region> hubRegion;
    protected Hub<SalesOrder> hubSalesOrder;
    protected Hub<ShipTo> hubShipTo;
    protected Hub<Texture> hubTexture;
    protected Hub<OrderContact> hubOrderContacts;
    protected Hub<OrderItem> hubOrderItems;
    protected Hub<OrderNote> hubOrderNotes;
    protected Hub<WorkOrder> hubWorkOrders;
    
    // ObjectModels
    protected ColorCodeModel modelColorCode;
    protected CustomerModel modelCustomer;
    protected RegionModel modelRegion;
    protected SalesOrderModel modelSalesOrder;
    protected ShipToModel modelShipTo;
    protected TextureModel modelTexture;
    protected OrderContactModel modelOrderContacts;
    protected OrderItemModel modelOrderItems;
    protected OrderNoteModel modelOrderNotes;
    protected WorkOrderModel modelWorkOrders;
    
    // SearchModels used for references
    protected SalesOrderSearchModel modelSalesOrderSearch;
    
    // FilterModels
    protected OrderOpenFilterModel modelOrderOpenFilter;
    protected OrderInvalidFilterModel modelOrderInvalidFilter;
    
    public OrderModel() {
        setDisplayName("Order");
        setPluralDisplayName("Orders");
    }
    
    public OrderModel(Hub<Order> hubOrder) {
        this();
        if (hubOrder != null) HubDelegate.setObjectClass(hubOrder, Order.class);
        this.hubOriginal = hubOrder;
    }
    public OrderModel(Order order) {
        this();
        getHub().add(order);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useOpenFilteredHub() {
        getHub().setSharedHub(getOpenFilteredHub(), true);
    }
    public void useInvalidFilteredHub() {
        getHub().setSharedHub(getInvalidFilteredHub(), true);
    }
    
    public Hub<Order> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<Order>(Order.class);
        }
        return hubOriginal;
    }
    
    public Hub<ColorCode> getColorCodeHub() {
        if (hubColorCode != null) return hubColorCode;
        hubColorCode = new Hub<>(ColorCode.class);
        Hub<ColorCode> hub = ModelDelegate.getColorCodes();
        HubCopy<ColorCode> hc = new HubCopy<>(hub, hubColorCode, false);
        hubColorCode.setLinkHub(getHub(), Order.P_ColorCode); 
        return hubColorCode;
    }
    public Hub<Customer> getCustomerHub() {
        if (hubCustomer != null) return hubCustomer;
        hubCustomer = getHub().getDetailHub(Order.P_Customer);
        return hubCustomer;
    }
    public Hub<Region> getRegionHub() {
        if (hubRegion != null) return hubRegion;
        hubRegion = getHub().getDetailHub(Order.P_Region);
        return hubRegion;
    }
    public Hub<SalesOrder> getSalesOrderHub() {
        if (hubSalesOrder != null) return hubSalesOrder;
        hubSalesOrder = getHub().getDetailHub(Order.P_SalesOrder);
        return hubSalesOrder;
    }
    public Hub<ShipTo> getShipToHub() {
        if (hubShipTo != null) return hubShipTo;
        hubShipTo = getHub().getDetailHub(Order.P_ShipTo);
        return hubShipTo;
    }
    public Hub<Texture> getTextureHub() {
        if (hubTexture != null) return hubTexture;
        hubTexture = new Hub<>(Texture.class);
        Hub<Texture> hub = ModelDelegate.getTextures();
        HubCopy<Texture> hc = new HubCopy<>(hub, hubTexture, false);
        hubTexture.setLinkHub(getHub(), Order.P_Texture); 
        return hubTexture;
    }
    public Hub<OrderContact> getOrderContacts() {
        if (hubOrderContacts == null) {
            hubOrderContacts = getHub().getDetailHub(Order.P_OrderContacts);
        }
        return hubOrderContacts;
    }
    public Hub<OrderItem> getOrderItems() {
        if (hubOrderItems == null) {
            hubOrderItems = getHub().getDetailHub(Order.P_OrderItems);
        }
        return hubOrderItems;
    }
    public Hub<OrderNote> getOrderNotes() {
        if (hubOrderNotes == null) {
            hubOrderNotes = getHub().getDetailHub(Order.P_OrderNotes);
        }
        return hubOrderNotes;
    }
    public Hub<WorkOrder> getWorkOrders() {
        if (hubWorkOrders == null) {
            hubWorkOrders = getHub().getDetailHub(Order.P_WorkOrders);
        }
        return hubWorkOrders;
    }
    public Hub<Order> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<Order>(Order.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<Order> getOpenFilteredHub() {
        if (hubOpenFilteredHub == null) {
            hubOpenFilteredHub = new Hub<Order>(Order.class);
        }
        return hubOpenFilteredHub;
    }
    public Hub<Order> getInvalidFilteredHub() {
        if (hubInvalidFilteredHub == null) {
            hubInvalidFilteredHub = new Hub<Order>(Order.class);
        }
        return hubInvalidFilteredHub;
    }
    
    public Order getOrder() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<Order> getHub() {
        if (hub == null) {
            hub = new Hub<Order>(Order.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<Order> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Order>(Order.class);
        }
        return hubMultiSelect;
    }
    
    public ColorCodeModel getColorCodeModel() {
        if (modelColorCode != null) return modelColorCode;
        modelColorCode = new ColorCodeModel(getColorCodeHub());
        modelColorCode.setDisplayName("Color Code");
        modelColorCode.setPluralDisplayName("Color Codes");
        modelColorCode.setForJfc(getForJfc());
        modelColorCode.setAllowNew(false);
        modelColorCode.setAllowSave(true);
        modelColorCode.setAllowAdd(false);
        modelColorCode.setAllowRemove(false);
        modelColorCode.setAllowClear(false);
        modelColorCode.setAllowDelete(false);
        modelColorCode.setAllowSearch(false);
        modelColorCode.setAllowHubSearch(true);
        modelColorCode.setAllowGotoEdit(false);
        modelColorCode.setViewOnly(true);
        // call Order.onEditQueryColorCode(ColorCodeModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_ColorCode, modelColorCode);
    
        return modelColorCode;
    }
    public CustomerModel getCustomerModel() {
        if (modelCustomer != null) return modelCustomer;
        modelCustomer = new CustomerModel(getCustomerHub());
        modelCustomer.setDisplayName("Customer");
        modelCustomer.setPluralDisplayName("Customers");
        modelCustomer.setForJfc(getForJfc());
        modelCustomer.setAllowNew(false);
        modelCustomer.setAllowSave(true);
        modelCustomer.setAllowAdd(false);
        modelCustomer.setAllowRemove(false);
        modelCustomer.setAllowClear(false);
        modelCustomer.setAllowDelete(false);
        modelCustomer.setAllowSearch(false);
        modelCustomer.setAllowHubSearch(true);
        modelCustomer.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelCustomer.setCreateUI(li == null || !Order.P_Customer.equals(li.getName()) );
        modelCustomer.setViewOnly(true);
        // call Order.onEditQueryCustomer(CustomerModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_Customer, modelCustomer);
    
        return modelCustomer;
    }
    public RegionModel getRegionModel() {
        if (modelRegion != null) return modelRegion;
        modelRegion = new RegionModel(getRegionHub());
        modelRegion.setDisplayName("Region");
        modelRegion.setPluralDisplayName("Regions");
        modelRegion.setForJfc(getForJfc());
        modelRegion.setAllowNew(false);
        modelRegion.setAllowSave(true);
        modelRegion.setAllowAdd(false);
        modelRegion.setAllowRemove(false);
        modelRegion.setAllowClear(false);
        modelRegion.setAllowDelete(false);
        modelRegion.setAllowSearch(false);
        modelRegion.setAllowHubSearch(true);
        modelRegion.setAllowGotoEdit(false);
        modelRegion.setViewOnly(true);
        // call Order.onEditQueryRegion(RegionModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_Region, modelRegion);
    
        return modelRegion;
    }
    public SalesOrderModel getSalesOrderModel() {
        if (modelSalesOrder != null) return modelSalesOrder;
        modelSalesOrder = new SalesOrderModel(getSalesOrderHub());
        modelSalesOrder.setDisplayName("Sales Order");
        modelSalesOrder.setPluralDisplayName("Sales Orders");
        modelSalesOrder.setForJfc(getForJfc());
        modelSalesOrder.setAllowNew(false);
        modelSalesOrder.setAllowSave(true);
        modelSalesOrder.setAllowAdd(false);
        modelSalesOrder.setAllowRemove(true);
        modelSalesOrder.setAllowClear(true);
        modelSalesOrder.setAllowDelete(false);
        modelSalesOrder.setAllowSearch(true);
        modelSalesOrder.setAllowHubSearch(true);
        modelSalesOrder.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelSalesOrder.setCreateUI(li == null || !Order.P_SalesOrder.equals(li.getName()) );
        modelSalesOrder.setViewOnly(true);
        // call Order.onEditQuerySalesOrder(SalesOrderModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_SalesOrder, modelSalesOrder);
    
        return modelSalesOrder;
    }
    public ShipToModel getShipToModel() {
        if (modelShipTo != null) return modelShipTo;
        modelShipTo = new ShipToModel(getShipToHub());
        modelShipTo.setDisplayName("Ship To");
        modelShipTo.setPluralDisplayName("Ship Tos");
        modelShipTo.setForJfc(getForJfc());
        modelShipTo.setAllowNew(false);
        modelShipTo.setAllowSave(true);
        modelShipTo.setAllowAdd(false);
        modelShipTo.setAllowRemove(false);
        modelShipTo.setAllowClear(false);
        modelShipTo.setAllowDelete(false);
        modelShipTo.setAllowSearch(false);
        modelShipTo.setAllowHubSearch(true);
        modelShipTo.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelShipTo.setCreateUI(li == null || !Order.P_ShipTo.equals(li.getName()) );
        modelShipTo.setViewOnly(true);
        // call Order.onEditQueryShipTo(ShipToModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_ShipTo, modelShipTo);
    
        return modelShipTo;
    }
    public TextureModel getTextureModel() {
        if (modelTexture != null) return modelTexture;
        modelTexture = new TextureModel(getTextureHub());
        modelTexture.setDisplayName("Texture");
        modelTexture.setPluralDisplayName("Textures");
        modelTexture.setForJfc(getForJfc());
        modelTexture.setAllowNew(false);
        modelTexture.setAllowSave(true);
        modelTexture.setAllowAdd(false);
        modelTexture.setAllowRemove(false);
        modelTexture.setAllowClear(false);
        modelTexture.setAllowDelete(false);
        modelTexture.setAllowSearch(false);
        modelTexture.setAllowHubSearch(true);
        modelTexture.setAllowGotoEdit(false);
        modelTexture.setViewOnly(true);
        // call Order.onEditQueryTexture(TextureModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_Texture, modelTexture);
    
        return modelTexture;
    }
    public OrderContactModel getOrderContactsModel() {
        if (modelOrderContacts != null) return modelOrderContacts;
        modelOrderContacts = new OrderContactModel(getOrderContacts());
        modelOrderContacts.setDisplayName("Order Contact");
        modelOrderContacts.setPluralDisplayName("Order Contacts");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getOrderContacts())) {
            modelOrderContacts.setCreateUI(false);
        }
        modelOrderContacts.setForJfc(getForJfc());
        modelOrderContacts.setAllowNew(true);
        modelOrderContacts.setAllowSave(true);
        modelOrderContacts.setAllowAdd(true); // Add is overwritten to create new OrderContact by first selecting Contact
        modelOrderContacts.setAllowMove(false);
        modelOrderContacts.setAllowRemove(false);
        modelOrderContacts.setAllowDelete(true);
        modelOrderContacts.setAllowSearch(false);
        modelOrderContacts.setAllowHubSearch(true);
        modelOrderContacts.setAllowGotoEdit(true);
        modelOrderContacts.setViewOnly(getViewOnly());
        modelOrderContacts.setAllowTableFilter(true);
        modelOrderContacts.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelOrderContacts.setAllowMultiSelect(false);
        modelOrderContacts.setAllowCopy(false);
        modelOrderContacts.setAllowCut(false);
        modelOrderContacts.setAllowPaste(false);
        // call Order.onEditQueryOrderContacts(OrderContactModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_OrderContacts, modelOrderContacts);
    
        return modelOrderContacts;
    }
    public OrderItemModel getOrderItemsModel() {
        if (modelOrderItems != null) return modelOrderItems;
        modelOrderItems = new OrderItemModel(getOrderItems());
        modelOrderItems.setDisplayName("Order Item");
        modelOrderItems.setPluralDisplayName("Order Items");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getOrderItems())) {
            modelOrderItems.setCreateUI(false);
        }
        modelOrderItems.setForJfc(getForJfc());
        modelOrderItems.setAllowNew(true);
        modelOrderItems.setAllowSave(true);
        modelOrderItems.setAllowAdd(false);
        modelOrderItems.setAllowMove(false);
        modelOrderItems.setAllowRemove(false);
        modelOrderItems.setAllowDelete(true);
        modelOrderItems.setAllowSearch(false);
        modelOrderItems.setAllowHubSearch(true);
        modelOrderItems.setAllowGotoEdit(true);
        modelOrderItems.setViewOnly(getViewOnly());
        modelOrderItems.setAllowTableFilter(true);
        modelOrderItems.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelOrderItems.setAllowMultiSelect(false);
        modelOrderItems.setAllowCopy(false);
        modelOrderItems.setAllowCut(false);
        modelOrderItems.setAllowPaste(false);
        // call Order.onEditQueryOrderItems(OrderItemModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_OrderItems, modelOrderItems);
    
        return modelOrderItems;
    }
    public OrderNoteModel getOrderNotesModel() {
        if (modelOrderNotes != null) return modelOrderNotes;
        modelOrderNotes = new OrderNoteModel(getOrderNotes());
        modelOrderNotes.setDisplayName("Order Note");
        modelOrderNotes.setPluralDisplayName("Order Notes");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getOrderNotes())) {
            modelOrderNotes.setCreateUI(false);
        }
        modelOrderNotes.setForJfc(getForJfc());
        modelOrderNotes.setAllowNew(true);
        modelOrderNotes.setAllowSave(true);
        modelOrderNotes.setAllowAdd(false);
        modelOrderNotes.setAllowMove(false);
        modelOrderNotes.setAllowRemove(false);
        modelOrderNotes.setAllowDelete(true);
        modelOrderNotes.setAllowSearch(false);
        modelOrderNotes.setAllowHubSearch(true);
        modelOrderNotes.setAllowGotoEdit(true);
        modelOrderNotes.setViewOnly(getViewOnly());
        modelOrderNotes.setAllowTableFilter(true);
        modelOrderNotes.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelOrderNotes.setAllowMultiSelect(false);
        modelOrderNotes.setAllowCopy(false);
        modelOrderNotes.setAllowCut(false);
        modelOrderNotes.setAllowPaste(false);
        // call Order.onEditQueryOrderNotes(OrderNoteModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_OrderNotes, modelOrderNotes);
    
        return modelOrderNotes;
    }
    public WorkOrderModel getWorkOrdersModel() {
        if (modelWorkOrders != null) return modelWorkOrders;
        modelWorkOrders = new WorkOrderModel(getWorkOrders());
        modelWorkOrders.setDisplayName("Work Order");
        modelWorkOrders.setPluralDisplayName("Work Orders");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getWorkOrders())) {
            modelWorkOrders.setCreateUI(false);
        }
        modelWorkOrders.setForJfc(getForJfc());
        modelWorkOrders.setAllowNew(false);
        modelWorkOrders.setAllowSave(true);
        modelWorkOrders.setAllowAdd(false);
        modelWorkOrders.setAllowMove(false);
        modelWorkOrders.setAllowRemove(false);
        modelWorkOrders.setAllowDelete(true);
        modelWorkOrders.setAllowSearch(false);
        modelWorkOrders.setAllowHubSearch(true);
        modelWorkOrders.setAllowGotoEdit(true);
        modelWorkOrders.setViewOnly(getViewOnly());
        modelWorkOrders.setAllowTableFilter(true);
        modelWorkOrders.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelWorkOrders.setAllowMultiSelect(false);
        modelWorkOrders.setAllowCopy(false);
        modelWorkOrders.setAllowCut(false);
        modelWorkOrders.setAllowPaste(false);
        // call Order.onEditQueryWorkOrders(WorkOrderModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(Order.class, Order.P_WorkOrders, modelWorkOrders);
    
        return modelWorkOrders;
    }
    
    public SalesOrderSearchModel getSalesOrderSearchModel() {
        if (modelSalesOrderSearch != null) return modelSalesOrderSearch;
        modelSalesOrderSearch = new SalesOrderSearchModel();
        return modelSalesOrderSearch;
    }
    
    public OrderOpenFilterModel getOrderOpenFilterModel() {
        if (modelOrderOpenFilter == null) {
            modelOrderOpenFilter = new OrderOpenFilterModel(getUnfilteredHub(), getOpenFilteredHub());
            new HubShareAO(getUnfilteredHub(), getOpenFilteredHub());
        }
        return modelOrderOpenFilter;
    }
    public OrderInvalidFilterModel getOrderInvalidFilterModel() {
        if (modelOrderInvalidFilter == null) {
            modelOrderInvalidFilter = new OrderInvalidFilterModel(getUnfilteredHub(), getInvalidFilteredHub());
            new HubShareAO(getUnfilteredHub(), getInvalidFilteredHub());
        }
        return modelOrderInvalidFilter;
    }
    
    public HubCopy<Order> createHubCopy() {
        Hub<Order> hubOrderx = new Hub<>(Order.class);
        HubCopy<Order> hc = new HubCopy<>(getHub(), hubOrderx, true);
        return hc;
    }
    public OrderModel createCopy() {
        OrderModel mod = new OrderModel(createHubCopy().getHub());
        return mod;
    }
}

