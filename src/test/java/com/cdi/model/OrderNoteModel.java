// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class OrderNoteModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(OrderNoteModel.class.getName());
    
    // Hubs
    protected Hub<OrderNote> hub;
    // selected orderNotes
    protected Hub<OrderNote> hubMultiSelect;
    // detail hubs
    protected Hub<Order> hubOrder;
    protected Hub<User> hubUser;
    
    // ObjectModels
    protected OrderModel modelOrder;
    protected UserModel modelUser;
    
    public OrderNoteModel() {
        setDisplayName("Order Note");
        setPluralDisplayName("Order Notes");
    }
    
    public OrderNoteModel(Hub<OrderNote> hubOrderNote) {
        this();
        if (hubOrderNote != null) HubDelegate.setObjectClass(hubOrderNote, OrderNote.class);
        this.hub = hubOrderNote;
    }
    public OrderNoteModel(OrderNote orderNote) {
        this();
        getHub().add(orderNote);
        getHub().setPos(0);
    }
    
    public Hub<OrderNote> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Order> getOrderHub() {
        if (hubOrder != null) return hubOrder;
        // this is the owner, use detailHub
        hubOrder = getHub().getDetailHub(OrderNote.P_Order);
        return hubOrder;
    }
    public Hub<User> getUserHub() {
        if (hubUser != null) return hubUser;
        hubUser = getHub().getDetailHub(OrderNote.P_User);
        return hubUser;
    }
    public OrderNote getOrderNote() {
        return getHub().getAO();
    }
    
    public Hub<OrderNote> getHub() {
        if (hub == null) {
            hub = new Hub<OrderNote>(OrderNote.class);
        }
        return hub;
    }
    
    public Hub<OrderNote> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<OrderNote>(OrderNote.class);
        }
        return hubMultiSelect;
    }
    
    public OrderModel getOrderModel() {
        if (modelOrder != null) return modelOrder;
        modelOrder = new OrderModel(getOrderHub());
        modelOrder.setDisplayName("Order");
        modelOrder.setPluralDisplayName("Orders");
        modelOrder.setForJfc(getForJfc());
        modelOrder.setAllowNew(false);
        modelOrder.setAllowSave(true);
        modelOrder.setAllowAdd(false);
        modelOrder.setAllowRemove(false);
        modelOrder.setAllowClear(false);
        modelOrder.setAllowDelete(false);
        modelOrder.setAllowSearch(false);
        modelOrder.setAllowHubSearch(true);
        modelOrder.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelOrder.setCreateUI(li == null || !OrderNote.P_Order.equals(li.getName()) );
        modelOrder.setViewOnly(getViewOnly());
        // call OrderNote.onEditQueryOrder(OrderModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(OrderNote.class, OrderNote.P_Order, modelOrder);
    
        return modelOrder;
    }
    public UserModel getUserModel() {
        if (modelUser != null) return modelUser;
        modelUser = new UserModel(getUserHub());
        modelUser.setDisplayName("User");
        modelUser.setPluralDisplayName("Users");
        modelUser.setForJfc(getForJfc());
        modelUser.setAllowNew(false);
        modelUser.setAllowSave(true);
        modelUser.setAllowAdd(false);
        modelUser.setAllowRemove(false);
        modelUser.setAllowClear(false);
        modelUser.setAllowDelete(false);
        modelUser.setAllowSearch(false);
        modelUser.setAllowHubSearch(true);
        modelUser.setAllowGotoEdit(false);
        modelUser.setViewOnly(true);
        // call OrderNote.onEditQueryUser(UserModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(OrderNote.class, OrderNote.P_User, modelUser);
    
        return modelUser;
    }
    
    public HubCopy<OrderNote> createHubCopy() {
        Hub<OrderNote> hubOrderNotex = new Hub<>(OrderNote.class);
        HubCopy<OrderNote> hc = new HubCopy<>(getHub(), hubOrderNotex, true);
        return hc;
    }
    public OrderNoteModel createCopy() {
        OrderNoteModel mod = new OrderNoteModel(createHubCopy().getHub());
        return mod;
    }
}

