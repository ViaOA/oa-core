// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class SalesCustomerModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(SalesCustomerModel.class.getName());
    
    // Hubs
    protected Hub<SalesCustomer> hub;
    // selected salesCustomers
    protected Hub<SalesCustomer> hubMultiSelect;
    // detail hubs
    protected Hub<Customer> hubCustomer;
    protected Hub<SalesOrder> hubSalesOrder;
    protected Hub<ShipTo> hubShipTo;
    
    // ObjectModels
    protected CustomerModel modelCustomer;
    protected SalesOrderModel modelSalesOrder;
    protected ShipToModel modelShipTo;
    
    public SalesCustomerModel() {
        setDisplayName("Sales Customer");
        setPluralDisplayName("Sales Customers");
    }
    
    public SalesCustomerModel(Hub<SalesCustomer> hubSalesCustomer) {
        this();
        if (hubSalesCustomer != null) HubDelegate.setObjectClass(hubSalesCustomer, SalesCustomer.class);
        this.hub = hubSalesCustomer;
    }
    public SalesCustomerModel(SalesCustomer salesCustomer) {
        this();
        getHub().add(salesCustomer);
        getHub().setPos(0);
    }
    
    public Hub<SalesCustomer> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Customer> getCustomerHub() {
        if (hubCustomer != null) return hubCustomer;
        hubCustomer = new Hub<>(Customer.class);
        Hub<Customer> hub = ModelDelegate.getActiveCustomers();
        HubCopy<Customer> hc = new HubCopy<>(hub, hubCustomer, false);
        hubCustomer.setLinkHub(getHub(), SalesCustomer.P_Customer); 
        return hubCustomer;
    }
    public Hub<SalesOrder> getSalesOrderHub() {
        if (hubSalesOrder != null) return hubSalesOrder;
        // this is the owner, use detailHub
        hubSalesOrder = getHub().getDetailHub(SalesCustomer.P_SalesOrder);
        return hubSalesOrder;
    }
    public Hub<ShipTo> getShipToHub() {
        if (hubShipTo != null) return hubShipTo;
        hubShipTo = getHub().getDetailHub(SalesCustomer.P_ShipTo);
        return hubShipTo;
    }
    public SalesCustomer getSalesCustomer() {
        return getHub().getAO();
    }
    
    public Hub<SalesCustomer> getHub() {
        if (hub == null) {
            hub = new Hub<SalesCustomer>(SalesCustomer.class);
        }
        return hub;
    }
    
    public Hub<SalesCustomer> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<SalesCustomer>(SalesCustomer.class);
        }
        return hubMultiSelect;
    }
    
    public CustomerModel getCustomerModel() {
        if (modelCustomer != null) return modelCustomer;
        modelCustomer = new CustomerModel(getCustomerHub());
        modelCustomer.setDisplayName("Customer");
        modelCustomer.setPluralDisplayName("Customers");
        modelCustomer.setForJfc(getForJfc());
        modelCustomer.setAllowNew(false);
        modelCustomer.setAllowSave(true);
        modelCustomer.setAllowAdd(false);
        modelCustomer.setAllowRemove(true);
        modelCustomer.setAllowClear(true);
        modelCustomer.setAllowDelete(false);
        modelCustomer.setAllowSearch(false);
        modelCustomer.setAllowHubSearch(true);
        modelCustomer.setAllowGotoEdit(true);
        modelCustomer.setViewOnly(true);
        // call SalesCustomer.onEditQueryCustomer(CustomerModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesCustomer.class, SalesCustomer.P_Customer, modelCustomer);
    
        return modelCustomer;
    }
    public SalesOrderModel getSalesOrderModel() {
        if (modelSalesOrder != null) return modelSalesOrder;
        modelSalesOrder = new SalesOrderModel(getSalesOrderHub());
        modelSalesOrder.setDisplayName("Sales Order");
        modelSalesOrder.setPluralDisplayName("Sales Orders");
        modelSalesOrder.setForJfc(getForJfc());
        modelSalesOrder.setAllowNew(false);
        modelSalesOrder.setAllowSave(true);
        modelSalesOrder.setAllowAdd(false);
        modelSalesOrder.setAllowRemove(false);
        modelSalesOrder.setAllowClear(false);
        modelSalesOrder.setAllowDelete(false);
        modelSalesOrder.setAllowSearch(false);
        modelSalesOrder.setAllowHubSearch(true);
        modelSalesOrder.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelSalesOrder.setCreateUI(li == null || !SalesCustomer.P_SalesOrder.equals(li.getName()) );
        modelSalesOrder.setViewOnly(getViewOnly());
        // call SalesCustomer.onEditQuerySalesOrder(SalesOrderModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesCustomer.class, SalesCustomer.P_SalesOrder, modelSalesOrder);
    
        return modelSalesOrder;
    }
    public ShipToModel getShipToModel() {
        if (modelShipTo != null) return modelShipTo;
        modelShipTo = new ShipToModel(getShipToHub());
        modelShipTo.setDisplayName("Ship To");
        modelShipTo.setPluralDisplayName("Ship Tos");
        modelShipTo.setForJfc(getForJfc());
        modelShipTo.setAllowNew(false);
        modelShipTo.setAllowSave(true);
        modelShipTo.setAllowAdd(false);
        modelShipTo.setAllowRemove(false);
        modelShipTo.setAllowClear(false);
        modelShipTo.setAllowDelete(false);
        modelShipTo.setAllowSearch(false);
        modelShipTo.setAllowHubSearch(true);
        modelShipTo.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelShipTo.setCreateUI(li == null || !SalesCustomer.P_ShipTo.equals(li.getName()) );
        modelShipTo.setViewOnly(getViewOnly());
        // call SalesCustomer.onEditQueryShipTo(ShipToModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesCustomer.class, SalesCustomer.P_ShipTo, modelShipTo);
    
        return modelShipTo;
    }
    
    public HubCopy<SalesCustomer> createHubCopy() {
        Hub<SalesCustomer> hubSalesCustomerx = new Hub<>(SalesCustomer.class);
        HubCopy<SalesCustomer> hc = new HubCopy<>(getHub(), hubSalesCustomerx, true);
        return hc;
    }
    public SalesCustomerModel createCopy() {
        SalesCustomerModel mod = new SalesCustomerModel(createHubCopy().getHub());
        return mod;
    }
}

