// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.tableconfig.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class SalesOrderItemModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(SalesOrderItemModel.class.getName());
    
    // Hubs
    protected Hub<SalesOrderItem> hub;
    // selected salesOrderItems
    protected Hub<SalesOrderItem> hubMultiSelect;
    // detail hubs
    protected Hub<Item> hubItem;
    protected Hub<SalesOrder> hubSalesOrder;
    protected Hub<ServiceCode> hubServiceCode;
    protected Hub<ItemAddOn> hubItemAddOns;
    
    // ObjectModels
    protected ItemModel modelItem;
    protected SalesOrderModel modelSalesOrder;
    protected ServiceCodeModel modelServiceCode;
    protected ItemAddOnModel modelItemAddOns;
    protected SalesOrderItemTableConfigModel modelTableConfig;
    
    // SearchModels used for references
    protected ItemAddOnSearchModel modelItemAddOnsSearch;
    
    public SalesOrderItemModel() {
        setDisplayName("Sales Order Item");
        setPluralDisplayName("Sales Order Items");
    }
    
    public SalesOrderItemModel(Hub<SalesOrderItem> hubSalesOrderItem) {
        this();
        if (hubSalesOrderItem != null) HubDelegate.setObjectClass(hubSalesOrderItem, SalesOrderItem.class);
        this.hub = hubSalesOrderItem;
    }
    public SalesOrderItemModel(SalesOrderItem salesOrderItem) {
        this();
        getHub().add(salesOrderItem);
        getHub().setPos(0);
    }
    
    public Hub<SalesOrderItem> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Item> getItemHub() {
        if (hubItem != null) return hubItem;
        hubItem = new Hub<>(Item.class);
        Hub<Item> hub = ModelDelegate.getActiveItems();
        HubCopy<Item> hc = new HubCopy<>(hub, hubItem, false);
        hubItem.setLinkHub(getHub(), SalesOrderItem.P_Item); 
        return hubItem;
    }
    public Hub<SalesOrder> getSalesOrderHub() {
        if (hubSalesOrder != null) return hubSalesOrder;
        // this is the owner, use detailHub
        hubSalesOrder = getHub().getDetailHub(SalesOrderItem.P_SalesOrder);
        return hubSalesOrder;
    }
    public Hub<ServiceCode> getServiceCodeHub() {
        if (hubServiceCode != null) return hubServiceCode;
        hubServiceCode = new Hub<>(ServiceCode.class);
        Hub<ServiceCode> hub = ModelDelegate.getServiceCodes();
        HubCopy<ServiceCode> hc = new HubCopy<>(hub, hubServiceCode, false);
        hubServiceCode.setLinkHub(getHub(), SalesOrderItem.P_ServiceCode); 
        return hubServiceCode;
    }
    public Hub<ItemAddOn> getItemAddOns() {
        if (hubItemAddOns == null) {
            hubItemAddOns = getHub().getDetailHub(SalesOrderItem.P_ItemAddOns);
        }
        return hubItemAddOns;
    }
    public SalesOrderItem getSalesOrderItem() {
        return getHub().getAO();
    }
    
    public Hub<SalesOrderItem> getHub() {
        if (hub == null) {
            hub = new Hub<SalesOrderItem>(SalesOrderItem.class);
        }
        return hub;
    }
    
    public Hub<SalesOrderItem> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<SalesOrderItem>(SalesOrderItem.class);
        }
        return hubMultiSelect;
    }
    
    public ItemModel getItemModel() {
        if (modelItem != null) return modelItem;
        modelItem = new ItemModel(getItemHub());
        modelItem.setDisplayName("Item");
        modelItem.setPluralDisplayName("Items");
        modelItem.setForJfc(getForJfc());
        modelItem.setAllowNew(false);
        modelItem.setAllowSave(true);
        modelItem.setAllowAdd(false);
        modelItem.setAllowRemove(true);
        modelItem.setAllowClear(true);
        modelItem.setAllowDelete(false);
        modelItem.setAllowSearch(false);
        modelItem.setAllowHubSearch(true);
        modelItem.setAllowGotoEdit(true);
        modelItem.setViewOnly(true);
        // call SalesOrderItem.onEditQueryItem(ItemModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(SalesOrderItem.class, SalesOrderItem.P_Item, modelItem);
    
        return modelItem;
    }
    public SalesOrderModel getSalesOrderModel() {
        if (modelSalesOrder != null) return modelSalesOrder;
        modelSalesOrder = new SalesOrderModel(getSalesOrderHub());
        modelSalesOrder.setDisplayName("Sales Order");
        modelSalesOrder.setPluralDisplayName("Sales Orders");
        modelSalesOrder.setForJfc(getForJfc());
        modelSalesOrder.setAllowNew(false);
        modelSalesOrder.setAllowSave(true);
        modelSalesOrder.setAllowAdd(false);
        modelSalesOrder.setAllowRemove(false);
        modelSalesOrder.setAllowClear(false);
        modelSalesOrder.setAllowDelete(false);
        modelSalesOrder.setAllowSearch(false);
        modelSalesOrder.setAllowHubSearch(true);
        modelSalesOrder.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelSalesOrder.setCreateUI(li == null || !SalesOrderItem.P_SalesOrder.equals(li.getName()) );
        modelSalesOrder.setViewOnly(getViewOnly());
        // call SalesOrderItem.onEditQuerySalesOrder(SalesOrderModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(SalesOrderItem.class, SalesOrderItem.P_SalesOrder, modelSalesOrder);
    
        return modelSalesOrder;
    }
    public ServiceCodeModel getServiceCodeModel() {
        if (modelServiceCode != null) return modelServiceCode;
        modelServiceCode = new ServiceCodeModel(getServiceCodeHub());
        modelServiceCode.setDisplayName("Service Code");
        modelServiceCode.setPluralDisplayName("Service Codes");
        modelServiceCode.setForJfc(getForJfc());
        modelServiceCode.setAllowNew(false);
        modelServiceCode.setAllowSave(true);
        modelServiceCode.setAllowAdd(false);
        modelServiceCode.setAllowRemove(false);
        modelServiceCode.setAllowClear(false);
        modelServiceCode.setAllowDelete(false);
        modelServiceCode.setAllowSearch(false);
        modelServiceCode.setAllowHubSearch(true);
        modelServiceCode.setAllowGotoEdit(false);
        modelServiceCode.setViewOnly(true);
        // call SalesOrderItem.onEditQueryServiceCode(ServiceCodeModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(SalesOrderItem.class, SalesOrderItem.P_ServiceCode, modelServiceCode);
    
        return modelServiceCode;
    }
    public ItemAddOnModel getItemAddOnsModel() {
        if (modelItemAddOns != null) return modelItemAddOns;
        modelItemAddOns = new ItemAddOnModel(getItemAddOns());
        modelItemAddOns.setDisplayName("Item Add On");
        modelItemAddOns.setPluralDisplayName("Item Add Ons");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getItemAddOns())) {
            modelItemAddOns.setCreateUI(false);
        }
        modelItemAddOns.setForJfc(getForJfc());
        modelItemAddOns.setAllowNew(false);
        modelItemAddOns.setAllowSave(true);
        modelItemAddOns.setAllowAdd(true);
        modelItemAddOns.setAllowMove(false);
        modelItemAddOns.setAllowRemove(true);
        modelItemAddOns.setAllowDelete(false);
        modelItemAddOns.setAllowSearch(false);
        modelItemAddOns.setAllowHubSearch(true);
        modelItemAddOns.setAllowGotoEdit(false);
        modelItemAddOns.setViewOnly(getViewOnly());
        modelItemAddOns.setAllowTableFilter(true);
        modelItemAddOns.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelItemAddOns.setAllowMultiSelect(false);
        modelItemAddOns.setAllowCopy(false);
        modelItemAddOns.setAllowCut(false);
        modelItemAddOns.setAllowPaste(false);
        // call SalesOrderItem.onEditQueryItemAddOns(ItemAddOnModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(SalesOrderItem.class, SalesOrderItem.P_ItemAddOns, modelItemAddOns);
    
        return modelItemAddOns;
    }
    
    public ItemAddOnSearchModel getItemAddOnsSearchModel() {
        if (modelItemAddOnsSearch != null) return modelItemAddOnsSearch;
        modelItemAddOnsSearch = new ItemAddOnSearchModel() {
            @Override
            public void performSearch() {
                SalesOrderItem salesOrderItem = SalesOrderItemModel.this.getHub().getAO();
                if (salesOrderItem == null) {
                    // dont allow search, cant apply required filter
                    getHub().clear();
                    return;
                }
                getItemAddOnSearch().setExtraWhere("discontinuedDate = null");
                OAFilter filter = new ItemAddOnActiveFilter();
                getItemAddOnSearch().setExtraWhereFilter(filter);
                super.performSearch();
            }
        };
        return modelItemAddOnsSearch;
    }
    
    public HubCopy<SalesOrderItem> createHubCopy() {
        Hub<SalesOrderItem> hubSalesOrderItemx = new Hub<>(SalesOrderItem.class);
        HubCopy<SalesOrderItem> hc = new HubCopy<>(getHub(), hubSalesOrderItemx, true);
        return hc;
    }
    public SalesOrderItemModel createCopy() {
        SalesOrderItemModel mod = new SalesOrderItemModel(createHubCopy().getHub());
        return mod;
    }
    
    public SalesOrderItemTableConfigModel getTableConfigModel() {
        if (modelTableConfig == null) {
            modelTableConfig = new SalesOrderItemTableConfigModel();
        }
        return modelTableConfig;
    }
}

