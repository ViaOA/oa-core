// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class SalesOrderModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(SalesOrderModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      openFilteredHub;
      salesPersonFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<SalesOrder> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<SalesOrder> hubUnfiltered;
    protected Hub<SalesOrder> hubOpenFilteredHub;
    protected Hub<SalesOrder> hubSalesPersonFilteredHub;
    // main hub that points to hubUnfiltered, hubOpenFilteredHub, hubSalesPersonFilteredHub
    protected Hub<SalesOrder> hub;
    // selected salesOrders
    protected Hub<SalesOrder> hubMultiSelect;
    // detail hubs
    protected Hub<SalesCustomer> hubSalesCustomer;
    protected Hub<User> hubAssignedUser;
    protected Hub<Order> hubOrder;
    protected Hub<PriceCode> hubPriceCode;
    protected Hub<SalesOrderSource> hubSalesOrderSource;
    protected Hub<SalesOrderStatus> hubSalesOrderStatus;
    protected Hub<User> hubSalesPersonUser;
    protected Hub<SalesOrderItem> hubSalesOrderItems;
    protected Hub<SalesOrderNote> hubSalesOrderNotes;
    
    // ObjectModels
    protected SalesCustomerModel modelSalesCustomer;
    protected UserModel modelAssignedUser;
    protected OrderModel modelOrder;
    protected PriceCodeModel modelPriceCode;
    protected SalesOrderSourceModel modelSalesOrderSource;
    protected SalesOrderStatusModel modelSalesOrderStatus;
    protected UserModel modelSalesPersonUser;
    protected SalesOrderItemModel modelSalesOrderItems;
    protected SalesOrderNoteModel modelSalesOrderNotes;
    
    // FilterModels
    protected SalesOrderOpenFilterModel modelSalesOrderOpenFilter;
    protected SalesOrderSalesPersonFilterModel modelSalesOrderSalesPersonFilter;
    
    public SalesOrderModel() {
        setDisplayName("Sales Order");
        setPluralDisplayName("Sales Orders");
    }
    
    public SalesOrderModel(Hub<SalesOrder> hubSalesOrder) {
        this();
        if (hubSalesOrder != null) HubDelegate.setObjectClass(hubSalesOrder, SalesOrder.class);
        this.hubOriginal = hubSalesOrder;
    }
    public SalesOrderModel(SalesOrder salesOrder) {
        this();
        getHub().add(salesOrder);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useOpenFilteredHub() {
        getHub().setSharedHub(getOpenFilteredHub(), true);
    }
    public void useSalesPersonFilteredHub() {
        getHub().setSharedHub(getSalesPersonFilteredHub(), true);
    }
    
    public Hub<SalesOrder> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<SalesOrder>(SalesOrder.class);
        }
        return hubOriginal;
    }
    
    public Hub<SalesCustomer> getSalesCustomer() {
        if (hubSalesCustomer == null) {
            hubSalesCustomer = getHub().getDetailHub(SalesOrder.P_SalesCustomer);
        }
        return hubSalesCustomer;
    }
    public Hub<User> getAssignedUserHub() {
        if (hubAssignedUser != null) return hubAssignedUser;
        Hub<User> hub = new Hub<>(User.class);
        UserAssignedSalesFilter filter = new UserAssignedSalesFilter(ModelDelegate.getUsers(), hub);
        hubAssignedUser = new Hub<>(User.class);
        HubCopy<User> hc = new HubCopy<>(hub, hubAssignedUser, false);
        hubAssignedUser.setLinkHub(getHub(), SalesOrder.P_AssignedUser); 
        return hubAssignedUser;
    }
    public Hub<Order> getOrderHub() {
        if (hubOrder != null) return hubOrder;
        hubOrder = getHub().getDetailHub(SalesOrder.P_Order);
        return hubOrder;
    }
    public Hub<PriceCode> getPriceCodeHub() {
        if (hubPriceCode != null) return hubPriceCode;
        hubPriceCode = new Hub<>(PriceCode.class);
        Hub<PriceCode> hub = ModelDelegate.getPriceCodes();
        HubCopy<PriceCode> hc = new HubCopy<>(hub, hubPriceCode, false);
        hubPriceCode.setLinkHub(getHub(), SalesOrder.P_PriceCode); 
        return hubPriceCode;
    }
    public Hub<SalesOrderSource> getSalesOrderSourceHub() {
        if (hubSalesOrderSource != null) return hubSalesOrderSource;
        hubSalesOrderSource = new Hub<>(SalesOrderSource.class);
        Hub<SalesOrderSource> hub = ModelDelegate.getSalesOrderSources();
        HubCopy<SalesOrderSource> hc = new HubCopy<>(hub, hubSalesOrderSource, false);
        hubSalesOrderSource.setLinkHub(getHub(), SalesOrder.P_SalesOrderSource); 
        return hubSalesOrderSource;
    }
    public Hub<SalesOrderStatus> getSalesOrderStatusHub() {
        if (hubSalesOrderStatus != null) return hubSalesOrderStatus;
        hubSalesOrderStatus = new Hub<>(SalesOrderStatus.class);
        Hub<SalesOrderStatus> hub = ModelDelegate.getSalesOrderStatuses();
        HubCopy<SalesOrderStatus> hc = new HubCopy<>(hub, hubSalesOrderStatus, false);
        hubSalesOrderStatus.setLinkHub(getHub(), SalesOrder.P_SalesOrderStatus); 
        return hubSalesOrderStatus;
    }
    public Hub<User> getSalesPersonUserHub() {
        if (hubSalesPersonUser != null) return hubSalesPersonUser;
        Hub<User> hub = new Hub<>(User.class);
        UserSalesPersonFilter filter = new UserSalesPersonFilter(ModelDelegate.getUsers(), hub);
        hubSalesPersonUser = new Hub<>(User.class);
        HubCopy<User> hc = new HubCopy<>(hub, hubSalesPersonUser, false);
        hubSalesPersonUser.setLinkHub(getHub(), SalesOrder.P_SalesPersonUser); 
        return hubSalesPersonUser;
    }
    public Hub<SalesOrderItem> getSalesOrderItems() {
        if (hubSalesOrderItems == null) {
            hubSalesOrderItems = getHub().getDetailHub(SalesOrder.P_SalesOrderItems);
        }
        return hubSalesOrderItems;
    }
    public Hub<SalesOrderNote> getSalesOrderNotes() {
        if (hubSalesOrderNotes == null) {
            hubSalesOrderNotes = getHub().getDetailHub(SalesOrder.P_SalesOrderNotes);
        }
        return hubSalesOrderNotes;
    }
    public Hub<SalesOrder> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<SalesOrder>(SalesOrder.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<SalesOrder> getOpenFilteredHub() {
        if (hubOpenFilteredHub == null) {
            hubOpenFilteredHub = new Hub<SalesOrder>(SalesOrder.class);
        }
        return hubOpenFilteredHub;
    }
    public Hub<SalesOrder> getSalesPersonFilteredHub() {
        if (hubSalesPersonFilteredHub == null) {
            hubSalesPersonFilteredHub = new Hub<SalesOrder>(SalesOrder.class);
        }
        return hubSalesPersonFilteredHub;
    }
    
    public SalesOrder getSalesOrder() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<SalesOrder> getHub() {
        if (hub == null) {
            hub = new Hub<SalesOrder>(SalesOrder.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<SalesOrder> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<SalesOrder>(SalesOrder.class);
        }
        return hubMultiSelect;
    }
    
    public SalesCustomerModel getSalesCustomerModel() {
        if (modelSalesCustomer != null) return modelSalesCustomer;
        modelSalesCustomer = new SalesCustomerModel(getSalesCustomer());
        modelSalesCustomer.setDisplayName("Sales Customer");
        modelSalesCustomer.setPluralDisplayName("SalesCustomers");
        modelSalesCustomer.setAllowNew(false);
        modelSalesCustomer.setAllowAdd(false);
        modelSalesCustomer.setAllowRemove(false);
        modelSalesCustomer.setAllowDelete(false);
        modelSalesCustomer.setAllowCut(false);
        modelSalesCustomer.setAllowCopy(false);
        modelSalesCustomer.setAllowPaste(false);
        modelSalesCustomer.setAllowSearch(false);
        modelSalesCustomer.setAllowHubSearch(true);
        modelSalesCustomer.setViewOnly(getViewOnly());
        return modelSalesCustomer;
    }
    public UserModel getAssignedUserModel() {
        if (modelAssignedUser != null) return modelAssignedUser;
        modelAssignedUser = new UserModel(getAssignedUserHub());
        modelAssignedUser.setDisplayName("Assigned User");
        modelAssignedUser.setPluralDisplayName("Users");
        modelAssignedUser.setForJfc(getForJfc());
        modelAssignedUser.setAllowNew(false);
        modelAssignedUser.setAllowSave(true);
        modelAssignedUser.setAllowAdd(false);
        modelAssignedUser.setAllowRemove(false);
        modelAssignedUser.setAllowClear(false);
        modelAssignedUser.setAllowDelete(false);
        modelAssignedUser.setAllowSearch(false);
        modelAssignedUser.setAllowHubSearch(true);
        modelAssignedUser.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelAssignedUser.setCreateUI(li == null || !SalesOrder.P_AssignedUser.equals(li.getName()) );
        modelAssignedUser.setViewOnly(true);
        // call SalesOrder.onEditQueryAssignedUser(UserModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesOrder.class, SalesOrder.P_AssignedUser, modelAssignedUser);
    
        return modelAssignedUser;
    }
    public OrderModel getOrderModel() {
        if (modelOrder != null) return modelOrder;
        modelOrder = new OrderModel(getOrderHub());
        modelOrder.setDisplayName("Order");
        modelOrder.setPluralDisplayName("Orders");
        modelOrder.setForJfc(getForJfc());
        modelOrder.setAllowNew(false);
        modelOrder.setAllowSave(true);
        modelOrder.setAllowAdd(false);
        modelOrder.setAllowRemove(false);
        modelOrder.setAllowClear(false);
        modelOrder.setAllowDelete(false);
        modelOrder.setAllowSearch(false);
        modelOrder.setAllowHubSearch(true);
        modelOrder.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelOrder.setCreateUI(li == null || !SalesOrder.P_Order.equals(li.getName()) );
        modelOrder.setViewOnly(true);
        // call SalesOrder.onEditQueryOrder(OrderModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesOrder.class, SalesOrder.P_Order, modelOrder);
    
        return modelOrder;
    }
    public PriceCodeModel getPriceCodeModel() {
        if (modelPriceCode != null) return modelPriceCode;
        modelPriceCode = new PriceCodeModel(getPriceCodeHub());
        modelPriceCode.setDisplayName("Price Code");
        modelPriceCode.setPluralDisplayName("Price Codes");
        modelPriceCode.setForJfc(getForJfc());
        modelPriceCode.setAllowNew(false);
        modelPriceCode.setAllowSave(true);
        modelPriceCode.setAllowAdd(false);
        modelPriceCode.setAllowRemove(false);
        modelPriceCode.setAllowClear(false);
        modelPriceCode.setAllowDelete(false);
        modelPriceCode.setAllowSearch(false);
        modelPriceCode.setAllowHubSearch(true);
        modelPriceCode.setAllowGotoEdit(false);
        modelPriceCode.setViewOnly(true);
        // call SalesOrder.onEditQueryPriceCode(PriceCodeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesOrder.class, SalesOrder.P_PriceCode, modelPriceCode);
    
        return modelPriceCode;
    }
    public SalesOrderSourceModel getSalesOrderSourceModel() {
        if (modelSalesOrderSource != null) return modelSalesOrderSource;
        modelSalesOrderSource = new SalesOrderSourceModel(getSalesOrderSourceHub());
        modelSalesOrderSource.setDisplayName("Sales Order Source");
        modelSalesOrderSource.setPluralDisplayName("Sales Order Sources");
        modelSalesOrderSource.setForJfc(getForJfc());
        modelSalesOrderSource.setAllowNew(false);
        modelSalesOrderSource.setAllowSave(true);
        modelSalesOrderSource.setAllowAdd(false);
        modelSalesOrderSource.setAllowRemove(false);
        modelSalesOrderSource.setAllowClear(false);
        modelSalesOrderSource.setAllowDelete(false);
        modelSalesOrderSource.setAllowSearch(false);
        modelSalesOrderSource.setAllowHubSearch(true);
        modelSalesOrderSource.setAllowGotoEdit(false);
        modelSalesOrderSource.setViewOnly(true);
        // call SalesOrder.onEditQuerySalesOrderSource(SalesOrderSourceModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesOrder.class, SalesOrder.P_SalesOrderSource, modelSalesOrderSource);
    
        return modelSalesOrderSource;
    }
    public SalesOrderStatusModel getSalesOrderStatusModel() {
        if (modelSalesOrderStatus != null) return modelSalesOrderStatus;
        modelSalesOrderStatus = new SalesOrderStatusModel(getSalesOrderStatusHub());
        modelSalesOrderStatus.setDisplayName("Sales Order Status");
        modelSalesOrderStatus.setPluralDisplayName("Sales Order Statuses");
        modelSalesOrderStatus.setForJfc(getForJfc());
        modelSalesOrderStatus.setAllowNew(false);
        modelSalesOrderStatus.setAllowSave(true);
        modelSalesOrderStatus.setAllowAdd(false);
        modelSalesOrderStatus.setAllowRemove(false);
        modelSalesOrderStatus.setAllowClear(false);
        modelSalesOrderStatus.setAllowDelete(false);
        modelSalesOrderStatus.setAllowSearch(false);
        modelSalesOrderStatus.setAllowHubSearch(true);
        modelSalesOrderStatus.setAllowGotoEdit(false);
        modelSalesOrderStatus.setViewOnly(true);
        // call SalesOrder.onEditQuerySalesOrderStatus(SalesOrderStatusModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesOrder.class, SalesOrder.P_SalesOrderStatus, modelSalesOrderStatus);
    
        return modelSalesOrderStatus;
    }
    public UserModel getSalesPersonUserModel() {
        if (modelSalesPersonUser != null) return modelSalesPersonUser;
        modelSalesPersonUser = new UserModel(getSalesPersonUserHub());
        modelSalesPersonUser.setDisplayName("Sales Person");
        modelSalesPersonUser.setPluralDisplayName("Users");
        modelSalesPersonUser.setForJfc(getForJfc());
        modelSalesPersonUser.setAllowNew(false);
        modelSalesPersonUser.setAllowSave(true);
        modelSalesPersonUser.setAllowAdd(false);
        modelSalesPersonUser.setAllowRemove(false);
        modelSalesPersonUser.setAllowClear(false);
        modelSalesPersonUser.setAllowDelete(false);
        modelSalesPersonUser.setAllowSearch(false);
        modelSalesPersonUser.setAllowHubSearch(true);
        modelSalesPersonUser.setAllowGotoEdit(false);
        modelSalesPersonUser.setViewOnly(true);
        // call SalesOrder.onEditQuerySalesPersonUser(UserModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesOrder.class, SalesOrder.P_SalesPersonUser, modelSalesPersonUser);
    
        return modelSalesPersonUser;
    }
    public SalesOrderItemModel getSalesOrderItemsModel() {
        if (modelSalesOrderItems != null) return modelSalesOrderItems;
        modelSalesOrderItems = new SalesOrderItemModel(getSalesOrderItems());
        modelSalesOrderItems.setDisplayName("Sales Order Item");
        modelSalesOrderItems.setPluralDisplayName("Sales Order Items");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getSalesOrderItems())) {
            modelSalesOrderItems.setCreateUI(false);
        }
        modelSalesOrderItems.setForJfc(getForJfc());
        modelSalesOrderItems.setAllowNew(true);
        modelSalesOrderItems.setAllowSave(true);
        modelSalesOrderItems.setAllowAdd(false);
        modelSalesOrderItems.setAllowMove(true);
        modelSalesOrderItems.setAllowRemove(false);
        modelSalesOrderItems.setAllowDelete(true);
        modelSalesOrderItems.setAllowSearch(false);
        modelSalesOrderItems.setAllowHubSearch(true);
        modelSalesOrderItems.setAllowGotoEdit(true);
        modelSalesOrderItems.setViewOnly(getViewOnly());
        modelSalesOrderItems.setAllowTableFilter(false);
        modelSalesOrderItems.setAllowTableSorting(false);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelSalesOrderItems.setAllowMultiSelect(false);
        modelSalesOrderItems.setAllowCopy(false);
        modelSalesOrderItems.setAllowCut(false);
        modelSalesOrderItems.setAllowPaste(false);
        // call SalesOrder.onEditQuerySalesOrderItems(SalesOrderItemModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesOrder.class, SalesOrder.P_SalesOrderItems, modelSalesOrderItems);
    
        return modelSalesOrderItems;
    }
    public SalesOrderNoteModel getSalesOrderNotesModel() {
        if (modelSalesOrderNotes != null) return modelSalesOrderNotes;
        modelSalesOrderNotes = new SalesOrderNoteModel(getSalesOrderNotes());
        modelSalesOrderNotes.setDisplayName("Sales Order Note");
        modelSalesOrderNotes.setPluralDisplayName("Sales Order Notes");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getSalesOrderNotes())) {
            modelSalesOrderNotes.setCreateUI(false);
        }
        modelSalesOrderNotes.setForJfc(getForJfc());
        modelSalesOrderNotes.setAllowNew(true);
        modelSalesOrderNotes.setAllowSave(true);
        modelSalesOrderNotes.setAllowAdd(false);
        modelSalesOrderNotes.setAllowMove(false);
        modelSalesOrderNotes.setAllowRemove(false);
        modelSalesOrderNotes.setAllowDelete(true);
        modelSalesOrderNotes.setAllowSearch(false);
        modelSalesOrderNotes.setAllowHubSearch(true);
        modelSalesOrderNotes.setAllowGotoEdit(true);
        modelSalesOrderNotes.setViewOnly(getViewOnly());
        modelSalesOrderNotes.setAllowTableFilter(true);
        modelSalesOrderNotes.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelSalesOrderNotes.setAllowMultiSelect(false);
        modelSalesOrderNotes.setAllowCopy(false);
        modelSalesOrderNotes.setAllowCut(false);
        modelSalesOrderNotes.setAllowPaste(false);
        // call SalesOrder.onEditQuerySalesOrderNotes(SalesOrderNoteModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SalesOrder.class, SalesOrder.P_SalesOrderNotes, modelSalesOrderNotes);
    
        return modelSalesOrderNotes;
    }
    
    public SalesOrderOpenFilterModel getSalesOrderOpenFilterModel() {
        if (modelSalesOrderOpenFilter == null) {
            modelSalesOrderOpenFilter = new SalesOrderOpenFilterModel(getUnfilteredHub(), getOpenFilteredHub());
            new HubShareAO(getUnfilteredHub(), getOpenFilteredHub());
        }
        return modelSalesOrderOpenFilter;
    }
    public SalesOrderSalesPersonFilterModel getSalesOrderSalesPersonFilterModel() {
        if (modelSalesOrderSalesPersonFilter == null) {
            modelSalesOrderSalesPersonFilter = new SalesOrderSalesPersonFilterModel(getUnfilteredHub(), getSalesPersonFilteredHub());
            new HubShareAO(getUnfilteredHub(), getSalesPersonFilteredHub());
        }
        return modelSalesOrderSalesPersonFilter;
    }
    
    public HubCopy<SalesOrder> createHubCopy() {
        Hub<SalesOrder> hubSalesOrderx = new Hub<>(SalesOrder.class);
        HubCopy<SalesOrder> hc = new HubCopy<>(getHub(), hubSalesOrderx, true);
        return hc;
    }
    public SalesOrderModel createCopy() {
        SalesOrderModel mod = new SalesOrderModel(createHubCopy().getHub());
        return mod;
    }
}

