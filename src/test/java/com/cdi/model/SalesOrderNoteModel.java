// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class SalesOrderNoteModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(SalesOrderNoteModel.class.getName());
    
    // Hubs
    protected Hub<SalesOrderNote> hub;
    // selected salesOrderNotes
    protected Hub<SalesOrderNote> hubMultiSelect;
    // detail hubs
    protected Hub<SalesOrder> hubSalesOrder;
    protected Hub<User> hubUser;
    protected Hub<ImageStore> hubImageStores;
    
    // ObjectModels
    protected SalesOrderModel modelSalesOrder;
    protected UserModel modelUser;
    protected ImageStoreModel modelImageStores;
    
    public SalesOrderNoteModel() {
        setDisplayName("Sales Order Note");
        setPluralDisplayName("Sales Order Notes");
    }
    
    public SalesOrderNoteModel(Hub<SalesOrderNote> hubSalesOrderNote) {
        this();
        if (hubSalesOrderNote != null) HubDelegate.setObjectClass(hubSalesOrderNote, SalesOrderNote.class);
        this.hub = hubSalesOrderNote;
    }
    public SalesOrderNoteModel(SalesOrderNote salesOrderNote) {
        this();
        getHub().add(salesOrderNote);
        getHub().setPos(0);
    }
    
    public Hub<SalesOrderNote> getOriginalHub() {
        return getHub();
    }
    
    public Hub<SalesOrder> getSalesOrderHub() {
        if (hubSalesOrder != null) return hubSalesOrder;
        // this is the owner, use detailHub
        hubSalesOrder = getHub().getDetailHub(SalesOrderNote.P_SalesOrder);
        return hubSalesOrder;
    }
    public Hub<User> getUserHub() {
        if (hubUser != null) return hubUser;
        hubUser = getHub().getDetailHub(SalesOrderNote.P_User);
        return hubUser;
    }
    public Hub<ImageStore> getImageStores() {
        if (hubImageStores == null) {
            hubImageStores = getHub().getDetailHub(SalesOrderNote.P_ImageStores);
        }
        return hubImageStores;
    }
    public SalesOrderNote getSalesOrderNote() {
        return getHub().getAO();
    }
    
    public Hub<SalesOrderNote> getHub() {
        if (hub == null) {
            hub = new Hub<SalesOrderNote>(SalesOrderNote.class);
        }
        return hub;
    }
    
    public Hub<SalesOrderNote> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<SalesOrderNote>(SalesOrderNote.class);
        }
        return hubMultiSelect;
    }
    
    public SalesOrderModel getSalesOrderModel() {
        if (modelSalesOrder != null) return modelSalesOrder;
        modelSalesOrder = new SalesOrderModel(getSalesOrderHub());
        modelSalesOrder.setDisplayName("Sales Order");
        modelSalesOrder.setPluralDisplayName("Sales Orders");
        modelSalesOrder.setForJfc(getForJfc());
        modelSalesOrder.setAllowNew(false);
        modelSalesOrder.setAllowSave(true);
        modelSalesOrder.setAllowAdd(false);
        modelSalesOrder.setAllowRemove(false);
        modelSalesOrder.setAllowClear(false);
        modelSalesOrder.setAllowDelete(false);
        modelSalesOrder.setAllowSearch(false);
        modelSalesOrder.setAllowHubSearch(true);
        modelSalesOrder.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelSalesOrder.setCreateUI(li == null || !SalesOrderNote.P_SalesOrder.equals(li.getName()) );
        modelSalesOrder.setViewOnly(getViewOnly());
        // call SalesOrderNote.onEditQuerySalesOrder(SalesOrderModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(SalesOrderNote.class, SalesOrderNote.P_SalesOrder, modelSalesOrder);
    
        return modelSalesOrder;
    }
    public UserModel getUserModel() {
        if (modelUser != null) return modelUser;
        modelUser = new UserModel(getUserHub());
        modelUser.setDisplayName("User");
        modelUser.setPluralDisplayName("Users");
        modelUser.setForJfc(getForJfc());
        modelUser.setAllowNew(false);
        modelUser.setAllowSave(true);
        modelUser.setAllowAdd(false);
        modelUser.setAllowRemove(false);
        modelUser.setAllowClear(false);
        modelUser.setAllowDelete(false);
        modelUser.setAllowSearch(false);
        modelUser.setAllowHubSearch(true);
        modelUser.setAllowGotoEdit(false);
        modelUser.setViewOnly(true);
        // call SalesOrderNote.onEditQueryUser(UserModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(SalesOrderNote.class, SalesOrderNote.P_User, modelUser);
    
        return modelUser;
    }
    public ImageStoreModel getImageStoresModel() {
        if (modelImageStores != null) return modelImageStores;
        modelImageStores = new ImageStoreModel(getImageStores());
        modelImageStores.setDisplayName("Image");
        modelImageStores.setPluralDisplayName("Images");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getImageStores())) {
            modelImageStores.setCreateUI(false);
        }
        modelImageStores.setForJfc(getForJfc());
        modelImageStores.setAllowNew(true);
        modelImageStores.setAllowSave(true);
        modelImageStores.setAllowAdd(false);
        modelImageStores.setAllowMove(false);
        modelImageStores.setAllowRemove(false);
        modelImageStores.setAllowDelete(true);
        modelImageStores.setAllowSearch(false);
        modelImageStores.setAllowHubSearch(true);
        modelImageStores.setAllowGotoEdit(true);
        modelImageStores.setViewOnly(getViewOnly());
        modelImageStores.setAllowTableFilter(true);
        modelImageStores.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelImageStores.setAllowMultiSelect(false);
        modelImageStores.setAllowCopy(false);
        modelImageStores.setAllowCut(false);
        modelImageStores.setAllowPaste(false);
        // call SalesOrderNote.onEditQueryImageStores(ImageStoreModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(SalesOrderNote.class, SalesOrderNote.P_ImageStores, modelImageStores);
    
        return modelImageStores;
    }
    
    public HubCopy<SalesOrderNote> createHubCopy() {
        Hub<SalesOrderNote> hubSalesOrderNotex = new Hub<>(SalesOrderNote.class);
        HubCopy<SalesOrderNote> hc = new HubCopy<>(getHub(), hubSalesOrderNotex, true);
        return hc;
    }
    public SalesOrderNoteModel createCopy() {
        SalesOrderNoteModel mod = new SalesOrderNoteModel(createHubCopy().getHub());
        return mod;
    }
}

