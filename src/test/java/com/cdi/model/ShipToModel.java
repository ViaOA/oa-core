// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class ShipToModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ShipToModel.class.getName());
    
    // Hubs
    protected Hub<ShipTo> hub;
    // selected shipTos
    protected Hub<ShipTo> hubMultiSelect;
    // detail hubs
    protected Hub<Order> hubOrders;
    protected Hub<SalesCustomer> hubSalesCustomers;
    
    // ObjectModels
    protected OrderModel modelOrders;
    protected SalesCustomerModel modelSalesCustomers;
    
    public ShipToModel() {
        setDisplayName("Ship To");
        setPluralDisplayName("Ship Tos");
    }
    
    public ShipToModel(Hub<ShipTo> hubShipTo) {
        this();
        if (hubShipTo != null) HubDelegate.setObjectClass(hubShipTo, ShipTo.class);
        this.hub = hubShipTo;
    }
    public ShipToModel(ShipTo shipTo) {
        this();
        getHub().add(shipTo);
        getHub().setPos(0);
    }
    
    public Hub<ShipTo> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Order> getOrders() {
        if (hubOrders == null) {
            hubOrders = getHub().getDetailHub(ShipTo.P_Orders);
        }
        return hubOrders;
    }
    public Hub<SalesCustomer> getSalesCustomers() {
        if (hubSalesCustomers == null) {
            hubSalesCustomers = getHub().getDetailHub(ShipTo.P_SalesCustomers);
        }
        return hubSalesCustomers;
    }
    public ShipTo getShipTo() {
        return getHub().getAO();
    }
    
    public Hub<ShipTo> getHub() {
        if (hub == null) {
            hub = new Hub<ShipTo>(ShipTo.class);
        }
        return hub;
    }
    
    public Hub<ShipTo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ShipTo>(ShipTo.class);
        }
        return hubMultiSelect;
    }
    
    public OrderModel getOrdersModel() {
        if (modelOrders != null) return modelOrders;
        modelOrders = new OrderModel(getOrders());
        modelOrders.setDisplayName("Order");
        modelOrders.setPluralDisplayName("Orders");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getOrders())) {
            modelOrders.setCreateUI(false);
        }
        modelOrders.setForJfc(getForJfc());
        modelOrders.setAllowNew(false);
        modelOrders.setAllowSave(true);
        modelOrders.setAllowAdd(false);
        modelOrders.setAllowMove(false);
        modelOrders.setAllowRemove(false);
        modelOrders.setAllowDelete(true);
        modelOrders.setAllowSearch(false);
        modelOrders.setAllowHubSearch(true);
        modelOrders.setAllowGotoEdit(true);
        modelOrders.setViewOnly(getViewOnly());
        modelOrders.setAllowTableFilter(true);
        modelOrders.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelOrders.setAllowMultiSelect(false);
        modelOrders.setAllowCopy(false);
        modelOrders.setAllowCut(false);
        modelOrders.setAllowPaste(false);
        // call ShipTo.onEditQueryOrders(OrderModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ShipTo.class, ShipTo.P_Orders, modelOrders);
    
        return modelOrders;
    }
    public SalesCustomerModel getSalesCustomersModel() {
        if (modelSalesCustomers != null) return modelSalesCustomers;
        modelSalesCustomers = new SalesCustomerModel(getSalesCustomers());
        modelSalesCustomers.setDisplayName("Sales Customer");
        modelSalesCustomers.setPluralDisplayName("Sales Customers");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getSalesCustomers())) {
            modelSalesCustomers.setCreateUI(false);
        }
        modelSalesCustomers.setForJfc(getForJfc());
        modelSalesCustomers.setAllowNew(false);
        modelSalesCustomers.setAllowSave(true);
        modelSalesCustomers.setAllowAdd(false);
        modelSalesCustomers.setAllowMove(false);
        modelSalesCustomers.setAllowRemove(false);
        modelSalesCustomers.setAllowDelete(true);
        modelSalesCustomers.setAllowSearch(false);
        modelSalesCustomers.setAllowHubSearch(true);
        modelSalesCustomers.setAllowGotoEdit(true);
        modelSalesCustomers.setViewOnly(getViewOnly());
        modelSalesCustomers.setAllowTableFilter(true);
        modelSalesCustomers.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelSalesCustomers.setAllowMultiSelect(false);
        modelSalesCustomers.setAllowCopy(false);
        modelSalesCustomers.setAllowCut(false);
        modelSalesCustomers.setAllowPaste(false);
        // call ShipTo.onEditQuerySalesCustomers(SalesCustomerModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ShipTo.class, ShipTo.P_SalesCustomers, modelSalesCustomers);
    
        return modelSalesCustomers;
    }
    
    public HubCopy<ShipTo> createHubCopy() {
        Hub<ShipTo> hubShipTox = new Hub<>(ShipTo.class);
        HubCopy<ShipTo> hc = new HubCopy<>(getHub(), hubShipTox, true);
        return hc;
    }
    public ShipToModel createCopy() {
        ShipToModel mod = new ShipToModel(createHubCopy().getHub());
        return mod;
    }
}

