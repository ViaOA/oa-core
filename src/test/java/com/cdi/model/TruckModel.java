// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class TruckModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TruckModel.class.getName());
    
    // Hubs
    protected Hub<Truck> hub;
    // selected trucks
    protected Hub<Truck> hubMultiSelect;
    // detail hubs
    protected Hub<DeliveryTruck> hubDeliveryTrucks;
    
    // ObjectModels
    protected DeliveryTruckModel modelDeliveryTrucks;
    
    public TruckModel() {
        setDisplayName("Truck");
        setPluralDisplayName("Trucks");
    }
    
    public TruckModel(Hub<Truck> hubTruck) {
        this();
        if (hubTruck != null) HubDelegate.setObjectClass(hubTruck, Truck.class);
        this.hub = hubTruck;
    }
    public TruckModel(Truck truck) {
        this();
        getHub().add(truck);
        getHub().setPos(0);
    }
    
    public Hub<Truck> getOriginalHub() {
        return getHub();
    }
    
    public Hub<DeliveryTruck> getDeliveryTrucks() {
        if (hubDeliveryTrucks == null) {
            hubDeliveryTrucks = getHub().getDetailHub(Truck.P_DeliveryTrucks);
        }
        return hubDeliveryTrucks;
    }
    public Truck getTruck() {
        return getHub().getAO();
    }
    
    public Hub<Truck> getHub() {
        if (hub == null) {
            hub = new Hub<Truck>(Truck.class);
        }
        return hub;
    }
    
    public Hub<Truck> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Truck>(Truck.class);
        }
        return hubMultiSelect;
    }
    
    public DeliveryTruckModel getDeliveryTrucksModel() {
        if (modelDeliveryTrucks != null) return modelDeliveryTrucks;
        modelDeliveryTrucks = new DeliveryTruckModel(getDeliveryTrucks());
        modelDeliveryTrucks.setDisplayName("Delivery Truck");
        modelDeliveryTrucks.setPluralDisplayName("Delivery Trucks");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getDeliveryTrucks())) {
            modelDeliveryTrucks.setCreateUI(false);
        }
        modelDeliveryTrucks.setForJfc(getForJfc());
        modelDeliveryTrucks.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Delivery
        modelDeliveryTrucks.setAllowSave(true);
        modelDeliveryTrucks.setAllowAdd(true); // Add is overwritten to create new DeliveryTruck by first selecting Delivery
        modelDeliveryTrucks.setAllowMove(false);
        modelDeliveryTrucks.setAllowRemove(false);
        modelDeliveryTrucks.setAllowDelete(true);
        modelDeliveryTrucks.setAllowSearch(false);
        modelDeliveryTrucks.setAllowHubSearch(true);
        modelDeliveryTrucks.setAllowGotoEdit(true);
        modelDeliveryTrucks.setViewOnly(getViewOnly());
        modelDeliveryTrucks.setAllowTableFilter(true);
        modelDeliveryTrucks.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelDeliveryTrucks.setAllowMultiSelect(false);
        modelDeliveryTrucks.setAllowCopy(false);
        modelDeliveryTrucks.setAllowCut(false);
        modelDeliveryTrucks.setAllowPaste(false);
        // call Truck.onEditQueryDeliveryTrucks(DeliveryTruckModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Truck.class, Truck.P_DeliveryTrucks, modelDeliveryTrucks);
    
        return modelDeliveryTrucks;
    }
    
    public HubCopy<Truck> createHubCopy() {
        Hub<Truck> hubTruckx = new Hub<>(Truck.class);
        HubCopy<Truck> hc = new HubCopy<>(getHub(), hubTruckx, true);
        return hc;
    }
    public TruckModel createCopy() {
        TruckModel mod = new TruckModel(createHubCopy().getHub());
        return mod;
    }
}

