// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class UserModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(UserModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      salesPersonFilteredHub;
      activeFilteredHub;
      inspectorFilteredHub;
      assignedProdFilteredHub;
      assignedSalesFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<User> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<User> hubUnfiltered;
    protected Hub<User> hubSalesPersonFilteredHub;
    protected Hub<User> hubActiveFilteredHub;
    protected Hub<User> hubInspectorFilteredHub;
    protected Hub<User> hubAssignedProdFilteredHub;
    protected Hub<User> hubAssignedSalesFilteredHub;
    // main hub that points to hubUnfiltered, hubSalesPersonFilteredHub, hubActiveFilteredHub, hubInspectorFilteredHub, hubAssignedProdFilteredHub, hubAssignedSalesFilteredHub
    protected Hub<User> hub;
    // selected users
    protected Hub<User> hubMultiSelect;
    // detail hubs
    protected Hub<AppUser> hubAppUser;
    protected Hub<SalesOrder> hubAssignedSalesOrders;
    
    // ObjectModels
    protected AppUserModel modelAppUser;
    protected SalesOrderModel modelAssignedSalesOrders;
    
    // SearchModels used for references
    protected SalesOrderSearchModel modelAssignedSalesOrdersSearch;
    
    // FilterModels
    protected UserSalesPersonFilterModel modelUserSalesPersonFilter;
    protected UserActiveFilterModel modelUserActiveFilter;
    protected UserInspectorFilterModel modelUserInspectorFilter;
    protected UserAssignedProdFilterModel modelUserAssignedProdFilter;
    protected UserAssignedSalesFilterModel modelUserAssignedSalesFilter;
    
    public UserModel() {
        setDisplayName("User");
        setPluralDisplayName("Users");
    }
    
    public UserModel(Hub<User> hubUser) {
        this();
        if (hubUser != null) HubDelegate.setObjectClass(hubUser, User.class);
        this.hubOriginal = hubUser;
    }
    public UserModel(User user) {
        this();
        getHub().add(user);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useSalesPersonFilteredHub() {
        getHub().setSharedHub(getSalesPersonFilteredHub(), true);
    }
    public void useActiveFilteredHub() {
        getHub().setSharedHub(getActiveFilteredHub(), true);
    }
    public void useInspectorFilteredHub() {
        getHub().setSharedHub(getInspectorFilteredHub(), true);
    }
    public void useAssignedProdFilteredHub() {
        getHub().setSharedHub(getAssignedProdFilteredHub(), true);
    }
    public void useAssignedSalesFilteredHub() {
        getHub().setSharedHub(getAssignedSalesFilteredHub(), true);
    }
    
    public Hub<User> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<User>(User.class);
        }
        return hubOriginal;
    }
    
    public Hub<AppUser> getAppUserHub() {
        if (hubAppUser != null) return hubAppUser;
        hubAppUser = getHub().getDetailHub(User.P_AppUser);
        return hubAppUser;
    }
    public Hub<SalesOrder> getAssignedSalesOrders() {
        if (hubAssignedSalesOrders == null) {
            hubAssignedSalesOrders = getHub().getDetailHub(User.P_AssignedSalesOrders);
        }
        return hubAssignedSalesOrders;
    }
    public Hub<User> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<User>(User.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<User> getSalesPersonFilteredHub() {
        if (hubSalesPersonFilteredHub == null) {
            hubSalesPersonFilteredHub = new Hub<User>(User.class);
        }
        return hubSalesPersonFilteredHub;
    }
    public Hub<User> getActiveFilteredHub() {
        if (hubActiveFilteredHub == null) {
            hubActiveFilteredHub = new Hub<User>(User.class);
        }
        return hubActiveFilteredHub;
    }
    public Hub<User> getInspectorFilteredHub() {
        if (hubInspectorFilteredHub == null) {
            hubInspectorFilteredHub = new Hub<User>(User.class);
        }
        return hubInspectorFilteredHub;
    }
    public Hub<User> getAssignedProdFilteredHub() {
        if (hubAssignedProdFilteredHub == null) {
            hubAssignedProdFilteredHub = new Hub<User>(User.class);
        }
        return hubAssignedProdFilteredHub;
    }
    public Hub<User> getAssignedSalesFilteredHub() {
        if (hubAssignedSalesFilteredHub == null) {
            hubAssignedSalesFilteredHub = new Hub<User>(User.class);
        }
        return hubAssignedSalesFilteredHub;
    }
    
    public User getUser() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<User> getHub() {
        if (hub == null) {
            hub = new Hub<User>(User.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<User> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<User>(User.class);
        }
        return hubMultiSelect;
    }
    
    public AppUserModel getAppUserModel() {
        if (modelAppUser != null) return modelAppUser;
        modelAppUser = new AppUserModel(getAppUserHub());
        modelAppUser.setDisplayName("App User");
        modelAppUser.setPluralDisplayName("App Users");
        modelAppUser.setForJfc(getForJfc());
        modelAppUser.setAllowNew(false);
        modelAppUser.setAllowSave(true);
        modelAppUser.setAllowAdd(false);
        modelAppUser.setAllowRemove(false);
        modelAppUser.setAllowClear(false);
        modelAppUser.setAllowDelete(false);
        modelAppUser.setAllowSearch(false);
        modelAppUser.setAllowHubSearch(true);
        modelAppUser.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelAppUser.setCreateUI(li == null || !User.P_AppUser.equals(li.getName()) );
        modelAppUser.setViewOnly(true);
        // call User.onEditQueryAppUser(AppUserModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(User.class, User.P_AppUser, modelAppUser);
    
        return modelAppUser;
    }
    public SalesOrderModel getAssignedSalesOrdersModel() {
        if (modelAssignedSalesOrders != null) return modelAssignedSalesOrders;
        modelAssignedSalesOrders = new SalesOrderModel(getAssignedSalesOrders());
        modelAssignedSalesOrders.setDisplayName("Sales Order");
        modelAssignedSalesOrders.setPluralDisplayName("Sales Orders");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getAssignedSalesOrders())) {
            modelAssignedSalesOrders.setCreateUI(false);
        }
        modelAssignedSalesOrders.setForJfc(getForJfc());
        modelAssignedSalesOrders.setAllowNew(false);
        modelAssignedSalesOrders.setAllowSave(true);
        modelAssignedSalesOrders.setAllowAdd(true);
        modelAssignedSalesOrders.setAllowMove(false);
        modelAssignedSalesOrders.setAllowRemove(true);
        modelAssignedSalesOrders.setAllowDelete(false);
        modelAssignedSalesOrders.setAllowSearch(false);
        modelAssignedSalesOrders.setAllowHubSearch(true);
        modelAssignedSalesOrders.setAllowGotoEdit(true);
        modelAssignedSalesOrders.setViewOnly(getViewOnly());
        modelAssignedSalesOrders.setAllowTableFilter(true);
        modelAssignedSalesOrders.setAllowTableSorting(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelAssignedSalesOrders.setAllowMultiSelect(false);
        modelAssignedSalesOrders.setAllowCopy(false);
        modelAssignedSalesOrders.setAllowCut(false);
        modelAssignedSalesOrders.setAllowPaste(false);
        // call User.onEditQueryAssignedSalesOrders(SalesOrderModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(User.class, User.P_AssignedSalesOrders, modelAssignedSalesOrders);
    
        return modelAssignedSalesOrders;
    }
    
    public SalesOrderSearchModel getAssignedSalesOrdersSearchModel() {
        if (modelAssignedSalesOrdersSearch != null) return modelAssignedSalesOrdersSearch;
        modelAssignedSalesOrdersSearch = new SalesOrderSearchModel();
        return modelAssignedSalesOrdersSearch;
    }
    
    public UserSalesPersonFilterModel getUserSalesPersonFilterModel() {
        if (modelUserSalesPersonFilter == null) {
            modelUserSalesPersonFilter = new UserSalesPersonFilterModel(getUnfilteredHub(), getSalesPersonFilteredHub());
            new HubShareAO(getUnfilteredHub(), getSalesPersonFilteredHub());
        }
        return modelUserSalesPersonFilter;
    }
    public UserActiveFilterModel getUserActiveFilterModel() {
        if (modelUserActiveFilter == null) {
            modelUserActiveFilter = new UserActiveFilterModel(getUnfilteredHub(), getActiveFilteredHub());
            new HubShareAO(getUnfilteredHub(), getActiveFilteredHub());
        }
        return modelUserActiveFilter;
    }
    public UserInspectorFilterModel getUserInspectorFilterModel() {
        if (modelUserInspectorFilter == null) {
            modelUserInspectorFilter = new UserInspectorFilterModel(getUnfilteredHub(), getInspectorFilteredHub());
            new HubShareAO(getUnfilteredHub(), getInspectorFilteredHub());
        }
        return modelUserInspectorFilter;
    }
    public UserAssignedProdFilterModel getUserAssignedProdFilterModel() {
        if (modelUserAssignedProdFilter == null) {
            modelUserAssignedProdFilter = new UserAssignedProdFilterModel(getUnfilteredHub(), getAssignedProdFilteredHub());
            new HubShareAO(getUnfilteredHub(), getAssignedProdFilteredHub());
        }
        return modelUserAssignedProdFilter;
    }
    public UserAssignedSalesFilterModel getUserAssignedSalesFilterModel() {
        if (modelUserAssignedSalesFilter == null) {
            modelUserAssignedSalesFilter = new UserAssignedSalesFilterModel(getUnfilteredHub(), getAssignedSalesFilteredHub());
            new HubShareAO(getUnfilteredHub(), getAssignedSalesFilteredHub());
        }
        return modelUserAssignedSalesFilter;
    }
    
    public HubCopy<User> createHubCopy() {
        Hub<User> hubUserx = new Hub<>(User.class);
        HubCopy<User> hc = new HubCopy<>(getHub(), hubUserx, true);
        return hc;
    }
    public UserModel createCopy() {
        UserModel mod = new UserModel(createHubCopy().getHub());
        return mod;
    }
}

