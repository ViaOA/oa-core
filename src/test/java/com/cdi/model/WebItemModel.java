// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class WebItemModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(WebItemModel.class.getName());
    
    // Hubs
    protected Hub<WebItem> hub;
    // selected webItems
    protected Hub<WebItem> hubMultiSelect;
    // detail hubs
    protected Hub<Item> hubItem;
    protected Hub<WebPart> hubWebPart;
    
    // ObjectModels
    protected ItemModel modelItem;
    protected WebPartModel modelWebPart;
    
    public WebItemModel() {
        setDisplayName("Web Item");
        setPluralDisplayName("Web Items");
    }
    
    public WebItemModel(Hub<WebItem> hubWebItem) {
        this();
        if (hubWebItem != null) HubDelegate.setObjectClass(hubWebItem, WebItem.class);
        this.hub = hubWebItem;
    }
    public WebItemModel(WebItem webItem) {
        this();
        getHub().add(webItem);
        getHub().setPos(0);
    }
    
    public Hub<WebItem> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Item> getItemHub() {
        if (hubItem != null) return hubItem;
        hubItem = getHub().getDetailHub(WebItem.P_Item);
        return hubItem;
    }
    public Hub<WebPart> getWebPartHub() {
        if (hubWebPart != null) return hubWebPart;
        // this is the owner, use detailHub
        hubWebPart = getHub().getDetailHub(WebItem.P_WebPart);
        return hubWebPart;
    }
    public WebItem getWebItem() {
        return getHub().getAO();
    }
    
    public Hub<WebItem> getHub() {
        if (hub == null) {
            hub = new Hub<WebItem>(WebItem.class);
        }
        return hub;
    }
    
    public Hub<WebItem> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<WebItem>(WebItem.class);
        }
        return hubMultiSelect;
    }
    
    public ItemModel getItemModel() {
        if (modelItem != null) return modelItem;
        modelItem = new ItemModel(getItemHub());
        modelItem.setDisplayName("Item");
        modelItem.setPluralDisplayName("Items");
        modelItem.setForJfc(getForJfc());
        modelItem.setAllowNew(false);
        modelItem.setAllowSave(true);
        modelItem.setAllowAdd(false);
        modelItem.setAllowRemove(false);
        modelItem.setAllowClear(false);
        modelItem.setAllowDelete(false);
        modelItem.setAllowSearch(false);
        modelItem.setAllowHubSearch(true);
        modelItem.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelItem.setCreateUI(li == null || !WebItem.P_Item.equals(li.getName()) );
        modelItem.setViewOnly(getViewOnly());
        // call WebItem.onEditQueryItem(ItemModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(WebItem.class, WebItem.P_Item, modelItem);
    
        return modelItem;
    }
    public WebPartModel getWebPartModel() {
        if (modelWebPart != null) return modelWebPart;
        modelWebPart = new WebPartModel(getWebPartHub());
        modelWebPart.setDisplayName("Web Part");
        modelWebPart.setPluralDisplayName("Web Parts");
        modelWebPart.setForJfc(getForJfc());
        modelWebPart.setAllowNew(false);
        modelWebPart.setAllowSave(true);
        modelWebPart.setAllowAdd(false);
        modelWebPart.setAllowRemove(false);
        modelWebPart.setAllowClear(false);
        modelWebPart.setAllowDelete(false);
        modelWebPart.setAllowSearch(false);
        modelWebPart.setAllowHubSearch(true);
        modelWebPart.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelWebPart.setCreateUI(li == null || !WebItem.P_WebPart.equals(li.getName()) );
        modelWebPart.setViewOnly(getViewOnly());
        // call WebItem.onEditQueryWebPart(WebPartModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(WebItem.class, WebItem.P_WebPart, modelWebPart);
    
        return modelWebPart;
    }
    
    public HubCopy<WebItem> createHubCopy() {
        Hub<WebItem> hubWebItemx = new Hub<>(WebItem.class);
        HubCopy<WebItem> hc = new HubCopy<>(getHub(), hubWebItemx, true);
        return hc;
    }
    public WebItemModel createCopy() {
        WebItemModel mod = new WebItemModel(createHubCopy().getHub());
        return mod;
    }
}

