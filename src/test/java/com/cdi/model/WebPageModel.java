// Generated by OABuilder

package com.cdi.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.model.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class WebPageModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(WebPageModel.class.getName());
    
    // Hubs
    protected Hub<WebPage> hub;
    // selected webPages
    protected Hub<WebPage> hubMultiSelect;
    // detail hubs
    protected Hub<WebPart> hubLinkFromWebPart;
    protected Hub<WebPart> hubWebParts;
    
    // ObjectModels
    protected WebPartModel modelLinkFromWebPart;
    protected WebPartModel modelWebParts;
    
    // SearchModels used for references
    protected WebPartSearchModel modelLinkFromWebPartSearch;
    
    public WebPageModel() {
        setDisplayName("Web Page");
        setPluralDisplayName("Web Pages");
    }
    
    public WebPageModel(Hub<WebPage> hubWebPage) {
        this();
        if (hubWebPage != null) HubDelegate.setObjectClass(hubWebPage, WebPage.class);
        this.hub = hubWebPage;
    }
    public WebPageModel(WebPage webPage) {
        this();
        getHub().add(webPage);
        getHub().setPos(0);
    }
    
    public Hub<WebPage> getOriginalHub() {
        return getHub();
    }
    
    public Hub<WebPart> getLinkFromWebPart() {
        if (hubLinkFromWebPart == null) {
            hubLinkFromWebPart = getHub().getDetailHub(WebPage.P_LinkFromWebPart);
        }
        return hubLinkFromWebPart;
    }
    public Hub<WebPart> getWebParts() {
        if (hubWebParts == null) {
            hubWebParts = getHub().getDetailHub(WebPage.P_WebParts);
        }
        return hubWebParts;
    }
    public WebPage getWebPage() {
        return getHub().getAO();
    }
    
    public Hub<WebPage> getHub() {
        if (hub == null) {
            hub = new Hub<WebPage>(WebPage.class);
        }
        return hub;
    }
    
    public Hub<WebPage> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<WebPage>(WebPage.class);
        }
        return hubMultiSelect;
    }
    
    public WebPartModel getLinkFromWebPartModel() {
        if (modelLinkFromWebPart != null) return modelLinkFromWebPart;
        modelLinkFromWebPart = new WebPartModel(getLinkFromWebPart());
        modelLinkFromWebPart.setDisplayName("Web Part");
        modelLinkFromWebPart.setPluralDisplayName("Web Parts");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getLinkFromWebPart())) {
            modelLinkFromWebPart.setCreateUI(false);
        }
        modelLinkFromWebPart.setForJfc(getForJfc());
        modelLinkFromWebPart.setAllowNew(false);
        modelLinkFromWebPart.setAllowSave(true);
        modelLinkFromWebPart.setAllowAdd(true);
        modelLinkFromWebPart.setAllowMove(false);
        modelLinkFromWebPart.setAllowRemove(true);
        modelLinkFromWebPart.setAllowDelete(false);
        modelLinkFromWebPart.setAllowSearch(false);
        modelLinkFromWebPart.setAllowHubSearch(true);
        modelLinkFromWebPart.setAllowGotoEdit(true);
        modelLinkFromWebPart.setViewOnly(getViewOnly());
        modelLinkFromWebPart.setAllowTableFilter(true);
        modelLinkFromWebPart.setAllowTableSorting(true);
        modelLinkFromWebPart.setAllowRecursive(false);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelLinkFromWebPart.setAllowMultiSelect(false);
        modelLinkFromWebPart.setAllowCopy(false);
        modelLinkFromWebPart.setAllowCut(false);
        modelLinkFromWebPart.setAllowPaste(false);
        // call WebPage.onEditQueryLinkFromWebPart(WebPartModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(WebPage.class, WebPage.P_LinkFromWebPart, modelLinkFromWebPart);
    
        return modelLinkFromWebPart;
    }
    public WebPartModel getWebPartsModel() {
        if (modelWebParts != null) return modelWebParts;
        modelWebParts = new WebPartModel(getWebParts());
        modelWebParts.setDisplayName("Web Part");
        modelWebParts.setPluralDisplayName("Web Parts");
        if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate.getLinkInfoFromMasterToDetail(getWebParts())) {
            modelWebParts.setCreateUI(false);
        }
        modelWebParts.setForJfc(getForJfc());
        modelWebParts.setAllowNew(true);
        modelWebParts.setAllowSave(true);
        modelWebParts.setAllowAdd(false);
        modelWebParts.setAllowMove(true);
        modelWebParts.setAllowRemove(false);
        modelWebParts.setAllowDelete(true);
        modelWebParts.setAllowSearch(false);
        modelWebParts.setAllowHubSearch(true);
        modelWebParts.setAllowGotoEdit(true);
        modelWebParts.setViewOnly(getViewOnly());
        modelWebParts.setAllowTableFilter(false);
        modelWebParts.setAllowTableSorting(false);
        modelWebParts.setAllowRecursive(true);
         // default is always false for these, can be turned by custom code in editQuery call (below)
        modelWebParts.setAllowMultiSelect(false);
        modelWebParts.setAllowCopy(false);
        modelWebParts.setAllowCut(false);
        modelWebParts.setAllowPaste(false);
        // call WebPage.onEditQueryWebParts(WebPartModel) to be able to customize this model
        OAObjectEditQueryDelegate.onEditQueryModel(WebPage.class, WebPage.P_WebParts, modelWebParts);
    
        return modelWebParts;
    }
    
    public WebPartSearchModel getLinkFromWebPartSearchModel() {
        if (modelLinkFromWebPartSearch != null) return modelLinkFromWebPartSearch;
        modelLinkFromWebPartSearch = new WebPartSearchModel();
        return modelLinkFromWebPartSearch;
    }
    
    public HubCopy<WebPage> createHubCopy() {
        Hub<WebPage> hubWebPagex = new Hub<>(WebPage.class);
        HubCopy<WebPage> hc = new HubCopy<>(getHub(), hubWebPagex, true);
        return hc;
    }
    public WebPageModel createCopy() {
        WebPageModel mod = new WebPageModel(createHubCopy().getHub());
        return mod;
    }
}

