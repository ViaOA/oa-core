// Generated by OABuilder

package com.cdi.model;

import java.util.logging.Logger;

import com.cdi.delegate.ModelDelegate;
import com.cdi.model.filter.WorkOrderOpenFilterModel;
import com.cdi.model.oa.Order;
import com.cdi.model.oa.User;
import com.cdi.model.oa.WODelivery;
import com.cdi.model.oa.WOItem;
import com.cdi.model.oa.WorkOrder;
import com.cdi.model.oa.WorkOrderPallet;
import com.cdi.model.oa.filter.UserAssignedProdFilter;
import com.cdi.model.oa.filter.UserInspectorFilter;
import com.cdi.model.search.UserSearchModel;
import com.viaoa.hub.Hub;
import com.viaoa.hub.HubCopy;
import com.viaoa.hub.HubDelegate;
import com.viaoa.hub.HubDetailDelegate;
import com.viaoa.hub.HubShareAO;
import com.viaoa.object.OALinkInfo;
import com.viaoa.object.OAObjectEditQueryDelegate;
import com.viaoa.object.OAObjectModel;
import com.viaoa.util.OAFilter;

public class WorkOrderModel extends OAObjectModel {
	private static Logger LOG = Logger.getLogger(WorkOrderModel.class.getName());

	/* overview
	  originalHub   - save the original hub
	  <- unfilteredHub - points one of the above hubs
	  openFilteredHub;
	  <- hub - points to unfiltered or filtered hub
	*/

	// Hubs
	protected Hub<WorkOrder> hubOriginal;

	// base hub that points to one of: hubOriginal
	protected Hub<WorkOrder> hubUnfiltered;
	protected Hub<WorkOrder> hubOpenFilteredHub;
	// main hub that points to hubUnfiltered, hubOpenFilteredHub
	protected Hub<WorkOrder> hub;
	// selected workOrders
	protected Hub<WorkOrder> hubMultiSelect;
	// detail hubs
	protected Hub<User> hubInspectUser;
	protected Hub<Order> hubOrder;
	protected Hub<User> hubAssignedUsers;
	protected Hub<WODelivery> hubWODeliveries;
	protected Hub<WOItem> hubWOItems;
	protected Hub<WorkOrderPallet> hubWorkOrderPallets;

	// ObjectModels
	protected UserModel modelInspectUser;
	protected OrderModel modelOrder;
	protected UserModel modelAssignedUsers;
	protected WODeliveryModel modelWODeliveries;
	protected WOItemModel modelWOItems;
	protected WorkOrderPalletModel modelWorkOrderPallets;

	// SearchModels used for references
	protected UserSearchModel modelAssignedUsersSearch;

	// FilterModels
	protected WorkOrderOpenFilterModel modelWorkOrderOpenFilter;

	public WorkOrderModel() {
		setDisplayName("Work Order");
		setPluralDisplayName("Work Orders");
	}

	public WorkOrderModel(Hub<WorkOrder> hubWorkOrder) {
		this();
		if (hubWorkOrder != null) {
			HubDelegate.setObjectClass(hubWorkOrder, WorkOrder.class);
		}
		this.hubOriginal = hubWorkOrder;
	}

	public WorkOrderModel(WorkOrder workOrder) {
		this();
		getHub().add(workOrder);
		getHub().setPos(0);
	}

	public void useUnfilteredHub() {
		getHub().setSharedHub(getUnfilteredHub(), true);
	}

	public void useOpenFilteredHub() {
		getHub().setSharedHub(getOpenFilteredHub(), true);
	}

	public Hub<WorkOrder> getOriginalHub() {
		if (hubOriginal == null) {
			hubOriginal = new Hub<WorkOrder>(WorkOrder.class);
		}
		return hubOriginal;
	}

	public Hub<User> getInspectUserHub() {
		if (hubInspectUser != null) {
			return hubInspectUser;
		}
		Hub<User> hub = new Hub<>(User.class);
		UserInspectorFilter filter = new UserInspectorFilter(ModelDelegate.getUsers(), hub);
		hubInspectUser = new Hub<>(User.class);
		HubCopy<User> hc = new HubCopy<>(hub, hubInspectUser, false);
		hubInspectUser.setLinkHub(getHub(), WorkOrder.P_InspectUser);
		return hubInspectUser;
	}

	public Hub<Order> getOrderHub() {
		if (hubOrder != null) {
			return hubOrder;
		}
		// this is the owner, use detailHub
		hubOrder = getHub().getDetailHub(WorkOrder.P_Order);
		return hubOrder;
	}

	public Hub<User> getAssignedUsers() {
		if (hubAssignedUsers == null) {
			hubAssignedUsers = getHub().getDetailHub(WorkOrder.P_AssignedUsers);
		}
		return hubAssignedUsers;
	}

	public Hub<WODelivery> getWODeliveries() {
		if (hubWODeliveries == null) {
			hubWODeliveries = getHub().getDetailHub(WorkOrder.P_WODeliveries);
		}
		return hubWODeliveries;
	}

	public Hub<WOItem> getWOItems() {
		if (hubWOItems == null) {
			hubWOItems = getHub().getDetailHub(WorkOrder.P_WOItems);
		}
		return hubWOItems;
	}

	public Hub<WorkOrderPallet> getWorkOrderPallets() {
		if (hubWorkOrderPallets == null) {
			hubWorkOrderPallets = getHub().getDetailHub(WorkOrder.P_WorkOrderPallets);
		}
		return hubWorkOrderPallets;
	}

	public Hub<WorkOrder> getUnfilteredHub() {
		if (hubUnfiltered == null) {
			hubUnfiltered = new Hub<WorkOrder>(WorkOrder.class);
			hubUnfiltered.setSharedHub(getOriginalHub(), true);
		}
		return hubUnfiltered;
	}

	public Hub<WorkOrder> getOpenFilteredHub() {
		if (hubOpenFilteredHub == null) {
			hubOpenFilteredHub = new Hub<WorkOrder>(WorkOrder.class);
		}
		return hubOpenFilteredHub;
	}

	public WorkOrder getWorkOrder() {
		return getHub().getAO();
	}

	// points to filtered or unfiltered hub
	public Hub<WorkOrder> getHub() {
		if (hub == null) {
			hub = new Hub<WorkOrder>(WorkOrder.class);
			hub.setSharedHub(getUnfilteredHub(), true);
		}
		return hub;
	}

	public Hub<WorkOrder> getMultiSelectHub() {
		if (hubMultiSelect == null) {
			hubMultiSelect = new Hub<WorkOrder>(WorkOrder.class);
		}
		return hubMultiSelect;
	}

	public UserModel getInspectUserModel() {
		if (modelInspectUser != null) {
			return modelInspectUser;
		}
		modelInspectUser = new UserModel(getInspectUserHub());
		modelInspectUser.setDisplayName("Inspect User");
		modelInspectUser.setPluralDisplayName("Users");
		modelInspectUser.setForJfc(getForJfc());
		modelInspectUser.setAllowNew(false);
		modelInspectUser.setAllowSave(true);
		modelInspectUser.setAllowAdd(false);
		modelInspectUser.setAllowRemove(false);
		modelInspectUser.setAllowClear(false);
		modelInspectUser.setAllowDelete(false);
		modelInspectUser.setAllowSearch(false);
		modelInspectUser.setAllowHubSearch(true);
		modelInspectUser.setAllowGotoEdit(false);
		modelInspectUser.setViewOnly(true);
		// call WorkOrder.onEditQueryInspectUser(UserModel) to be able to customize this model
		OAObjectEditQueryDelegate.onEditQueryModel(WorkOrder.class, WorkOrder.P_InspectUser, modelInspectUser);

		return modelInspectUser;
	}

	public OrderModel getOrderModel() {
		if (modelOrder != null) {
			return modelOrder;
		}
		modelOrder = new OrderModel(getOrderHub());
		modelOrder.setDisplayName("Order");
		modelOrder.setPluralDisplayName("Orders");
		modelOrder.setForJfc(getForJfc());
		modelOrder.setAllowNew(false);
		modelOrder.setAllowSave(true);
		modelOrder.setAllowAdd(false);
		modelOrder.setAllowRemove(false);
		modelOrder.setAllowClear(false);
		modelOrder.setAllowDelete(false);
		modelOrder.setAllowSearch(false);
		modelOrder.setAllowHubSearch(true);
		modelOrder.setAllowGotoEdit(true);
		OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
		modelOrder.setCreateUI(li == null || !WorkOrder.P_Order.equals(li.getName()));
		modelOrder.setViewOnly(getViewOnly());
		// call WorkOrder.onEditQueryOrder(OrderModel) to be able to customize this model
		OAObjectEditQueryDelegate.onEditQueryModel(WorkOrder.class, WorkOrder.P_Order, modelOrder);

		return modelOrder;
	}

	public UserModel getAssignedUsersModel() {
		if (modelAssignedUsers != null) {
			return modelAssignedUsers;
		}
		modelAssignedUsers = new UserModel(getAssignedUsers());
		modelAssignedUsers.setDisplayName("User");
		modelAssignedUsers.setPluralDisplayName("Users");
		if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate
				.getLinkInfoFromMasterToDetail(getAssignedUsers())) {
			modelAssignedUsers.setCreateUI(false);
		}
		modelAssignedUsers.setForJfc(getForJfc());
		modelAssignedUsers.setAllowNew(false);
		modelAssignedUsers.setAllowSave(true);
		modelAssignedUsers.setAllowAdd(true);
		modelAssignedUsers.setAllowMove(false);
		modelAssignedUsers.setAllowRemove(true);
		modelAssignedUsers.setAllowDelete(false);
		modelAssignedUsers.setAllowSearch(false);
		modelAssignedUsers.setAllowHubSearch(true);
		modelAssignedUsers.setAllowGotoEdit(false);
		modelAssignedUsers.setViewOnly(getViewOnly());
		modelAssignedUsers.setAllowTableFilter(true);
		modelAssignedUsers.setAllowTableSorting(true);
		// default is always false for these, can be turned by custom code in editQuery call (below)
		modelAssignedUsers.setAllowMultiSelect(false);
		modelAssignedUsers.setAllowCopy(false);
		modelAssignedUsers.setAllowCut(false);
		modelAssignedUsers.setAllowPaste(false);
		// call WorkOrder.onEditQueryAssignedUsers(UserModel) to be able to customize this model
		OAObjectEditQueryDelegate.onEditQueryModel(WorkOrder.class, WorkOrder.P_AssignedUsers, modelAssignedUsers);

		return modelAssignedUsers;
	}

	public WODeliveryModel getWODeliveriesModel() {
		if (modelWODeliveries != null) {
			return modelWODeliveries;
		}
		modelWODeliveries = new WODeliveryModel(getWODeliveries());
		modelWODeliveries.setDisplayName("WO Delivery");
		modelWODeliveries.setPluralDisplayName("WO Deliveries");
		if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate
				.getLinkInfoFromMasterToDetail(getWODeliveries())) {
			modelWODeliveries.setCreateUI(false);
		}
		modelWODeliveries.setForJfc(getForJfc());
		modelWODeliveries.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Delivery
		modelWODeliveries.setAllowSave(true);
		modelWODeliveries.setAllowAdd(true); // Add is overwritten to create new WODelivery by first selecting Delivery
		modelWODeliveries.setAllowMove(false);
		modelWODeliveries.setAllowRemove(false);
		modelWODeliveries.setAllowDelete(true);
		modelWODeliveries.setAllowSearch(false);
		modelWODeliveries.setAllowHubSearch(false);
		modelWODeliveries.setAllowGotoEdit(true);
		modelWODeliveries.setViewOnly(getViewOnly());
		modelWODeliveries.setAllowTableFilter(true);
		modelWODeliveries.setAllowTableSorting(true);
		// default is always false for these, can be turned by custom code in editQuery call (below)
		modelWODeliveries.setAllowMultiSelect(false);
		modelWODeliveries.setAllowCopy(false);
		modelWODeliveries.setAllowCut(false);
		modelWODeliveries.setAllowPaste(false);
		// call WorkOrder.onEditQueryWODeliveries(WODeliveryModel) to be able to customize this model
		OAObjectEditQueryDelegate.onEditQueryModel(WorkOrder.class, WorkOrder.P_WODeliveries, modelWODeliveries);

		return modelWODeliveries;
	}

	public WOItemModel getWOItemsModel() {
		if (modelWOItems != null) {
			return modelWOItems;
		}
		modelWOItems = new WOItemModel(getWOItems());
		modelWOItems.setDisplayName("WOItem");
		modelWOItems.setPluralDisplayName("WOItems");
		if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate
				.getLinkInfoFromMasterToDetail(getWOItems())) {
			modelWOItems.setCreateUI(false);
		}
		modelWOItems.setForJfc(getForJfc());
		modelWOItems.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick OrderItem
		modelWOItems.setAllowSave(true);
		modelWOItems.setAllowAdd(true); // Add is overwritten to create new WOItem by first selecting OrderItem
		modelWOItems.setAllowMove(false);
		modelWOItems.setAllowRemove(false);
		modelWOItems.setAllowDelete(true);
		modelWOItems.setAllowSearch(false);
		modelWOItems.setAllowHubSearch(true);
		modelWOItems.setAllowGotoEdit(true);
		modelWOItems.setViewOnly(getViewOnly());
		modelWOItems.setAllowTableFilter(true);
		modelWOItems.setAllowTableSorting(true);
		// default is always false for these, can be turned by custom code in editQuery call (below)
		modelWOItems.setAllowMultiSelect(false);
		modelWOItems.setAllowCopy(false);
		modelWOItems.setAllowCut(false);
		modelWOItems.setAllowPaste(false);
		// call WorkOrder.onEditQueryWOItems(WOItemModel) to be able to customize this model
		OAObjectEditQueryDelegate.onEditQueryModel(WorkOrder.class, WorkOrder.P_WOItems, modelWOItems);

		return modelWOItems;
	}

	public WorkOrderPalletModel getWorkOrderPalletsModel() {
		if (modelWorkOrderPallets != null) {
			return modelWorkOrderPallets;
		}
		modelWorkOrderPallets = new WorkOrderPalletModel(getWorkOrderPallets());
		modelWorkOrderPallets.setDisplayName("Work Order Pallet");
		modelWorkOrderPallets.setPluralDisplayName("Work Order Pallets");
		if (HubDetailDelegate.getLinkInfoFromMasterToDetail(getOriginalHub().getMasterHub()) == HubDetailDelegate
				.getLinkInfoFromMasterToDetail(getWorkOrderPallets())) {
			modelWorkOrderPallets.setCreateUI(false);
		}
		modelWorkOrderPallets.setForJfc(getForJfc());
		modelWorkOrderPallets.setAllowNew(true);
		modelWorkOrderPallets.setAllowSave(true);
		modelWorkOrderPallets.setAllowAdd(true); // Add is overwritten to create new WorkOrderPallet by first selecting Pallet
		modelWorkOrderPallets.setAllowMove(false);
		modelWorkOrderPallets.setAllowRemove(false);
		modelWorkOrderPallets.setAllowDelete(true);
		modelWorkOrderPallets.setAllowSearch(false);
		modelWorkOrderPallets.setAllowHubSearch(true);
		modelWorkOrderPallets.setAllowGotoEdit(true);
		modelWorkOrderPallets.setViewOnly(getViewOnly());
		modelWorkOrderPallets.setAllowTableFilter(true);
		modelWorkOrderPallets.setAllowTableSorting(true);
		// default is always false for these, can be turned by custom code in editQuery call (below)
		modelWorkOrderPallets.setAllowMultiSelect(false);
		modelWorkOrderPallets.setAllowCopy(false);
		modelWorkOrderPallets.setAllowCut(false);
		modelWorkOrderPallets.setAllowPaste(false);
		// call WorkOrder.onEditQueryWorkOrderPallets(WorkOrderPalletModel) to be able to customize this model
		OAObjectEditQueryDelegate.onEditQueryModel(WorkOrder.class, WorkOrder.P_WorkOrderPallets, modelWorkOrderPallets);

		return modelWorkOrderPallets;
	}

	public UserSearchModel getAssignedUsersSearchModel() {
		if (modelAssignedUsersSearch != null) {
			return modelAssignedUsersSearch;
		}
		modelAssignedUsersSearch = new UserSearchModel() {
			@Override
			public void performSearch() {
				WorkOrder workOrder = WorkOrderModel.this.getHub().getAO();
				if (workOrder == null) {
					// dont allow search, cant apply required filter
					getHub().clear();
					return;
				}
				OAFilter filter = new UserAssignedProdFilter();
				getUserSearch().setExtraWhereFilter(filter);
				super.performSearch();
			}
		};
		return modelAssignedUsersSearch;
	}

	public WorkOrderOpenFilterModel getWorkOrderOpenFilterModel() {
		if (modelWorkOrderOpenFilter == null) {
			modelWorkOrderOpenFilter = new WorkOrderOpenFilterModel(getUnfilteredHub(), getOpenFilteredHub());
			new HubShareAO(getUnfilteredHub(), getOpenFilteredHub());
		}
		return modelWorkOrderOpenFilter;
	}

	public HubCopy<WorkOrder> createHubCopy() {
		Hub<WorkOrder> hubWorkOrderx = new Hub<>(WorkOrder.class);
		HubCopy<WorkOrder> hc = new HubCopy<>(getHub(), hubWorkOrderx, true);
		return hc;
	}

	public WorkOrderModel createCopy() {
		WorkOrderModel mod = new WorkOrderModel(createHubCopy().getHub());
		return mod;
	}
}
