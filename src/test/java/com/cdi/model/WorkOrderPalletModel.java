// Generated by OABuilder

package com.cdi.model;

import java.util.logging.Logger;

import com.cdi.delegate.ModelDelegate;
import com.cdi.model.oa.Pallet;
import com.cdi.model.oa.WorkOrder;
import com.cdi.model.oa.WorkOrderPallet;
import com.viaoa.hub.Hub;
import com.viaoa.hub.HubCopy;
import com.viaoa.hub.HubDelegate;
import com.viaoa.hub.HubDetailDelegate;
import com.viaoa.object.OALinkInfo;
import com.viaoa.object.OAObjectCallbackDelegate;
import com.viaoa.object.OAObjectModel;

public class WorkOrderPalletModel extends OAObjectModel {
	private static Logger LOG = Logger.getLogger(WorkOrderPalletModel.class.getName());

	// Hubs
	protected Hub<WorkOrderPallet> hub;
	// selected workOrderPallets
	protected Hub<WorkOrderPallet> hubMultiSelect;
	// detail hubs
	protected Hub<Pallet> hubPallet;
	protected Hub<WorkOrder> hubWorkOrder;

	// ObjectModels
	protected PalletModel modelPallet;
	protected WorkOrderModel modelWorkOrder;

	public WorkOrderPalletModel() {
		setDisplayName("Work Order Pallet");
		setPluralDisplayName("Work Order Pallets");
	}

	public WorkOrderPalletModel(Hub<WorkOrderPallet> hubWorkOrderPallet) {
		this();
		if (hubWorkOrderPallet != null) {
			HubDelegate.setObjectClass(hubWorkOrderPallet, WorkOrderPallet.class);
		}
		this.hub = hubWorkOrderPallet;
	}

	public WorkOrderPalletModel(WorkOrderPallet workOrderPallet) {
		this();
		getHub().add(workOrderPallet);
		getHub().setPos(0);
	}

	public Hub<WorkOrderPallet> getOriginalHub() {
		return getHub();
	}

	public Hub<Pallet> getPalletHub() {
		if (hubPallet != null) {
			return hubPallet;
		}
		hubPallet = new Hub<>(Pallet.class);
		Hub<Pallet> hub = ModelDelegate.getPallets();
		HubCopy<Pallet> hc = new HubCopy<>(hub, hubPallet, false);
		hubPallet.setLinkHub(getHub(), WorkOrderPallet.P_Pallet);
		return hubPallet;
	}

	public Hub<WorkOrder> getWorkOrderHub() {
		if (hubWorkOrder != null) {
			return hubWorkOrder;
		}
		// this is the owner, use detailHub
		hubWorkOrder = getHub().getDetailHub(WorkOrderPallet.P_WorkOrder);
		return hubWorkOrder;
	}

	public WorkOrderPallet getWorkOrderPallet() {
		return getHub().getAO();
	}

	public Hub<WorkOrderPallet> getHub() {
		if (hub == null) {
			hub = new Hub<WorkOrderPallet>(WorkOrderPallet.class);
		}
		return hub;
	}

	public Hub<WorkOrderPallet> getMultiSelectHub() {
		if (hubMultiSelect == null) {
			hubMultiSelect = new Hub<WorkOrderPallet>(WorkOrderPallet.class);
		}
		return hubMultiSelect;
	}

	public PalletModel getPalletModel() {
		if (modelPallet != null) {
			return modelPallet;
		}
		modelPallet = new PalletModel(getPalletHub());
		modelPallet.setDisplayName("Pallet");
		modelPallet.setPluralDisplayName("Pallets");
		modelPallet.setForJfc(getForJfc());
		modelPallet.setAllowNew(true);
		modelPallet.setAllowSave(true);
		modelPallet.setAllowAdd(false);
		modelPallet.setAllowRemove(false);
		modelPallet.setAllowClear(false);
		modelPallet.setAllowDelete(false);
		modelPallet.setAllowSearch(false);
		modelPallet.setAllowHubSearch(true);
		modelPallet.setAllowGotoEdit(false);
		modelPallet.setViewOnly(getViewOnly());
		// call WorkOrderPallet.onEditQueryPallet(PalletModel) to be able to customize this model
		OAObjectCallbackDelegate.onObjectCallbackModel(WorkOrderPallet.class, WorkOrderPallet.P_Pallet, modelPallet);

		return modelPallet;
	}

	public WorkOrderModel getWorkOrderModel() {
		if (modelWorkOrder != null) {
			return modelWorkOrder;
		}
		modelWorkOrder = new WorkOrderModel(getWorkOrderHub());
		modelWorkOrder.setDisplayName("Work Order");
		modelWorkOrder.setPluralDisplayName("Work Orders");
		modelWorkOrder.setForJfc(getForJfc());
		modelWorkOrder.setAllowNew(false);
		modelWorkOrder.setAllowSave(true);
		modelWorkOrder.setAllowAdd(false);
		modelWorkOrder.setAllowRemove(false);
		modelWorkOrder.setAllowClear(false);
		modelWorkOrder.setAllowDelete(false);
		modelWorkOrder.setAllowSearch(false);
		modelWorkOrder.setAllowHubSearch(true);
		modelWorkOrder.setAllowGotoEdit(true);
		OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
		modelWorkOrder.setCreateUI(li == null || !WorkOrderPallet.P_WorkOrder.equals(li.getName()));
		modelWorkOrder.setViewOnly(getViewOnly());
		// call WorkOrderPallet.onEditQueryWorkOrder(WorkOrderModel) to be able to customize this model
		OAObjectCallbackDelegate.onObjectCallbackModel(WorkOrderPallet.class, WorkOrderPallet.P_WorkOrder, modelWorkOrder);

		return modelWorkOrder;
	}

	public HubCopy<WorkOrderPallet> createHubCopy() {
		Hub<WorkOrderPallet> hubWorkOrderPalletx = new Hub<>(WorkOrderPallet.class);
		HubCopy<WorkOrderPallet> hc = new HubCopy<>(getHub(), hubWorkOrderPalletx, true);
		return hc;
	}

	public WorkOrderPalletModel createCopy() {
		WorkOrderPalletModel mod = new WorkOrderPalletModel(createHubCopy().getHub());
		return mod;
	}
}
