// Generated by OABuilder
package com.cdi.model.filter;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.search.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class SalesOrderSalesPersonFilterModel {
    private static Logger LOG = Logger.getLogger(SalesOrderSalesPersonFilterModel.class.getName());
    
    // Hubs
    protected Hub<SalesOrderSalesPersonFilter> hubFilter;
    protected Hub<User> hubSalesOrderSalesPersonUser;
    
    // ObjectModels
    protected UserModel modelSalesOrderSalesPersonUser;
    
    // FilterModels
    protected UserSearchModel modelSalesOrderSalesPersonUserSearch;
    
    // object used for filter data
    protected SalesOrderSalesPersonFilter filter;
    
    public SalesOrderSalesPersonFilterModel(Hub<SalesOrder> hubMaster, Hub<SalesOrder> hub) {
        filter = new SalesOrderSalesPersonFilter(hubMaster, hub);
    }
    public SalesOrderSalesPersonFilterModel(Hub<SalesOrder> hub) {
        filter = new SalesOrderSalesPersonFilter(hub);
    }
    
    // object used to input query data, to be used by filterHub
    public SalesOrderSalesPersonFilter getFilter() {
        return filter;
    }
    
    // hub for filter UI object - used to bind with UI components for entering filter data
    public Hub<SalesOrderSalesPersonFilter> getFilterHub() {
        if (hubFilter == null) {
            hubFilter = new Hub<SalesOrderSalesPersonFilter>(SalesOrderSalesPersonFilter.class);
            hubFilter.add(getFilter());
            hubFilter.setPos(0);
        }
        return hubFilter;
    }
    public Hub<User> getSalesOrderSalesPersonUserHub() {
        if (hubSalesOrderSalesPersonUser != null) return hubSalesOrderSalesPersonUser;
        Hub<User> hub = new Hub<>(User.class);
        UserSalesPersonFilter filter = new UserSalesPersonFilter(ModelDelegate.getUsers(), hub);
        hubSalesOrderSalesPersonUser = new Hub<>(User.class);
        HubCopy<User> hc = new HubCopy<>(hub, hubSalesOrderSalesPersonUser, false);
        hubSalesOrderSalesPersonUser.setLinkHub(getFilterHub(), SalesOrderSalesPersonFilter.P_SalesOrderSalesPersonUser); 
        return hubSalesOrderSalesPersonUser;
    }
    
    public UserModel getSalesOrderSalesPersonUserModel() {
        if (modelSalesOrderSalesPersonUser != null) return modelSalesOrderSalesPersonUser;
        modelSalesOrderSalesPersonUser = new UserModel(getSalesOrderSalesPersonUserHub());
        modelSalesOrderSalesPersonUser.setDisplayName("Sales Person");
        modelSalesOrderSalesPersonUser.setPluralDisplayName("Users");
        modelSalesOrderSalesPersonUser.setAllowNew(false);
        modelSalesOrderSalesPersonUser.setAllowSave(true);
        modelSalesOrderSalesPersonUser.setAllowAdd(false);
        modelSalesOrderSalesPersonUser.setAllowRemove(false);
        modelSalesOrderSalesPersonUser.setAllowClear(true);
        modelSalesOrderSalesPersonUser.setAllowDelete(false);
        modelSalesOrderSalesPersonUser.setAllowSearch(true);
        modelSalesOrderSalesPersonUser.setAllowHubSearch(false);
        modelSalesOrderSalesPersonUser.setAllowGotoEdit(true);
        modelSalesOrderSalesPersonUser.setViewOnly(true);
        return modelSalesOrderSalesPersonUser;
    }
    
    public UserSearchModel getSalesOrderSalesPersonUserSearchModel() {
        if (modelSalesOrderSalesPersonUserSearch != null) return modelSalesOrderSalesPersonUserSearch;
        modelSalesOrderSalesPersonUserSearch = new UserSearchModel() {
            @Override
            public void performSearch() {
                getUserSearch().setExtraWhere("salesPersonList = true");
                OAFilter filter = new UserSalesPersonFilter();
                getUserSearch().setExtraWhereFilter(filter);
                super.performSearch();
            }
        };
        return modelSalesOrderSalesPersonUserSearch;
    }
    
    // get the Filtered hub
    public Hub<SalesOrder> getHub() {
        return getFilter().getHubFilter().getHub();
    }
}

