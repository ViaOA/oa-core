// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "con",
    displayName = "Contact",
    displayProperty = "name",
    sortProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "ContactCustomer", fkey = true, columns = { @OAIndexColumn(name = "CustomerId") })
    }
)
public class Contact extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Contact.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Title = "Title";
    public static final String P_Title = "Title";
    public static final String PROPERTY_Email = "Email";
    public static final String P_Email = "Email";
    public static final String PROPERTY_Notes = "Notes";
    public static final String P_Notes = "Notes";
     
     
    public static final String PROPERTY_Customer = "Customer";
    public static final String P_Customer = "Customer";
    public static final String PROPERTY_OrderContacts = "OrderContacts";
    public static final String P_OrderContacts = "OrderContacts";
    public static final String PROPERTY_Phones = "Phones";
    public static final String P_Phones = "Phones";
     
    protected volatile int id;
    protected volatile String name;
    protected volatile String title;
    protected volatile String email;
    protected volatile String notes;
     
    // Links to other objects.
    protected volatile transient Customer customer;
    protected transient Hub<OrderContact> hubOrderContacts;
    protected transient Hub<Phone> hubPhones;
     
    public Contact() {
    }
     
    public Contact(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 70, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 70)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getTitle() {
        return title;
    }
    public void setTitle(String newValue) {
        String old = title;
        fireBeforePropertyChange(P_Title, old, newValue);
        this.title = newValue;
        firePropertyChange(P_Title, old, this.title);
    }
     
    @OAProperty(maxLength = 65, displayLength = 20, columnLength = 15, isEmail = true)
    @OAColumn(maxLength = 65)
    public String getEmail() {
        return email;
    }
    public void setEmail(String newValue) {
        String old = email;
        fireBeforePropertyChange(P_Email, old, newValue);
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
     
    @OAProperty(displayLength = 20, hasCustomCode = true, isHtml = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNotes() {
        if (notes != null) notes = OAString.convertTextToHTML(notes, false);
        return notes;
    }
    public void setNotes(String newValue) {
        String old = notes;
        fireBeforePropertyChange(P_Notes, old, newValue);
        this.notes = newValue;
        firePropertyChange(P_Notes, old, this.notes);
    }
     
    @OAOne(
        reverseName = Customer.P_Contacts, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"CustomerId"})
    public Customer getCustomer() {
        if (customer == null) {
            customer = (Customer) getObject(P_Customer);
        }
        return customer;
    }
    public void setCustomer(Customer newValue) {
        Customer old = this.customer;
        fireBeforePropertyChange(P_Customer, old, newValue);
        this.customer = newValue;
        firePropertyChange(P_Customer, old, this.customer);
    }
     
    @OAMany(
        displayName = "Order Contacts", 
        toClass = OrderContact.class, 
        reverseName = OrderContact.P_Contact
    )
    public Hub<OrderContact> getOrderContacts() {
        if (hubOrderContacts == null) {
            hubOrderContacts = (Hub<OrderContact>) getHub(P_OrderContacts);
        }
        return hubOrderContacts;
    }
     
    @OAMany(
        toClass = Phone.class, 
        owner = true, 
        reverseName = Phone.P_Contact, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Phone> getPhones() {
        if (hubPhones == null) {
            hubPhones = (Hub<Phone>) getHub(P_Phones);
        }
        return hubPhones;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.title = rs.getString(3);
        this.email = rs.getString(4);
        this.notes = rs.getString(5);
        int customerFkey = rs.getInt(6);
        if (!rs.wasNull() && customerFkey > 0) {
            setProperty(P_Customer, new OAObjectKey(customerFkey));
        }
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
