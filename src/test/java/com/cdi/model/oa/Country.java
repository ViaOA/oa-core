// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "cou",
    displayName = "Country",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "displayName",
    sortProperty = "code"
)
@OATable(
)
public class Country extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Country.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
     
    public static final String PROPERTY_DisplayName = "DisplayName";
    public static final String P_DisplayName = "DisplayName";
     
    protected volatile int id;
    protected volatile String code;
    protected volatile String name;
     
    public Country() {
    }
     
    public Country(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 15, displayLength = 10)
    @OAColumn(maxLength = 15)
    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
     
    @OAProperty(maxLength = 65, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 65)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OACalculatedProperty(displayName = "Display Name", displayLength = 20, columnLength = 15, properties = {P_Code, P_Name})
    public String getDisplayName() {
        String s = name;
        if (s == null) s = "";    
        if (code != null && code.length() > 0) s += " (" + code + ")";
        return s;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.code = rs.getString(2);
        this.name = rs.getString(3);
        if (rs.getMetaData().getColumnCount() != 3) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
