// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
 
@OAClass(
    shortName = "cus",
    displayName = "Customer",
    isProcessed = true,
    displayProperty = "name",
    sortProperty = "name",
    estimatedTotal = 15000,
    filterClasses = {CustomerActiveFilter.class}
)
@OATable(
    indexes = {
        @OAIndex(name = "CustomerCustomerNumber", columns = {@OAIndexColumn(name = "CustomerNumber")}),
        @OAIndex(name = "CustomerName", columns = {@OAIndexColumn(name = "Name")}),
        @OAIndex(name = "CustomerShortName", columns = {@OAIndexColumn(name = "ShortName")}),
        @OAIndex(name = "CustomerQbListId", columns = {@OAIndexColumn(name = "QbListId")}),
        @OAIndex(name = "CustomerRegion", fkey = true, columns = { @OAIndexColumn(name = "RegionId") }), 
        @OAIndex(name = "CustomerTaxCode", fkey = true, columns = { @OAIndexColumn(name = "TaxCodeId") })
    }
)
public class Customer extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Customer.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_CustomerNumber = "CustomerNumber";
    public static final String P_CustomerNumber = "CustomerNumber";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Name2 = "Name2";
    public static final String P_Name2 = "Name2";
    public static final String PROPERTY_ShortName = "ShortName";
    public static final String P_ShortName = "ShortName";
    public static final String PROPERTY_Address = "Address";
    public static final String P_Address = "Address";
    public static final String PROPERTY_Address2 = "Address2";
    public static final String P_Address2 = "Address2";
    public static final String PROPERTY_Address3 = "Address3";
    public static final String P_Address3 = "Address3";
    public static final String PROPERTY_City = "City";
    public static final String P_City = "City";
    public static final String PROPERTY_State = "State";
    public static final String P_State = "State";
    public static final String PROPERTY_Zip = "Zip";
    public static final String P_Zip = "Zip";
    public static final String PROPERTY_Phone = "Phone";
    public static final String P_Phone = "Phone";
    public static final String PROPERTY_FaxNumber = "FaxNumber";
    public static final String P_FaxNumber = "FaxNumber";
    public static final String PROPERTY_Notes = "Notes";
    public static final String P_Notes = "Notes";
    public static final String PROPERTY_Salesperson = "Salesperson";
    public static final String P_Salesperson = "Salesperson";
    public static final String PROPERTY_CurrentBalance = "CurrentBalance";
    public static final String P_CurrentBalance = "CurrentBalance";
    public static final String PROPERTY_MtdCosts = "MtdCosts";
    public static final String P_MtdCosts = "MtdCosts";
    public static final String PROPERTY_YtdCosts = "YtdCosts";
    public static final String P_YtdCosts = "YtdCosts";
    public static final String PROPERTY_PriorYearCost = "PriorYearCost";
    public static final String P_PriorYearCost = "PriorYearCost";
    public static final String PROPERTY_TaxExempt = "TaxExempt";
    public static final String P_TaxExempt = "TaxExempt";
    public static final String PROPERTY_TermCustomerNumber = "TermCustomerNumber";
    public static final String P_TermCustomerNumber = "TermCustomerNumber";
    public static final String PROPERTY_QbListId = "QbListId";
    public static final String P_QbListId = "QbListId";
    public static final String PROPERTY_InactiveDate = "InactiveDate";
    public static final String P_InactiveDate = "InactiveDate";
     
    public static final String PROPERTY_CityStateZip = "CityStateZip";
    public static final String P_CityStateZip = "CityStateZip";
     
    public static final String PROPERTY_Contacts = "Contacts";
    public static final String P_Contacts = "Contacts";
    public static final String PROPERTY_Orders = "Orders";
    public static final String P_Orders = "Orders";
    public static final String PROPERTY_Region = "Region";
    public static final String P_Region = "Region";
    public static final String PROPERTY_SalesCustomers = "SalesCustomers";
    public static final String P_SalesCustomers = "SalesCustomers";
    public static final String PROPERTY_TaxCode = "TaxCode";
    public static final String P_TaxCode = "TaxCode";
     
    protected volatile int id;
    protected volatile String customerNumber;
    protected volatile String name;
    protected volatile String name2;
    protected volatile String shortName;
    protected volatile String address;
    protected volatile String address2;
    protected volatile String address3;
    protected volatile String city;
    protected volatile String state;
    protected volatile String zip;
    protected volatile String phone;
    protected volatile String faxNumber;
    protected volatile String notes;
    protected volatile String salesperson;
    protected volatile double currentBalance;
    protected volatile double mtdCosts;
    protected volatile double ytdCosts;
    protected volatile double priorYearCost;
    protected volatile boolean taxExempt;
    protected volatile String termCustomerNumber;
    protected volatile String qbListId;
    protected volatile OADate inactiveDate;
     
    // Links to other objects.
    protected transient Hub<Contact> hubContacts;
    // protected transient Hub<Order> hubOrders;
    protected volatile transient Region region;
    protected volatile transient TaxCode taxCode;
     
    public Customer() {
    }
     
    public Customer(int id) {
        this();
        setId(id);
    }
     
    @OAEditQuery(contextEnabledProperty = AppUser.P_User+"."+User.P_CalcCustomerWriteAccess
    )
    public void onEditQuery(OAObjectEditQuery em) {
    }
    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(displayName = "Customer Number", maxLength = 20, displayLength = 10, columnName = "Cust Num")
    @OAColumn(maxLength = 20)
    public String getCustomerNumber() {
        return customerNumber;
    }
    public void setCustomerNumber(String newValue) {
        String old = customerNumber;
        fireBeforePropertyChange(P_CustomerNumber, old, newValue);
        this.customerNumber = newValue;
        firePropertyChange(P_CustomerNumber, old, this.customerNumber);
    }
     
    @OAProperty(maxLength = 70, displayLength = 20, columnLength = 25)
    @OAColumn(maxLength = 70)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 55)
    public String getName2() {
        return name2;
    }
    public void setName2(String newValue) {
        String old = name2;
        fireBeforePropertyChange(P_Name2, old, newValue);
        this.name2 = newValue;
        firePropertyChange(P_Name2, old, this.name2);
    }
     
    @OAProperty(displayName = "Short Name", maxLength = 25, displayLength = 10)
    @OAColumn(maxLength = 25)
    public String getShortName() {
        return shortName;
    }
    public void setShortName(String newValue) {
        String old = shortName;
        fireBeforePropertyChange(P_ShortName, old, newValue);
        this.shortName = newValue;
        firePropertyChange(P_ShortName, old, this.shortName);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress() {
        return address;
    }
    public void setAddress(String newValue) {
        String old = address;
        fireBeforePropertyChange(P_Address, old, newValue);
        this.address = newValue;
        firePropertyChange(P_Address, old, this.address);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress2() {
        return address2;
    }
    public void setAddress2(String newValue) {
        String old = address2;
        fireBeforePropertyChange(P_Address2, old, newValue);
        this.address2 = newValue;
        firePropertyChange(P_Address2, old, this.address2);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress3() {
        return address3;
    }
    public void setAddress3(String newValue) {
        String old = address3;
        fireBeforePropertyChange(P_Address3, old, newValue);
        this.address3 = newValue;
        firePropertyChange(P_Address3, old, this.address3);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getCity() {
        return city;
    }
    public void setCity(String newValue) {
        String old = city;
        fireBeforePropertyChange(P_City, old, newValue);
        this.city = newValue;
        firePropertyChange(P_City, old, this.city);
    }
     
    @OAProperty(maxLength = 25, displayLength = 10)
    @OAColumn(maxLength = 25)
    public String getState() {
        return state;
    }
    public void setState(String newValue) {
        String old = state;
        fireBeforePropertyChange(P_State, old, newValue);
        this.state = newValue;
        firePropertyChange(P_State, old, this.state);
    }
     
    @OAProperty(maxLength = 14, displayLength = 10)
    @OAColumn(maxLength = 14)
    public String getZip() {
        return zip;
    }
    public void setZip(String newValue) {
        String old = zip;
        fireBeforePropertyChange(P_Zip, old, newValue);
        this.zip = newValue;
        firePropertyChange(P_Zip, old, this.zip);
    }
     
    @OAProperty(maxLength = 25, displayLength = 15, columnLength = 13, isPhone = true)
    @OAColumn(maxLength = 25)
    public String getPhone() {
        return phone;
    }
    public void setPhone(String newValue) {
        String old = phone;
        fireBeforePropertyChange(P_Phone, old, newValue);
        this.phone = newValue;
        firePropertyChange(P_Phone, old, this.phone);
    }
     
    @OAProperty(displayName = "Fax Number", maxLength = 25, displayLength = 15, columnLength = 13, isPhone = true)
    @OAColumn(maxLength = 25)
    public String getFaxNumber() {
        return faxNumber;
    }
    public void setFaxNumber(String newValue) {
        String old = faxNumber;
        fireBeforePropertyChange(P_FaxNumber, old, newValue);
        this.faxNumber = newValue;
        firePropertyChange(P_FaxNumber, old, this.faxNumber);
    }
     
    @OAProperty(displayLength = 20, hasCustomCode = true, isHtml = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNotes() {
        if (notes != null) notes = OAString.convertTextToHTML(notes, false);
        return notes;
    }
    public void setNotes(String newValue) {
        String old = notes;
        fireBeforePropertyChange(P_Notes, old, newValue);
        this.notes = newValue;
        firePropertyChange(P_Notes, old, this.notes);
    }
     
    @OAProperty(maxLength = 50, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 50)
    public String getSalesperson() {
        return salesperson;
    }
    public void setSalesperson(String newValue) {
        String old = salesperson;
        fireBeforePropertyChange(P_Salesperson, old, newValue);
        this.salesperson = newValue;
        firePropertyChange(P_Salesperson, old, this.salesperson);
    }
     
    @OAProperty(displayName = "Current Balance", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 8, columnName = "Balance")
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCurrentBalance() {
        return currentBalance;
    }
    public void setCurrentBalance(double newValue) {
        double old = currentBalance;
        fireBeforePropertyChange(P_CurrentBalance, old, newValue);
        this.currentBalance = newValue;
        firePropertyChange(P_CurrentBalance, old, this.currentBalance);
    }
    @OAEditQuery(contextVisibleProperty = AppUser.P_User+"."+User.P_CalcPricingReadAccess)
    public void onEditQueryCurrentBalance(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Mtd Costs", decimalPlaces = 2, isCurrency = true, displayLength = 9, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getMtdCosts() {
        return mtdCosts;
    }
    public void setMtdCosts(double newValue) {
        double old = mtdCosts;
        fireBeforePropertyChange(P_MtdCosts, old, newValue);
        this.mtdCosts = newValue;
        firePropertyChange(P_MtdCosts, old, this.mtdCosts);
    }
    @OAEditQuery(contextVisibleProperty = AppUser.P_User+"."+User.P_CalcPricingReadAccess)
    public void onEditQueryMtdCosts(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Ytd Costs", decimalPlaces = 2, isCurrency = true, displayLength = 9, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getYtdCosts() {
        return ytdCosts;
    }
    public void setYtdCosts(double newValue) {
        double old = ytdCosts;
        fireBeforePropertyChange(P_YtdCosts, old, newValue);
        this.ytdCosts = newValue;
        firePropertyChange(P_YtdCosts, old, this.ytdCosts);
    }
    @OAEditQuery(contextVisibleProperty = AppUser.P_User+"."+User.P_CalcPricingReadAccess)
    public void onEditQueryYtdCosts(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Prior Year Cost", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 10, columnName = "Prior Year", isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getPriorYearCost() {
        return priorYearCost;
    }
    public void setPriorYearCost(double newValue) {
        double old = priorYearCost;
        fireBeforePropertyChange(P_PriorYearCost, old, newValue);
        this.priorYearCost = newValue;
        firePropertyChange(P_PriorYearCost, old, this.priorYearCost);
    }
    @OAEditQuery(contextVisibleProperty = AppUser.P_User+"."+User.P_CalcPricingReadAccess)
    public void onEditQueryPriorYearCost(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Tax Exempt", displayLength = 5, columnLength = 6, columnName = "Tax Ex")
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getTaxExempt() {
        return taxExempt;
    }
    public void setTaxExempt(boolean newValue) {
        boolean old = taxExempt;
        fireBeforePropertyChange(P_TaxExempt, old, newValue);
        this.taxExempt = newValue;
        firePropertyChange(P_TaxExempt, old, this.taxExempt);
    }
     
    @OAProperty(displayName = "Customer Number", maxLength = 20, displayLength = 10, columnLength = 11, columnName = "Cust Number")
    @OAColumn(maxLength = 20)
    public String getTermCustomerNumber() {
        return termCustomerNumber;
    }
    public void setTermCustomerNumber(String newValue) {
        String old = termCustomerNumber;
        fireBeforePropertyChange(P_TermCustomerNumber, old, newValue);
        this.termCustomerNumber = newValue;
        firePropertyChange(P_TermCustomerNumber, old, this.termCustomerNumber);
    }
     
    @OAProperty(displayName = "QuickBooks Id", maxLength = 40, displayLength = 10, columnName = "QB  Id", isProcessed = true)
    @OAColumn(maxLength = 40)
    public String getQbListId() {
        return qbListId;
    }
    public void setQbListId(String newValue) {
        String old = qbListId;
        fireBeforePropertyChange(P_QbListId, old, newValue);
        this.qbListId = newValue;
        firePropertyChange(P_QbListId, old, this.qbListId);
    }
     
    @OAProperty(displayName = "Inactive Date", displayLength = 8, columnName = "Inactive", isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInactiveDate() {
        return inactiveDate;
    }
    public void setInactiveDate(OADate newValue) {
        OADate old = inactiveDate;
        fireBeforePropertyChange(P_InactiveDate, old, newValue);
        this.inactiveDate = newValue;
        firePropertyChange(P_InactiveDate, old, this.inactiveDate);
    }
     
    @OACalculatedProperty(displayName = "City State Zip", displayLength = 20, columnLength = 28, properties = {P_City, P_State, P_Zip})
    public String getCityStateZip() {
        String csz = "";
        if (city != null) csz = city;
        csz += ", ";
        if (state != null) csz += state;
        csz += " ";
        if (zip != null) csz += zip;
        return csz;
    }
     
    @OAMany(
        toClass = Contact.class, 
        owner = true, 
        reverseName = Contact.P_Customer, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Contact> getContacts() {
        if (hubContacts == null) {
            hubContacts = (Hub<Contact>) getHub(P_Contacts);
        }
        return hubContacts;
    }
     
    @OAMany(
        toClass = Order.class, 
        cacheSize = 50, 
        reverseName = Order.P_Customer, 
        isProcessed = true
    )
    public Hub<Order> getOrders() {
        Hub<Order> hubOrders;
        {
            hubOrders = (Hub<Order>) getHub(P_Orders);
        }
        return hubOrders;
    }
     
    @OAOne(
        reverseName = Region.P_Customers, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"RegionId"})
    public Region getRegion() {
        if (region == null) {
            region = (Region) getObject(P_Region);
        }
        return region;
    }
    public void setRegion(Region newValue) {
        Region old = this.region;
        fireBeforePropertyChange(P_Region, old, newValue);
        this.region = newValue;
        firePropertyChange(P_Region, old, this.region);
    }
     
    @OAMany(
        displayName = "Sales Customers", 
        toClass = SalesCustomer.class, 
        reverseName = SalesCustomer.P_Customer, 
        createMethod = false
    )
    private Hub<SalesCustomer> getSalesCustomers() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAOne(
        displayName = "Tax Code", 
        reverseName = TaxCode.P_Customers, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"TaxCodeId"})
    public TaxCode getTaxCode() {
        if (taxCode == null) {
            taxCode = (TaxCode) getObject(P_TaxCode);
        }
        return taxCode;
    }
    public void setTaxCode(TaxCode newValue) {
        TaxCode old = this.taxCode;
        fireBeforePropertyChange(P_TaxCode, old, newValue);
        this.taxCode = newValue;
        firePropertyChange(P_TaxCode, old, this.taxCode);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.customerNumber = rs.getString(2);
        this.name = rs.getString(3);
        this.name2 = rs.getString(4);
        this.shortName = rs.getString(5);
        this.address = rs.getString(6);
        this.address2 = rs.getString(7);
        this.address3 = rs.getString(8);
        this.city = rs.getString(9);
        this.state = rs.getString(10);
        this.zip = rs.getString(11);
        this.phone = rs.getString(12);
        this.faxNumber = rs.getString(13);
        this.notes = rs.getString(14);
        this.salesperson = rs.getString(15);
        this.currentBalance = (double) rs.getDouble(16);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Customer.P_CurrentBalance, true);
        }
        this.mtdCosts = (double) rs.getDouble(17);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Customer.P_MtdCosts, true);
        }
        this.ytdCosts = (double) rs.getDouble(18);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Customer.P_YtdCosts, true);
        }
        this.priorYearCost = (double) rs.getDouble(19);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Customer.P_PriorYearCost, true);
        }
        this.taxExempt = (rs.getShort(20) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Customer.P_TaxExempt, true);
        }
        this.termCustomerNumber = rs.getString(21);
        this.qbListId = rs.getString(22);
        java.sql.Date date;
        date = rs.getDate(23);
        if (date != null) this.inactiveDate = new OADate(date);
        int regionFkey = rs.getInt(24);
        if (!rs.wasNull() && regionFkey > 0) {
            setProperty(P_Region, new OAObjectKey(regionFkey));
        }
        int taxCodeFkey = rs.getInt(25);
        if (!rs.wasNull() && taxCodeFkey > 0) {
            setProperty(P_TaxCode, new OAObjectKey(taxCodeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 25) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
