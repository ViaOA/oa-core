// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
import java.awt.Color;
 
@OAClass(
    shortName = "dlv",
    displayName = "Delivery",
    isProcessed = true,
    displayProperty = "date"
)
@OATable(
    indexes = {
        @OAIndex(name = "DeliveryDateValue", columns = {@OAIndexColumn(name = "DateValue")})
    }
)
public class Delivery extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Delivery.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Date = "Date";
    public static final String P_Date = "Date";
     
    public static final String PROPERTY_IconColor = "IconColor";
    public static final String P_IconColor = "IconColor";
    public static final String PROPERTY_ToolTip = "ToolTip";
    public static final String P_ToolTip = "ToolTip";
     
    public static final String PROPERTY_DeliveryTrucks = "DeliveryTrucks";
    public static final String P_DeliveryTrucks = "DeliveryTrucks";
    public static final String PROPERTY_WODeliveries = "WODeliveries";
    public static final String P_WODeliveries = "WODeliveries";
     
    protected volatile int id;
    protected volatile OADate created;
    protected volatile OADate date;
     
    // Links to other objects.
    protected transient Hub<DeliveryTruck> hubDeliveryTrucks;
    protected transient Hub<WODelivery> hubWODeliveries;
     
    public Delivery() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public Delivery(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        OADate old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
     
    @OAProperty(isUnique = true, displayLength = 8, isProcessed = true)
    @OAColumn(name = "DateValue", sqlType = java.sql.Types.DATE)
    public OADate getDate() {
        return date;
    }
    public void setDate(OADate newValue) {
        OADate old = date;
        fireBeforePropertyChange(P_Date, old, newValue);
        this.date = newValue;
        firePropertyChange(P_Date, old, this.date);
    }
     
    @OACalculatedProperty(displayName = "Icon Color", displayLength = 12, columnLength = 10, properties = {P_WODeliveries+"."+WODelivery.P_WorkOrder+"."+WorkOrder.P_CalcStatusCode, P_DeliveryTrucks+"."+DeliveryTruck.P_WODeliveries})
    public Color getIconColor() {
        int x = WorkOrder.STATUSCODE_White;
        for (WODelivery wod : getWODeliveries()) {
            WorkOrder wo = wod.getWorkOrder();
            if (wo == null) continue;
            x = Math.min(x, wod.getWorkOrder().getCalcStatusCode());
            if (wod.getDeliveryTrucks().size() == 0) {
                x = WorkOrder.STATUSCODE_Red;
                break;
            }
        }
        return WorkOrderDelegate.getStatusCodeColor(x);
    }
     
    @OACalculatedProperty(displayName = "Tool Tip", displayLength = 20)
    public String getToolTip() {
        String toolTip = "";
        for (WODelivery wod : getWODeliveries()) {
            if (wod.getDeliveryTrucks().size() == 0) {
                toolTip = "there are Work Orders that have not been assigned a carrier";
                break;
            }
        }
        return toolTip;
    }
     
    @OAMany(
        displayName = "Delivery Trucks", 
        toClass = DeliveryTruck.class, 
        reverseName = DeliveryTruck.P_Delivery
    )
    public Hub<DeliveryTruck> getDeliveryTrucks() {
        if (hubDeliveryTrucks == null) {
            hubDeliveryTrucks = (Hub<DeliveryTruck>) getHub(P_DeliveryTrucks);
        }
        return hubDeliveryTrucks;
    }
     
    @OAMany(
        displayName = "Work Orders", 
        toClass = WODelivery.class, 
        reverseName = WODelivery.P_Delivery
    )
    public Hub<WODelivery> getWODeliveries() {
        if (hubWODeliveries == null) {
            hubWODeliveries = (Hub<WODelivery>) getHub(P_WODeliveries);
        }
        return hubWODeliveries;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        date = rs.getDate(3);
        if (date != null) this.date = new OADate(date);
        if (rs.getMetaData().getColumnCount() != 3) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
