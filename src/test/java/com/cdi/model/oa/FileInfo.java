// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
 
@OAClass(
    shortName = "fli",
    displayName = "File Info",
    displayProperty = "fileName"
)
@OATable(
)
public class FileInfo extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(FileInfo.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_LastDateTime = "LastDateTime";
    public static final String P_LastDateTime = "LastDateTime";
    public static final String PROPERTY_FileName = "FileName";
    public static final String P_FileName = "FileName";
    public static final String PROPERTY_Size = "Size";
    public static final String P_Size = "Size";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
     
     
    public static final String PROPERTY_Item = "Item";
    public static final String P_Item = "Item";
     
    protected volatile int id;
    protected volatile OADate created;
    protected volatile OADateTime lastDateTime;
    protected volatile String fileName;
    protected volatile int size;
    protected volatile String description;
     
     
    public FileInfo() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public FileInfo(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        OADate old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
     
    @OAProperty(displayName = "Last Date Time", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getLastDateTime() {
        return lastDateTime;
    }
    public void setLastDateTime(OADateTime newValue) {
        OADateTime old = lastDateTime;
        fireBeforePropertyChange(P_LastDateTime, old, newValue);
        this.lastDateTime = newValue;
        firePropertyChange(P_LastDateTime, old, this.lastDateTime);
    }
     
    @OAProperty(displayName = "File Name", maxLength = 125, displayLength = 20, isFileName = true)
    @OAColumn(maxLength = 125)
    public String getFileName() {
        return fileName;
    }
    public void setFileName(String newValue) {
        String old = fileName;
        fireBeforePropertyChange(P_FileName, old, newValue);
        this.fileName = newValue;
        firePropertyChange(P_FileName, old, this.fileName);
    }
     
    @OAProperty(displayLength = 6, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSize() {
        return size;
    }
    public void setSize(int newValue) {
        int old = size;
        fireBeforePropertyChange(P_Size, old, newValue);
        this.size = newValue;
        firePropertyChange(P_Size, old, this.size);
    }
     
    @OAProperty(maxLength = 150, displayLength = 20)
    @OAColumn(maxLength = 150)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
     
    @OAOne(
        reverseName = Item.P_FileInfo, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Item getItem() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.lastDateTime = new OADateTime(timestamp);
        this.fileName = rs.getString(4);
        this.size = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, FileInfo.P_Size, true);
        }
        this.description = rs.getString(6);
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
