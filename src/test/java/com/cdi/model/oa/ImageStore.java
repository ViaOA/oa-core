// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
 
@OAClass(
    shortName = "is",
    displayName = "Image",
    displayProperty = "name",
    sortProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "ImageStoreName", columns = {@OAIndexColumn(name = "Name")})
    }
)
public class ImageStore extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ImageStore.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Date = "Date";
    public static final String P_Date = "Date";
    public static final String PROPERTY_Bytes = "Bytes";
    public static final String P_Bytes = "Bytes";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_OrigFileName = "OrigFileName";
    public static final String P_OrigFileName = "OrigFileName";
    public static final String PROPERTY_Updated = "Updated";
    public static final String P_Updated = "Updated";
     
     
    public static final String PROPERTY_Item = "Item";
    public static final String P_Item = "Item";
    public static final String PROPERTY_SalesOrderNotes = "SalesOrderNotes";
    public static final String P_SalesOrderNotes = "SalesOrderNotes";
    public static final String PROPERTY_WebPart = "WebPart";
    public static final String P_WebPart = "WebPart";
     
    protected volatile int id;
    protected volatile OADate date;
    protected volatile transient byte[] bytes;
    protected volatile String name;
    protected volatile String origFileName;
    protected volatile OADate updated;
     
     
    public ImageStore() {
        if (!isLoading()) {
            setDate(new OADate());
        }
    }
     
    public ImageStore(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(name = "DateValue", sqlType = java.sql.Types.DATE)
    public OADate getDate() {
        return date;
    }
    public void setDate(OADate newValue) {
        OADate old = date;
        fireBeforePropertyChange(P_Date, old, newValue);
        this.date = newValue;
        firePropertyChange(P_Date, old, this.date);
    }
     
    @OAProperty(displayName = "Image", isBlob = true, columnLength = 5, hasCustomCode = true, isImageName = true)
    @OAColumn(sqlType = java.sql.Types.BLOB)
    public byte[] getBytes() {
        if (bytes == null) {
            bytes = getBlob(P_Bytes);
        }
        return bytes;
    }
    public void setBytes(byte[] newValue) {
        byte[] old = bytes;
        fireBeforePropertyChange(P_Bytes, old, newValue);
        this.bytes = newValue;
        firePropertyChange(P_Bytes, old, this.bytes);
        if (!isLoading()) setUpdated(new OADate());
    }
     
    @OAProperty(maxLength = 50, displayLength = 20, columnLength = 10)
    @OAColumn(maxLength = 50)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(displayName = "Original File", maxLength = 75, displayLength = 20, columnName = "Orig File", isProcessed = true, isFileName = true)
    @OAColumn(maxLength = 75)
    public String getOrigFileName() {
        return origFileName;
    }
    public void setOrigFileName(String newValue) {
        String old = origFileName;
        fireBeforePropertyChange(P_OrigFileName, old, newValue);
        this.origFileName = newValue;
        firePropertyChange(P_OrigFileName, old, this.origFileName);
    }
     
    @OAProperty(displayName = "Last Updated", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getUpdated() {
        return updated;
    }
    public void setUpdated(OADate newValue) {
        OADate old = updated;
        fireBeforePropertyChange(P_Updated, old, newValue);
        this.updated = newValue;
        firePropertyChange(P_Updated, old, this.updated);
    }
     
    @OAOne(
        reverseName = Item.P_ImageStore, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Item getItem() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAMany(
        displayName = "Sales Order Notes", 
        toClass = SalesOrderNote.class, 
        reverseName = SalesOrderNote.P_ImageStores, 
        createMethod = false
    )
    @OALinkTable(name = "ImageStoreSalesOrderNote", indexName = "SalesOrderNoteImageStore", columns = {"ImageStoreId"})
    private Hub<SalesOrderNote> getSalesOrderNotes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAOne(
        displayName = "Web Part", 
        reverseName = WebPart.P_ImageStore, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private WebPart getWebPart() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.date = new OADate(date);
        this.name = rs.getString(3);
        this.origFileName = rs.getString(4);
        date = rs.getDate(5);
        if (date != null) this.updated = new OADate(date);
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
