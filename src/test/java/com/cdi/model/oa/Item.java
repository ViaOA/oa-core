// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
 
@OAClass(
    shortName = "ite",
    displayName = "Item",
    displayProperty = "name",
    sortProperty = "name",
    estimatedTotal = 1000,
    filterClasses = {ItemActiveFilter.class},
    rootTreePropertyPaths = {
        "[ItemCategory]."+ItemCategory.P_Items, 
        "[WebPage]."+WebPage.P_WebParts+"."+WebPart.P_WebItems+"."+WebItem.P_Item
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "ItemCode", columns = {@OAIndexColumn(name = "Code")}),
        @OAIndex(name = "ItemQbListId", columns = {@OAIndexColumn(name = "QbListId")}),
        @OAIndex(name = "ItemFileInfo", fkey = true, columns = { @OAIndexColumn(name = "FileInfoId") }), 
        @OAIndex(name = "ItemImageStore", fkey = true, columns = { @OAIndexColumn(name = "ImageStoreId") }), 
        @OAIndex(name = "ItemItemCategory", fkey = true, columns = { @OAIndexColumn(name = "ItemCategoryId") }), 
        @OAIndex(name = "ItemMold", fkey = true, columns = { @OAIndexColumn(name = "MoldId") }), 
        @OAIndex(name = "ItemProductionArea", fkey = true, columns = { @OAIndexColumn(name = "ProductionAreaId") })
    }
)
public class Item extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Item.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
    public static final String PROPERTY_Image = "Image";
    public static final String P_Image = "Image";
    public static final String PROPERTY_Width = "Width";
    public static final String P_Width = "Width";
    public static final String PROPERTY_Height = "Height";
    public static final String P_Height = "Height";
    public static final String PROPERTY_Depth = "Depth";
    public static final String P_Depth = "Depth";
    public static final String PROPERTY_Weight = "Weight";
    public static final String P_Weight = "Weight";
    public static final String PROPERTY_SpecialOnly = "SpecialOnly";
    public static final String P_SpecialOnly = "SpecialOnly";
    public static final String PROPERTY_Price = "Price";
    public static final String P_Price = "Price";
    public static final String PROPERTY_DiscontinuedDate = "DiscontinuedDate";
    public static final String P_DiscontinuedDate = "DiscontinuedDate";
    public static final String PROPERTY_TermCode = "TermCode";
    public static final String P_TermCode = "TermCode";
    public static final String PROPERTY_IsProduced = "IsProduced";
    public static final String P_IsProduced = "IsProduced";
    public static final String PROPERTY_QbListId = "QbListId";
    public static final String P_QbListId = "QbListId";
    public static final String PROPERTY_LastChanged = "LastChanged";
    public static final String P_LastChanged = "LastChanged";
     
    public static final String PROPERTY_CodeName = "CodeName";
    public static final String P_CodeName = "CodeName";
     
    public static final String PROPERTY_FileInfo = "FileInfo";
    public static final String P_FileInfo = "FileInfo";
    public static final String PROPERTY_ImageStore = "ImageStore";
    public static final String P_ImageStore = "ImageStore";
    public static final String PROPERTY_ItemCategory = "ItemCategory";
    public static final String P_ItemCategory = "ItemCategory";
    public static final String PROPERTY_ItemQuotes = "ItemQuotes";
    public static final String P_ItemQuotes = "ItemQuotes";
    public static final String PROPERTY_Mold = "Mold";
    public static final String P_Mold = "Mold";
    public static final String PROPERTY_OpenOrderItems = "OpenOrderItems";
    public static final String P_OpenOrderItems = "OpenOrderItems";
    public static final String PROPERTY_OrderItems = "OrderItems";
    public static final String P_OrderItems = "OrderItems";
    public static final String PROPERTY_ProductionArea = "ProductionArea";
    public static final String P_ProductionArea = "ProductionArea";
    public static final String PROPERTY_SalesOrderItems = "SalesOrderItems";
    public static final String P_SalesOrderItems = "SalesOrderItems";
    public static final String PROPERTY_WebItems = "WebItems";
    public static final String P_WebItems = "WebItems";
     
    protected volatile int id;
    protected volatile String code;
    protected volatile String name;
    protected volatile String description;
    protected volatile String image;
    protected volatile double width;
    protected volatile double height;
    protected volatile double depth;
    protected volatile int weight;
    protected volatile boolean specialOnly;
    protected volatile double price;
    protected volatile OADate discontinuedDate;
    protected volatile String termCode;
    protected volatile boolean isProduced;
    protected volatile String qbListId;
    protected volatile OADateTime lastChanged;
     
    // Links to other objects.
    protected volatile transient FileInfo fileInfo;
    protected volatile transient ImageStore imageStore;
    protected volatile transient ItemCategory itemCategory;
    protected volatile transient Mold mold;
    protected transient Hub<OrderItem> hubOpenOrderItems;
    protected volatile transient ProductionArea productionArea;
    protected transient Hub<WebItem> hubWebItems;
     
    public Item() {
        if (!isLoading()) {
            getImageStore(); // have it autoCreated
        }
    }
     
    public Item(int id) {
        this();
        setId(id);
    }
     
    @OAObjCallback(contextEnabledProperty = AppUser.P_User+"."+User.P_CalcItemWriteAccess
    )
    public void onEditQuery(OAObjectCallback em) {
    }
    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 20, displayLength = 10, isCaseSensitive = true)
    @OAColumn(maxLength = 20)
    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
     
    @OAProperty(maxLength = 50, displayLength = 20, columnLength = 10)
    @OAColumn(maxLength = 50)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(maxLength = 75, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 75)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
     
    @OAProperty(maxLength = 75, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 75)
    public String getImage() {
        return image;
    }
    public void setImage(String newValue) {
        String old = image;
        fireBeforePropertyChange(P_Image, old, newValue);
        this.image = newValue;
        firePropertyChange(P_Image, old, this.image);
    }
     
    @OAProperty(decimalPlaces = 2, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getWidth() {
        return width;
    }
    public void setWidth(double newValue) {
        double old = width;
        fireBeforePropertyChange(P_Width, old, newValue);
        this.width = newValue;
        firePropertyChange(P_Width, old, this.width);
    }
     
    @OAProperty(decimalPlaces = 2, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getHeight() {
        return height;
    }
    public void setHeight(double newValue) {
        double old = height;
        fireBeforePropertyChange(P_Height, old, newValue);
        this.height = newValue;
        firePropertyChange(P_Height, old, this.height);
    }
     
    @OAProperty(decimalPlaces = 2, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getDepth() {
        return depth;
    }
    public void setDepth(double newValue) {
        double old = depth;
        fireBeforePropertyChange(P_Depth, old, newValue);
        this.depth = newValue;
        firePropertyChange(P_Depth, old, this.depth);
    }
     
    @OAProperty(displayLength = 6)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getWeight() {
        return weight;
    }
    public void setWeight(int newValue) {
        int old = weight;
        fireBeforePropertyChange(P_Weight, old, newValue);
        this.weight = newValue;
        firePropertyChange(P_Weight, old, this.weight);
    }
     
    @OAProperty(displayName = "Special", displayLength = 5, columnLength = 7)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getSpecialOnly() {
        return specialOnly;
    }
    public void setSpecialOnly(boolean newValue) {
        boolean old = specialOnly;
        fireBeforePropertyChange(P_SpecialOnly, old, newValue);
        this.specialOnly = newValue;
        firePropertyChange(P_SpecialOnly, old, this.specialOnly);
    }
     
    @OAProperty(decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getPrice() {
        return price;
    }
    public void setPrice(double newValue) {
        double old = price;
        fireBeforePropertyChange(P_Price, old, newValue);
        this.price = newValue;
        firePropertyChange(P_Price, old, this.price);
    }
    @OAObjCallback(contextEnabledProperty = AppUser.P_User+"."+User.P_CalcPricingWriteAccess, 
        contextVisibleProperty = AppUser.P_User+"."+User.P_CalcPricingReadAccess
    )
    public void onEditQueryPrice(OAObjectCallback em) {
    }
     
    @OAProperty(displayName = "Discontinued Date", displayLength = 8, columnLength = 9, columnName = "Disc Date")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDiscontinuedDate() {
        return discontinuedDate;
    }
    public void setDiscontinuedDate(OADate newValue) {
        OADate old = discontinuedDate;
        fireBeforePropertyChange(P_DiscontinuedDate, old, newValue);
        this.discontinuedDate = newValue;
        firePropertyChange(P_DiscontinuedDate, old, this.discontinuedDate);
    }
     
    @OAProperty(displayName = "Term Code", maxLength = 20, displayLength = 10)
    @OAColumn(maxLength = 20)
    public String getTermCode() {
        return termCode;
    }
    public void setTermCode(String newValue) {
        String old = termCode;
        fireBeforePropertyChange(P_TermCode, old, newValue);
        this.termCode = newValue;
        firePropertyChange(P_TermCode, old, this.termCode);
    }
     
    @OAProperty(displayName = "Is Produced", displayLength = 5, columnLength = 8, columnName = "Produced")
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getIsProduced() {
        return isProduced;
    }
    public void setIsProduced(boolean newValue) {
        boolean old = isProduced;
        fireBeforePropertyChange(P_IsProduced, old, newValue);
        this.isProduced = newValue;
        firePropertyChange(P_IsProduced, old, this.isProduced);
    }
     
    @OAProperty(displayName = "QuickBooks Id", maxLength = 40, displayLength = 10, columnName = "QB Id", isProcessed = true)
    @OAColumn(maxLength = 40)
    public String getQbListId() {
        return qbListId;
    }
    public void setQbListId(String newValue) {
        String old = qbListId;
        fireBeforePropertyChange(P_QbListId, old, newValue);
        this.qbListId = newValue;
        firePropertyChange(P_QbListId, old, this.qbListId);
    }
     
    @OAProperty(displayName = "Last Changed", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getLastChanged() {
        return lastChanged;
    }
    public void setLastChanged(OADateTime newValue) {
        OADateTime old = lastChanged;
        fireBeforePropertyChange(P_LastChanged, old, newValue);
        this.lastChanged = newValue;
        firePropertyChange(P_LastChanged, old, this.lastChanged);
    }
     
    @OACalculatedProperty(displayName = "Code Name", displayLength = 20, columnLength = 25, properties = {P_Name, P_Code})
    public String getCodeName() {
        String s = code;
        if (s == null) s += "";
        if (name != null) s += " - " + name;    
        return s;
    }
     
    @OAOne(
        displayName = "File Info", 
        reverseName = FileInfo.P_Item, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"FileInfoId"})
    public FileInfo getFileInfo() {
        if (fileInfo == null) {
            fileInfo = (FileInfo) getObject(P_FileInfo);
        }
        return fileInfo;
    }
    public void setFileInfo(FileInfo newValue) {
        FileInfo old = this.fileInfo;
        fireBeforePropertyChange(P_FileInfo, old, newValue);
        this.fileInfo = newValue;
        firePropertyChange(P_FileInfo, old, this.fileInfo);
    }
     
    @OAOne(
        displayName = "Image Store", 
        reverseName = ImageStore.P_Item, 
        cascadeSave = true, 
        autoCreateNew = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ImageStoreId"})
    public ImageStore getImageStore() {
        if (imageStore == null) {
            imageStore = (ImageStore) getObject(P_ImageStore);
        }
        return imageStore;
    }
    public void setImageStore(ImageStore newValue) {
        ImageStore old = this.imageStore;
        fireBeforePropertyChange(P_ImageStore, old, newValue);
        this.imageStore = newValue;
        firePropertyChange(P_ImageStore, old, this.imageStore);
    }
     
    @OAOne(
        displayName = "Item Category", 
        reverseName = ItemCategory.P_Items, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ItemCategoryId"})
    public ItemCategory getItemCategory() {
        if (itemCategory == null) {
            itemCategory = (ItemCategory) getObject(P_ItemCategory);
        }
        return itemCategory;
    }
    public void setItemCategory(ItemCategory newValue) {
        ItemCategory old = this.itemCategory;
        fireBeforePropertyChange(P_ItemCategory, old, newValue);
        this.itemCategory = newValue;
        firePropertyChange(P_ItemCategory, old, this.itemCategory);
    }
     
    @OAMany(
        displayName = "Item Quotes", 
        toClass = ItemQuote.class, 
        reverseName = ItemQuote.P_Item, 
        createMethod = false
    )
    private Hub<ItemQuote> getItemQuotes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAOne(
        reverseName = Mold.P_Items
    )
    @OAFkey(columns = {"MoldId"})
    public Mold getMold() {
        if (mold == null) {
            mold = (Mold) getObject(P_Mold);
        }
        return mold;
    }
    public void setMold(Mold newValue) {
        Mold old = this.mold;
        fireBeforePropertyChange(P_Mold, old, newValue);
        this.mold = newValue;
        firePropertyChange(P_Mold, old, this.mold);
    }
     
    @OAMany(
        displayName = "Open Order Items", 
        toClass = OrderItem.class, 
        isCalculated = true, 
        isServerSideCalc = true,
        reverseName = OrderItem.P_GroupByItem
    )
    public Hub<OrderItem> getOpenOrderItems() {
        if (hubOpenOrderItems == null) {
            hubOpenOrderItems = (Hub<OrderItem>) getHub(P_OpenOrderItems);
        }
        return hubOpenOrderItems;
    }
     
    @OAMany(
        displayName = "Order Items", 
        toClass = OrderItem.class, 
        reverseName = OrderItem.P_Item, 
        isProcessed = true, 
        createMethod = false
    )
    private Hub<OrderItem> getOrderItems() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAOne(
        displayName = "Production Area", 
        reverseName = ProductionArea.P_Items, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ProductionAreaId"})
    public ProductionArea getProductionArea() {
        if (productionArea == null) {
            productionArea = (ProductionArea) getObject(P_ProductionArea);
        }
        return productionArea;
    }
    public void setProductionArea(ProductionArea newValue) {
        ProductionArea old = this.productionArea;
        fireBeforePropertyChange(P_ProductionArea, old, newValue);
        this.productionArea = newValue;
        firePropertyChange(P_ProductionArea, old, this.productionArea);
    }
     
    @OAMany(
        displayName = "Sales Order Items", 
        toClass = SalesOrderItem.class, 
        reverseName = SalesOrderItem.P_Item, 
        createMethod = false
    )
    private Hub<SalesOrderItem> getSalesOrderItems() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAMany(
        displayName = "Web Items", 
        toClass = WebItem.class, 
        reverseName = WebItem.P_Item
    )
    public Hub<WebItem> getWebItems() {
        if (hubWebItems == null) {
            hubWebItems = (Hub<WebItem>) getHub(P_WebItems);
        }
        return hubWebItems;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.code = rs.getString(2);
        this.name = rs.getString(3);
        this.description = rs.getString(4);
        this.image = rs.getString(5);
        this.width = (double) rs.getDouble(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Item.P_Width, true);
        }
        this.height = (double) rs.getDouble(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Item.P_Height, true);
        }
        this.depth = (double) rs.getDouble(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Item.P_Depth, true);
        }
        this.weight = (int) rs.getInt(9);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Item.P_Weight, true);
        }
        this.specialOnly = (rs.getShort(10) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Item.P_SpecialOnly, true);
        }
        this.price = (double) rs.getDouble(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Item.P_Price, true);
        }
        java.sql.Date date;
        date = rs.getDate(12);
        if (date != null) this.discontinuedDate = new OADate(date);
        this.termCode = rs.getString(13);
        this.isProduced = (rs.getShort(14) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Item.P_IsProduced, true);
        }
        this.qbListId = rs.getString(15);
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(16);
        if (timestamp != null) this.lastChanged = new OADateTime(timestamp);
        int fileInfoFkey = rs.getInt(17);
        if (!rs.wasNull() && fileInfoFkey > 0) {
            setProperty(P_FileInfo, new OAObjectKey(fileInfoFkey));
        }
        int imageStoreFkey = rs.getInt(18);
        if (!rs.wasNull() && imageStoreFkey > 0) {
            setProperty(P_ImageStore, new OAObjectKey(imageStoreFkey));
        }
        int itemCategoryFkey = rs.getInt(19);
        if (!rs.wasNull() && itemCategoryFkey > 0) {
            setProperty(P_ItemCategory, new OAObjectKey(itemCategoryFkey));
        }
        int moldFkey = rs.getInt(20);
        if (!rs.wasNull() && moldFkey > 0) {
            setProperty(P_Mold, new OAObjectKey(moldFkey));
        }
        int productionAreaFkey = rs.getInt(21);
        if (!rs.wasNull() && productionAreaFkey > 0) {
            setProperty(P_ProductionArea, new OAObjectKey(productionAreaFkey));
        }
        if (rs.getMetaData().getColumnCount() != 21) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
