// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
 
@OAClass(
    shortName = "iao",
    displayName = "Item Add On",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "code",
    sortProperty = "code",
    filterClasses = {ItemAddOnActiveFilter.class}
)
@OATable(
)
public class ItemAddOn extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ItemAddOn.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
    public static final String PROPERTY_Price = "Price";
    public static final String P_Price = "Price";
    public static final String PROPERTY_DiscontinuedDate = "DiscontinuedDate";
    public static final String P_DiscontinuedDate = "DiscontinuedDate";
     
    public static final String PROPERTY_CodeName = "CodeName";
    public static final String P_CodeName = "CodeName";
     
    public static final String PROPERTY_ItemQuotes = "ItemQuotes";
    public static final String P_ItemQuotes = "ItemQuotes";
    public static final String PROPERTY_SalesOrderItems = "SalesOrderItems";
    public static final String P_SalesOrderItems = "SalesOrderItems";
     
    protected volatile int id;
    protected volatile String code;
    protected volatile String name;
    protected volatile String description;
    protected volatile double price;
    protected volatile OADate discontinuedDate;
     
     
    public ItemAddOn() {
    }
     
    public ItemAddOn(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 20, displayLength = 10)
    @OAColumn(maxLength = 20)
    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
     
    @OAProperty(maxLength = 50, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 50)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(maxLength = 75, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 75)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
     
    @OAProperty(decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getPrice() {
        return price;
    }
    public void setPrice(double newValue) {
        double old = price;
        fireBeforePropertyChange(P_Price, old, newValue);
        this.price = newValue;
        firePropertyChange(P_Price, old, this.price);
    }
    @OAObjCallback(contextEnabledProperty = AppUser.P_User+"."+User.P_CalcPricingWriteAccess, 
        contextVisibleProperty = AppUser.P_User+"."+User.P_CalcPricingReadAccess
    )
    public void onEditQueryPrice(OAObjectCallback em) {
    }
     
    @OAProperty(displayName = "Discontinued Date", displayLength = 8, columnLength = 9, columnName = "Disc Date")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDiscontinuedDate() {
        return discontinuedDate;
    }
    public void setDiscontinuedDate(OADate newValue) {
        OADate old = discontinuedDate;
        fireBeforePropertyChange(P_DiscontinuedDate, old, newValue);
        this.discontinuedDate = newValue;
        firePropertyChange(P_DiscontinuedDate, old, this.discontinuedDate);
    }
     
    @OACalculatedProperty(displayName = "Code Name", displayLength = 20, columnLength = 25, properties = {P_Name, P_Code})
    public String getCodeName() {
        String s = code;
        if (s == null) s += "";
        if (name != null) s += " - " + name;    
        return s;
    }
     
    @OAMany(
        displayName = "Item Quotes", 
        toClass = ItemQuote.class, 
        reverseName = ItemQuote.P_ItemAddOn, 
        createMethod = false
    )
    private Hub<ItemQuote> getItemQuotes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAMany(
        displayName = "Sales Order Items", 
        toClass = SalesOrderItem.class, 
        reverseName = SalesOrderItem.P_ItemAddOns, 
        createMethod = false
    )
    @OALinkTable(name = "ItemAddOnSalesOrderItem", indexName = "SalesOrderItemItemAddOn", columns = {"ItemAddOnId"})
    private Hub<SalesOrderItem> getSalesOrderItems() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.code = rs.getString(2);
        this.name = rs.getString(3);
        this.description = rs.getString(4);
        this.price = (double) rs.getDouble(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ItemAddOn.P_Price, true);
        }
        java.sql.Date date;
        date = rs.getDate(6);
        if (date != null) this.discontinuedDate = new OADate(date);
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
