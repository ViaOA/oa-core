// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ic",
    displayName = "Item Category",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name",
    rootTreePropertyPaths = {
        "[ItemCategory]"
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "ItemCategoryParentItemCategory", fkey = true, columns = { @OAIndexColumn(name = "ParentItemCategoryId") })
    }
)
public class ItemCategory extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ItemCategory.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
     
     
    public static final String PROPERTY_ItemCategories = "ItemCategories";
    public static final String P_ItemCategories = "ItemCategories";
    public static final String PROPERTY_Items = "Items";
    public static final String P_Items = "Items";
    public static final String PROPERTY_ParentItemCategory = "ParentItemCategory";
    public static final String P_ParentItemCategory = "ParentItemCategory";
     
    protected volatile int id;
    protected volatile String name;
    protected volatile String description;
     
    // Links to other objects.
    protected transient Hub<ItemCategory> hubItemCategories;
    protected transient Hub<Item> hubItems;
    protected volatile transient ItemCategory parentItemCategory;
     
    public ItemCategory() {
    }
     
    public ItemCategory(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 35, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(maxLength = 150, displayLength = 20)
    @OAColumn(maxLength = 150)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
     
    @OAMany(
        displayName = "Item Categories", 
        toClass = ItemCategory.class, 
        recursive = true, 
        reverseName = ItemCategory.P_ParentItemCategory, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<ItemCategory> getItemCategories() {
        if (hubItemCategories == null) {
            hubItemCategories = (Hub<ItemCategory>) getHub(P_ItemCategories);
        }
        return hubItemCategories;
    }
     
    @OAMany(
        toClass = Item.class, 
        reverseName = Item.P_ItemCategory
    )
    public Hub<Item> getItems() {
        if (hubItems == null) {
            hubItems = (Hub<Item>) getHub(P_Items);
        }
        return hubItems;
    }
     
    @OAOne(
        displayName = "Parent Item Category", 
        reverseName = ItemCategory.P_ItemCategories, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ParentItemCategoryId"})
    public ItemCategory getParentItemCategory() {
        if (parentItemCategory == null) {
            parentItemCategory = (ItemCategory) getObject(P_ParentItemCategory);
        }
        return parentItemCategory;
    }
    public void setParentItemCategory(ItemCategory newValue) {
        ItemCategory old = this.parentItemCategory;
        fireBeforePropertyChange(P_ParentItemCategory, old, newValue);
        this.parentItemCategory = newValue;
        firePropertyChange(P_ParentItemCategory, old, this.parentItemCategory);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.description = rs.getString(3);
        int parentItemCategoryFkey = rs.getInt(4);
        if (!rs.wasNull() && parentItemCategoryFkey > 0) {
            setProperty(P_ParentItemCategory, new OAObjectKey(parentItemCategoryFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
