// Generated by OABuilder
package com.cdi.model.oa;

import java.util.logging.Logger;

import com.viaoa.annotation.OACalculatedProperty;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAObjCallback;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCallback;
import com.viaoa.util.OAConv;

@OAClass(shortName = "iq", displayName = "Item Quote", isLookup = true, isPreSelect = true, useDataSource = false, localOnly = true, displayProperty = "item")
public class ItemQuote extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(ItemQuote.class.getName());

	public static final String PROPERTY_Id = "Id";
	public static final String P_Id = "Id";
	public static final String PROPERTY_Quantity = "Quantity";
	public static final String P_Quantity = "Quantity";

	public static final String PROPERTY_TotalItemOurPrice = "TotalItemOurPrice";
	public static final String P_TotalItemOurPrice = "TotalItemOurPrice";
	public static final String PROPERTY_ItemSellPrice = "ItemSellPrice";
	public static final String P_ItemSellPrice = "ItemSellPrice";
	public static final String PROPERTY_TotalSellPrice = "TotalSellPrice";
	public static final String P_TotalSellPrice = "TotalSellPrice";
	public static final String PROPERTY_TotalWeight = "TotalWeight";
	public static final String P_TotalWeight = "TotalWeight";

	public static final String PROPERTY_Item = "Item";
	public static final String P_Item = "Item";
	public static final String PROPERTY_ItemAddOn = "ItemAddOn";
	public static final String P_ItemAddOn = "ItemAddOn";
	public static final String PROPERTY_PriceCode = "PriceCode";
	public static final String P_PriceCode = "PriceCode";

	protected volatile int id;
	protected volatile int quantity;

	// Links to other objects.
	protected volatile transient Item item;
	protected volatile transient ItemAddOn itemAddOn;
	protected volatile transient PriceCode priceCode;

	public ItemQuote() {
	}

	public ItemQuote(int id) {
		this();
		setId(id);
	}

	@OAProperty(isUnique = true, displayLength = 6)
	@OAId()
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(displayLength = 6, columnLength = 8)
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int newValue) {
		int old = quantity;
		fireBeforePropertyChange(P_Quantity, old, newValue);
		this.quantity = newValue;
		firePropertyChange(P_Quantity, old, this.quantity);
	}

	@OACalculatedProperty(displayName = "Total Item Our Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 20, properties = {
			P_Item + "." + Item.P_Price, P_Quantity })
	public double getTotalItemOurPrice() {
		Item item = getItem();
		if (item == null) {
			return 0.0d;
		}
		double d = item.getPrice() * getQuantity();
		d = OAConv.round(d, 2);
		return d;
	}

	@OAObjCallback(contextVisibleProperty = AppUser.P_User + "." + User.P_CalcPricingReadAccess)
	public void totalItemOurPriceCallback(OAObjectCallback em) {
	}

	@OACalculatedProperty(displayName = "Item Sell Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 15, properties = {
			P_TotalItemOurPrice, P_PriceCode + "." + PriceCode.P_Rate, P_ItemAddOn + "." + ItemAddOn.P_Price })
	public double getItemSellPrice() {
		Item item = getItem();
		if (item == null) {
			return 0.0d;
		}
		double price = item.getPrice();
		PriceCode pc = getPriceCode();
		if (pc == null) {
			return 0.0d;
		}
		double rate = pc.getRate();
		rate += 100.0d;
		rate /= 100.0d;
		double bd = price * rate;
		bd = OAConv.round(bd, 2);

		ItemAddOn iao = getItemAddOn();
		if (iao != null) {
			bd += iao.getPrice();
			bd = OAConv.round(bd, 2);
		}
		return bd;
	}

	@OACalculatedProperty(displayName = "Total Sell Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 16, properties = {
			P_ItemSellPrice, P_Quantity })
	public double getTotalSellPrice() {
		double d = getItemSellPrice();
		d *= getQuantity();
		d = OAConv.round(d, 2);
		return d;
	}

	@OACalculatedProperty(displayName = "Total Weight", displayLength = 6, columnLength = 12, properties = { P_Item + "." + Item.P_Weight,
			P_Quantity })
	public int getTotalWeight() {
		Item item = getItem();
		if (item == null) {
			return 0;
		}
		int x = item.getWeight() * getQuantity();
		return x;
	}

	@OAOne(reverseName = Item.P_ItemQuotes, allowCreateNew = false)
	@OAFkey(columns = { "ItemId" })
	public Item getItem() {
		if (item == null) {
			item = (Item) getObject(P_Item);
		}
		return item;
	}

	public void setItem(Item newValue) {
		Item old = this.item;
		fireBeforePropertyChange(P_Item, old, newValue);
		this.item = newValue;
		firePropertyChange(P_Item, old, this.item);
	}

	@OAOne(displayName = "Item Add On", reverseName = ItemAddOn.P_ItemQuotes, allowCreateNew = false)
	@OAFkey(columns = { "ItemAddOnId" })
	public ItemAddOn getItemAddOn() {
		if (itemAddOn == null) {
			itemAddOn = (ItemAddOn) getObject(P_ItemAddOn);
		}
		return itemAddOn;
	}

	public void setItemAddOn(ItemAddOn newValue) {
		ItemAddOn old = this.itemAddOn;
		fireBeforePropertyChange(P_ItemAddOn, old, newValue);
		this.itemAddOn = newValue;
		firePropertyChange(P_ItemAddOn, old, this.itemAddOn);
	}

	@OAOne(displayName = "Price Code", reverseName = PriceCode.P_ItemQuotes, allowCreateNew = false)
	@OAFkey(columns = { "PriceCodeId" })
	public PriceCode getPriceCode() {
		if (priceCode == null) {
			priceCode = (PriceCode) getObject(P_PriceCode);
		}
		return priceCode;
	}

	public void setPriceCode(PriceCode newValue) {
		PriceCode old = this.priceCode;
		fireBeforePropertyChange(P_PriceCode, old, newValue);
		this.priceCode = newValue;
		firePropertyChange(P_PriceCode, old, this.priceCode);
	}

}
