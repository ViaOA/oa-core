// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "mol",
    displayName = "Mold",
    displayProperty = "code",
    sortProperty = "code"
)
@OATable(
    indexes = {
        @OAIndex(name = "MoldCode", columns = {@OAIndexColumn(name = "Code")})
    }
)
public class Mold extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Mold.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Location = "Location";
    public static final String P_Location = "Location";
    public static final String PROPERTY_OnHand = "OnHand";
    public static final String P_OnHand = "OnHand";
    public static final String PROPERTY_Length = "Length";
    public static final String P_Length = "Length";
    public static final String PROPERTY_PerPallet = "PerPallet";
    public static final String P_PerPallet = "PerPallet";
    public static final String PROPERTY_PerHalfCircle = "PerHalfCircle";
    public static final String P_PerHalfCircle = "PerHalfCircle";
    public static final String PROPERTY_Notes = "Notes";
    public static final String P_Notes = "Notes";
     
    public static final String PROPERTY_CodeName = "CodeName";
    public static final String P_CodeName = "CodeName";
     
    public static final String PROPERTY_Items = "Items";
    public static final String P_Items = "Items";
     
    protected volatile int id;
    protected volatile String code;
    protected volatile String name;
    protected volatile String location;
    protected volatile int onHand;
    protected volatile int length;
    protected volatile int perPallet;
    protected volatile int perHalfCircle;
    protected volatile String notes;
     
    // Links to other objects.
    protected transient Hub<Item> hubItems;
     
    public Mold() {
    }
     
    public Mold(int id) {
        this();
        setId(id);
    }
     
    @OAObjCallback(contextEnabledProperty = AppUser.P_User+"."+User.P_CalcItemWriteAccess
    )
    public void onEditQuery(OAObjectCallback em) {
    }
    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 20, displayLength = 10, isCaseSensitive = true)
    @OAColumn(maxLength = 20)
    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(description = "location of the mold", maxLength = 35, displayLength = 20, columnLength = 10)
    @OAColumn(maxLength = 35)
    /**
      location of the mold
    */
    public String getLocation() {
        return location;
    }
    public void setLocation(String newValue) {
        String old = location;
        fireBeforePropertyChange(P_Location, old, newValue);
        this.location = newValue;
        firePropertyChange(P_Location, old, this.location);
    }
     
    @OAProperty(displayName = "On Hand", displayLength = 6, columnLength = 7)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getOnHand() {
        return onHand;
    }
    public void setOnHand(int newValue) {
        int old = onHand;
        fireBeforePropertyChange(P_OnHand, old, newValue);
        this.onHand = newValue;
        firePropertyChange(P_OnHand, old, this.onHand);
    }
     
    @OAProperty(displayLength = 6)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getLength() {
        return length;
    }
    public void setLength(int newValue) {
        int old = length;
        fireBeforePropertyChange(P_Length, old, newValue);
        this.length = newValue;
        firePropertyChange(P_Length, old, this.length);
    }
     
    @OAProperty(displayName = "Quantity per Pallet", displayLength = 6, columnLength = 10, columnName = "Per Pallet")
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getPerPallet() {
        return perPallet;
    }
    public void setPerPallet(int newValue) {
        int old = perPallet;
        fireBeforePropertyChange(P_PerPallet, old, newValue);
        this.perPallet = newValue;
        firePropertyChange(P_PerPallet, old, this.perPallet);
    }
     
    @OAProperty(displayName = "Quantity per 180", description = "quantity to make a 180 degree.", displayLength = 6, columnLength = 7, columnName = "Qty/180")
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      quantity to make a 180 degree.
    */
    public int getPerHalfCircle() {
        return perHalfCircle;
    }
    public void setPerHalfCircle(int newValue) {
        int old = perHalfCircle;
        fireBeforePropertyChange(P_PerHalfCircle, old, newValue);
        this.perHalfCircle = newValue;
        firePropertyChange(P_PerHalfCircle, old, this.perHalfCircle);
    }
     
    @OAProperty(maxLength = 254, displayLength = 20)
    @OAColumn(maxLength = 254)
    public String getNotes() {
        return notes;
    }
    public void setNotes(String newValue) {
        String old = notes;
        fireBeforePropertyChange(P_Notes, old, newValue);
        this.notes = newValue;
        firePropertyChange(P_Notes, old, this.notes);
    }
     
    @OACalculatedProperty(displayName = "Display", displayLength = 7, properties = {P_Code, P_Name})
    public String getCodeName() {
        String s = code;
        if (s == null) s += "";
        if (name != null) s += " - " + name;    
        return s;
    }
     
    @OAMany(
        toClass = Item.class, 
        reverseName = Item.P_Mold
    )
    public Hub<Item> getItems() {
        if (hubItems == null) {
            hubItems = (Hub<Item>) getHub(P_Items);
        }
        return hubItems;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.code = rs.getString(2);
        this.name = rs.getString(3);
        this.location = rs.getString(4);
        this.onHand = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Mold.P_OnHand, true);
        }
        this.length = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Mold.P_Length, true);
        }
        this.perPallet = (int) rs.getInt(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Mold.P_PerPallet, true);
        }
        this.perHalfCircle = (int) rs.getInt(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Mold.P_PerHalfCircle, true);
        }
        this.notes = rs.getString(9);
        if (rs.getMetaData().getColumnCount() != 9) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
