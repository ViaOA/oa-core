// Generated by OABuilder
package com.cdi.model.oa;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

import com.cdi.model.oa.filter.OrderInvalidFilter;
import com.cdi.model.oa.filter.OrderOpenFilter;
import com.viaoa.annotation.OACalculatedProperty;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAIndex;
import com.viaoa.annotation.OAIndexColumn;
import com.viaoa.annotation.OAMany;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAObjCallback;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.annotation.OATable;
import com.viaoa.hub.Hub;
import com.viaoa.hub.HubEvent;
import com.viaoa.hub.HubListenerAdapter;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCallback;
import com.viaoa.object.OAObjectInfoDelegate;
import com.viaoa.object.OAObjectKey;
import com.viaoa.util.OAConv;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;

@OAClass(shortName = "ord", displayName = "Order", isProcessed = true, displayProperty = "salesOrderNumber", sortProperty = "salesOrderNumber", filterClasses = {
		OrderOpenFilter.class, OrderInvalidFilter.class })
@OATable(name = "OrderTable", indexes = {
		@OAIndex(name = "OrderTableSalesOrderNumber", columns = { @OAIndexColumn(name = "SalesOrderNumber") }),
		@OAIndex(name = "OrderTableQbListId", columns = { @OAIndexColumn(name = "QbListId") }),
		@OAIndex(name = "OrderColorCode", fkey = true, columns = { @OAIndexColumn(name = "ColorCodeId") }),
		@OAIndex(name = "OrderCustomer", fkey = true, columns = { @OAIndexColumn(name = "CustomerId") }),
		@OAIndex(name = "OrderRegion", fkey = true, columns = { @OAIndexColumn(name = "RegionId") }),
		@OAIndex(name = "OrderTableSalesOrder", fkey = true, columns = { @OAIndexColumn(name = "SalesOrderId") }),
		@OAIndex(name = "OrderShipTo", fkey = true, columns = { @OAIndexColumn(name = "ShipToId") }),
		@OAIndex(name = "OrderTexture", fkey = true, columns = { @OAIndexColumn(name = "TextureId") })
})
public class Order extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(Order.class.getName());

	public static final String PROPERTY_Id = "Id";
	public static final String P_Id = "Id";
	public static final String PROPERTY_Date = "Date";
	public static final String P_Date = "Date";
	public static final String PROPERTY_SalesOrderNumber = "SalesOrderNumber";
	public static final String P_SalesOrderNumber = "SalesOrderNumber";
	public static final String PROPERTY_TotalPrice = "TotalPrice";
	public static final String P_TotalPrice = "TotalPrice";
	public static final String PROPERTY_ReleasedDate = "ReleasedDate";
	public static final String P_ReleasedDate = "ReleasedDate";
	public static final String PROPERTY_CustExpectedDate = "CustExpectedDate";
	public static final String P_CustExpectedDate = "CustExpectedDate";
	public static final String PROPERTY_ExpectedShipDate = "ExpectedShipDate";
	public static final String P_ExpectedShipDate = "ExpectedShipDate";
	public static final String PROPERTY_ExpectedProductionEndDate = "ExpectedProductionEndDate";
	public static final String P_ExpectedProductionEndDate = "ExpectedProductionEndDate";
	public static final String PROPERTY_InspectByDate = "InspectByDate";
	public static final String P_InspectByDate = "InspectByDate";
	public static final String PROPERTY_InspectedDate = "InspectedDate";
	public static final String P_InspectedDate = "InspectedDate";
	public static final String PROPERTY_DateCompleted = "DateCompleted";
	public static final String P_DateCompleted = "DateCompleted";
	public static final String PROPERTY_CustomerPickUp = "CustomerPickUp";
	public static final String P_CustomerPickUp = "CustomerPickUp";
	public static final String PROPERTY_QbListId = "QbListId";
	public static final String P_QbListId = "QbListId";
	public static final String PROPERTY_Notes = "Notes";
	public static final String P_Notes = "Notes";
	public static final String PROPERTY_DeleteDate = "DeleteDate";
	public static final String P_DeleteDate = "DeleteDate";
	public static final String PROPERTY_LastUpdate = "LastUpdate";
	public static final String P_LastUpdate = "LastUpdate";

	public static final String PROPERTY_IsOpen = "IsOpen";
	public static final String P_IsOpen = "IsOpen";
	public static final String PROPERTY_CalcMinimumDays = "CalcMinimumDays";
	public static final String P_CalcMinimumDays = "CalcMinimumDays";
	public static final String PROPERTY_CalcFlags = "CalcFlags";
	public static final String P_CalcFlags = "CalcFlags";
	public static final String PROPERTY_CalcTotalWeight = "CalcTotalWeight";
	public static final String P_CalcTotalWeight = "CalcTotalWeight";
	public static final String PROPERTY_CalcDeliveryCharge = "CalcDeliveryCharge";
	public static final String P_CalcDeliveryCharge = "CalcDeliveryCharge";
	public static final String PROPERTY_IsValidQuantity = "IsValidQuantity";
	public static final String P_IsValidQuantity = "IsValidQuantity";
	public static final String PROPERTY_IsValid = "IsValid";
	public static final String P_IsValid = "IsValid";
	public static final String PROPERTY_CalcPaymentStatus = "CalcPaymentStatus";
	public static final String P_CalcPaymentStatus = "CalcPaymentStatus";
	public static final String PROPERTY_UnshippedPrice = "UnshippedPrice";
	public static final String P_UnshippedPrice = "UnshippedPrice";
	public static final String PROPERTY_CalcScheduledEndDate = "CalcScheduledEndDate";
	public static final String P_CalcScheduledEndDate = "CalcScheduledEndDate";

	public static final String PROPERTY_ColorCode = "ColorCode";
	public static final String P_ColorCode = "ColorCode";
	public static final String PROPERTY_Customer = "Customer";
	public static final String P_Customer = "Customer";
	public static final String PROPERTY_OrderContacts = "OrderContacts";
	public static final String P_OrderContacts = "OrderContacts";
	public static final String PROPERTY_OrderItems = "OrderItems";
	public static final String P_OrderItems = "OrderItems";
	public static final String PROPERTY_OrderNotes = "OrderNotes";
	public static final String P_OrderNotes = "OrderNotes";
	public static final String PROPERTY_Region = "Region";
	public static final String P_Region = "Region";
	public static final String PROPERTY_SalesOrder = "SalesOrder";
	public static final String P_SalesOrder = "SalesOrder";
	public static final String PROPERTY_ShipTo = "ShipTo";
	public static final String P_ShipTo = "ShipTo";
	public static final String PROPERTY_Texture = "Texture";
	public static final String P_Texture = "Texture";
	public static final String PROPERTY_WorkOrders = "WorkOrders";
	public static final String P_WorkOrders = "WorkOrders";

	public static final String METHOD_CreateWorkOrder = "CreateWorkOrder";
	public static final String M_CreateWorkOrder = "CreateWorkOrder";
	public static final String METHOD_UpdateWorkOrders = "UpdateWorkOrders";
	public static final String M_UpdateWorkOrders = "UpdateWorkOrders";
	protected volatile int id;
	protected volatile OADate date;
	protected volatile String salesOrderNumber;
	protected volatile double totalPrice;
	protected volatile OADate releasedDate;
	protected volatile OADate custExpectedDate;
	protected volatile OADate expectedShipDate;
	protected volatile OADate expectedProductionEndDate;
	protected volatile OADate inspectByDate;
	protected volatile OADate inspectedDate;
	protected volatile OADate dateCompleted;
	protected volatile boolean customerPickUp;
	protected volatile String qbListId;
	protected volatile String notes;
	protected volatile OADate deleteDate;
	protected volatile OADateTime lastUpdate;

	// Links to other objects.
	protected volatile transient ColorCode colorCode;
	protected volatile transient Customer customer;
	protected transient Hub<OrderContact> hubOrderContacts;
	protected transient Hub<OrderItem> hubOrderItems;
	protected transient Hub<OrderNote> hubOrderNotes;
	protected volatile transient Region region;
	protected volatile transient SalesOrder salesOrder;
	protected volatile transient ShipTo shipTo;
	protected volatile transient Texture texture;
	protected transient Hub<WorkOrder> hubWorkOrders;

	public Order() {
	}

	public Order(int id) {
		this();
		setId(id);
	}

	@OAObjCallback(contextEnabledProperty = AppUser.P_User + "." + User.P_CalcProductionWriteAccess)
	public void callback(OAObjectCallback em) {
	}

	@OAProperty(isUnique = true, displayLength = 6)
	@OAId()
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(displayName = "Date Created", displayLength = 8, columnName = "Created", isProcessed = true)
	@OAColumn(name = "DateValue", sqlType = java.sql.Types.DATE)
	public OADate getDate() {
		return date;
	}

	public void setDate(OADate newValue) {
		OADate old = date;
		fireBeforePropertyChange(P_Date, old, newValue);
		this.date = newValue;
		firePropertyChange(P_Date, old, this.date);
	}

	@OAProperty(displayName = "Sales Order Number", maxLength = 25, displayLength = 10, columnName = "Sales Ord#", isProcessed = true)
	@OAColumn(maxLength = 25)
	public String getSalesOrderNumber() {
		return salesOrderNumber;
	}

	public void setSalesOrderNumber(String newValue) {
		String old = salesOrderNumber;
		fireBeforePropertyChange(P_SalesOrderNumber, old, newValue);
		this.salesOrderNumber = newValue;
		firePropertyChange(P_SalesOrderNumber, old, this.salesOrderNumber);
	}

	@OAProperty(displayName = "Total Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 11, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.DOUBLE)
	public double getTotalPrice() {
		return totalPrice;
	}

	public void setTotalPrice(double newValue) {
		double old = totalPrice;
		fireBeforePropertyChange(P_TotalPrice, old, newValue);
		this.totalPrice = newValue;
		firePropertyChange(P_TotalPrice, old, this.totalPrice);
	}

	@OAProperty(displayName = "Released Date", displayLength = 8, columnName = "Released", isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.DATE)
	public OADate getReleasedDate() {
		return releasedDate;
	}

	public void setReleasedDate(OADate newValue) {
		OADate old = releasedDate;
		fireBeforePropertyChange(P_ReleasedDate, old, newValue);
		this.releasedDate = newValue;
		firePropertyChange(P_ReleasedDate, old, this.releasedDate);
	}

	@OAProperty(displayName = "Cust Expected Date", displayLength = 8, columnLength = 13, columnName = "Cust Exp Date")
	@OAColumn(sqlType = java.sql.Types.DATE)
	public OADate getCustExpectedDate() {
		return custExpectedDate;
	}

	public void setCustExpectedDate(OADate newValue) {
		OADate old = custExpectedDate;
		fireBeforePropertyChange(P_CustExpectedDate, old, newValue);
		this.custExpectedDate = newValue;
		firePropertyChange(P_CustExpectedDate, old, this.custExpectedDate);
	}

	@OAProperty(displayName = "Expected Ship Date", displayLength = 8, columnLength = 18)
	@OAColumn(sqlType = java.sql.Types.DATE)
	public OADate getExpectedShipDate() {
		return expectedShipDate;
	}

	public void setExpectedShipDate(OADate newValue) {
		OADate old = expectedShipDate;
		fireBeforePropertyChange(P_ExpectedShipDate, old, newValue);
		this.expectedShipDate = newValue;
		firePropertyChange(P_ExpectedShipDate, old, this.expectedShipDate);
	}

	@OAProperty(displayName = "Expected Production Date End", description = "NOT USED, see calcScheduledEndDate", displayLength = 8, columnLength = 22, columnName = "Expected Prod End Date")
	@OAColumn(sqlType = java.sql.Types.DATE)
	/**
	 * NOT USED, see calcScheduledEndDate
	 */
	public OADate getExpectedProductionEndDate() {
		return expectedProductionEndDate;
	}

	public void setExpectedProductionEndDate(OADate newValue) {
		OADate old = expectedProductionEndDate;
		fireBeforePropertyChange(P_ExpectedProductionEndDate, old, newValue);
		this.expectedProductionEndDate = newValue;
		firePropertyChange(P_ExpectedProductionEndDate, old, this.expectedProductionEndDate);
	}

	@OAProperty(displayName = "Inspect By Date", displayLength = 8, columnLength = 10, columnName = "Inspect By")
	@OAColumn(sqlType = java.sql.Types.DATE)
	public OADate getInspectByDate() {
		return inspectByDate;
	}

	public void setInspectByDate(OADate newValue) {
		OADate old = inspectByDate;
		fireBeforePropertyChange(P_InspectByDate, old, newValue);
		this.inspectByDate = newValue;
		firePropertyChange(P_InspectByDate, old, this.inspectByDate);
	}

	@OAProperty(displayName = "Inspected Date", displayLength = 8, columnLength = 14)
	@OAColumn(sqlType = java.sql.Types.DATE)
	public OADate getInspectedDate() {
		return inspectedDate;
	}

	public void setInspectedDate(OADate newValue) {
		OADate old = inspectedDate;
		fireBeforePropertyChange(P_InspectedDate, old, newValue);
		this.inspectedDate = newValue;
		firePropertyChange(P_InspectedDate, old, this.inspectedDate);
	}

	@OAProperty(displayName = "Date Completed", displayLength = 8, columnLength = 14)
	@OAColumn(sqlType = java.sql.Types.DATE)
	public OADate getDateCompleted() {
		return dateCompleted;
	}

	public void setDateCompleted(OADate newValue) {
		OADate old = dateCompleted;
		fireBeforePropertyChange(P_DateCompleted, old, newValue);
		this.dateCompleted = newValue;
		firePropertyChange(P_DateCompleted, old, this.dateCompleted);
	}

	@OAProperty(displayName = "Customer Pick Up", displayLength = 5, columnLength = 12, columnName = "Cust Pick Up", isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.BOOLEAN)
	public boolean getCustomerPickUp() {
		return customerPickUp;
	}

	public void setCustomerPickUp(boolean newValue) {
		boolean old = customerPickUp;
		fireBeforePropertyChange(P_CustomerPickUp, old, newValue);
		this.customerPickUp = newValue;
		firePropertyChange(P_CustomerPickUp, old, this.customerPickUp);
	}

	@OAProperty(displayName = "Qb List Id", maxLength = 40, displayLength = 10, columnName = "QB Id", isProcessed = true)
	@OAColumn(maxLength = 40)
	public String getQbListId() {
		return qbListId;
	}

	public void setQbListId(String newValue) {
		String old = qbListId;
		fireBeforePropertyChange(P_QbListId, old, newValue);
		this.qbListId = newValue;
		firePropertyChange(P_QbListId, old, this.qbListId);
	}

	@OAProperty(displayLength = 20, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.CLOB)
	public String getNotes() {
		return notes;
	}

	public void setNotes(String newValue) {
		String old = notes;
		fireBeforePropertyChange(P_Notes, old, newValue);
		this.notes = newValue;
		firePropertyChange(P_Notes, old, this.notes);
	}

	@OAProperty(displayName = "Delete Date", displayLength = 8, columnLength = 11, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.DATE)
	public OADate getDeleteDate() {
		return deleteDate;
	}

	public void setDeleteDate(OADate newValue) {
		OADate old = deleteDate;
		fireBeforePropertyChange(P_DeleteDate, old, newValue);
		this.deleteDate = newValue;
		firePropertyChange(P_DeleteDate, old, this.deleteDate);
	}

	@OAProperty(displayName = "Last Update", displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getLastUpdate() {
		return lastUpdate;
	}

	public void setLastUpdate(OADateTime newValue) {
		OADateTime old = lastUpdate;
		fireBeforePropertyChange(P_LastUpdate, old, newValue);
		this.lastUpdate = newValue;
		firePropertyChange(P_LastUpdate, old, this.lastUpdate);
	}

	@OACalculatedProperty(displayName = "Is Open", displayLength = 2, columnLength = 7, properties = { P_DateCompleted, P_DeleteDate })
	public boolean getIsOpen() {
		if (this.getDateCompleted() != null) {
			return false;
		}
		if (this.getDeleteDate() != null) {
			return false;
		}
		;
		return true;
	}

	@OACalculatedProperty(displayName = "Total Days", description = "based on all of the items for the order", displayLength = 3, columnLength = 10, properties = {
			P_OrderItems + "." + OrderItem.P_CalcMinimumDays })
	public int getCalcMinimumDays() {
		Hub h = getOrderItems();
		int max = 0;
		for (int i = 0;; i++) {
			OrderItem oi = (OrderItem) h.getAt(i);
			if (oi == null) {
				break;
			}
			max = Math.max(max, oi.getCalcMinimumDays());
		}
		return max;
	}

	@OACalculatedProperty(displayName = "Flags", displayLength = 5, properties = { P_Notes, P_OrderNotes + "." + OrderNote.P_Note,
			P_ShipTo + "." + ShipTo.P_Notes, P_ShipTo + "." + ShipTo.P_Instructions })
	public String getCalcFlags() {
		String flag = "";

		Hub h = getOrderNotes();
		for (int i = 0;; i++) {
			OrderNote note = (OrderNote) h.getAt(i);
			if (note == null) {
				break;
			}
			String s = note.getNote();
			if (s != null && s.length() > 0) {
				flag += "N";
				break;
			}
		}

		ShipTo st = getShipTo();
		if (st != null) {
			String s = st.getInstructions();
			if (s != null && s.length() > 0) {
				if (flag.length() > 0) {
					flag += ",";
				}
				flag += "I";
			}
			s = st.getNotes();
			if (s != null && s.length() > 0) {
				if (flag.length() > 0) {
					flag += ",";
				}
				flag += "Sn";
			}
		}
		return flag;
	}

	@OACalculatedProperty(displayName = "Total Weight", displayLength = 5, columnLength = 9, properties = {
			P_OrderItems + "." + OrderItem.P_Quantity, P_OrderItems + "." + OrderItem.P_Item + "." + Item.P_Weight })
	public int getCalcTotalWeight() {
		Hub<OrderItem> hub = getOrderItems();
		int tot = 0;
		for (OrderItem oi : hub) {
			int q = oi.getQuantity();
			if (q == 0) {
				continue;
			}
			Item item = oi.getItem();
			if (item == null) {
				continue;
			}
			tot += q * item.getWeight();
		}
		return tot;
	}

	@OACalculatedProperty(displayName = "Delivery Charge", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnName = "Dlvr Chrg", properties = {
			P_OrderItems + "." + OrderItem.P_Item + "." + Item.P_Code })
	public double getCalcDeliveryCharge() {
		for (OrderItem oi : getOrderItems()) {
			Item item = oi.getItem();
			if (item != null && "99050020".equals(item.getCode())) {
				return oi.getExtendedAmount();
			}
		}
		return 0.0;
	}

	@OACalculatedProperty(displayName = "Is Valid Quantity", displayLength = 2, columnLength = 12, columnName = "Is Valid Qty", properties = {
			P_OrderItems + "." + OrderItem.P_IsValidQuantity })
	public boolean getIsValidQuantity() {
		for (OrderItem oi : getOrderItems()) {
			if (!oi.getIsValidQuantity()) {
				return false;
			}
		}
		return true;
	}

	@OACalculatedProperty(displayName = "Is Valid", displayLength = 2, columnLength = 8, properties = { P_IsValidQuantity, P_DateCompleted,
			P_DeleteDate })
	public boolean getIsValid() {
		if (this.getDateCompleted() != null) {
			return true;
		}
		if (this.getDeleteDate() != null) {
			return true;
		}
		;
		boolean b = this.getIsValidQuantity();
		return b;
	}

	@OACalculatedProperty(displayName = "Payment Status", displayLength = 6, columnLength = 10, properties = {
			P_Customer + "." + Customer.P_CurrentBalance, P_TotalPrice })
	public int getCalcPaymentStatus() {
		int result = Order.PAYMENTSTATUS_UNPAID;
		Customer customer = this.getCustomer();
		if (customer == null) {
			return result;
		}
		double balance = customer.getCurrentBalance();

		double orderTotal = this.getTotalPrice();
		int x = OAConv.compare(balance, orderTotal, 2);

		if (x == 0) {
			result = Order.PAYMENTSTATUS_PAID;
		} else if (balance > 0) {
			result = Order.PAYMENTSTATUS_PARTIAL;
		} else {
			result = Order.PAYMENTSTATUS_UNPAID;
		}
		return result;
	}

	public static final int PAYMENTSTATUS_UNPAID = 0;
	public static final int PAYMENTSTATUS_PARTIAL = 1;
	public static final int PAYMENTSTATUS_PAID = 2;
	public static final Hub<String> hubPaymentStatus;
	static {
		hubPaymentStatus = new Hub<String>(String.class);
		hubPaymentStatus.addElement("Unpaid");
		hubPaymentStatus.addElement("Partial");
		hubPaymentStatus.addElement("Paid");
	}

	@OACalculatedProperty(displayName = "Unshipped Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 15, properties = {
			P_OrderItems + "." + OrderItem.P_UnshippedPrice })
	public double getRemainingPrice() {
		return getUnshippedPrice();
	}

	public double getUnshippedPrice() {
		double d = 0;
		Hub<OrderItem> hubOrderItems = this.getOrderItems();
		for (OrderItem orderItem : hubOrderItems) {
			d += orderItem.getUnshippedPrice();
		}
		return d;
	}

	@OACalculatedProperty(displayName = "Calc Scheduled End Date", displayLength = 8, columnLength = 23, properties = {
			P_WorkOrders + "." + WorkOrder.P_ScheduledEndDate })
	public OADate getCalcScheduledEndDate() {
		OADate date = null;
		for (WorkOrder workOrder : getWorkOrders()) {
			OADate d = workOrder.getScheduledEndDate();
			if (d != null && (date == null || d.before(date))) {
				date = d;
			}
		}
		return date;
	}

	@OAOne(displayName = "Color Code", reverseName = ColorCode.P_Orders, allowCreateNew = false)
	@OAFkey(columns = { "ColorCodeId" })
	public ColorCode getColorCode() {
		if (colorCode == null) {
			colorCode = (ColorCode) getObject(P_ColorCode);
		}
		return colorCode;
	}

	public void setColorCode(ColorCode newValue) {
		ColorCode old = this.colorCode;
		fireBeforePropertyChange(P_ColorCode, old, newValue);
		this.colorCode = newValue;
		firePropertyChange(P_ColorCode, old, this.colorCode);
	}

	@OAObjCallback(contextEnabledProperty = AppUser.P_Admin)
	public void colorCodeCallback(OAObjectCallback em) {
	}

	@OAOne(reverseName = Customer.P_Orders, isProcessed = true, allowCreateNew = false, allowAddExisting = false)
	@OAFkey(columns = { "CustomerId" })
	public Customer getCustomer() {
		if (customer == null) {
			customer = (Customer) getObject(P_Customer);
		}
		return customer;
	}

	public void setCustomer(Customer newValue) {
		Customer old = this.customer;
		fireBeforePropertyChange(P_Customer, old, newValue);
		this.customer = newValue;
		firePropertyChange(P_Customer, old, this.customer);
	}

	@OAMany(displayName = "Order Contacts", toClass = OrderContact.class, owner = true, reverseName = OrderContact.P_Order, cascadeSave = true, cascadeDelete = true)
	public Hub<OrderContact> getOrderContacts() {
		if (hubOrderContacts == null) {
			hubOrderContacts = (Hub<OrderContact>) getHub(P_OrderContacts);
		}
		return hubOrderContacts;
	}

	@OAMany(displayName = "Order Items", toClass = OrderItem.class, owner = true, reverseName = OrderItem.P_Order, isProcessed = true, cascadeSave = true, cascadeDelete = true, sortProperty = OrderItem.P_LineNumber)
	public Hub<OrderItem> getOrderItems() {
		if (hubOrderItems == null) {
			hubOrderItems = (Hub<OrderItem>) getHub(P_OrderItems);
			if (isServer()) {
				hubOrderItems.addHubListener(new HubListenerAdapter<OrderItem>() {
					@Override
					public void afterAdd(HubEvent e) {
						updateWorkOrders();
					}

					@Override
					public void afterInsert(HubEvent e) {
						updateWorkOrders();
					}

					@Override
					public void afterRemove(HubEvent e) {
						updateWorkOrders();
					}

					@Override
					public void onNewList(HubEvent e) {
						updateWorkOrders();
					}
				});
				updateWorkOrders();
			}
		}
		return hubOrderItems;
	}

	@OAMany(displayName = "Order Notes", toClass = OrderNote.class, owner = true, reverseName = OrderNote.P_Order, cascadeSave = true, cascadeDelete = true)
	public Hub<OrderNote> getOrderNotes() {
		if (hubOrderNotes == null) {
			hubOrderNotes = (Hub<OrderNote>) getHub(P_OrderNotes);
		}
		return hubOrderNotes;
	}

	@OAOne(reverseName = Region.P_Orders, isProcessed = true, allowCreateNew = false, allowAddExisting = false)
	@OAFkey(columns = { "RegionId" })
	public Region getRegion() {
		if (region == null) {
			region = (Region) getObject(P_Region);
		}
		return region;
	}

	public void setRegion(Region newValue) {
		Region old = this.region;
		fireBeforePropertyChange(P_Region, old, newValue);
		this.region = newValue;
		firePropertyChange(P_Region, old, this.region);
	}

	@OAOne(displayName = "Sales Order", reverseName = SalesOrder.P_Order, isProcessed = true, allowCreateNew = false)
	@OAFkey(columns = { "SalesOrderId" })
	public SalesOrder getSalesOrder() {
		if (salesOrder == null) {
			salesOrder = (SalesOrder) getObject(P_SalesOrder);
		}
		return salesOrder;
	}

	public void setSalesOrder(SalesOrder newValue) {
		SalesOrder old = this.salesOrder;
		fireBeforePropertyChange(P_SalesOrder, old, newValue);
		this.salesOrder = newValue;
		firePropertyChange(P_SalesOrder, old, this.salesOrder);
	}

	@OAOne(displayName = "Ship To", reverseName = ShipTo.P_Orders, isProcessed = true, allowCreateNew = false, allowAddExisting = false)
	@OAFkey(columns = { "ShipToId" })
	public ShipTo getShipTo() {
		if (shipTo == null) {
			shipTo = (ShipTo) getObject(P_ShipTo);
		}
		return shipTo;
	}

	public void setShipTo(ShipTo newValue) {
		ShipTo old = this.shipTo;
		fireBeforePropertyChange(P_ShipTo, old, newValue);
		this.shipTo = newValue;
		firePropertyChange(P_ShipTo, old, this.shipTo);
	}

	@OAOne(reverseName = Texture.P_Orders, allowCreateNew = false)
	@OAFkey(columns = { "TextureId" })
	public Texture getTexture() {
		if (texture == null) {
			texture = (Texture) getObject(P_Texture);
		}
		return texture;
	}

	public void setTexture(Texture newValue) {
		Texture old = this.texture;
		fireBeforePropertyChange(P_Texture, old, newValue);
		this.texture = newValue;
		firePropertyChange(P_Texture, old, this.texture);
	}

	@OAObjCallback(contextEnabledProperty = AppUser.P_Admin)
	public void textureCallback(OAObjectCallback em) {
	}

	@OAMany(displayName = "Work Orders", toClass = WorkOrder.class, owner = true, reverseName = WorkOrder.P_Order, isProcessed = true, cascadeSave = true, cascadeDelete = true, sortProperty = WorkOrder.P_Id)
	public Hub<WorkOrder> getWorkOrders() {
		if (hubWorkOrders == null) {
			hubWorkOrders = (Hub<WorkOrder>) getHub(P_WorkOrders);
			if (isServer()) {
				hubWorkOrders.addHubListener(new HubListenerAdapter<WorkOrder>() {
					@Override
					public void afterAdd(HubEvent e) {
						updateWorkOrders();
					}

					@Override
					public void afterInsert(HubEvent e) {
						updateWorkOrders();
					}

					@Override
					public void afterRemove(HubEvent e) {
						updateWorkOrders();
					}

					@Override
					public void onNewList(HubEvent e) {
						updateWorkOrders();
					}
				});
				updateWorkOrders();
			}
		}
		return hubWorkOrders;
	}

	@OAMethod(displayName = "Create Work Order")
	public void createWorkOrder() {
		// use this to run on server (remote)
		if (isRemoteAvailable()) {
			remote();
			return;
		}
		try {
			sendMessages(true);
			final WorkOrder wo = new WorkOrder();
			wo.setOrder(this);
		} finally {
			sendMessages(false);
		}
	}

	@OAObjCallback(enabledProperty = Order.P_DateCompleted, enabledValue = false)
	public void createWorkOrderCallback(OAObjectCallback em) {
	}

	@OAMethod(displayName = "Update Work Orders")
	public void updateWorkOrders() {
		// use this to run on server (remote)
		if (isRemoteAvailable()) {
			remote();
			return;
		}
		try {
			sendMessages(true);
			_updateWorkOrders();
		} finally {
			sendMessages(false);
		}
	}

	private void _updateWorkOrders() {
		for (OrderItem oi : getOrderItems()) {
			int qty = oi.getQuantity();
			for (WorkOrder workOrder : getWorkOrders()) {
				for (WOItem woItem : workOrder.getWOItems()) {
					if (woItem.getOrderItem() == oi) {
						qty -= woItem.getQuantity();
					}
				}
			}
			if (qty < 0) {
				qty = 0;
			}

			Item item = oi.getItem();
			if (item != null && item.getIsProduced()) {
				// create missing WOItems
				for (WorkOrder workOrder : getWorkOrders()) {
					boolean bFound = false;
					for (WOItem woItem : workOrder.getWOItems()) {
						if (woItem.getOrderItem() == oi) {
							bFound = true;
							break;
						}
					}
					if (!bFound) {
						WOItem woItem = new WOItem();
						woItem.setOrderItem(oi);
						woItem.setWorkOrder(workOrder);
						woItem.setQuantity(qty);
						break;
					}
				}
			}
		}
		// remove WOItems that dont have a valid WorkOrder
		for (WorkOrder workOrder : getWorkOrders()) {
			for (WOItem woItem : workOrder.getWOItems()) {
				OrderItem oi = woItem.getOrderItem();
				boolean bDelete;
				if (oi == null) {
					bDelete = true;
				} else {
					Item item = oi.getItem();
					bDelete = (item == null) || !item.getIsProduced();
				}
				if (bDelete) {
					woItem.delete();
				}
			}
		}
	}

	public void load(ResultSet rs, int id) throws SQLException {
		this.id = id;
		java.sql.Date date;
		date = rs.getDate(2);
		if (date != null) {
			this.date = new OADate(date);
		}
		this.salesOrderNumber = rs.getString(3);
		this.totalPrice = (double) rs.getDouble(4);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, Order.P_TotalPrice, true);
		}
		date = rs.getDate(5);
		if (date != null) {
			this.releasedDate = new OADate(date);
		}
		date = rs.getDate(6);
		if (date != null) {
			this.custExpectedDate = new OADate(date);
		}
		date = rs.getDate(7);
		if (date != null) {
			this.expectedShipDate = new OADate(date);
		}
		date = rs.getDate(8);
		if (date != null) {
			this.expectedProductionEndDate = new OADate(date);
		}
		date = rs.getDate(9);
		if (date != null) {
			this.inspectByDate = new OADate(date);
		}
		date = rs.getDate(10);
		if (date != null) {
			this.inspectedDate = new OADate(date);
		}
		date = rs.getDate(11);
		if (date != null) {
			this.dateCompleted = new OADate(date);
		}
		this.customerPickUp = (rs.getShort(12) == 1);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, Order.P_CustomerPickUp, true);
		}
		this.qbListId = rs.getString(13);
		this.notes = rs.getString(14);
		date = rs.getDate(15);
		if (date != null) {
			this.deleteDate = new OADate(date);
		}
		java.sql.Timestamp timestamp;
		timestamp = rs.getTimestamp(16);
		if (timestamp != null) {
			this.lastUpdate = new OADateTime(timestamp);
		}
		int colorCodeFkey = rs.getInt(17);
		if (!rs.wasNull() && colorCodeFkey > 0) {
			setProperty(P_ColorCode, new OAObjectKey(colorCodeFkey));
		}
		int customerFkey = rs.getInt(18);
		if (!rs.wasNull() && customerFkey > 0) {
			setProperty(P_Customer, new OAObjectKey(customerFkey));
		}
		int regionFkey = rs.getInt(19);
		if (!rs.wasNull() && regionFkey > 0) {
			setProperty(P_Region, new OAObjectKey(regionFkey));
		}
		int salesOrderFkey = rs.getInt(20);
		if (!rs.wasNull() && salesOrderFkey > 0) {
			setProperty(P_SalesOrder, new OAObjectKey(salesOrderFkey));
		}
		int shipToFkey = rs.getInt(21);
		if (!rs.wasNull() && shipToFkey > 0) {
			setProperty(P_ShipTo, new OAObjectKey(shipToFkey));
		}
		int textureFkey = rs.getInt(22);
		if (!rs.wasNull() && textureFkey > 0) {
			setProperty(P_Texture, new OAObjectKey(textureFkey));
		}
		if (rs.getMetaData().getColumnCount() != 22) {
			throw new SQLException("invalid number of columns for load method");
		}

		changedFlag = false;
		newFlag = false;
	}
}
