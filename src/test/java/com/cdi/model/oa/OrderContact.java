// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OATime;
 
@OAClass(
    shortName = "orc",
    displayName = "Order Contact",
    displayProperty = "contact",
    sortProperty = "date"
)
@OATable(
    indexes = {
        @OAIndex(name = "OrderContactFollowup", columns = {@OAIndexColumn(name = "Followup")}),
        @OAIndex(name = "OrderContactContact", fkey = true, columns = { @OAIndexColumn(name = "ContactId") }), 
        @OAIndex(name = "OrderContactOrder", fkey = true, columns = { @OAIndexColumn(name = "OrderId") })
    }
)
public class OrderContact extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(OrderContact.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Date = "Date";
    public static final String P_Date = "Date";
    public static final String PROPERTY_Time = "Time";
    public static final String P_Time = "Time";
    public static final String PROPERTY_Notes = "Notes";
    public static final String P_Notes = "Notes";
    public static final String PROPERTY_Followup = "Followup";
    public static final String P_Followup = "Followup";
    public static final String PROPERTY_FollowupDate = "FollowupDate";
    public static final String P_FollowupDate = "FollowupDate";
    public static final String PROPERTY_FollowupTime = "FollowupTime";
    public static final String P_FollowupTime = "FollowupTime";
    public static final String PROPERTY_FollowupNote = "FollowupNote";
    public static final String P_FollowupNote = "FollowupNote";
    public static final String PROPERTY_FollowupCompleted = "FollowupCompleted";
    public static final String P_FollowupCompleted = "FollowupCompleted";
     
     
    public static final String PROPERTY_Contact = "Contact";
    public static final String P_Contact = "Contact";
    public static final String PROPERTY_Order = "Order";
    public static final String P_Order = "Order";
     
    protected volatile int id;
    protected volatile OADate date;
    protected volatile OATime time;
    protected volatile String notes;
    protected volatile boolean followup;
    protected volatile OADate followupDate;
    protected volatile OATime followupTime;
    protected volatile String followupNote;
    protected volatile boolean followupCompleted;
     
    // Links to other objects.
    protected volatile transient Contact contact;
    protected volatile transient Order order;
     
    public OrderContact() {
        if (!isLoading()) {
            setDate(new OADate());
            setTime(new OATime());
        }
    }
     
    public OrderContact(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADate()", displayLength = 8)
    @OAColumn(name = "DateValue", sqlType = java.sql.Types.DATE)
    public OADate getDate() {
        return date;
    }
    public void setDate(OADate newValue) {
        OADate old = date;
        fireBeforePropertyChange(P_Date, old, newValue);
        this.date = newValue;
        firePropertyChange(P_Date, old, this.date);
    }
     
    @OAProperty(defaultValue = "new OATime()", displayLength = 8)
    @OAColumn(name = "TimeValue", sqlType = java.sql.Types.TIME)
    public OATime getTime() {
        return time;
    }
    public void setTime(OATime newValue) {
        OATime old = time;
        fireBeforePropertyChange(P_Time, old, newValue);
        this.time = newValue;
        firePropertyChange(P_Time, old, this.time);
    }
     
    @OAProperty(maxLength = 254, displayLength = 20)
    @OAColumn(maxLength = 254)
    public String getNotes() {
        return notes;
    }
    public void setNotes(String newValue) {
        String old = notes;
        fireBeforePropertyChange(P_Notes, old, newValue);
        this.notes = newValue;
        firePropertyChange(P_Notes, old, this.notes);
    }
     
    @OAProperty(displayLength = 5, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getFollowup() {
        return followup;
    }
    public void setFollowup(boolean newValue) {
        boolean old = followup;
        fireBeforePropertyChange(P_Followup, old, newValue);
        this.followup = newValue;
        firePropertyChange(P_Followup, old, this.followup);
    }
     
    @OAProperty(displayName = "Followup Date", displayLength = 8, columnName = "Date")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getFollowupDate() {
        return followupDate;
    }
    public void setFollowupDate(OADate newValue) {
        OADate old = followupDate;
        fireBeforePropertyChange(P_FollowupDate, old, newValue);
        this.followupDate = newValue;
        firePropertyChange(P_FollowupDate, old, this.followupDate);
    }
    @OAObjCallback(enabledProperty = OrderContact.P_Followup)
    public void onEditQueryFollowupDate(OAObjectCallback em) {
    }
     
    @OAProperty(displayName = "Followup Time", displayLength = 8, columnName = "Time")
    @OAColumn(sqlType = java.sql.Types.TIME)
    public OATime getFollowupTime() {
        return followupTime;
    }
    public void setFollowupTime(OATime newValue) {
        OATime old = followupTime;
        fireBeforePropertyChange(P_FollowupTime, old, newValue);
        this.followupTime = newValue;
        firePropertyChange(P_FollowupTime, old, this.followupTime);
    }
    @OAObjCallback(enabledProperty = OrderContact.P_Followup)
    public void onEditQueryFollowupTime(OAObjectCallback em) {
    }
     
    @OAProperty(displayName = "Followup Note", maxLength = 250, displayLength = 20)
    @OAColumn(maxLength = 250)
    public String getFollowupNote() {
        return followupNote;
    }
    public void setFollowupNote(String newValue) {
        String old = followupNote;
        fireBeforePropertyChange(P_FollowupNote, old, newValue);
        this.followupNote = newValue;
        firePropertyChange(P_FollowupNote, old, this.followupNote);
    }
    @OAObjCallback(enabledProperty = OrderContact.P_Followup)
    public void onEditQueryFollowupNote(OAObjectCallback em) {
    }
     
    @OAProperty(displayName = "Followup Completed", displayLength = 5, columnName = "Done")
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getFollowupCompleted() {
        return followupCompleted;
    }
    public void setFollowupCompleted(boolean newValue) {
        boolean old = followupCompleted;
        fireBeforePropertyChange(P_FollowupCompleted, old, newValue);
        this.followupCompleted = newValue;
        firePropertyChange(P_FollowupCompleted, old, this.followupCompleted);
    }
    @OAObjCallback(enabledProperty = OrderContact.P_Followup)
    public void onEditQueryFollowupCompleted(OAObjectCallback em) {
    }
     
    @OAOne(
        reverseName = Contact.P_OrderContacts
    )
    @OAFkey(columns = {"ContactId"})
    public Contact getContact() {
        if (contact == null) {
            contact = (Contact) getObject(P_Contact);
        }
        return contact;
    }
    public void setContact(Contact newValue) {
        Contact old = this.contact;
        fireBeforePropertyChange(P_Contact, old, newValue);
        this.contact = newValue;
        firePropertyChange(P_Contact, old, this.contact);
    }
     
    @OAOne(
        reverseName = Order.P_OrderContacts, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"OrderId"})
    public Order getOrder() {
        if (order == null) {
            order = (Order) getObject(P_Order);
        }
        return order;
    }
    public void setOrder(Order newValue) {
        Order old = this.order;
        fireBeforePropertyChange(P_Order, old, newValue);
        this.order = newValue;
        firePropertyChange(P_Order, old, this.order);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.date = new OADate(date);
        java.sql.Time time;
        time = rs.getTime(3);
        if (time != null) this.time = new OATime(time);
        this.notes = rs.getString(4);
        this.followup = (rs.getShort(5) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, OrderContact.P_Followup, true);
        }
        date = rs.getDate(6);
        if (date != null) this.followupDate = new OADate(date);
        time = rs.getTime(7);
        if (time != null) this.followupTime = new OATime(time);
        this.followupNote = rs.getString(8);
        this.followupCompleted = (rs.getShort(9) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, OrderContact.P_FollowupCompleted, true);
        }
        int contactFkey = rs.getInt(10);
        if (!rs.wasNull() && contactFkey > 0) {
            setProperty(P_Contact, new OAObjectKey(contactFkey));
        }
        int orderFkey = rs.getInt(11);
        if (!rs.wasNull() && orderFkey > 0) {
            setProperty(P_Order, new OAObjectKey(orderFkey));
        }
        if (rs.getMetaData().getColumnCount() != 11) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
