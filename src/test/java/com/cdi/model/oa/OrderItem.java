// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;

 
@OAClass(
    shortName = "oi",
    displayName = "Order Item",
    displayProperty = "item",
    sortProperty = "item"
)
@OATable(
    indexes = {
        @OAIndex(name = "OrderItemItem", fkey = true, columns = { @OAIndexColumn(name = "ItemId") }), 
        @OAIndex(name = "OrderItemOrder", fkey = true, columns = { @OAIndexColumn(name = "OrderId") })
    }
)
public class OrderItem extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(OrderItem.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Quantity = "Quantity";
    public static final String P_Quantity = "Quantity";
    public static final String PROPERTY_OnHandQuantity = "OnHandQuantity";
    public static final String P_OnHandQuantity = "OnHandQuantity";
    public static final String PROPERTY_ShippedQuantity = "ShippedQuantity";
    public static final String P_ShippedQuantity = "ShippedQuantity";
    public static final String PROPERTY_Notes = "Notes";
    public static final String P_Notes = "Notes";
    public static final String PROPERTY_LineNumber = "LineNumber";
    public static final String P_LineNumber = "LineNumber";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
    public static final String PROPERTY_ExtendedAmount = "ExtendedAmount";
    public static final String P_ExtendedAmount = "ExtendedAmount";
    public static final String PROPERTY_ExpectedProductionEndDate = "ExpectedProductionEndDate";
    public static final String P_ExpectedProductionEndDate = "ExpectedProductionEndDate";
    public static final String PROPERTY_InventoryAdjustmentQuantity = "InventoryAdjustmentQuantity";
    public static final String P_InventoryAdjustmentQuantity = "InventoryAdjustmentQuantity";
     
    public static final String PROPERTY_CalcMinimumDays = "CalcMinimumDays";
    public static final String P_CalcMinimumDays = "CalcMinimumDays";
    public static final String PROPERTY_RemainingQuantity = "RemainingQuantity";
    public static final String P_RemainingQuantity = "RemainingQuantity";
    public static final String PROPERTY_IsProduced = "IsProduced";
    public static final String P_IsProduced = "IsProduced";
    public static final String PROPERTY_IsValidQuantity = "IsValidQuantity";
    public static final String P_IsValidQuantity = "IsValidQuantity";
    public static final String PROPERTY_WorkOrderQuantity = "WorkOrderQuantity";
    public static final String P_WorkOrderQuantity = "WorkOrderQuantity";
    public static final String PROPERTY_CalcQtyToolTip = "CalcQtyToolTip";
    public static final String P_CalcQtyToolTip = "CalcQtyToolTip";
    public static final String PROPERTY_UnshippedPrice = "UnshippedPrice";
    public static final String P_UnshippedPrice = "UnshippedPrice";
    public static final String PROPERTY_UnshippedQuantity = "UnshippedQuantity";
    public static final String P_UnshippedQuantity = "UnshippedQuantity";
     
    public static final String PROPERTY_GroupByItem = "GroupByItem";
    public static final String P_GroupByItem = "GroupByItem";
    public static final String PROPERTY_Item = "Item";
    public static final String P_Item = "Item";
    public static final String PROPERTY_Order = "Order";
    public static final String P_Order = "Order";
    public static final String PROPERTY_OrderItemComments = "OrderItemComments";
    public static final String P_OrderItemComments = "OrderItemComments";
    public static final String PROPERTY_WOItems = "WOItems";
    public static final String P_WOItems = "WOItems";
     
    protected volatile int id;
    protected volatile int quantity;
    protected volatile int onHandQuantity;
    protected volatile int shippedQuantity;
    protected volatile String notes;
    protected volatile int lineNumber;
    protected volatile String description;
    protected volatile double extendedAmount;
    protected volatile OADate expectedProductionEndDate;
    protected volatile int inventoryAdjustmentQuantity;
     
    // Links to other objects.
    protected volatile transient Item item;
    protected volatile transient Order order;
    protected transient Hub<OrderItemComment> hubOrderItemComments;
    protected transient Hub<WOItem> hubWOItems;
     
    public OrderItem() {
    }
     
    public OrderItem(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(displayLength = 6, columnName = "Qty", isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getQuantity() {
        return quantity;
    }
    public void setQuantity(int newValue) {
        int old = quantity;
        fireBeforePropertyChange(P_Quantity, old, newValue);
        this.quantity = newValue;
        firePropertyChange(P_Quantity, old, this.quantity);
    }
     
    @OAProperty(displayName = "On Hand", description = "amount that is on hand", displayLength = 6, columnLength = 7)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      amount that is on hand
    */
    public int getOnHandQuantity() {
        return onHandQuantity;
    }
    public void setOnHandQuantity(int newValue) {
        int old = onHandQuantity;
        fireBeforePropertyChange(P_OnHandQuantity, old, newValue);
        this.onHandQuantity = newValue;
        firePropertyChange(P_OnHandQuantity, old, this.onHandQuantity);
    }
    @OAEditQuery(enabledProperty = OrderItem.P_IsProduced)
    public void onEditQueryOnHandQuantity(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Ship Quantity", description = "set by QB when line item is shipped", displayLength = 6, columnLength = 8, columnName = "Ship Qty", isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      set by QB when line item is shipped
    */
    public int getShippedQuantity() {
        return shippedQuantity;
    }
    public void setShippedQuantity(int newValue) {
        int old = shippedQuantity;
        fireBeforePropertyChange(P_ShippedQuantity, old, newValue);
        this.shippedQuantity = newValue;
        firePropertyChange(P_ShippedQuantity, old, this.shippedQuantity);
    }
    @OAEditQuery(enabledProperty = OrderItem.P_IsProduced)
    public void onEditQueryShippedQuantity(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayLength = 20, hasCustomCode = true, isHtml = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNotes() {
        if (notes != null) notes = OAString.convertTextToHTML(notes, false);
        return notes;
    }
    public void setNotes(String newValue) {
        String old = notes;
        fireBeforePropertyChange(P_Notes, old, newValue);
        this.notes = newValue;
        firePropertyChange(P_Notes, old, this.notes);
    }
     
    @OAProperty(displayName = "Line Number", displayLength = 6, columnName = "Line #", isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getLineNumber() {
        return lineNumber;
    }
    public void setLineNumber(int newValue) {
        int old = lineNumber;
        fireBeforePropertyChange(P_LineNumber, old, newValue);
        this.lineNumber = newValue;
        firePropertyChange(P_LineNumber, old, this.lineNumber);
    }
     
    @OAProperty(maxLength = 254, displayLength = 20, isProcessed = true)
    @OAColumn(maxLength = 254)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
     
    @OAProperty(displayName = "Extended Amount", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 10, columnName = "Extended $", isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getExtendedAmount() {
        return extendedAmount;
    }
    public void setExtendedAmount(double newValue) {
        double old = extendedAmount;
        fireBeforePropertyChange(P_ExtendedAmount, old, newValue);
        this.extendedAmount = newValue;
        firePropertyChange(P_ExtendedAmount, old, this.extendedAmount);
    }
     
    @OAProperty(displayName = "Expected Production End Date", displayLength = 8, columnLength = 12, columnName = "Exp Prod End")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getExpectedProductionEndDate() {
        return expectedProductionEndDate;
    }
    public void setExpectedProductionEndDate(OADate newValue) {
        OADate old = expectedProductionEndDate;
        fireBeforePropertyChange(P_ExpectedProductionEndDate, old, newValue);
        this.expectedProductionEndDate = newValue;
        firePropertyChange(P_ExpectedProductionEndDate, old, this.expectedProductionEndDate);
    }
    @OAEditQuery(enabledProperty = OrderItem.P_IsProduced)
    public void onEditQueryExpectedProductionEndDate(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Inventory Adjustment Quantity", trackPrimitiveNull = false, displayLength = 6, columnLength = 29, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getInventoryAdjustmentQuantity() {
        return inventoryAdjustmentQuantity;
    }
    public void setInventoryAdjustmentQuantity(int newValue) {
        int old = inventoryAdjustmentQuantity;
        fireBeforePropertyChange(P_InventoryAdjustmentQuantity, old, newValue);
        this.inventoryAdjustmentQuantity = newValue;
        firePropertyChange(P_InventoryAdjustmentQuantity, old, this.inventoryAdjustmentQuantity);
    }
     
    @OACalculatedProperty(displayName = "Minimum Days", description = "number of days that it will take to produce the qty for this item, based on mold count", displayLength = 6, columnLength = 9, columnName = "Mini Days", properties = {P_Quantity, P_Item+"."+Item.P_Mold+"."+Mold.P_OnHand})
    public int getCalcMinimumDays() {
        if (!getIsProduced()) return 0;
        
        Item item = getItem();
        if (item == null) return 0;
        Mold mold = item.getMold();
        if (mold == null) return 99;
        
        int onHand = mold.getOnHand();
        if (onHand <= 0) return 99; // per Nathan's request
    
        int qty = getQuantity();
        int x = (int) Math.ceil((double)qty/(double)onHand);
        return x;
    }
     
    @OACalculatedProperty(displayName = "Remaining", displayLength = 6, columnLength = 10, columnName = "Remain Qty", properties = {P_Quantity, P_OnHandQuantity, P_ShippedQuantity})
    public int getRemainingQuantity() {
        if (!getIsProduced()) return 0;
        int x = getQuantity() - (getShippedQuantity() + getOnHandQuantity());
        return x;
    }
     
    @OACalculatedProperty(displayName = "Is Produced", displayLength = 10, properties = {P_Item+"."+Item.P_IsProduced})
    public boolean getIsProduced() {
        Item item = getItem();
        if (item == null) return false;
        return item.getIsProduced();
    }
     
    @OACalculatedProperty(displayName = "Is Valid Quantity", displayLength = 2, columnLength = 9, columnName = "Valid Qty", properties = {P_Quantity, P_WOItems+"."+WOItem.P_Quantity, P_IsProduced, P_Item, P_ShippedQuantity, P_OnHandQuantity, P_Order+"."+Order.P_IsOpen})
    public boolean getIsValidQuantity() {
        if (getItem() == null) return true;
        if (!getIsProduced()) return true;
        Order order = getOrder();
        if (order != null) {
            if (!order.getIsOpen()) return true;
        }
        boolean b = (getQuantity() == getWorkOrderQuantity());
        
        if (b && (getQuantity() < (getShippedQuantity() + getOnHandQuantity()))) b = false;  
        return b;
    }
     
    @OACalculatedProperty(displayName = "Work Order Quantity", displayLength = 6, columnName = "WO Qty", properties = {P_WOItems+"."+WOItem.P_Quantity})
    public int getWorkOrderQuantity() {
        int q = 0;
        for (WOItem woi : getWOItems()) {
            q += woi.getQuantity();
        }
        return q;
    }
     
    @OACalculatedProperty(displayName = "Calc Qty Tool Tip", displayLength = 20)
    public String getCalcQtyToolTip() {
        String tt = "";
        
        int qty = getQuantity();
        tt = OAString.concat(tt, "Item Qty = "+qty, "<br>");
        
        int qtyWO = getWorkOrderQuantity();
        tt = OAString.concat(tt, "WorkOrder Qty = "+qtyWO, "<br>");
        
        if (!getIsValidQuantity()) {
            tt = OAString.concat(tt, "Error: work order qty does not match line item qty", "<br>");
        }
        
        tt = OAString.concat(tt, "Shipped = "+getShippedQuantity(), "<br>");
        tt = OAString.concat(tt, "On Hand = "+getOnHandQuantity(), "<br>");
        tt = OAString.concat(tt, "Remaining = "+getRemainingQuantity(), "<br>");
        tt = OAString.concat(tt, "Inventory adjustments in QB = "+getInventoryAdjustmentQuantity(), "<br>");
    
        return tt;
    }
     
    @OACalculatedProperty(displayName = "Unshipped Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 15, properties = {P_RemainingQuantity})
    public double getRemainingPrice() {
        return getUnshippedPrice();
    }
    public double getUnshippedPrice() {
        int qty = getQuantity();
        if (qty <= 0) return 0;
        double d = getExtendedAmount() / qty;
        d = OAConv.round(d, 2);
        int rqty = this.getUnshippedQuantity();
        if (rqty <= 0) return 0;
        return d *rqty;
    }
     
    @OACalculatedProperty(displayName = "Unshipped Qty", displayLength = 6, columnLength = 13, properties = {P_Quantity, P_ShippedQuantity})
    public int getUnshippedQuantity() {
        if (!getIsProduced()) return 0;
        int x = getQuantity() - getShippedQuantity();
        return x;
    }
     
    @OAOne(
        displayName = "Item", 
        isCalculated = true, 
        reverseName = Item.P_OpenOrderItems, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Item getGroupByItem() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAOne(
        reverseName = Item.P_OrderItems, 
        required = true, 
        isProcessed = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ItemId"})
    public Item getItem() {
        if (item == null) {
            item = (Item) getObject(P_Item);
        }
        return item;
    }
    public void setItem(Item newValue) {
        Item old = this.item;
        fireBeforePropertyChange(P_Item, old, newValue);
        this.item = newValue;
        firePropertyChange(P_Item, old, this.item);
    }
     
    @OAOne(
        reverseName = Order.P_OrderItems, 
        required = true, 
        isProcessed = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"OrderId"})
    public Order getOrder() {
        if (order == null) {
            order = (Order) getObject(P_Order);
        }
        return order;
    }
    public void setOrder(Order newValue) {
        Order old = this.order;
        fireBeforePropertyChange(P_Order, old, newValue);
        this.order = newValue;
        firePropertyChange(P_Order, old, this.order);
    }
     
    @OAMany(
        displayName = "Order Item Comments", 
        toClass = OrderItemComment.class, 
        owner = true, 
        reverseName = OrderItemComment.P_OrderItem, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<OrderItemComment> getOrderItemComments() {
        if (hubOrderItemComments == null) {
            hubOrderItemComments = (Hub<OrderItemComment>) getHub(P_OrderItemComments);
        }
        return hubOrderItemComments;
    }
     
    @OAMany(
        displayName = "Work Order Items", 
        toClass = WOItem.class, 
        reverseName = WOItem.P_OrderItem, 
        isProcessed = true, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<WOItem> getWOItems() {
        if (hubWOItems == null) {
            hubWOItems = (Hub<WOItem>) getHub(P_WOItems);
        }
        return hubWOItems;
    }
    @OAEditQuery(enabledProperty = OrderItem.P_IsProduced)
    public void onEditQueryWOItems(OAObjectEditQuery em) {
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.quantity = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, OrderItem.P_Quantity, true);
        }
        this.onHandQuantity = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, OrderItem.P_OnHandQuantity, true);
        }
        this.shippedQuantity = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, OrderItem.P_ShippedQuantity, true);
        }
        this.notes = rs.getString(5);
        this.lineNumber = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, OrderItem.P_LineNumber, true);
        }
        this.description = rs.getString(7);
        this.extendedAmount = (double) rs.getDouble(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, OrderItem.P_ExtendedAmount, true);
        }
        java.sql.Date date;
        date = rs.getDate(9);
        if (date != null) this.expectedProductionEndDate = new OADate(date);
        this.inventoryAdjustmentQuantity = (int) rs.getInt(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, OrderItem.P_InventoryAdjustmentQuantity, true);
        }
        int itemFkey = rs.getInt(11);
        if (!rs.wasNull() && itemFkey > 0) {
            setProperty(P_Item, new OAObjectKey(itemFkey));
        }
        int orderFkey = rs.getInt(12);
        if (!rs.wasNull() && orderFkey > 0) {
            setProperty(P_Order, new OAObjectKey(orderFkey));
        }
        if (rs.getMetaData().getColumnCount() != 12) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
