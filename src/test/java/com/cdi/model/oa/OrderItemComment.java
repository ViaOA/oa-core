// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "oic",
    displayName = "Order Item Comment",
    displayProperty = "orderItem.order",
    sortProperty = "orderItem.order"
)
@OATable(
    indexes = {
        @OAIndex(name = "OrderItemCommentOrderItem", fkey = true, columns = { @OAIndexColumn(name = "OrderItemId") })
    }
)
public class OrderItemComment extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(OrderItemComment.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
     
     
    public static final String PROPERTY_OrderItem = "OrderItem";
    public static final String P_OrderItem = "OrderItem";
     
    protected volatile int id;
    protected volatile String description;
     
    // Links to other objects.
    protected volatile transient OrderItem orderItem;
     
    public OrderItemComment() {
    }
     
    public OrderItemComment(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 254, displayLength = 20)
    @OAColumn(maxLength = 254)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
     
    @OAOne(
        displayName = "Order Item", 
        reverseName = OrderItem.P_OrderItemComments, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"OrderItemId"})
    public OrderItem getOrderItem() {
        if (orderItem == null) {
            orderItem = (OrderItem) getObject(P_OrderItem);
        }
        return orderItem;
    }
    public void setOrderItem(OrderItem newValue) {
        OrderItem old = this.orderItem;
        fireBeforePropertyChange(P_OrderItem, old, newValue);
        this.orderItem = newValue;
        firePropertyChange(P_OrderItem, old, this.orderItem);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.description = rs.getString(2);
        int orderItemFkey = rs.getInt(3);
        if (!rs.wasNull() && orderItemFkey > 0) {
            setProperty(P_OrderItem, new OAObjectKey(orderItemFkey));
        }
        if (rs.getMetaData().getColumnCount() != 3) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
