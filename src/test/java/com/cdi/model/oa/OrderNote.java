// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADateTime;
import com.cdi.delegate.ModelDelegate;
 
@OAClass(
    shortName = "on",
    displayName = "Order Note",
    displayProperty = "order",
    sortProperty = "order"
)
@OATable(
    indexes = {
        @OAIndex(name = "OrderNoteOrder", fkey = true, columns = { @OAIndexColumn(name = "OrderId") }), 
        @OAIndex(name = "OrderNoteUser", fkey = true, columns = { @OAIndexColumn(name = "UserId") })
    }
)
public class OrderNote extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(OrderNote.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Note = "Note";
    public static final String P_Note = "Note";
     
     
    public static final String PROPERTY_Order = "Order";
    public static final String P_Order = "Order";
    public static final String PROPERTY_User = "User";
    public static final String P_User = "User";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String note;
     
    // Links to other objects.
    protected volatile transient Order order;
    protected volatile transient User user;
     
    public OrderNote() {
        if (!isLoading()) {
            setCreated(new OADateTime());
            
//qqqqqqqqqqqqqqqqq needs to use:  setUser(((UserApp) OAContext.getContext()).getUser);
//            setUser(ModelDelegate.getUser());
//  >> use context to get user             
            
            //was:  setUser(ModelDelegate.getLoginUser());
        }
    }
     
    public OrderNote(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
     
    @OAProperty(displayLength = 20, hasCustomCode = true, isHtml = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNote() {
        if (note != null) note = OAString.convertTextToHTML(note, false);
        return note;
    }
    public void setNote(String newValue) {
        String old = note;
        fireBeforePropertyChange(P_Note, old, newValue);
        this.note = newValue;
        firePropertyChange(P_Note, old, this.note);
    }
     
    @OAOne(
        reverseName = Order.P_OrderNotes, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"OrderId"})
    public Order getOrder() {
        if (order == null) {
            order = (Order) getObject(P_Order);
        }
        return order;
    }
    public void setOrder(Order newValue) {
        Order old = this.order;
        fireBeforePropertyChange(P_Order, old, newValue);
        this.order = newValue;
        firePropertyChange(P_Order, old, this.order);
    }
     
    @OAOne(
        reverseName = User.P_OrderNotes, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false, 
        defaultContextPropertyPath = AppUser.P_User
    )
    @OAFkey(columns = {"UserId"})
    public User getUser() {
        if (user == null) {
            user = (User) getObject(P_User);
        }
        return user;
    }
    public void setUser(User newValue) {
        User old = this.user;
        fireBeforePropertyChange(P_User, old, newValue);
        this.user = newValue;
        firePropertyChange(P_User, old, this.user);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.note = rs.getString(3);
        int orderFkey = rs.getInt(4);
        if (!rs.wasNull() && orderFkey > 0) {
            setProperty(P_Order, new OAObjectKey(orderFkey));
        }
        int userFkey = rs.getInt(5);
        if (!rs.wasNull() && userFkey > 0) {
            setProperty(P_User, new OAObjectKey(userFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
