// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pho",
    displayName = "Phone",
    displayProperty = "number",
    sortProperty = "number"
)
@OATable(
    indexes = {
        @OAIndex(name = "PhoneContact", fkey = true, columns = { @OAIndexColumn(name = "ContactId") })
    }
)
public class Phone extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Phone.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Number = "Number";
    public static final String P_Number = "Number";
    public static final String PROPERTY_Notes = "Notes";
    public static final String P_Notes = "Notes";
     
     
    public static final String PROPERTY_Contact = "Contact";
    public static final String P_Contact = "Contact";
     
    protected volatile int id;
    protected volatile String number;
    protected volatile String notes;
     
    // Links to other objects.
    protected volatile transient Contact contact;
     
    public Phone() {
    }
     
    public Phone(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 25, displayLength = 10, isPhone = true)
    @OAColumn(maxLength = 25)
    public String getNumber() {
        return number;
    }
    public void setNumber(String newValue) {
        String old = number;
        fireBeforePropertyChange(P_Number, old, newValue);
        this.number = newValue;
        firePropertyChange(P_Number, old, this.number);
    }
     
    @OAProperty(maxLength = 250, displayLength = 15, columnLength = 13)
    @OAColumn(maxLength = 250)
    public String getNotes() {
        return notes;
    }
    public void setNotes(String newValue) {
        String old = notes;
        fireBeforePropertyChange(P_Notes, old, newValue);
        this.notes = newValue;
        firePropertyChange(P_Notes, old, this.notes);
    }
     
    @OAOne(
        reverseName = Contact.P_Phones, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ContactId"})
    public Contact getContact() {
        if (contact == null) {
            contact = (Contact) getObject(P_Contact);
        }
        return contact;
    }
    public void setContact(Contact newValue) {
        Contact old = this.contact;
        fireBeforePropertyChange(P_Contact, old, newValue);
        this.contact = newValue;
        firePropertyChange(P_Contact, old, this.contact);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.number = rs.getString(2);
        this.notes = rs.getString(3);
        int contactFkey = rs.getInt(4);
        if (!rs.wasNull() && contactFkey > 0) {
            setProperty(P_Contact, new OAObjectKey(contactFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
