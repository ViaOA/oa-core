// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pc",
    displayName = "Price Code",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name",
    sortProperty = "name"
)
@OATable(
)
public class PriceCode extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(PriceCode.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Rate = "Rate";
    public static final String P_Rate = "Rate";
    public static final String PROPERTY_ItemCode = "ItemCode";
    public static final String P_ItemCode = "ItemCode";
    public static final String PROPERTY_Color = "Color";
    public static final String P_Color = "Color";
    public static final String PROPERTY_Texture = "Texture";
    public static final String P_Texture = "Texture";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
     
     
    public static final String PROPERTY_ItemQuotes = "ItemQuotes";
    public static final String P_ItemQuotes = "ItemQuotes";
    public static final String PROPERTY_SalesOrders = "SalesOrders";
    public static final String P_SalesOrders = "SalesOrders";
     
    protected volatile int id;
    protected volatile String name;
    protected volatile double rate;
    protected volatile String itemCode;
    protected volatile String color;
    protected volatile String texture;
    protected volatile int seq;
     
     
    public PriceCode() {
    }
     
    public PriceCode(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 45, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 45)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(decimalPlaces = 2, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getRate() {
        return rate;
    }
    public void setRate(double newValue) {
        double old = rate;
        fireBeforePropertyChange(P_Rate, old, newValue);
        this.rate = newValue;
        firePropertyChange(P_Rate, old, this.rate);
    }
     
    @OAProperty(displayName = "Item Code", maxLength = 20, displayLength = 10)
    @OAColumn(maxLength = 20)
    public String getItemCode() {
        return itemCode;
    }
    public void setItemCode(String newValue) {
        String old = itemCode;
        fireBeforePropertyChange(P_ItemCode, old, newValue);
        this.itemCode = newValue;
        firePropertyChange(P_ItemCode, old, this.itemCode);
    }
     
    @OAProperty(maxLength = 45, displayLength = 10)
    @OAColumn(maxLength = 45)
    public String getColor() {
        return color;
    }
    public void setColor(String newValue) {
        String old = color;
        fireBeforePropertyChange(P_Color, old, newValue);
        this.color = newValue;
        firePropertyChange(P_Color, old, this.color);
    }
     
    @OAProperty(maxLength = 45, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 45)
    public String getTexture() {
        return texture;
    }
    public void setTexture(String newValue) {
        String old = texture;
        fireBeforePropertyChange(P_Texture, old, newValue);
        this.texture = newValue;
        firePropertyChange(P_Texture, old, this.texture);
    }
     
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
     
    @OAMany(
        displayName = "Item Quotes", 
        toClass = ItemQuote.class, 
        reverseName = ItemQuote.P_PriceCode, 
        createMethod = false
    )
    private Hub<ItemQuote> getItemQuotes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAMany(
        displayName = "Sales Orders", 
        toClass = SalesOrder.class, 
        reverseName = SalesOrder.P_PriceCode, 
        createMethod = false
    )
    private Hub<SalesOrder> getSalesOrders() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.rate = (double) rs.getDouble(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PriceCode.P_Rate, true);
        }
        this.itemCode = rs.getString(4);
        this.color = rs.getString(5);
        this.texture = rs.getString(6);
        this.seq = (int) rs.getInt(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PriceCode.P_Seq, true);
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
