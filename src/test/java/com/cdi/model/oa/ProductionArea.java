// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import java.awt.Color;
import com.viaoa.util.OAConverter;
 
@OAClass(
    shortName = "pra",
    displayName = "Production Area",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "codeName",
    sortProperty = "code",
    estimatedTotal = 35
)
@OATable(
)
public class ProductionArea extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ProductionArea.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Color = "Color";
    public static final String P_Color = "Color";
     
    public static final String PROPERTY_CodeName = "CodeName";
    public static final String P_CodeName = "CodeName";
     
    public static final String PROPERTY_Items = "Items";
    public static final String P_Items = "Items";
     
    protected volatile int id;
    protected volatile String code;
    protected volatile String name;
    protected volatile Color color;
     
    // Links to other objects.
    protected transient Hub<Item> hubItems;
     
    public ProductionArea() {
    }
     
    public ProductionArea(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 15, displayLength = 10)
    @OAColumn(maxLength = 15)
    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
     
    @OAProperty(maxLength = 75, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(displayLength = 12, columnLength = 8)
    @OAColumn(maxLength = 16)
    public Color getColor() {
        return color;
    }
    public void setColor(Color newValue) {
        Color old = color;
        fireBeforePropertyChange(P_Color, old, newValue);
        this.color = newValue;
        firePropertyChange(P_Color, old, this.color);
    }
     
    @OACalculatedProperty(displayName = "Code Name", displayLength = 20, columnLength = 10, properties = {P_Code, P_Name})
    public String getCodeName() {
        String codeName = "";
        String code = this.getCode();
        codeName = OAString.concat(codeName, code, " ");
    
        String name = this.getName();
        codeName = OAString.concat(codeName, name, " ");
    
        return codeName;
    }
     
    @OAMany(
        toClass = Item.class, 
        reverseName = Item.P_ProductionArea
    )
    public Hub<Item> getItems() {
        if (hubItems == null) {
            hubItems = (Hub<Item>) getHub(P_Items);
        }
        return hubItems;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.code = rs.getString(2);
        this.name = rs.getString(3);
        this.color = (Color) OAConverter.convert(Color.class, rs.getString(4));
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
