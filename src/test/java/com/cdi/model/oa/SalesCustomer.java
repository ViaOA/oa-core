// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;

 
@OAClass(
    shortName = "sc",
    displayName = "Sales Customer",
    displayProperty = "name",
    sortProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "SalesCustomerCustomerNumber", columns = {@OAIndexColumn(name = "CustomerNumber")}),
        @OAIndex(name = "SalesCustomerCustomer", fkey = true, columns = { @OAIndexColumn(name = "CustomerId") }), 
        @OAIndex(name = "NewCustomerSalesOrder", fkey = true, columns = { @OAIndexColumn(name = "SalesOrderId") }), 
        @OAIndex(name = "SalesCustomerShipTo", fkey = true, columns = { @OAIndexColumn(name = "ShipToId") })
    }
)
public class SalesCustomer extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(SalesCustomer.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_CustomerNumber = "CustomerNumber";
    public static final String P_CustomerNumber = "CustomerNumber";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Name2 = "Name2";
    public static final String P_Name2 = "Name2";
    public static final String PROPERTY_Address = "Address";
    public static final String P_Address = "Address";
    public static final String PROPERTY_Address2 = "Address2";
    public static final String P_Address2 = "Address2";
    public static final String PROPERTY_Address3 = "Address3";
    public static final String P_Address3 = "Address3";
    public static final String PROPERTY_City = "City";
    public static final String P_City = "City";
    public static final String PROPERTY_State = "State";
    public static final String P_State = "State";
    public static final String PROPERTY_Zip = "Zip";
    public static final String P_Zip = "Zip";
    public static final String PROPERTY_Phone = "Phone";
    public static final String P_Phone = "Phone";
    public static final String PROPERTY_Phone2 = "Phone2";
    public static final String P_Phone2 = "Phone2";
    public static final String PROPERTY_Contact = "Contact";
    public static final String P_Contact = "Contact";
    public static final String PROPERTY_Note = "Note";
    public static final String P_Note = "Note";
    public static final String PROPERTY_Fax = "Fax";
    public static final String P_Fax = "Fax";
    public static final String PROPERTY_Email = "Email";
    public static final String P_Email = "Email";
    public static final String PROPERTY_TaxExempt = "TaxExempt";
    public static final String P_TaxExempt = "TaxExempt";
     
     
    public static final String PROPERTY_Customer = "Customer";
    public static final String P_Customer = "Customer";
    public static final String PROPERTY_SalesOrder = "SalesOrder";
    public static final String P_SalesOrder = "SalesOrder";
    public static final String PROPERTY_ShipTo = "ShipTo";
    public static final String P_ShipTo = "ShipTo";
     
    public static final String METHOD_UpdateSalesCustomer = "UpdateSalesCustomer";
    public static final String M_UpdateSalesCustomer = "UpdateSalesCustomer";
    protected volatile int id;
    protected volatile String customerNumber;
    protected volatile String name;
    protected volatile String name2;
    protected volatile String address;
    protected volatile String address2;
    protected volatile String address3;
    protected volatile String city;
    protected volatile String state;
    protected volatile String zip;
    protected volatile String phone;
    protected volatile String phone2;
    protected volatile String contact;
    protected volatile String note;
    protected volatile String fax;
    protected volatile String email;
    protected volatile boolean taxExempt;
     
    // Links to other objects.
    protected volatile transient Customer customer;
    protected volatile transient SalesOrder salesOrder;
    protected volatile transient ShipTo shipTo;
     
    public SalesCustomer() {
        if (!isLoading()) {
            getShipTo(); // have it autoCreated
        }
    }
     
    public SalesCustomer(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(displayName = "Customer Number", maxLength = 20, displayLength = 10, columnName = "Cust #")
    @OAColumn(maxLength = 20)
    public String getCustomerNumber() {
        return customerNumber;
    }
    public void setCustomerNumber(String newValue) {
        String old = customerNumber;
        fireBeforePropertyChange(P_CustomerNumber, old, newValue);
        this.customerNumber = newValue;
        firePropertyChange(P_CustomerNumber, old, this.customerNumber);
    }
     
    @OAProperty(maxLength = 70, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 70)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 55)
    public String getName2() {
        return name2;
    }
    public void setName2(String newValue) {
        String old = name2;
        fireBeforePropertyChange(P_Name2, old, newValue);
        this.name2 = newValue;
        firePropertyChange(P_Name2, old, this.name2);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress() {
        return address;
    }
    public void setAddress(String newValue) {
        String old = address;
        fireBeforePropertyChange(P_Address, old, newValue);
        this.address = newValue;
        firePropertyChange(P_Address, old, this.address);
    }
     
    @OAProperty(displayName = "Addess2", maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress2() {
        return address2;
    }
    public void setAddress2(String newValue) {
        String old = address2;
        fireBeforePropertyChange(P_Address2, old, newValue);
        this.address2 = newValue;
        firePropertyChange(P_Address2, old, this.address2);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress3() {
        return address3;
    }
    public void setAddress3(String newValue) {
        String old = address3;
        fireBeforePropertyChange(P_Address3, old, newValue);
        this.address3 = newValue;
        firePropertyChange(P_Address3, old, this.address3);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getCity() {
        return city;
    }
    public void setCity(String newValue) {
        String old = city;
        fireBeforePropertyChange(P_City, old, newValue);
        this.city = newValue;
        firePropertyChange(P_City, old, this.city);
    }
     
    @OAProperty(maxLength = 25, displayLength = 20, columnLength = 6)
    @OAColumn(maxLength = 25)
    public String getState() {
        return state;
    }
    public void setState(String newValue) {
        String old = state;
        fireBeforePropertyChange(P_State, old, newValue);
        this.state = newValue;
        firePropertyChange(P_State, old, this.state);
    }
     
    @OAProperty(maxLength = 14, displayLength = 15)
    @OAColumn(maxLength = 14)
    public String getZip() {
        return zip;
    }
    public void setZip(String newValue) {
        String old = zip;
        fireBeforePropertyChange(P_Zip, old, newValue);
        this.zip = newValue;
        firePropertyChange(P_Zip, old, this.zip);
    }
     
    @OAProperty(maxLength = 25, displayLength = 15, columnLength = 13, isPhone = true)
    @OAColumn(maxLength = 25)
    public String getPhone() {
        return phone;
    }
    public void setPhone(String newValue) {
        String old = phone;
        fireBeforePropertyChange(P_Phone, old, newValue);
        this.phone = newValue;
        firePropertyChange(P_Phone, old, this.phone);
    }
     
    @OAProperty(maxLength = 25, displayLength = 15, columnLength = 13, isPhone = true)
    @OAColumn(maxLength = 25)
    public String getPhone2() {
        return phone2;
    }
    public void setPhone2(String newValue) {
        String old = phone2;
        fireBeforePropertyChange(P_Phone2, old, newValue);
        this.phone2 = newValue;
        firePropertyChange(P_Phone2, old, this.phone2);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getContact() {
        return contact;
    }
    public void setContact(String newValue) {
        String old = contact;
        fireBeforePropertyChange(P_Contact, old, newValue);
        this.contact = newValue;
        firePropertyChange(P_Contact, old, this.contact);
    }
     
    @OAProperty(displayLength = 20, hasCustomCode = true, isHtml = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNote() {
        if (note != null) note = OAString.convertTextToHTML(note, false);
        return note;
    }
    public void setNote(String newValue) {
        String old = note;
        fireBeforePropertyChange(P_Note, old, newValue);
        this.note = newValue;
        firePropertyChange(P_Note, old, this.note);
    }
     
    @OAProperty(maxLength = 25, displayLength = 15, isPhone = true)
    @OAColumn(maxLength = 25)
    public String getFax() {
        return fax;
    }
    public void setFax(String newValue) {
        String old = fax;
        fireBeforePropertyChange(P_Fax, old, newValue);
        this.fax = newValue;
        firePropertyChange(P_Fax, old, this.fax);
    }
     
    @OAProperty(maxLength = 75, displayLength = 20, columnLength = 12, isEmail = true)
    @OAColumn(maxLength = 75)
    public String getEmail() {
        return email;
    }
    public void setEmail(String newValue) {
        String old = email;
        fireBeforePropertyChange(P_Email, old, newValue);
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
     
    @OAProperty(displayName = "Tax Exempt", displayLength = 5, columnLength = 8, columnName = "Tax Expt")
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getTaxExempt() {
        return taxExempt;
    }
    public void setTaxExempt(boolean newValue) {
        boolean old = taxExempt;
        fireBeforePropertyChange(P_TaxExempt, old, newValue);
        this.taxExempt = newValue;
        firePropertyChange(P_TaxExempt, old, this.taxExempt);
    }
     
    @OAOne(
        reverseName = Customer.P_SalesCustomers, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"CustomerId"})
    public Customer getCustomer() {
        if (customer == null) {
            customer = (Customer) getObject(P_Customer);
        }
        return customer;
    }
    public void setCustomer(Customer newValue) {
        Customer old = this.customer;
        fireBeforePropertyChange(P_Customer, old, newValue);
        this.customer = newValue;
        firePropertyChange(P_Customer, old, this.customer);
    }
     
    @OAOne(
        displayName = "Sales Order", 
        reverseName = SalesOrder.P_SalesCustomer, 
        allowCreateNew = false, 
        mustBeEmptyForDelete = true
    )
    @OAFkey(columns = {"SalesOrderId"})
    public SalesOrder getSalesOrder() {
        if (salesOrder == null) {
            salesOrder = (SalesOrder) getObject(P_SalesOrder);
        }
        return salesOrder;
    }
    public void setSalesOrder(SalesOrder newValue) {
        SalesOrder old = this.salesOrder;
        fireBeforePropertyChange(P_SalesOrder, old, newValue);
        this.salesOrder = newValue;
        firePropertyChange(P_SalesOrder, old, this.salesOrder);
    }
     
    @OAOne(
        displayName = "Ship To", 
        reverseName = ShipTo.P_SalesCustomers, 
        cascadeSave = true, 
        cascadeDelete = true, 
        autoCreateNew = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ShipToId"})
    public ShipTo getShipTo() {
        if (shipTo == null) {
            shipTo = (ShipTo) getObject(P_ShipTo);
        }
        return shipTo;
    }
    public void setShipTo(ShipTo newValue) {
        ShipTo old = this.shipTo;
        fireBeforePropertyChange(P_ShipTo, old, newValue);
        this.shipTo = newValue;
        firePropertyChange(P_ShipTo, old, this.shipTo);
    }
    @OAEditQuery(enabledProperty = SalesCustomer.P_SalesOrder+"."+SalesOrder.P_CustomerPickUp, 
        enabledValue = false
    )
    public void onEditQueryShipTo(OAObjectEditQuery em) {
    }
     
    @OAMethod(displayName = "Update")
    public void updateSalesCustomer() {
        final Customer cust = getCustomer();
        if (cust == null) return;
        String s;
        for (Contact c : cust.getContacts()) {
            if (OAString.isEmpty(c.getName())) continue;
            if (OAString.isEmpty(getContact())) {
                s = c.getName();
                if (OAString.isNotEmpty(s)) setContact(s);
                s = c.getEmail();
                if (OAString.isNotEmpty(s)) setEmail(s);
                for (Phone p : c.getPhones()) {
                    s = p.getNumber();
                    if (OAString.isNotEmpty(s)) setPhone(s);
                    break;
                }
            }
        }
        setCustomerNumber(cust.getCustomerNumber());
        setName(cust.getName());
        setName2(cust.getName2());
        setAddress(cust.getAddress());
        setAddress2(cust.getAddress2());
        setAddress3(cust.getAddress3());
        setCity(cust.getCity());
        setState(cust.getState());
        setZip(cust.getZip());
        
        boolean b = cust.getTaxExempt();
        setTaxExempt(b);
        SalesOrder so = getSalesOrder();
        if (b) {
            if (so != null) {
                so.setTaxRate(0.0);
                so.setNull(so.P_TaxRate);
            }
        }
        else {
            TaxCode tc = cust.getTaxCode();
            if (tc != null && so != null) so.setTaxRate(tc.getTaxRate());
        }
        
        s = cust.getPhone();
        if (!OAString.isEmpty(s)) setPhone(s);
        
        s = cust.getFaxNumber();
        if (!OAString.isEmpty(s)) setFax(s);
    }
    @OAEditQuery(enabledProperty = SalesCustomer.P_Customer)
    public void onEditQueryUpdateSalesCustomer(OAObjectEditQuery em) {
    }

    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.customerNumber = rs.getString(2);
        this.name = rs.getString(3);
        this.name2 = rs.getString(4);
        this.address = rs.getString(5);
        this.address2 = rs.getString(6);
        this.address3 = rs.getString(7);
        this.city = rs.getString(8);
        this.state = rs.getString(9);
        this.zip = rs.getString(10);
        this.phone = rs.getString(11);
        this.phone2 = rs.getString(12);
        this.contact = rs.getString(13);
        this.note = rs.getString(14);
        this.fax = rs.getString(15);
        this.email = rs.getString(16);
        this.taxExempt = (rs.getShort(17) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, SalesCustomer.P_TaxExempt, true);
        }
        int customerFkey = rs.getInt(18);
        if (!rs.wasNull() && customerFkey > 0) {
            setProperty(P_Customer, new OAObjectKey(customerFkey));
        }
        int salesOrderFkey = rs.getInt(19);
        if (!rs.wasNull() && salesOrderFkey > 0) {
            setProperty(P_SalesOrder, new OAObjectKey(salesOrderFkey));
        }
        int shipToFkey = rs.getInt(20);
        if (!rs.wasNull() && shipToFkey > 0) {
            setProperty(P_ShipTo, new OAObjectKey(shipToFkey));
        }
        if (rs.getMetaData().getColumnCount() != 20) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
