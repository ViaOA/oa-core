// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.model.oa.method.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
import com.cdi.delegate.ModelDelegate;
 
@OAClass(
    shortName = "so",
    displayName = "Sales Order",
    displayProperty = "display",
    sortProperty = "date",
    filterClasses = {SalesOrderOpenFilter.class, SalesOrderSalesPersonFilter.class}
)
@OATable(
    indexes = {
        @OAIndex(name = "SalesOrderAssignedUser", fkey = true, columns = { @OAIndexColumn(name = "AssignedUserId") }), 
        @OAIndex(name = "NewOrderPriceCode", fkey = true, columns = { @OAIndexColumn(name = "PriceCodeId") }), 
        @OAIndex(name = "SalesOrderSalesOrderSource", fkey = true, columns = { @OAIndexColumn(name = "SalesOrderSourceId") }), 
        @OAIndex(name = "SalesOrderSalesOrderStatus", fkey = true, columns = { @OAIndexColumn(name = "SalesOrderStatusId") }), 
        @OAIndex(name = "SalesOrderSalesPersonUser", fkey = true, columns = { @OAIndexColumn(name = "SalesPersonUserId") })
    }
)
public class SalesOrder extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(SalesOrder.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Date = "Date";
    public static final String P_Date = "Date";
    public static final String PROPERTY_Project = "Project";
    public static final String P_Project = "Project";
    public static final String PROPERTY_DateExpected = "DateExpected";
    public static final String P_DateExpected = "DateExpected";
    public static final String PROPERTY_DateSubmitted = "DateSubmitted";
    public static final String P_DateSubmitted = "DateSubmitted";
    public static final String PROPERTY_DateProcessed = "DateProcessed";
    public static final String P_DateProcessed = "DateProcessed";
    public static final String PROPERTY_DateComplete = "DateComplete";
    public static final String P_DateComplete = "DateComplete";
    public static final String PROPERTY_DateClosed = "DateClosed";
    public static final String P_DateClosed = "DateClosed";
    public static final String PROPERTY_CloseReason = "CloseReason";
    public static final String P_CloseReason = "CloseReason";
    public static final String PROPERTY_TaxRate = "TaxRate";
    public static final String P_TaxRate = "TaxRate";
    public static final String PROPERTY_DiscountPercent = "DiscountPercent";
    public static final String P_DiscountPercent = "DiscountPercent";
    public static final String PROPERTY_ShippingPrice = "ShippingPrice";
    public static final String P_ShippingPrice = "ShippingPrice";
    public static final String PROPERTY_Color = "Color";
    public static final String P_Color = "Color";
    public static final String PROPERTY_Texture = "Texture";
    public static final String P_Texture = "Texture";
    public static final String PROPERTY_CustomerPickUp = "CustomerPickUp";
    public static final String P_CustomerPickUp = "CustomerPickUp";
    public static final String PROPERTY_LastRevisedDate = "LastRevisedDate";
    public static final String P_LastRevisedDate = "LastRevisedDate";
    public static final String PROPERTY_LastRevisedNote = "LastRevisedNote";
    public static final String P_LastRevisedNote = "LastRevisedNote";
    public static final String PROPERTY_BidDate = "BidDate";
    public static final String P_BidDate = "BidDate";
    public static final String PROPERTY_Sample = "Sample";
    public static final String P_Sample = "Sample";
    public static final String PROPERTY_CalculatedTotal = "CalculatedTotal";
    public static final String P_CalculatedTotal = "CalculatedTotal";
    public static final String PROPERTY_Architect = "Architect";
    public static final String P_Architect = "Architect";
    public static final String PROPERTY_Contractor = "Contractor";
    public static final String P_Contractor = "Contractor";
    public static final String PROPERTY_SubmitError = "SubmitError";
    public static final String P_SubmitError = "SubmitError";
     
    public static final String PROPERTY_TotalItemOurPrice = "TotalItemOurPrice";
    public static final String P_TotalItemOurPrice = "TotalItemOurPrice";
    public static final String PROPERTY_TotalItemSellPrice = "TotalItemSellPrice";
    public static final String P_TotalItemSellPrice = "TotalItemSellPrice";
    public static final String PROPERTY_TotalItemDiscount = "TotalItemDiscount";
    public static final String P_TotalItemDiscount = "TotalItemDiscount";
    public static final String PROPERTY_TotalService = "TotalService";
    public static final String P_TotalService = "TotalService";
    public static final String PROPERTY_TotalBeforeTax = "TotalBeforeTax";
    public static final String P_TotalBeforeTax = "TotalBeforeTax";
    public static final String PROPERTY_TotalTax = "TotalTax";
    public static final String P_TotalTax = "TotalTax";
    public static final String PROPERTY_TotalWithTax = "TotalWithTax";
    public static final String P_TotalWithTax = "TotalWithTax";
    public static final String PROPERTY_TotalOrder = "TotalOrder";
    public static final String P_TotalOrder = "TotalOrder";
    public static final String PROPERTY_TotalWeight = "TotalWeight";
    public static final String P_TotalWeight = "TotalWeight";
    public static final String PROPERTY_CurrentDateStatus = "CurrentDateStatus";
    public static final String P_CurrentDateStatus = "CurrentDateStatus";
    public static final String PROPERTY_LastFollowUp = "LastFollowUp";
    public static final String P_LastFollowUp = "LastFollowUp";
    public static final String PROPERTY_Display = "Display";
    public static final String P_Display = "Display";
    public static final String PROPERTY_CanEdit = "CanEdit";
    public static final String P_CanEdit = "CanEdit";
    public static final String PROPERTY_CalcFollowupDate = "CalcFollowupDate";
    public static final String P_CalcFollowupDate = "CalcFollowupDate";
     
    public static final String PROPERTY_AssignedUser = "AssignedUser";
    public static final String P_AssignedUser = "AssignedUser";
    public static final String PROPERTY_Order = "Order";
    public static final String P_Order = "Order";
    public static final String PROPERTY_PriceCode = "PriceCode";
    public static final String P_PriceCode = "PriceCode";
    public static final String PROPERTY_SalesCustomer = "SalesCustomer";
    public static final String P_SalesCustomer = "SalesCustomer";
    public static final String PROPERTY_SalesOrderItems = "SalesOrderItems";
    public static final String P_SalesOrderItems = "SalesOrderItems";
    public static final String PROPERTY_SalesOrderNotes = "SalesOrderNotes";
    public static final String P_SalesOrderNotes = "SalesOrderNotes";
    public static final String PROPERTY_SalesOrderSource = "SalesOrderSource";
    public static final String P_SalesOrderSource = "SalesOrderSource";
    public static final String PROPERTY_SalesOrderStatus = "SalesOrderStatus";
    public static final String P_SalesOrderStatus = "SalesOrderStatus";
    public static final String PROPERTY_SalesPersonUser = "SalesPersonUser";
    public static final String P_SalesPersonUser = "SalesPersonUser";
     
    public static final String METHOD_SubmitToQuickBooks = "SubmitToQuickBooks";
    public static final String M_SubmitToQuickBooks = "SubmitToQuickBooks";
    public static final String METHOD_Close = "Close";
    public static final String M_Close = "Close";
    public static final String METHOD_Reopen = "Reopen";
    public static final String M_Reopen = "Reopen";
    protected volatile int id;
    protected volatile OADate date;
    protected volatile String project;
    protected volatile OADate dateExpected;
    protected volatile OADate dateSubmitted;
    protected volatile OADate dateProcessed;
    protected volatile OADate dateComplete;
    protected volatile OADate dateClosed;
    protected volatile String closeReason;
    protected volatile double taxRate;
    protected volatile double discountPercent;
    protected volatile double shippingPrice;
    protected volatile String color;
    protected volatile String texture;
    protected volatile boolean customerPickUp;
    protected volatile OADate lastRevisedDate;
    protected volatile String lastRevisedNote;
    protected volatile OADate bidDate;
    protected volatile String sample;
    protected volatile double calculatedTotal;
    protected volatile String architect;
    protected volatile String contractor;
    protected volatile String submitError;
     
    // Links to other objects.
    protected volatile transient User assignedUser;
    protected volatile transient Order order;
    protected volatile transient PriceCode priceCode;
    protected volatile transient SalesCustomer salesCustomer;
    protected transient Hub<SalesOrderItem> hubSalesOrderItems;
    protected transient Hub<SalesOrderNote> hubSalesOrderNotes;
    protected volatile transient SalesOrderSource salesOrderSource;
    protected volatile transient SalesOrderStatus salesOrderStatus;
    protected volatile transient User salesPersonUser;
     
    public SalesOrder() {
        if (!isLoading()) {
            setDate(new OADate());
            getSalesCustomer(); // have it autoCreated
            setSalesPersonUser(ModelDelegate.getLoginUser());
        }
    }
     
    public SalesOrder(int id) {
        this();
        setId(id);
    }
     
    @OAEditQuery(enabledProperty = SalesOrder.P_CanEdit, contextEnabledProperty = AppUser.P_User+"."+User.P_CalcSalesWriteAccess, 
        viewDependentProperties = {SalesOrder.P_SalesOrderItems}
    )
    public void onEditQuery(OAObjectEditQuery em) {
        switch (em.getType()) {
        case AfterCopy:
            SalesOrder salesOrderCopy = (SalesOrder) em.getValue();
            salesOrderCopy.setDate(new OADate());
            salesOrderCopy.setDateSubmitted(null);
            salesOrderCopy.setDateProcessed(null);        
            salesOrderCopy.setDateComplete(null); 
            salesOrderCopy.setDateClosed(null);
            salesOrderCopy.setCloseReason(null);
            salesOrderCopy.setLastRevisedDate(null);
            salesOrderCopy.setLastRevisedNote(null);
            salesOrderCopy.setBidDate(null);
            salesOrderCopy.setSample(null);
            break;
        case AllowDelete:
            if (em.getValue() instanceof SalesOrder) em.setAllowed(getSalesOrderItems().size() == 0);
            break;
        case SetConfirmForDelete:
        case VerifyDelete:
            if (getSalesOrderItems().size() == 0) break;
            em.setResponse("Cant Delete order if it has Line Items");
            em.setAllowed(false);
            break;
        }
    }
    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(name = "DateValue", sqlType = java.sql.Types.DATE)
    public OADate getDate() {
        return date;
    }
    public void setDate(OADate newValue) {
        OADate old = date;
        fireBeforePropertyChange(P_Date, old, newValue);
        this.date = newValue;
        firePropertyChange(P_Date, old, this.date);
    }
     
    @OAProperty(maxLength = 50, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 50)
    public String getProject() {
        return project;
    }
    public void setProject(String newValue) {
        String old = project;
        fireBeforePropertyChange(P_Project, old, newValue);
        this.project = newValue;
        firePropertyChange(P_Project, old, this.project);
    }
     
    @OAProperty(displayName = "Expected Date", displayLength = 8, columnName = "Expected")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDateExpected() {
        return dateExpected;
    }
    public void setDateExpected(OADate newValue) {
        OADate old = dateExpected;
        fireBeforePropertyChange(P_DateExpected, old, newValue);
        this.dateExpected = newValue;
        firePropertyChange(P_DateExpected, old, this.dateExpected);
    }
     
    @OAProperty(displayName = "Date Submitted", displayLength = 8, columnLength = 9, columnName = "Submitted", isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDateSubmitted() {
        return dateSubmitted;
    }
    public void setDateSubmitted(OADate newValue) {
        OADate old = dateSubmitted;
        fireBeforePropertyChange(P_DateSubmitted, old, newValue);
        this.dateSubmitted = newValue;
        firePropertyChange(P_DateSubmitted, old, this.dateSubmitted);
    }
     
    @OAProperty(displayName = "Date Processed", displayLength = 8, columnLength = 14, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDateProcessed() {
        return dateProcessed;
    }
    public void setDateProcessed(OADate newValue) {
        OADate old = dateProcessed;
        fireBeforePropertyChange(P_DateProcessed, old, newValue);
        this.dateProcessed = newValue;
        firePropertyChange(P_DateProcessed, old, this.dateProcessed);
    }
     
    @OAProperty(displayName = "Complete Date", displayLength = 8, columnLength = 9, columnName = "Completed", hasCustomCode = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDateComplete() {
        return dateComplete;
    }
    public void setDateComplete(OADate newValue) {
        OADate old = dateComplete;
        fireBeforePropertyChange(P_DateComplete, old, newValue);
        this.dateComplete = newValue;
        firePropertyChange(P_DateComplete, old, this.dateComplete);
    }
    @OAEditQuery
    public void onEditQueryDateComplete(OAObjectEditQuery em) {
        // CUSTOM
        switch (em.getType()) {
        case AllowEnabled:
            // can be set after dateSubmitted!=null and dateClosed=null
            em.setAllowed(getDateClosed() == null && getDateSubmitted() != null);
            break;
        }
    }
     
    @OAProperty(displayName = "Date Closed", displayLength = 8, columnName = "Closed", isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDateClosed() {
        return dateClosed;
    }
    public void setDateClosed(OADate newValue) {
        OADate old = dateClosed;
        fireBeforePropertyChange(P_DateClosed, old, newValue);
        this.dateClosed = newValue;
        firePropertyChange(P_DateClosed, old, this.dateClosed);
    }
     
    @OAProperty(displayName = "Close Reason", maxLength = 75, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 75)
    public String getCloseReason() {
        return closeReason;
    }
    public void setCloseReason(String newValue) {
        String old = closeReason;
        fireBeforePropertyChange(P_CloseReason, old, newValue);
        this.closeReason = newValue;
        firePropertyChange(P_CloseReason, old, this.closeReason);
    }
    @OAEditQuery(visibleProperty = SalesOrder.P_DateClosed)
    public void onEditQueryCloseReason(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Tax Rate", description = "percentage", decimalPlaces = 2, displayLength = 7, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    /**
      percentage
    */
    public double getTaxRate() {
        return taxRate;
    }
    public void setTaxRate(double newValue) {
        double old = taxRate;
        fireBeforePropertyChange(P_TaxRate, old, newValue);
        this.taxRate = newValue;
        firePropertyChange(P_TaxRate, old, this.taxRate);
    }
     
    @OAProperty(displayName = "Percent Discount", description = "based on material/items only", decimalPlaces = 2, displayLength = 7, columnLength = 10, columnName = "% discount")
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    /**
      based on material/items only
    */
    public double getDiscountPercent() {
        return discountPercent;
    }
    public void setDiscountPercent(double newValue) {
        double old = discountPercent;
        fireBeforePropertyChange(P_DiscountPercent, old, newValue);
        this.discountPercent = newValue;
        firePropertyChange(P_DiscountPercent, old, this.discountPercent);
    }
    @OAEditQuery(visibleProperty = SalesOrder.P_DiscountPercent)
    public void onEditQueryDiscountPercent(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Shipping Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 8, columnName = "Ship $")
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getShippingPrice() {
        return shippingPrice;
    }
    public void setShippingPrice(double newValue) {
        double old = shippingPrice;
        fireBeforePropertyChange(P_ShippingPrice, old, newValue);
        this.shippingPrice = newValue;
        firePropertyChange(P_ShippingPrice, old, this.shippingPrice);
    }
     
    @OAProperty(maxLength = 45, displayLength = 15)
    @OAColumn(maxLength = 45)
    public String getColor() {
        return color;
    }
    public void setColor(String newValue) {
        String old = color;
        fireBeforePropertyChange(P_Color, old, newValue);
        this.color = newValue;
        firePropertyChange(P_Color, old, this.color);
    }
     
    @OAProperty(maxLength = 45, displayLength = 15)
    @OAColumn(maxLength = 45)
    public String getTexture() {
        return texture;
    }
    public void setTexture(String newValue) {
        String old = texture;
        fireBeforePropertyChange(P_Texture, old, newValue);
        this.texture = newValue;
        firePropertyChange(P_Texture, old, this.texture);
    }
     
    @OAProperty(displayName = "Customer Pick Up", displayLength = 5, columnLength = 7, columnName = "Cust PU")
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getCustomerPickUp() {
        return customerPickUp;
    }
    public void setCustomerPickUp(boolean newValue) {
        boolean old = customerPickUp;
        fireBeforePropertyChange(P_CustomerPickUp, old, newValue);
        this.customerPickUp = newValue;
        firePropertyChange(P_CustomerPickUp, old, this.customerPickUp);
    }
     
    @OAProperty(displayName = "Last Revised Date", displayLength = 8, columnLength = 12, columnName = "Last Revised")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getLastRevisedDate() {
        return lastRevisedDate;
    }
    public void setLastRevisedDate(OADate newValue) {
        OADate old = lastRevisedDate;
        fireBeforePropertyChange(P_LastRevisedDate, old, newValue);
        this.lastRevisedDate = newValue;
        firePropertyChange(P_LastRevisedDate, old, this.lastRevisedDate);
    }
     
    @OAProperty(displayName = "Last Revised Note", maxLength = 75, displayLength = 20)
    @OAColumn(maxLength = 75)
    public String getLastRevisedNote() {
        return lastRevisedNote;
    }
    public void setLastRevisedNote(String newValue) {
        String old = lastRevisedNote;
        fireBeforePropertyChange(P_LastRevisedNote, old, newValue);
        this.lastRevisedNote = newValue;
        firePropertyChange(P_LastRevisedNote, old, this.lastRevisedNote);
    }
     
    @OAProperty(displayName = "Bid Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getBidDate() {
        return bidDate;
    }
    public void setBidDate(OADate newValue) {
        OADate old = bidDate;
        fireBeforePropertyChange(P_BidDate, old, newValue);
        this.bidDate = newValue;
        firePropertyChange(P_BidDate, old, this.bidDate);
    }
     
    @OAProperty(maxLength = 25, displayLength = 10, columnLength = 6, hasCustomCode = true)
    @OAColumn(maxLength = 25)
    public String getSample() {
        return sample;
    }
    public void setSample(String newValue) {
        String old = sample;
        fireBeforePropertyChange(P_Sample, old, newValue);
        this.sample = newValue;
        firePropertyChange(P_Sample, old, this.sample);
    }
    @OAEditQuery
    public void onEditQuerySample(OAObjectEditQuery em) {
        switch (em.getType()) {
        case AllowEnabled:
            if (em.getAllowed()) break;
            em.setAllowed(true); 
            em.setResponse("");
            break;
        }
    }
     
    @OAProperty(displayName = "Calculated Total", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 10, columnName = "Calc Total")
    public double getCalculatedTotal() {
        return calculatedTotal;
    }
    public void setCalculatedTotal(double newValue) {
        double old = calculatedTotal;
        fireBeforePropertyChange(P_CalculatedTotal, old, newValue);
        this.calculatedTotal = newValue;
        firePropertyChange(P_CalculatedTotal, old, this.calculatedTotal);
    }
     
    @OAProperty(maxLength = 75, displayLength = 20)
    @OAColumn(maxLength = 75)
    public String getArchitect() {
        return architect;
    }
    public void setArchitect(String newValue) {
        String old = architect;
        fireBeforePropertyChange(P_Architect, old, newValue);
        this.architect = newValue;
        firePropertyChange(P_Architect, old, this.architect);
    }
     
    @OAProperty(maxLength = 75, displayLength = 20)
    @OAColumn(maxLength = 75)
    public String getContractor() {
        return contractor;
    }
    public void setContractor(String newValue) {
        String old = contractor;
        fireBeforePropertyChange(P_Contractor, old, newValue);
        this.contractor = newValue;
        firePropertyChange(P_Contractor, old, this.contractor);
    }
     
    @OAProperty(displayName = "Submit Error", displayLength = 30, columnLength = 20, isProcessed = true)
    public String getSubmitError() {
        return submitError;
    }
    public void setSubmitError(String newValue) {
        String old = submitError;
        fireBeforePropertyChange(P_SubmitError, old, newValue);
        this.submitError = newValue;
        firePropertyChange(P_SubmitError, old, this.submitError);
    }
    @OAEditQuery(visibleProperty = SalesOrder.P_SubmitError)
    public void onEditQuerySubmitError(OAObjectEditQuery em) {
    }
     
    @OACalculatedProperty(displayName = "Total Item Our Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 14, columnName = "Tot Item Our $", properties = {P_SalesOrderItems+"."+SalesOrderItem.P_TotalItemOurPrice})
    public double getTotalItemOurPrice() {
        double tot = 0.0d;
        for (SalesOrderItem soi : getSalesOrderItems()) {
            tot += soi.getTotalItemOurPrice();
            tot = OAConv.round(tot, 2);
        }
        return tot;
    }
    @OAEditQuery(contextVisibleProperty = AppUser.P_User+"."+User.P_CalcPricingReadAccess)
    public void onEditQueryTotalItemOurPrice(OAObjectEditQuery em) {
    }
     
    @OACalculatedProperty(displayName = "Total Item Sell Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 10, columnName = "Tot Item $", properties = {P_SalesOrderItems+"."+SalesOrderItem.P_TotalItemSellPrice})
    public double getTotalItemSellPrice() {
        double tot = 0.0d;
        for (SalesOrderItem soi : getSalesOrderItems()) {
            tot += soi.getTotalItemSellPrice();
            tot = OAConv.round(tot, 2);
        }
        return tot;
    }
     
    @OACalculatedProperty(displayName = "Total Item Discount", decimalPlaces = 2, isCurrency = true, displayLength = 8, columnLength = 12, columnName = "Total Disc $", properties = {P_DiscountPercent, P_TotalItemSellPrice})
    public double getTotalItemDiscount() {
        double disc = this.getDiscountPercent();
        if (disc == 0) return 0;
        disc /= 100;
        disc = OAConv.round(disc, 2);
        double dSell = this.getTotalItemSellPrice();
        double d = (dSell * disc);
        d = OAConv.round(d, 2);
        return d;
    }
    @OAEditQuery(visibleProperty = SalesOrder.P_DiscountPercent)
    public void onEditQueryTotalItemDiscount(OAObjectEditQuery em) {
    }
     
    @OACalculatedProperty(displayName = "Total Tooling", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnName = "Tot Tool$", properties = {P_SalesOrderItems+"."+SalesOrderItem.P_ServicePrice})
    public double getTotalService() {
        double d = 0.0d;
        for (SalesOrderItem soi : getSalesOrderItems()) {
            d += soi.getServicePrice();
            d = OAConv.round(d, 2);
        }
        return d;
    }
     
    @OACalculatedProperty(displayName = "Total Before Tax", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 14, columnName = "Tot before tax", properties = {P_TotalService, P_TotalItemSellPrice, P_TotalItemDiscount})
    public double getTotalBeforeTax() {
        double d = getTotalItemSellPrice();
        double d2 = getTotalItemDiscount();
        d -= d2;
        d = OAConv.round(d, 2);
        d2 = getTotalService();
        d += d2;
        d = OAConv.round(d, 2);
        return d;
    }
     
    @OACalculatedProperty(displayName = "Total Tax", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 8, columnName = "Tot Tax", properties = {P_TotalBeforeTax, P_TaxRate})
    public double getTotalTax() {
        double bdTotal = getTotalBeforeTax();
        double d = getTaxRate();
        d /= 100.0d;
        d = OAConv.round(d, 4);
        d *= bdTotal;
        d = OAConv.round(d, 2);
        return d;
    }
     
    @OACalculatedProperty(displayName = "Total With Tax", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 14, properties = {P_TotalTax, P_TotalBeforeTax})
    public double getTotalWithTax() {
        double d = getTotalBeforeTax();
        d += getTotalTax();
        d = OAConv.round(d, 2);
        return d;
    }
     
    @OACalculatedProperty(displayName = "Total Order", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 11, properties = {P_TotalWithTax, P_ShippingPrice})
    public double getTotalOrder() {
        double d = this.getTotalWithTax();
        d += this.getShippingPrice();
        d = OAConv.round(d, 2);
        return d;
    }
     
    @OACalculatedProperty(displayName = "Total Weight", displayLength = 8, columnName = "Total Wt", properties = {P_SalesOrderItems+"."+SalesOrderItem.P_TotalWeight})
    public int getTotalWeight() {
        return SalesOrderDelegate.getTotalWeight(this);
    }
     
    @OACalculatedProperty(displayName = "Current Date Status", displayLength = 15, columnLength = 11, columnName = "Status", properties = {P_DateSubmitted, P_DateComplete, P_DateClosed})
    public String getCurrentDateStatus() {
        return SalesOrderDelegate.getCurrentDateStatus(this);
    }
     
    @OACalculatedProperty(displayName = "Last Follow Up", displayLength = 12, properties = {P_SalesOrderNotes+"."+SalesOrderNote.P_FollowupDate})
    public OADate getLastFollowUp() {
        return SalesOrderDelegate.getLastFollowUp(this);
    }
     
    @OACalculatedProperty(displayLength = 18, columnLength = 32, properties = {P_Project, P_SalesPersonUser+"."+User.P_FullName, P_SalesCustomer+"."+SalesCustomer.P_Name})
    public String getDisplay() {
        String display = "";
        
        String project = this.getProject();
        display = OAString.concat(display, project, ", ");
    
        SalesCustomer salesCustomer = this.getSalesCustomer();
        if (salesCustomer != null) {
            display = OAString.concat(display, salesCustomer.getName(), ", ");
        }
    
        User user = this.getSalesPersonUser();
        if (user != null) {
            display = OAString.concat(display, salesPersonUser.getFullName(), ", ");
        }
        return display;
    }
     
    @OACalculatedProperty(displayName = "Can Edit", displayLength = 5, columnLength = 8, properties = {P_DateSubmitted, P_DateClosed})
    public boolean getCanEdit() {
        boolean b = (this.getDateSubmitted() == null && this.getDateClosed() == null);
        return b;
    }
     
    @OACalculatedProperty(displayName = "Followup Date", displayLength = 8, properties = {P_SalesOrderNotes+"."+SalesOrderNote.P_FollowupDate, P_SalesOrderNotes+"."+SalesOrderNote.P_FollowedUp})
    public OADate getCalcFollowupDate() {
        OADate d = null;
        for (SalesOrderNote salesOrderNote : getSalesOrderNotes()) {
            if (salesOrderNote.getFollowedUp()) continue;
            OADate d2 = salesOrderNote.getFollowupDate();
            if (d2 != null && (d == null || d2.before(d))) d = d2;
        }
        return d;
    }
     
    @OAOne(
        displayName = "Assigned User", 
        reverseName = User.P_AssignedSalesOrders, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"AssignedUserId"})
    public User getAssignedUser() {
        if (assignedUser == null) {
            assignedUser = (User) getObject(P_AssignedUser);
        }
        return assignedUser;
    }
    public void setAssignedUser(User newValue) {
        User old = this.assignedUser;
        fireBeforePropertyChange(P_AssignedUser, old, newValue);
        this.assignedUser = newValue;
        firePropertyChange(P_AssignedUser, old, this.assignedUser);
    }
     
    @OAOne(
        reverseName = Order.P_SalesOrder, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    public Order getOrder() {
        if (order == null) {
            order = (Order) getObject(P_Order);
        }
        return order;
    }
    public void setOrder(Order newValue) {
        Order old = this.order;
        fireBeforePropertyChange(P_Order, old, newValue);
        this.order = newValue;
        firePropertyChange(P_Order, old, this.order);
    }
    @OAEditQuery(visibleProperty = SalesOrder.P_Order)
    public void onEditQueryOrder(OAObjectEditQuery em) {
    }
     
    @OAOne(
        displayName = "Price Code", 
        reverseName = PriceCode.P_SalesOrders, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"PriceCodeId"})
    public PriceCode getPriceCode() {
        if (priceCode == null) {
            priceCode = (PriceCode) getObject(P_PriceCode);
        }
        return priceCode;
    }
    public void setPriceCode(PriceCode newValue) {
        PriceCode old = this.priceCode;
        fireBeforePropertyChange(P_PriceCode, old, newValue);
        this.priceCode = newValue;
        firePropertyChange(P_PriceCode, old, this.priceCode);
    }
     
    @OAOne(
        displayName = "Sales Customer", 
        owner = true, 
        reverseName = SalesCustomer.P_SalesOrder, 
        required = true, 
        cascadeSave = true, 
        cascadeDelete = true, 
        autoCreateNew = true, 
        allowAddExisting = false
    )
    public SalesCustomer getSalesCustomer() {
        if (salesCustomer == null) {
            salesCustomer = (SalesCustomer) getObject(P_SalesCustomer);
        }
        return salesCustomer;
    }
    public void setSalesCustomer(SalesCustomer newValue) {
        SalesCustomer old = this.salesCustomer;
        fireBeforePropertyChange(P_SalesCustomer, old, newValue);
        this.salesCustomer = newValue;
        firePropertyChange(P_SalesCustomer, old, this.salesCustomer);
    }
     
    @OAMany(
        displayName = "Sales Order Items", 
        toClass = SalesOrderItem.class, 
        owner = true, 
        reverseName = SalesOrderItem.P_SalesOrder, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true, 
        seqProperty = SalesOrderItem.P_Seq, 
        sortProperty = SalesOrderItem.P_Seq
    )
    public Hub<SalesOrderItem> getSalesOrderItems() {
        if (hubSalesOrderItems == null) {
            hubSalesOrderItems = (Hub<SalesOrderItem>) getHub(P_SalesOrderItems);
        }
        return hubSalesOrderItems;
    }
    @OAEditQuery
    public static void onEditQuerySalesOrderItemsModel(OAObjectModel om) {
        // custom model code
        om.setAllowMultiSelect(true);
        om.setAllowCut(true);
        om.setAllowCopy(true);
        om.setAllowPaste(true);
    }
     
    @OAMany(
        displayName = "Sales Order Notes", 
        toClass = SalesOrderNote.class, 
        owner = true, 
        reverseName = SalesOrderNote.P_SalesOrder, 
        cascadeSave = true, 
        cascadeDelete = true, 
        sortProperty = SalesOrderNote.P_Created
    )
    public Hub<SalesOrderNote> getSalesOrderNotes() {
        if (hubSalesOrderNotes == null) {
            hubSalesOrderNotes = (Hub<SalesOrderNote>) getHub(P_SalesOrderNotes);
        }
        return hubSalesOrderNotes;
    }
     
    @OAOne(
        displayName = "Sales Order Source", 
        reverseName = SalesOrderSource.P_SalesOrders, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SalesOrderSourceId"})
    public SalesOrderSource getSalesOrderSource() {
        if (salesOrderSource == null) {
            salesOrderSource = (SalesOrderSource) getObject(P_SalesOrderSource);
        }
        return salesOrderSource;
    }
    public void setSalesOrderSource(SalesOrderSource newValue) {
        SalesOrderSource old = this.salesOrderSource;
        fireBeforePropertyChange(P_SalesOrderSource, old, newValue);
        this.salesOrderSource = newValue;
        firePropertyChange(P_SalesOrderSource, old, this.salesOrderSource);
    }
     
    @OAOne(
        displayName = "Sales Order Status", 
        reverseName = SalesOrderStatus.P_SalesOrders, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SalesOrderStatusId"})
    public SalesOrderStatus getSalesOrderStatus() {
        if (salesOrderStatus == null) {
            salesOrderStatus = (SalesOrderStatus) getObject(P_SalesOrderStatus);
        }
        return salesOrderStatus;
    }
    public void setSalesOrderStatus(SalesOrderStatus newValue) {
        SalesOrderStatus old = this.salesOrderStatus;
        fireBeforePropertyChange(P_SalesOrderStatus, old, newValue);
        this.salesOrderStatus = newValue;
        firePropertyChange(P_SalesOrderStatus, old, this.salesOrderStatus);
    }
     
    @OAOne(
        displayName = "Sales Person", 
        reverseName = User.P_SalesPersonSalesOrders, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SalesPersonUserId"})
    public User getSalesPersonUser() {
        if (salesPersonUser == null) {
            salesPersonUser = (User) getObject(P_SalesPersonUser);
        }
        return salesPersonUser;
    }
    public void setSalesPersonUser(User newValue) {
        User old = this.salesPersonUser;
        fireBeforePropertyChange(P_SalesPersonUser, old, newValue);
        this.salesPersonUser = newValue;
        firePropertyChange(P_SalesPersonUser, old, this.salesPersonUser);
    }
     
    @OAMethod(displayName = "Submit")
    public void submitToQuickBooks() {
        if (!verifyCommand(M_SubmitToQuickBooks)) throw new RuntimeException("verify command returned false");
        this.setDateSubmitted(new OADate());
        this.setDateClosed(new OADate());
    }
    @OAEditQuery(enabledProperty = SalesOrder.P_DateSubmitted, enabledValue = false, 
        viewDependentProperties = {SalesOrder.P_DateClosed}
    )
    public void onEditQuerySubmitToQuickBooks(OAObjectEditQuery em) {
        switch (em.getType()) {
        case VerifyCommand:
            if (!em.getAllowed()) break;
            String[] ss = SalesOrderDelegate.getInvalidReasons(this, true);
            if (ss != null) {
                em.setAllowed(false);
    
                String s = "The following need to be corrected before submitting to Quickbooks";
                int cnt = 0;
                for (String sx : ss) {
                    s = OAString.append(s, sx, "\n");
                    if (++cnt == 10) {
                        s = OAString.append(s, "... first 10", "\n");
                        break;
                    }
                }
                em.setResponse(s);
            }
            break;
        }
    }

    @OAMethod(displayName = "Close")
    public void close(SalesOrderCloseMethod data) {
        if (getDateClosed() != null) return;
        setDateClosed(new OADate());
        setCloseReason(data.getCloseReason());
    }
    @OAEditQuery(visibleProperty = SalesOrder.P_DateClosed, visibleValue = false)
    public void onEditQueryClose(OAObjectEditQuery em) {
        switch (em.getType()) {
        case AllowEnabled:
            if (getDateClosed() == null) {
                em.setAllowed(true); 
            }
            break;
        }
    }

    @OAMethod(displayName = "Reopen")
    public void reopen() {
        setDateClosed(null);
    }
    @OAEditQuery(visibleProperty = SalesOrder.P_DateClosed, viewDependentProperties = {SalesOrder.P_DateSubmitted, SalesOrder.P_DateClosed}, 
        contextDependentProperties = {AppUser.P_Admin, AppUser.P_User+"."+User.P_AdminAccess}
    )
    public void onEditQueryReopen(OAObjectEditQuery em) {
        switch (em.getType()) {
        case AllowEnabled:
            boolean b = (ModelDelegate.isAdminUser() && getDateClosed() != null && getDateSubmitted() == null);
            em.setAllowed(b);
            break;
        case AllowVisible:
            b = (ModelDelegate.isAdminUser() && getDateClosed() != null && getDateSubmitted() == null);
            em.setAllowed(b);
            break;
        }
    }

    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.date = new OADate(date);
        this.project = rs.getString(3);
        date = rs.getDate(4);
        if (date != null) this.dateExpected = new OADate(date);
        date = rs.getDate(5);
        if (date != null) this.dateSubmitted = new OADate(date);
        date = rs.getDate(6);
        if (date != null) this.dateProcessed = new OADate(date);
        date = rs.getDate(7);
        if (date != null) this.dateComplete = new OADate(date);
        date = rs.getDate(8);
        if (date != null) this.dateClosed = new OADate(date);
        this.closeReason = rs.getString(9);
        this.taxRate = (double) rs.getDouble(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrder.P_TaxRate, true);
        }
        this.discountPercent = (double) rs.getDouble(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrder.P_DiscountPercent, true);
        }
        this.shippingPrice = (double) rs.getDouble(12);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrder.P_ShippingPrice, true);
        }
        this.color = rs.getString(13);
        this.texture = rs.getString(14);
        this.customerPickUp = (rs.getShort(15) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrder.P_CustomerPickUp, true);
        }
        date = rs.getDate(16);
        if (date != null) this.lastRevisedDate = new OADate(date);
        this.lastRevisedNote = rs.getString(17);
        date = rs.getDate(18);
        if (date != null) this.bidDate = new OADate(date);
        this.sample = rs.getString(19);
        this.architect = rs.getString(20);
        this.contractor = rs.getString(21);
        int assignedUserFkey = rs.getInt(22);
        if (!rs.wasNull() && assignedUserFkey > 0) {
            setProperty(P_AssignedUser, new OAObjectKey(assignedUserFkey));
        }
        int priceCodeFkey = rs.getInt(23);
        if (!rs.wasNull() && priceCodeFkey > 0) {
            setProperty(P_PriceCode, new OAObjectKey(priceCodeFkey));
        }
        int salesOrderSourceFkey = rs.getInt(24);
        if (!rs.wasNull() && salesOrderSourceFkey > 0) {
            setProperty(P_SalesOrderSource, new OAObjectKey(salesOrderSourceFkey));
        }
        int salesOrderStatusFkey = rs.getInt(25);
        if (!rs.wasNull() && salesOrderStatusFkey > 0) {
            setProperty(P_SalesOrderStatus, new OAObjectKey(salesOrderStatusFkey));
        }
        int salesPersonUserFkey = rs.getInt(26);
        if (!rs.wasNull() && salesPersonUserFkey > 0) {
            setProperty(P_SalesPersonUser, new OAObjectKey(salesPersonUserFkey));
        }
        if (rs.getMetaData().getColumnCount() != 26) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
