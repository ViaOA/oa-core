// Generated by OABuilder
package com.cdi.model.oa;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

import com.cdi.delegate.ModelDelegate;
import com.cdi.model.oa.method.SalesOrderItemAssignSameItemAddOnMethod;
import com.viaoa.annotation.OACalculatedProperty;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAIndex;
import com.viaoa.annotation.OAIndexColumn;
import com.viaoa.annotation.OALinkTable;
import com.viaoa.annotation.OAMany;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAObjCallback;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.annotation.OATable;
import com.viaoa.hub.Hub;
import com.viaoa.hub.HubEvent;
import com.viaoa.hub.HubListenerAdapter;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCallback;
import com.viaoa.object.OAObjectInfoDelegate;
import com.viaoa.object.OAObjectKey;
import com.viaoa.util.OAConv;
import com.viaoa.util.OAString;

@OAClass(shortName = "soi", displayName = "Sales Order Item", displayProperty = "salesOrder", sortProperty = "salesOrder")
@OATable(indexes = {
		@OAIndex(name = "NewOrderItemItem", fkey = true, columns = { @OAIndexColumn(name = "ItemId") }),
		@OAIndex(name = "NewOrderItemSalesOrder", fkey = true, columns = { @OAIndexColumn(name = "SalesOrderId") }),
		@OAIndex(name = "SalesOrderItemServiceCode", fkey = true, columns = { @OAIndexColumn(name = "ServiceCodeId") })
})
public class SalesOrderItem extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(SalesOrderItem.class.getName());

	public static final String PROPERTY_Id = "Id";
	public static final String P_Id = "Id";
	public static final String PROPERTY_Seq = "Seq";
	public static final String P_Seq = "Seq";
	public static final String PROPERTY_Location = "Location";
	public static final String P_Location = "Location";
	public static final String PROPERTY_CustomItem = "CustomItem";
	public static final String P_CustomItem = "CustomItem";
	public static final String PROPERTY_ItemDescription = "ItemDescription";
	public static final String P_ItemDescription = "ItemDescription";
	public static final String PROPERTY_Quantity = "Quantity";
	public static final String P_Quantity = "Quantity";
	public static final String PROPERTY_UnitPrice = "UnitPrice";
	public static final String P_UnitPrice = "UnitPrice";
	public static final String PROPERTY_UnitWeight = "UnitWeight";
	public static final String P_UnitWeight = "UnitWeight";
	public static final String PROPERTY_ServicePrice = "ServicePrice";
	public static final String P_ServicePrice = "ServicePrice";
	public static final String PROPERTY_AddOnPrice = "AddOnPrice";
	public static final String P_AddOnPrice = "AddOnPrice";
	public static final String PROPERTY_Note = "Note";
	public static final String P_Note = "Note";
	public static final String PROPERTY_ShowSubTotal = "ShowSubTotal";
	public static final String P_ShowSubTotal = "ShowSubTotal";
	public static final String PROPERTY_FakeUnitPrice = "FakeUnitPrice";
	public static final String P_FakeUnitPrice = "FakeUnitPrice";

	public static final String PROPERTY_SellRate = "SellRate";
	public static final String P_SellRate = "SellRate";
	public static final String PROPERTY_TotalItemOurPrice = "TotalItemOurPrice";
	public static final String P_TotalItemOurPrice = "TotalItemOurPrice";
	public static final String PROPERTY_ItemSellPrice = "ItemSellPrice";
	public static final String P_ItemSellPrice = "ItemSellPrice";
	public static final String PROPERTY_TotalItemSellPrice = "TotalItemSellPrice";
	public static final String P_TotalItemSellPrice = "TotalItemSellPrice";
	public static final String PROPERTY_TotalSellPrice = "TotalSellPrice";
	public static final String P_TotalSellPrice = "TotalSellPrice";
	public static final String PROPERTY_TotalWeight = "TotalWeight";
	public static final String P_TotalWeight = "TotalWeight";
	public static final String PROPERTY_AllowsItemAddOn = "AllowsItemAddOn";
	public static final String P_AllowsItemAddOn = "AllowsItemAddOn";

	public static final String PROPERTY_Item = "Item";
	public static final String P_Item = "Item";
	public static final String PROPERTY_ItemAddOns = "ItemAddOns";
	public static final String P_ItemAddOns = "ItemAddOns";
	public static final String PROPERTY_SalesOrder = "SalesOrder";
	public static final String P_SalesOrder = "SalesOrder";
	public static final String PROPERTY_ServiceCode = "ServiceCode";
	public static final String P_ServiceCode = "ServiceCode";

	public static final String METHOD_AssignSameItemAddOn = "AssignSameItemAddOn";
	public static final String M_AssignSameItemAddOn = "AssignSameItemAddOn";
	protected volatile int id;
	protected volatile int seq;
	protected volatile String location;
	protected volatile boolean customItem;
	protected volatile String itemDescription;
	protected volatile int quantity;
	protected volatile double unitPrice;
	protected volatile int unitWeight;
	protected volatile double servicePrice;
	protected volatile double addOnPrice;
	protected volatile String note;
	protected volatile boolean showSubTotal;
	protected volatile double fakeUnitPrice;

	// Links to other objects.
	protected volatile transient Item item;
	protected transient Hub<ItemAddOn> hubItemAddOns;
	protected volatile transient SalesOrder salesOrder;
	protected volatile transient ServiceCode serviceCode;

	public SalesOrderItem() {
	}

	public SalesOrderItem(int id) {
		this();
		setId(id);
	}

	@OAObjCallback
	public void callback(OAObjectCallback em) {
		switch (em.getType()) {
		case AfterCopy:
			SalesOrderItem salesOrderItemCopy = (SalesOrderItem) em.getValue();
			salesOrderItemCopy.setAddOnPrice(0.0d);
			for (ItemAddOn ao : getItemAddOns()) {
				salesOrderItemCopy.getItemAddOns().add(ao);
			}
			break;
		}
	}

	@OAProperty(isUnique = true, displayLength = 6)
	@OAId()
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(displayLength = 6, isAutoSeq = true)
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getSeq() {
		return seq;
	}

	public void setSeq(int newValue) {
		int old = seq;
		fireBeforePropertyChange(P_Seq, old, newValue);
		this.seq = newValue;
		firePropertyChange(P_Seq, old, this.seq);
	}

	@OAProperty(maxLength = 75, displayLength = 10)
	@OAColumn(maxLength = 75)
	public String getLocation() {
		return location;
	}

	public void setLocation(String newValue) {
		String old = location;
		fireBeforePropertyChange(P_Location, old, newValue);
		this.location = newValue;
		firePropertyChange(P_Location, old, this.location);
	}

	@OAProperty(displayName = "Custom Item", displayLength = 5, columnLength = 6, inputMask = "true;false;false", outputFormat = "true;false;false", columnName = "Custom", hasCustomCode = true)
	@OAColumn(sqlType = java.sql.Types.BOOLEAN)
	public boolean getCustomItem() {
		return customItem;
	}

	public void setCustomItem(boolean newValue) {
		fireBeforePropertyChange(P_CustomItem, this.customItem, newValue);
		boolean old = customItem;
		this.customItem = newValue;
		firePropertyChange(P_CustomItem, old, this.customItem);

		if (isLoading()) {
			return;
		}
		if (!beginServerOnly()) {
			return;
		}
		try {
			setItem(null);
			setItemDescription(null);
			setUnitPrice(0d);
			setNull(P_UnitPrice);
			if (!customItem && getItem() == null) {
				getItemAddOns().removeAll();
			}
		} finally {
			endServerOnly();
		}
	}

	@OAObjCallback
	public void customItemCallback(OAObjectCallback em) {
		switch (em.getType()) {
		case SetConfirmForPropertyChange:
			if (em.getBooleanValue()) {
				if (getItem() != null) {
					em.setConfirmMessage("Ok to change to custom item and remove the current item?");
				}
			} else if (OAString.isNotEmpty(getItemDescription())) {
				em.setConfirmMessage("Ok to change from custom item and remove the current item description?");
			}
			break;
		}
	}

	@OAProperty(displayName = "Item Description", maxLength = 75, displayLength = 20, columnLength = 15, hasCustomCode = true)
	@OAColumn(maxLength = 75)
	public String getItemDescription() {
		return itemDescription;
	}

	public void setItemDescription(String newValue) {
		String old = itemDescription;
		fireBeforePropertyChange(P_ItemDescription, old, newValue);
		this.itemDescription = newValue;
		firePropertyChange(P_ItemDescription, old, this.itemDescription);
	}

	@OAObjCallback(enabledProperty = SalesOrderItem.P_CustomItem)
	public void itemDescriptionCallback(OAObjectCallback em) {
	}

	@OAProperty(displayLength = 6, columnName = "Qty")
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int newValue) {
		int old = quantity;
		fireBeforePropertyChange(P_Quantity, old, newValue);
		this.quantity = newValue;
		firePropertyChange(P_Quantity, old, this.quantity);
	}

	@OAProperty(displayName = "Our Item Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 8, columnName = "Item $")
	@OAColumn(sqlType = java.sql.Types.DOUBLE)
	public double getUnitPrice() {
		return unitPrice;
	}

	public void setUnitPrice(double newValue) {
		double old = unitPrice;
		fireBeforePropertyChange(P_UnitPrice, old, newValue);
		this.unitPrice = newValue;
		firePropertyChange(P_UnitPrice, old, this.unitPrice);
	}

	@OAObjCallback(enabledProperty = SalesOrderItem.P_CustomItem, contextVisibleProperty = AppUser.P_User + "."
			+ User.P_CalcPricingReadAccess)
	public void unitPriceCallback(OAObjectCallback em) {
	}

	@OAProperty(displayName = "Item Weight", displayLength = 6, columnLength = 7, columnName = "Item Wt", hasCustomCode = true)
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getUnitWeight() {
		return unitWeight;
	}

	public void setUnitWeight(int newValue) {
		int old = unitWeight;
		fireBeforePropertyChange(P_UnitWeight, old, newValue);
		this.unitWeight = newValue;
		firePropertyChange(P_UnitWeight, old, this.unitWeight);
	}

	@OAObjCallback(enabledProperty = SalesOrderItem.P_CustomItem)
	public void unitWeightCallback(OAObjectCallback em) {
		switch (em.getType()) {
		case RenderLabel:
			javax.swing.JLabel lbl = em.getLabel();
			if (getQuantity() == 0) {
				lbl.setText("");
			}
			break;
		}
	}

	@OAProperty(displayName = "Service Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnName = "Service $")
	@OAColumn(sqlType = java.sql.Types.DOUBLE)
	public double getServicePrice() {
		return servicePrice;
	}

	public void setServicePrice(double newValue) {
		double old = servicePrice;
		fireBeforePropertyChange(P_ServicePrice, old, newValue);
		this.servicePrice = newValue;
		firePropertyChange(P_ServicePrice, old, this.servicePrice);
	}

	@OAProperty(displayName = "Add-On Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 8, columnName = "Add-On $", isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.DOUBLE)
	public double getAddOnPrice() {
		return addOnPrice;
	}

	public void setAddOnPrice(double newValue) {
		double old = addOnPrice;
		fireBeforePropertyChange(P_AddOnPrice, old, newValue);
		this.addOnPrice = newValue;
		firePropertyChange(P_AddOnPrice, old, this.addOnPrice);
	}

	@OAObjCallback(enabledProperty = SalesOrderItem.P_ItemAddOns)
	public void addOnPriceCallback(OAObjectCallback em) {
	}

	@OAProperty(displayLength = 20)
	@OAColumn(sqlType = java.sql.Types.CLOB)
	public String getNote() {
		return note;
	}

	public void setNote(String newValue) {
		String old = note;
		fireBeforePropertyChange(P_Note, old, newValue);
		this.note = newValue;
		firePropertyChange(P_Note, old, this.note);
	}

	@OAProperty(displayName = "Show Sub Total", displayLength = 5, columnLength = 8, columnName = "Sub Tot?")
	@OAColumn(sqlType = java.sql.Types.BOOLEAN)
	public boolean getShowSubTotal() {
		return showSubTotal;
	}

	public void setShowSubTotal(boolean newValue) {
		boolean old = showSubTotal;
		fireBeforePropertyChange(P_ShowSubTotal, old, newValue);
		this.showSubTotal = newValue;
		firePropertyChange(P_ShowSubTotal, old, this.showSubTotal);
	}

	@OAProperty(displayName = "Fake Unit Price", description = "only used to enter the unit price for a custom item", decimalPlaces = 2, isCurrency = true, trackPrimitiveNull = false, displayLength = 9, columnLength = 15, hasCustomCode = true)
	public double getFakeUnitPrice() {
		if (customItem) {
			return unitPrice;
		}
		AppUser au = ModelDelegate.getLocalAppUser();
		boolean b = false;
		if (au != null) {
			User user = au.getUser();
			if (user != null) {
				b = user.getPricingAccess() != User.PRICINGACCESS_no;
			}
		}
		if (!b) {
			return 0.00;
		}
		return unitPrice;
	}

	public void setFakeUnitPrice(double newValue) {
		if (!customItem) {
			return;
		}
		setUnitPrice(newValue);
	}

	@OAObjCallback(enabledProperty = SalesOrderItem.P_CustomItem)
	public void fakeUnitPriceCallback(OAObjectCallback em) {
		switch (em.getType()) {
		case RenderLabel:
			AppUser au = ModelDelegate.getLocalAppUser();
			boolean b = false;
			if (au != null) {
				User user = au.getUser();
				if (user != null) {
					b = user.getPricingAccess() != User.PRICINGACCESS_no;
				}
			}
			if (!customItem && !b) {
				em.getLabel().setText("--");
			}
			break;
		}
	}

	@OACalculatedProperty(displayName = "Sell Rate", decimalPlaces = 2, displayLength = 7, columnLength = 9, properties = {
			P_SalesOrder + "." + SalesOrder.P_PriceCode + "." + PriceCode.P_Rate })
	public double getSellRate() {
		SalesOrder ord = getSalesOrder();
		if (ord == null) {
			return 0.0d;
		}
		PriceCode pc = ord.getPriceCode();
		if (pc == null) {
			return 0.0d;
		}
		double d = pc.getRate();
		return d;
	}

	public double getPriceCodeRate() {
		return getSellRate();
	}

	@OACalculatedProperty(displayName = "Total Our Item Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 14, columnName = "Tot Item Our $", properties = {
			P_UnitPrice, P_Quantity })
	public double getTotalItemOurPrice() {
		double d = getUnitPrice() * getQuantity();
		d = OAConv.round(d, 2);
		return d;
	}

	@OAObjCallback(contextVisibleProperty = AppUser.P_User + "." + User.P_CalcPricingReadAccess)
	public void totalItemOurPriceCallback(OAObjectCallback em) {
	}

	@OACalculatedProperty(displayName = "Item Sell Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 11, columnName = "Item Sell $", properties = {
			P_UnitPrice, P_SellRate, P_AddOnPrice })
	public double getItemSellPrice() {
		if (getItem() == null && !getCustomItem()) {
			return 0.0;
		}
		double bdUnit = getUnitPrice();
		double bdRate = getSellRate();
		bdRate += 100.0d;
		bdRate /= 100.0d;
		double bd = bdUnit * bdRate;
		bd = OAConv.round(bd, 2);
		bd += getAddOnPrice();
		bd = OAConv.round(bd, 2);
		return bd;
	}

	@OAObjCallback
	public void itemSellPriceCallback(OAObjectCallback em) {
		switch (em.getType()) {
		case RenderLabel:
			javax.swing.JLabel lbl = em.getLabel();
			if (getQuantity() == 0) {
				lbl.setText("");
			}
			break;
		}
	}

	@OACalculatedProperty(displayName = "Total Item Sell Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 15, columnName = "Tot Item Sell $", properties = {
			P_Quantity, P_ItemSellPrice })
	public double getTotalItemSellPrice() {
		if (getItem() == null && !getCustomItem()) {
			return 0.0;
		}

		double d = getItemSellPrice();
		d = OAConv.round(d, 2);

		int qty = getQuantity();
		if (qty < 1) {
			return 0.0;
		}
		d = d * qty;
		d = OAConv.round(d, 2);
		return d;
	}

	@OAObjCallback
	public void totalItemSellPriceCallback(OAObjectCallback em) {
		switch (em.getType()) {
		case RenderLabel:
			javax.swing.JLabel lbl = em.getLabel();
			if (getQuantity() == 0 && getTotalItemSellPrice() == 0.0) {
				lbl.setText("");
			}
			break;
		}
	}

	@OACalculatedProperty(displayName = "Total Sell Price", decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 10, columnName = "Tot Sell $", properties = {
			P_ServicePrice, P_TotalItemSellPrice })
	public double getTotalSellPrice() {
		double d = getServicePrice();
		d = d + getTotalItemSellPrice();
		d = OAConv.round(d, 2);
		return d;
	}

	@OAObjCallback
	public void totalSellPriceCallback(OAObjectCallback em) {
		switch (em.getType()) {
		case RenderLabel:
			javax.swing.JLabel lbl = em.getLabel();
			if (getQuantity() == 0 && getTotalSellPrice() == 0.0) {
				lbl.setText("");
			}
			break;
		}
	}

	@OACalculatedProperty(displayName = "Total Weight", displayLength = 7, columnLength = 6, columnName = "Tot Wt", properties = {
			P_Quantity, P_UnitWeight })
	public int getTotalWeight() {
		if (getItem() == null && !getCustomItem()) {
			return 0;
		}
		int qty = getQuantity();
		if (qty < 1) {
			return 0;
		}
		qty = getUnitWeight() * qty;
		return qty;
	}

	@OAObjCallback
	public void totalWeightCallback(OAObjectCallback em) {
		switch (em.getType()) {
		case RenderLabel:
			javax.swing.JLabel lbl = em.getLabel();
			if (getQuantity() == 0) {
				lbl.setText("");
			}
			break;
		}
	}

	@OACalculatedProperty(displayName = "Allows Item Add On", displayLength = 5, columnLength = 18, properties = { P_CustomItem, P_Item })
	public boolean getAllowsItemAddOn() {
		return getCustomItem() || getItem() != null;
	}

	@OAOne(reverseName = Item.P_SalesOrderItems, allowCreateNew = false)
	@OAFkey(columns = { "ItemId" })
	public Item getItem() {
		if (item == null) {
			item = (Item) getObject(P_Item);
		}
		return item;
	}

	public void setItem(Item newValue) {
		fireBeforePropertyChange(P_Item, this.item, newValue);
		Item old = this.item;
		this.item = newValue;
		firePropertyChange(PROPERTY_Item, old, this.item);

		if (!beginServerOnly()) {
			return;
		}
		try {
			if (item != null) {
				this.setItemDescription(item.getDescription());
				this.setUnitPrice(item.getPrice());
				this.setUnitWeight(item.getWeight());
			} else {
				this.setItemDescription(null);
				this.setUnitPrice(0d);
				this.setNull(P_UnitPrice);
				this.setUnitWeight(0);
				this.setNull(P_UnitWeight);
				if (!getCustomItem()) {
					getItemAddOns().removeAll();
				}
			}
		} finally {
			endServerOnly();
		}
	}

	@OAObjCallback(enabledProperty = SalesOrderItem.P_CustomItem, enabledValue = false)
	public void itemCallback(OAObjectCallback em) {
		// CUSTOM
		switch (em.getType()) {
		case SetConfirmForPropertyChange:
			if (getItem() != null) {
				em.setConfirmMessage("ok to replace existing item?");
			}
			break;
		}
	}

	@OAMany(displayName = "Item Add Ons", toClass = ItemAddOn.class, reverseName = ItemAddOn.P_SalesOrderItems)
	@OALinkTable(name = "ItemAddOnSalesOrderItem", indexName = "ItemAddOnSalesOrderItem", columns = { "SalesOrderItemId" })
	public Hub<ItemAddOn> getItemAddOns() {
		if (hubItemAddOns != null) {
			return hubItemAddOns;
		}
		hubItemAddOns = (Hub<ItemAddOn>) getHub(P_ItemAddOns);
		if (isServer()) {
			hubItemAddOns.addHubListener(new HubListenerAdapter<ItemAddOn>() {
				@Override
				public void afterAdd(HubEvent<ItemAddOn> e) {
					beginServerOnly();
					double d = getAddOnPrice();
					ItemAddOn ao = e.getObject();
					double dx = ao.getPrice();
					setAddOnPrice(d + dx);
					endServerOnly();
				}

				@Override
				public void afterRemove(HubEvent<ItemAddOn> e) {
					beginServerOnly();
					double d = getAddOnPrice();
					ItemAddOn ao = e.getObject();
					double dx = ao.getPrice();
					setAddOnPrice(Math.max(0.0, d - dx));
					endServerOnly();
				}

				@Override
				public void afterRemoveAll(HubEvent<ItemAddOn> e) {
					beginServerOnly();
					setAddOnPrice(0.0d);
					endServerOnly();
				}
			});
		}
		return hubItemAddOns;
	}

	@OAObjCallback(enabledProperty = SalesOrderItem.P_AllowsItemAddOn)
	public void itemAddOnsCallback(OAObjectCallback em) {
	}

	@OAOne(displayName = "Sales Order", reverseName = SalesOrder.P_SalesOrderItems, required = true, allowCreateNew = false)
	@OAFkey(columns = { "SalesOrderId" })
	public SalesOrder getSalesOrder() {
		if (salesOrder == null) {
			salesOrder = (SalesOrder) getObject(P_SalesOrder);
		}
		return salesOrder;
	}

	public void setSalesOrder(SalesOrder newValue) {
		SalesOrder old = this.salesOrder;
		fireBeforePropertyChange(P_SalesOrder, old, newValue);
		this.salesOrder = newValue;
		firePropertyChange(P_SalesOrder, old, this.salesOrder);
	}

	@OAOne(displayName = "Service Code", reverseName = ServiceCode.P_SalesOrderItems, allowCreateNew = false)
	@OAFkey(columns = { "ServiceCodeId" })
	public ServiceCode getServiceCode() {
		if (serviceCode == null) {
			serviceCode = (ServiceCode) getObject(PROPERTY_ServiceCode);
		}
		return serviceCode;
	}

	public void setServiceCode(ServiceCode newValue) {
		fireBeforePropertyChange(P_ServiceCode, this.serviceCode, newValue);
		ServiceCode old = this.serviceCode;
		this.serviceCode = newValue;
		firePropertyChange(PROPERTY_ServiceCode, old, this.serviceCode);

		if (!beginServerOnly()) {
			return;
		}
		try {
			if (newValue == null) {
				setServicePrice(0d);
			} else {
				double d = newValue.getPrice();
				setServicePrice(d);
			}
		} finally {
			endServerOnly();
		}
	}

	@OAObjCallback
	public void serviceCodeCallback(OAObjectCallback em) {
		switch (em.getType()) {
		case SetConfirmForPropertyChange:
			double d = getServicePrice();
			if (d > 0d) {
				em.setConfirmMessage("ok to change the service price?");
			}
			break;
		}
	}

	@OAMethod(displayName = "Assign Item Add On")
	public void assignSameItemAddOn(SalesOrderItemAssignSameItemAddOnMethod data) {
		if (data == null) {
			return;
		}
		ItemAddOn ao = data.getItemAddOn();
		getItemAddOns().add(ao);
	}

	public static void assignSameItemAddOn(Hub<SalesOrderItem> hub, SalesOrderItemAssignSameItemAddOnMethod data) {
		for (SalesOrderItem salesOrderItem : hub) {
			salesOrderItem.assignSameItemAddOn(data);
		}
	}

	@OAObjCallback(enabledProperty = SalesOrderItem.P_AllowsItemAddOn)
	public void assignSameItemAddOnCallback(OAObjectCallback em) {
	}

	public void load(ResultSet rs, int id) throws SQLException {
		this.id = id;
		this.seq = (int) rs.getInt(2);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrderItem.P_Seq, true);
		}
		this.location = rs.getString(3);
		this.customItem = (rs.getShort(4) == 1);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrderItem.P_CustomItem, true);
		}
		this.itemDescription = rs.getString(5);
		this.quantity = (int) rs.getInt(6);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrderItem.P_Quantity, true);
		}
		this.unitPrice = (double) rs.getDouble(7);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrderItem.P_UnitPrice, true);
		}
		this.unitWeight = (int) rs.getInt(8);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrderItem.P_UnitWeight, true);
		}
		this.servicePrice = (double) rs.getDouble(9);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrderItem.P_ServicePrice, true);
		}
		this.addOnPrice = (double) rs.getDouble(10);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrderItem.P_AddOnPrice, true);
		}
		this.note = rs.getString(11);
		this.showSubTotal = (rs.getShort(12) == 1);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, SalesOrderItem.P_ShowSubTotal, true);
		}
		int itemFkey = rs.getInt(13);
		if (!rs.wasNull() && itemFkey > 0) {
			setProperty(P_Item, new OAObjectKey(itemFkey));
		}
		int salesOrderFkey = rs.getInt(14);
		if (!rs.wasNull() && salesOrderFkey > 0) {
			setProperty(P_SalesOrder, new OAObjectKey(salesOrderFkey));
		}
		int serviceCodeFkey = rs.getInt(15);
		if (!rs.wasNull() && serviceCodeFkey > 0) {
			setProperty(P_ServiceCode, new OAObjectKey(serviceCodeFkey));
		}
		if (rs.getMetaData().getColumnCount() != 15) {
			throw new SQLException("invalid number of columns for load method");
		}

		changedFlag = false;
		newFlag = false;
	}
}
