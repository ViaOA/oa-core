// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "st",
    displayName = "Schedule Type",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "id",
    sortProperty = "id"
)
@OATable(
)
public class ScheduleType extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ScheduleType.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_BreakageDays = "BreakageDays";
    public static final String P_BreakageDays = "BreakageDays";
    public static final String PROPERTY_BreakagePercentage = "BreakagePercentage";
    public static final String P_BreakagePercentage = "BreakagePercentage";
    public static final String PROPERTY_FillPercentage = "FillPercentage";
    public static final String P_FillPercentage = "FillPercentage";
     
     
    protected volatile int id;
    protected volatile int breakageDays;
    protected volatile int breakagePercentage;
    protected volatile int fillPercentage;
     
    public ScheduleType() {
    }
     
    public ScheduleType(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(displayName = "Pad Days", displayLength = 6, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      Number of days to allow for breakage.
    */
    public int getBreakageDays() {
        return breakageDays;
    }
    public void setBreakageDays(int newValue) {
        int old = breakageDays;
        fireBeforePropertyChange(P_BreakageDays, old, newValue);
        this.breakageDays = newValue;
        firePropertyChange(P_BreakageDays, old, this.breakageDays);
    }
     
    @OAProperty(displayName = "Pad Percentage", displayLength = 6, columnLength = 14)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      Percentage of order qty to allow for padding.  Ex: if an item has a qty of 20 and only 2 molds and padPerctage is set to 20%, then 4 could be broken and will need 2 days to pad for breakage.
    */
    public int getBreakagePercentage() {
        return breakagePercentage;
    }
    public void setBreakagePercentage(int newValue) {
        int old = breakagePercentage;
        fireBeforePropertyChange(P_BreakagePercentage, old, newValue);
        this.breakagePercentage = newValue;
        firePropertyChange(P_BreakagePercentage, old, this.breakagePercentage);
    }
     
    @OAProperty(displayName = "Fill Percentage", displayLength = 6, columnLength = 15)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      Amount of molds to use per day, to allow room for other orders and breakage.
    */
    public int getFillPercentage() {
        return fillPercentage;
    }
    public void setFillPercentage(int newValue) {
        int old = fillPercentage;
        fireBeforePropertyChange(P_FillPercentage, old, newValue);
        this.fillPercentage = newValue;
        firePropertyChange(P_FillPercentage, old, this.fillPercentage);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.breakageDays = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ScheduleType.P_BreakageDays, true);
        }
        this.breakagePercentage = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ScheduleType.P_BreakagePercentage, true);
        }
        this.fillPercentage = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ScheduleType.P_FillPercentage, true);
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
