// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "sc",
    displayName = "Service Code",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name",
    sortProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "ServiceCodeQbListId", columns = {@OAIndexColumn(name = "QbListId")})
    }
)
public class ServiceCode extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ServiceCode.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
    public static final String PROPERTY_Price = "Price";
    public static final String P_Price = "Price";
    public static final String PROPERTY_ItemCode = "ItemCode";
    public static final String P_ItemCode = "ItemCode";
    public static final String PROPERTY_QbListId = "QbListId";
    public static final String P_QbListId = "QbListId";
     
     
    public static final String PROPERTY_SalesOrderItems = "SalesOrderItems";
    public static final String P_SalesOrderItems = "SalesOrderItems";
     
    protected volatile int id;
    protected volatile String name;
    protected volatile String description;
    protected volatile double price;
    protected volatile String itemCode;
    protected volatile String qbListId;
     
     
    public ServiceCode() {
    }
     
    public ServiceCode(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(displayLength = 20)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
     
    @OAProperty(decimalPlaces = 2, isCurrency = true, displayLength = 9, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getPrice() {
        return price;
    }
    public void setPrice(double newValue) {
        double old = price;
        fireBeforePropertyChange(P_Price, old, newValue);
        this.price = newValue;
        firePropertyChange(P_Price, old, this.price);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_User+"."+User.P_CalcPricingWriteAccess, 
        contextVisibleProperty = AppUser.P_User+"."+User.P_CalcPricingReadAccess
    )
    public void onEditQueryPrice(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Item Code", maxLength = 20, displayLength = 10)
    @OAColumn(maxLength = 20)
    public String getItemCode() {
        return itemCode;
    }
    public void setItemCode(String newValue) {
        String old = itemCode;
        fireBeforePropertyChange(P_ItemCode, old, newValue);
        this.itemCode = newValue;
        firePropertyChange(P_ItemCode, old, this.itemCode);
    }
     
    @OAProperty(displayName = "QuickBooks Id", maxLength = 40, displayLength = 10, columnName = "QB Id")
    @OAColumn(maxLength = 40)
    public String getQbListId() {
        return qbListId;
    }
    public void setQbListId(String newValue) {
        String old = qbListId;
        fireBeforePropertyChange(P_QbListId, old, newValue);
        this.qbListId = newValue;
        firePropertyChange(P_QbListId, old, this.qbListId);
    }
     
    @OAMany(
        displayName = "Sales Order Items", 
        toClass = SalesOrderItem.class, 
        reverseName = SalesOrderItem.P_ServiceCode, 
        createMethod = false
    )
    private Hub<SalesOrderItem> getSalesOrderItems() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.description = rs.getString(3);
        this.price = (double) rs.getDouble(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServiceCode.P_Price, true);
        }
        this.itemCode = rs.getString(5);
        this.qbListId = rs.getString(6);
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
