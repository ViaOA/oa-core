// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "st",
    displayName = "Ship To",
    displayProperty = "cityStateZip",
    sortProperty = "cityStateZip"
)
@OATable(
)
public class ShipTo extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ShipTo.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Name2 = "Name2";
    public static final String P_Name2 = "Name2";
    public static final String PROPERTY_Address = "Address";
    public static final String P_Address = "Address";
    public static final String PROPERTY_Address2 = "Address2";
    public static final String P_Address2 = "Address2";
    public static final String PROPERTY_Address3 = "Address3";
    public static final String P_Address3 = "Address3";
    public static final String PROPERTY_Address4 = "Address4";
    public static final String P_Address4 = "Address4";
    public static final String PROPERTY_City = "City";
    public static final String P_City = "City";
    public static final String PROPERTY_State = "State";
    public static final String P_State = "State";
    public static final String PROPERTY_Zip = "Zip";
    public static final String P_Zip = "Zip";
    public static final String PROPERTY_Country = "Country";
    public static final String P_Country = "Country";
    public static final String PROPERTY_Notes = "Notes";
    public static final String P_Notes = "Notes";
    public static final String PROPERTY_Instructions = "Instructions";
    public static final String P_Instructions = "Instructions";
     
    public static final String PROPERTY_CityStateZip = "CityStateZip";
    public static final String P_CityStateZip = "CityStateZip";
     
    public static final String PROPERTY_Orders = "Orders";
    public static final String P_Orders = "Orders";
    public static final String PROPERTY_SalesCustomers = "SalesCustomers";
    public static final String P_SalesCustomers = "SalesCustomers";
     
    protected volatile int id;
    protected volatile String name;
    protected volatile String name2;
    protected volatile String address;
    protected volatile String address2;
    protected volatile String address3;
    protected volatile String address4;
    protected volatile String city;
    protected volatile String state;
    protected volatile String zip;
    protected volatile String country;
    protected volatile String notes;
    protected volatile String instructions;
     
    // Links to other objects.
    protected transient Hub<Order> hubOrders;
    protected transient Hub<SalesCustomer> hubSalesCustomers;
     
    public ShipTo() {
    }
     
    public ShipTo(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 70, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 70)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getName2() {
        return name2;
    }
    public void setName2(String newValue) {
        String old = name2;
        fireBeforePropertyChange(P_Name2, old, newValue);
        this.name2 = newValue;
        firePropertyChange(P_Name2, old, this.name2);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress() {
        return address;
    }
    public void setAddress(String newValue) {
        String old = address;
        fireBeforePropertyChange(P_Address, old, newValue);
        this.address = newValue;
        firePropertyChange(P_Address, old, this.address);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress2() {
        return address2;
    }
    public void setAddress2(String newValue) {
        String old = address2;
        fireBeforePropertyChange(P_Address2, old, newValue);
        this.address2 = newValue;
        firePropertyChange(P_Address2, old, this.address2);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress3() {
        return address3;
    }
    public void setAddress3(String newValue) {
        String old = address3;
        fireBeforePropertyChange(P_Address3, old, newValue);
        this.address3 = newValue;
        firePropertyChange(P_Address3, old, this.address3);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getAddress4() {
        return address4;
    }
    public void setAddress4(String newValue) {
        String old = address4;
        fireBeforePropertyChange(P_Address4, old, newValue);
        this.address4 = newValue;
        firePropertyChange(P_Address4, old, this.address4);
    }
     
    @OAProperty(maxLength = 50, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 50)
    public String getCity() {
        return city;
    }
    public void setCity(String newValue) {
        String old = city;
        fireBeforePropertyChange(P_City, old, newValue);
        this.city = newValue;
        firePropertyChange(P_City, old, this.city);
    }
     
    @OAProperty(maxLength = 25, displayLength = 10)
    @OAColumn(maxLength = 25)
    public String getState() {
        return state;
    }
    public void setState(String newValue) {
        String old = state;
        fireBeforePropertyChange(P_State, old, newValue);
        this.state = newValue;
        firePropertyChange(P_State, old, this.state);
    }
     
    @OAProperty(maxLength = 14, displayLength = 15, columnLength = 13)
    @OAColumn(maxLength = 14)
    public String getZip() {
        return zip;
    }
    public void setZip(String newValue) {
        String old = zip;
        fireBeforePropertyChange(P_Zip, old, newValue);
        this.zip = newValue;
        firePropertyChange(P_Zip, old, this.zip);
    }
     
    @OAProperty(maxLength = 35, displayLength = 20, columnLength = 10)
    @OAColumn(maxLength = 35)
    public String getCountry() {
        return country;
    }
    public void setCountry(String newValue) {
        String old = country;
        fireBeforePropertyChange(P_Country, old, newValue);
        this.country = newValue;
        firePropertyChange(P_Country, old, this.country);
    }
     
    @OAProperty(displayLength = 20, hasCustomCode = true, isHtml = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNotes() {
        if (notes != null) notes = OAString.convertTextToHTML(notes, false);
        return notes;
    }
    public void setNotes(String newValue) {
        String old = notes;
        fireBeforePropertyChange(P_Notes, old, newValue);
        this.notes = newValue;
        firePropertyChange(P_Notes, old, this.notes);
    }
     
    @OAProperty(description = "from Term (readonly)", displayLength = 20, hasCustomCode = true, isHtml = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    /**
      from Term (readonly)
    */
    public String getInstructions() {
        return instructions;
    }
    public void setInstructions(String newValue) {
        String old = instructions;
        fireBeforePropertyChange(P_Instructions, old, newValue);
        this.instructions = newValue;
        firePropertyChange(P_Instructions, old, this.instructions);
    }
     
    @OACalculatedProperty(displayName = "City/State/Zip", displayLength = 20, columnLength = 15, columnName = "City/St/Zip", properties = {P_City, P_State, P_Zip})
    public String getCityStateZip() {
        String csz = "";
        if (city != null) csz = city;
        csz += ", ";
        if (state != null) csz += state;
        csz += " ";
        if (zip != null) csz += zip;
        return csz;
    }
     
    @OAMany(
        toClass = Order.class, 
        reverseName = Order.P_ShipTo, 
        isProcessed = true, 
        cascadeDelete = true
    )
    public Hub<Order> getOrders() {
        if (hubOrders == null) {
            hubOrders = (Hub<Order>) getHub(P_Orders);
        }
        return hubOrders;
    }
     
    @OAMany(
        displayName = "Sales Customers", 
        toClass = SalesCustomer.class, 
        reverseName = SalesCustomer.P_ShipTo
    )
    public Hub<SalesCustomer> getSalesCustomers() {
        if (hubSalesCustomers == null) {
            hubSalesCustomers = (Hub<SalesCustomer>) getHub(P_SalesCustomers);
        }
        return hubSalesCustomers;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.name2 = rs.getString(3);
        this.address = rs.getString(4);
        this.address2 = rs.getString(5);
        this.address3 = rs.getString(6);
        this.address4 = rs.getString(7);
        this.city = rs.getString(8);
        this.state = rs.getString(9);
        this.zip = rs.getString(10);
        this.country = rs.getString(11);
        this.notes = rs.getString(12);
        this.instructions = rs.getString(13);
        if (rs.getMetaData().getColumnCount() != 13) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
