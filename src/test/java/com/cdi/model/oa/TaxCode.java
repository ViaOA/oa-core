// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "tc",
    displayName = "Tax Code",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "codeAndRate",
    sortProperty = "code"
)
@OATable(
)
public class TaxCode extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(TaxCode.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_TaxRate = "TaxRate";
    public static final String P_TaxRate = "TaxRate";
     
    public static final String PROPERTY_CodeAndRate = "CodeAndRate";
    public static final String P_CodeAndRate = "CodeAndRate";
     
    public static final String PROPERTY_Customers = "Customers";
    public static final String P_Customers = "Customers";
     
    protected volatile int id;
    protected volatile String code;
    protected volatile double taxRate;
     
     
    public TaxCode() {
    }
     
    public TaxCode(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 15, displayLength = 10, columnLength = 8)
    @OAColumn(maxLength = 15)
    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
     
    @OAProperty(displayName = "Tax Rate", decimalPlaces = 2, displayLength = 7, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getTaxRate() {
        return taxRate;
    }
    public void setTaxRate(double newValue) {
        double old = taxRate;
        fireBeforePropertyChange(P_TaxRate, old, newValue);
        this.taxRate = newValue;
        firePropertyChange(P_TaxRate, old, this.taxRate);
    }
     
    @OACalculatedProperty(displayName = "Tax Code", displayLength = 15, columnLength = 10, properties = {P_Code, P_TaxRate})
    public String getCodeAndRate() {
        String codeAndRate = "";
        String code = this.getCode();
        codeAndRate = OAString.concat(codeAndRate, code, " ");
    
        double taxRate = this.getTaxRate();
        codeAndRate = OAString.concat(codeAndRate, taxRate+"", " ");
    
        return codeAndRate;
    }
     
    @OAMany(
        toClass = Customer.class, 
        reverseName = Customer.P_TaxCode, 
        createMethod = false
    )
    private Hub<Customer> getCustomers() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.code = rs.getString(2);
        this.taxRate = (double) rs.getDouble(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, TaxCode.P_TaxRate, true);
        }
        if (rs.getMetaData().getColumnCount() != 3) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
