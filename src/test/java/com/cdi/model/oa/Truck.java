// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;

 
@OAClass(
    shortName = "tru",
    displayName = "Truck",
    displayProperty = "carrier",
    sortProperty = "carrier"
)
@OATable(
)
public class Truck extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Truck.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Carrier = "Carrier";
    public static final String P_Carrier = "Carrier";
    public static final String PROPERTY_Contact = "Contact";
    public static final String P_Contact = "Contact";
    public static final String PROPERTY_ContactPhone = "ContactPhone";
    public static final String P_ContactPhone = "ContactPhone";
    public static final String PROPERTY_Capacity = "Capacity";
    public static final String P_Capacity = "Capacity";
     
     
    public static final String PROPERTY_DeliveryTrucks = "DeliveryTrucks";
    public static final String P_DeliveryTrucks = "DeliveryTrucks";
     
    protected volatile int id;
    protected volatile String carrier;
    protected volatile String contact;
    protected volatile String contactPhone;
    protected volatile String capacity;
     
    // Links to other objects.
    protected transient Hub<DeliveryTruck> hubDeliveryTrucks;
     
    public Truck() {
    }
     
    public Truck(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(maxLength = 125, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 125)
    public String getCarrier() {
        return carrier;
    }
    public void setCarrier(String newValue) {
        String old = carrier;
        fireBeforePropertyChange(P_Carrier, old, newValue);
        this.carrier = newValue;
        firePropertyChange(P_Carrier, old, this.carrier);
    }
     
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getContact() {
        return contact;
    }
    public void setContact(String newValue) {
        String old = contact;
        fireBeforePropertyChange(P_Contact, old, newValue);
        this.contact = newValue;
        firePropertyChange(P_Contact, old, this.contact);
    }
     
    @OAProperty(displayName = "Contact Phone", maxLength = 25, displayLength = 15, columnLength = 13)
    @OAColumn(maxLength = 25)
    public String getContactPhone() {
        return contactPhone;
    }
    public void setContactPhone(String newValue) {
        String old = contactPhone;
        fireBeforePropertyChange(P_ContactPhone, old, newValue);
        this.contactPhone = newValue;
        firePropertyChange(P_ContactPhone, old, this.contactPhone);
    }
     
    @OAProperty(maxLength = 254, displayLength = 20, columnLength = 10)
    @OAColumn(maxLength = 254)
    public String getCapacity() {
        return capacity;
    }
    public void setCapacity(String newValue) {
        String old = capacity;
        fireBeforePropertyChange(P_Capacity, old, newValue);
        this.capacity = newValue;
        firePropertyChange(P_Capacity, old, this.capacity);
    }
     
    @OAMany(
        displayName = "Delivery Trucks", 
        toClass = DeliveryTruck.class, 
        reverseName = DeliveryTruck.P_Truck
    )
    public Hub<DeliveryTruck> getDeliveryTrucks() {
        if (hubDeliveryTrucks == null) {
            hubDeliveryTrucks = (Hub<DeliveryTruck>) getHub(P_DeliveryTrucks);
        }
        return hubDeliveryTrucks;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.carrier = rs.getString(2);
        this.contact = rs.getString(3);
        this.contactPhone = rs.getString(4);
        this.capacity = rs.getString(5);
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
