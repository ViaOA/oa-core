// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;

 
/**
  Updated by ServerController._getUser at login.
*/
@OAClass(
    shortName = "use",
    displayName = "User",
    description = "Updated by ServerController._getUser at login.",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "fullName",
    sortProperty = "lastName",
    estimatedTotal = 20,
    filterClasses = {UserSalesPersonFilter.class, UserActiveFilter.class, UserInspectorFilter.class, UserAssignedProdFilter.class, UserAssignedSalesFilter.class}
)
@OATable(
    name = "UserTable",
    indexes = {
        @OAIndex(name = "UserTableAppUser", fkey = true, columns = { @OAIndexColumn(name = "AppUserId") })
    }
)
public class User extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(User.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_DateCreated = "DateCreated";
    public static final String P_DateCreated = "DateCreated";
    public static final String PROPERTY_FirstName = "FirstName";
    public static final String P_FirstName = "FirstName";
    public static final String PROPERTY_LastName = "LastName";
    public static final String P_LastName = "LastName";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_LoginId = "LoginId";
    public static final String P_LoginId = "LoginId";
    public static final String PROPERTY_Password = "Password";
    public static final String P_Password = "Password";
    public static final String PROPERTY_InactiveDate = "InactiveDate";
    public static final String P_InactiveDate = "InactiveDate";
    public static final String PROPERTY_NewOrderAccess = "NewOrderAccess";
    public static final String P_NewOrderAccess = "NewOrderAccess";
    public static final String PROPERTY_Initials = "Initials";
    public static final String P_Initials = "Initials";
    public static final String PROPERTY_AdminAccess = "AdminAccess";
    public static final String P_AdminAccess = "AdminAccess";
    public static final String PROPERTY_ProdViewAccess = "ProdViewAccess";
    public static final String P_ProdViewAccess = "ProdViewAccess";
    public static final String PROPERTY_ProdShippingAccess = "ProdShippingAccess";
    public static final String P_ProdShippingAccess = "ProdShippingAccess";
    public static final String PROPERTY_ProdManagerAccess = "ProdManagerAccess";
    public static final String P_ProdManagerAccess = "ProdManagerAccess";
    public static final String PROPERTY_SalesViewAccess = "SalesViewAccess";
    public static final String P_SalesViewAccess = "SalesViewAccess";
    public static final String PROPERTY_SalesUserAccess = "SalesUserAccess";
    public static final String P_SalesUserAccess = "SalesUserAccess";
    public static final String PROPERTY_PhoneWork = "PhoneWork";
    public static final String P_PhoneWork = "PhoneWork";
    public static final String PROPERTY_PhoneHome = "PhoneHome";
    public static final String P_PhoneHome = "PhoneHome";
    public static final String PROPERTY_PhoneCell = "PhoneCell";
    public static final String P_PhoneCell = "PhoneCell";
    public static final String PROPERTY_Email = "Email";
    public static final String P_Email = "Email";
    public static final String PROPERTY_ProdAssignedToList = "ProdAssignedToList";
    public static final String P_ProdAssignedToList = "ProdAssignedToList";
    public static final String PROPERTY_SalesAssignedToList = "SalesAssignedToList";
    public static final String P_SalesAssignedToList = "SalesAssignedToList";
    public static final String PROPERTY_SalesPersonList = "SalesPersonList";
    public static final String P_SalesPersonList = "SalesPersonList";
    public static final String PROPERTY_ProdInspectorList = "ProdInspectorList";
    public static final String P_ProdInspectorList = "ProdInspectorList";
    public static final String PROPERTY_SalesAccess = "SalesAccess";
    public static final String P_SalesAccess = "SalesAccess";
    public static final String PROPERTY_SalesAccessAsString = "SalesAccessAsString";
    public static final String P_SalesAccessAsString = "SalesAccessAsString";
    public static final String PROPERTY_ProductionAccess = "ProductionAccess";
    public static final String P_ProductionAccess = "ProductionAccess";
    public static final String PROPERTY_ProductionAccessAsString = "ProductionAccessAsString";
    public static final String P_ProductionAccessAsString = "ProductionAccessAsString";
    public static final String PROPERTY_CustomerAccess = "CustomerAccess";
    public static final String P_CustomerAccess = "CustomerAccess";
    public static final String PROPERTY_CustomerAccessAsString = "CustomerAccessAsString";
    public static final String P_CustomerAccessAsString = "CustomerAccessAsString";
    public static final String PROPERTY_ItemAccess = "ItemAccess";
    public static final String P_ItemAccess = "ItemAccess";
    public static final String PROPERTY_ItemAccessAsString = "ItemAccessAsString";
    public static final String P_ItemAccessAsString = "ItemAccessAsString";
    public static final String PROPERTY_PricingAccess = "PricingAccess";
    public static final String P_PricingAccess = "PricingAccess";
    public static final String PROPERTY_PricingAccessAsString = "PricingAccessAsString";
    public static final String P_PricingAccessAsString = "PricingAccessAsString";
    public static final String PROPERTY_SearchAccess = "SearchAccess";
    public static final String P_SearchAccess = "SearchAccess";
    public static final String PROPERTY_SearchAccessAsString = "SearchAccessAsString";
    public static final String P_SearchAccessAsString = "SearchAccessAsString";
     
    public static final String PROPERTY_FullName = "FullName";
    public static final String P_FullName = "FullName";
    public static final String PROPERTY_CalcAdminAccess = "CalcAdminAccess";
    public static final String P_CalcAdminAccess = "CalcAdminAccess";
    public static final String PROPERTY_CalcProductionReadAccess = "CalcProductionReadAccess";
    public static final String P_CalcProductionReadAccess = "CalcProductionReadAccess";
    public static final String PROPERTY_CalcProductionWriteAccess = "CalcProductionWriteAccess";
    public static final String P_CalcProductionWriteAccess = "CalcProductionWriteAccess";
    public static final String PROPERTY_CalcSalesReadAccess = "CalcSalesReadAccess";
    public static final String P_CalcSalesReadAccess = "CalcSalesReadAccess";
    public static final String PROPERTY_CalcSalesWriteAccess = "CalcSalesWriteAccess";
    public static final String P_CalcSalesWriteAccess = "CalcSalesWriteAccess";
    public static final String PROPERTY_CalcCustomerReadAccess = "CalcCustomerReadAccess";
    public static final String P_CalcCustomerReadAccess = "CalcCustomerReadAccess";
    public static final String PROPERTY_CalcCustomerWriteAccess = "CalcCustomerWriteAccess";
    public static final String P_CalcCustomerWriteAccess = "CalcCustomerWriteAccess";
    public static final String PROPERTY_CalcItemReadAccess = "CalcItemReadAccess";
    public static final String P_CalcItemReadAccess = "CalcItemReadAccess";
    public static final String PROPERTY_CalcItemWriteAccess = "CalcItemWriteAccess";
    public static final String P_CalcItemWriteAccess = "CalcItemWriteAccess";
    public static final String PROPERTY_CalcPricingReadAccess = "CalcPricingReadAccess";
    public static final String P_CalcPricingReadAccess = "CalcPricingReadAccess";
    public static final String PROPERTY_CalcPricingWriteAccess = "CalcPricingWriteAccess";
    public static final String P_CalcPricingWriteAccess = "CalcPricingWriteAccess";
    public static final String PROPERTY_CalcSearchReadAccess = "CalcSearchReadAccess";
    public static final String P_CalcSearchReadAccess = "CalcSearchReadAccess";
    public static final String PROPERTY_CalcSearchWriteAccess = "CalcSearchWriteAccess";
    public static final String P_CalcSearchWriteAccess = "CalcSearchWriteAccess";
     
    public static final String PROPERTY_AppUser = "AppUser";
    public static final String P_AppUser = "AppUser";
    public static final String PROPERTY_AssignedSalesOrders = "AssignedSalesOrders";
    public static final String P_AssignedSalesOrders = "AssignedSalesOrders";
    public static final String PROPERTY_AssignedWorkOrders = "AssignedWorkOrders";
    public static final String P_AssignedWorkOrders = "AssignedWorkOrders";
    public static final String PROPERTY_InspectWorkOrders = "InspectWorkOrders";
    public static final String P_InspectWorkOrders = "InspectWorkOrders";
    public static final String PROPERTY_OrderNotes = "OrderNotes";
    public static final String P_OrderNotes = "OrderNotes";
    public static final String PROPERTY_SalesOrderNotes = "SalesOrderNotes";
    public static final String P_SalesOrderNotes = "SalesOrderNotes";
    public static final String PROPERTY_SalesPersonSalesOrders = "SalesPersonSalesOrders";
    public static final String P_SalesPersonSalesOrders = "SalesPersonSalesOrders";
     
    public static final String METHOD_UpdateAppUser = "UpdateAppUser";
    public static final String M_UpdateAppUser = "UpdateAppUser";
    protected volatile int id;
    protected volatile OADate dateCreated;
    protected volatile String firstName;
    protected volatile String lastName;
    protected volatile String code;
    protected volatile String loginId;
    protected volatile String password;
    protected volatile OADate inactiveDate;
    protected volatile boolean newOrderAccess;
    protected volatile String initials;
    protected volatile boolean adminAccess;
    protected volatile boolean prodViewAccess;
    protected volatile boolean prodShippingAccess;
    protected volatile boolean prodManagerAccess;
    protected volatile boolean salesViewAccess;
    protected volatile boolean salesUserAccess;
    protected volatile String phoneWork;
    protected volatile String phoneHome;
    protected volatile String phoneCell;
    protected volatile String email;
    protected volatile boolean prodAssignedToList;
    protected volatile boolean salesAssignedToList;
    protected volatile boolean salesPersonList;
    protected volatile boolean prodInspectorList;
    protected volatile int salesAccess;
    public static final int SALESACCESS_no = 0;
    public static final int SALESACCESS_yes = 1;
    public static final int SALESACCESS_viewOnly = 2;
    public static final Hub<String> hubSalesAccess;
    static {
        hubSalesAccess = new Hub<String>(String.class);
        hubSalesAccess.addElement("No");
        hubSalesAccess.addElement("Yes");
        hubSalesAccess.addElement("View Only");
    }
    protected volatile int productionAccess;
    public static final int PRODUCTIONACCESS_no = 0;
    public static final int PRODUCTIONACCESS_yes = 1;
    public static final int PRODUCTIONACCESS_viewOnly = 2;
    public static final Hub<String> hubProductionAccess;
    static {
        hubProductionAccess = new Hub<String>(String.class);
        hubProductionAccess.addElement("No");
        hubProductionAccess.addElement("Yes");
        hubProductionAccess.addElement("View Only");
    }
    protected volatile int customerAccess;
    public static final int CUSTOMERACCESS_no = 0;
    public static final int CUSTOMERACCESS_yes = 1;
    public static final int CUSTOMERACCESS_viewOnly = 2;
    public static final Hub<String> hubCustomerAccess;
    static {
        hubCustomerAccess = new Hub<String>(String.class);
        hubCustomerAccess.addElement("No");
        hubCustomerAccess.addElement("Yes");
        hubCustomerAccess.addElement("View Only");
    }
    protected volatile int itemAccess;
    public static final int ITEMACCESS_no = 0;
    public static final int ITEMACCESS_yes = 1;
    public static final int ITEMACCESS_viewOnly = 2;
    public static final Hub<String> hubItemAccess;
    static {
        hubItemAccess = new Hub<String>(String.class);
        hubItemAccess.addElement("No");
        hubItemAccess.addElement("Yes");
        hubItemAccess.addElement("View Only");
    }
    protected volatile int pricingAccess;
    public static final int PRICINGACCESS_no = 0;
    public static final int PRICINGACCESS_yes = 1;
    public static final int PRICINGACCESS_viewOnly = 2;
    public static final Hub<String> hubPricingAccess;
    static {
        hubPricingAccess = new Hub<String>(String.class);
        hubPricingAccess.addElement("No");
        hubPricingAccess.addElement("Yes");
        hubPricingAccess.addElement("View Only");
    }
    protected volatile int searchAccess;
    public static final int SEARCHACCESS_no = 0;
    public static final int SEARCHACCESS_yes = 1;
    public static final Hub<String> hubSearchAccess;
    static {
        hubSearchAccess = new Hub<String>(String.class);
        hubSearchAccess.addElement("No");
        hubSearchAccess.addElement("Yes");
    }
     
    // Links to other objects.
    protected volatile transient AppUser appUser;
    protected transient Hub<SalesOrder> hubAssignedSalesOrders;
     
    public User() {
        if (!isLoading()) {
            setDateCreated(new OADate());
        }
    }
     
    public User(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(displayName = "Date Created", defaultValue = "new OADate()", displayLength = 8, columnLength = 12, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDateCreated() {
        return dateCreated;
    }
    public void setDateCreated(OADate newValue) {
        OADate old = dateCreated;
        fireBeforePropertyChange(P_DateCreated, old, newValue);
        this.dateCreated = newValue;
        firePropertyChange(P_DateCreated, old, this.dateCreated);
    }
     
    @OAProperty(displayName = "First Name", maxLength = 20, displayLength = 15)
    @OAColumn(maxLength = 20)
    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String newValue) {
        String old = firstName;
        fireBeforePropertyChange(P_FirstName, old, newValue);
        this.firstName = newValue;
        firePropertyChange(P_FirstName, old, this.firstName);
    }
     
    @OAProperty(displayName = "Last Name", maxLength = 20, displayLength = 15)
    @OAColumn(maxLength = 20)
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String newValue) {
        String old = lastName;
        fireBeforePropertyChange(P_LastName, old, newValue);
        this.lastName = newValue;
        firePropertyChange(P_LastName, old, this.lastName);
    }
     
    @OAProperty(maxLength = 20, displayLength = 10)
    @OAColumn(maxLength = 20)
    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
     
    @OAProperty(displayName = "Login Id", maxLength = 20, displayLength = 15, columnLength = 12)
    @OAColumn(maxLength = 20)
    public String getLoginId() {
        return loginId;
    }
    public void setLoginId(String newValue) {
        String old = loginId;
        fireBeforePropertyChange(P_LoginId, old, newValue);
        this.loginId = newValue;
        firePropertyChange(P_LoginId, old, this.loginId);
    }
     
    @OAProperty(maxLength = 55, displayLength = 15, isPassword = true)
    @OAColumn(maxLength = 55)
    public String getPassword() {
        return password;
    }
    public void setPassword(String newValue) {
        String old = password;
        fireBeforePropertyChange(P_Password, old, newValue);
        this.password = newValue;
        firePropertyChange(P_Password, old, this.password);
    }
     
    @OAProperty(displayName = "Inactive Date", displayLength = 8, columnLength = 13)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInactiveDate() {
        return inactiveDate;
    }
    public void setInactiveDate(OADate newValue) {
        OADate old = inactiveDate;
        fireBeforePropertyChange(P_InactiveDate, old, newValue);
        this.inactiveDate = newValue;
        firePropertyChange(P_InactiveDate, old, this.inactiveDate);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryInactiveDate(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "New Order Access", displayLength = 5, columnLength = 16)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getNewOrderAccess() {
        return newOrderAccess;
    }
    public void setNewOrderAccess(boolean newValue) {
        boolean old = newOrderAccess;
        fireBeforePropertyChange(P_NewOrderAccess, old, newValue);
        this.newOrderAccess = newValue;
        firePropertyChange(P_NewOrderAccess, old, this.newOrderAccess);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryNewOrderAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(maxLength = 12, displayLength = 3, columnLength = 8)
    @OAColumn(maxLength = 12)
    public String getInitials() {
        return initials;
    }
    public void setInitials(String newValue) {
        String old = initials;
        fireBeforePropertyChange(P_Initials, old, newValue);
        this.initials = newValue;
        firePropertyChange(P_Initials, old, this.initials);
    }
     
    @OAProperty(displayName = "Admin Access", displayLength = 5, columnLength = 12)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getAdminAccess() {
        return adminAccess;
    }
    public void setAdminAccess(boolean newValue) {
        boolean old = adminAccess;
        fireBeforePropertyChange(P_AdminAccess, old, newValue);
        this.adminAccess = newValue;
        firePropertyChange(P_AdminAccess, old, this.adminAccess);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryAdminAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Prod View Access", displayLength = 5, columnLength = 16)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getProdViewAccess() {
        return prodViewAccess;
    }
    public void setProdViewAccess(boolean newValue) {
        boolean old = prodViewAccess;
        fireBeforePropertyChange(P_ProdViewAccess, old, newValue);
        this.prodViewAccess = newValue;
        firePropertyChange(P_ProdViewAccess, old, this.prodViewAccess);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryProdViewAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Prod Shipping Access", displayLength = 5, columnLength = 20)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getProdShippingAccess() {
        return prodShippingAccess;
    }
    public void setProdShippingAccess(boolean newValue) {
        boolean old = prodShippingAccess;
        fireBeforePropertyChange(P_ProdShippingAccess, old, newValue);
        this.prodShippingAccess = newValue;
        firePropertyChange(P_ProdShippingAccess, old, this.prodShippingAccess);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryProdShippingAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Prod Manager Access", displayLength = 5, columnLength = 19)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getProdManagerAccess() {
        return prodManagerAccess;
    }
    public void setProdManagerAccess(boolean newValue) {
        boolean old = prodManagerAccess;
        fireBeforePropertyChange(P_ProdManagerAccess, old, newValue);
        this.prodManagerAccess = newValue;
        firePropertyChange(P_ProdManagerAccess, old, this.prodManagerAccess);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryProdManagerAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Sales View Access", displayLength = 5, columnLength = 17)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getSalesViewAccess() {
        return salesViewAccess;
    }
    public void setSalesViewAccess(boolean newValue) {
        boolean old = salesViewAccess;
        fireBeforePropertyChange(P_SalesViewAccess, old, newValue);
        this.salesViewAccess = newValue;
        firePropertyChange(P_SalesViewAccess, old, this.salesViewAccess);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQuerySalesViewAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Sales User Access", displayLength = 5, columnLength = 17)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getSalesUserAccess() {
        return salesUserAccess;
    }
    public void setSalesUserAccess(boolean newValue) {
        boolean old = salesUserAccess;
        fireBeforePropertyChange(P_SalesUserAccess, old, newValue);
        this.salesUserAccess = newValue;
        firePropertyChange(P_SalesUserAccess, old, this.salesUserAccess);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQuerySalesUserAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Phone", maxLength = 35, displayLength = 15, columnLength = 13, isPhone = true)
    @OAColumn(maxLength = 35)
    public String getPhoneWork() {
        return phoneWork;
    }
    public void setPhoneWork(String newValue) {
        String old = phoneWork;
        fireBeforePropertyChange(P_PhoneWork, old, newValue);
        this.phoneWork = newValue;
        firePropertyChange(P_PhoneWork, old, this.phoneWork);
    }
     
    @OAProperty(displayName = "Phone Home", maxLength = 35, displayLength = 15, columnLength = 13, isPhone = true)
    @OAColumn(maxLength = 35)
    public String getPhoneHome() {
        return phoneHome;
    }
    public void setPhoneHome(String newValue) {
        String old = phoneHome;
        fireBeforePropertyChange(P_PhoneHome, old, newValue);
        this.phoneHome = newValue;
        firePropertyChange(P_PhoneHome, old, this.phoneHome);
    }
     
    @OAProperty(displayName = "Phone Cell", maxLength = 35, displayLength = 15, columnLength = 13, isPhone = true)
    @OAColumn(maxLength = 35)
    public String getPhoneCell() {
        return phoneCell;
    }
    public void setPhoneCell(String newValue) {
        String old = phoneCell;
        fireBeforePropertyChange(P_PhoneCell, old, newValue);
        this.phoneCell = newValue;
        firePropertyChange(P_PhoneCell, old, this.phoneCell);
    }
     
    @OAProperty(maxLength = 70, displayLength = 20, columnLength = 12, isEmail = true)
    @OAColumn(maxLength = 70)
    public String getEmail() {
        return email;
    }
    public void setEmail(String newValue) {
        String old = email;
        fireBeforePropertyChange(P_Email, old, newValue);
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
     
    @OAProperty(displayName = "Prod Assigned To List", displayLength = 5, columnLength = 21)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getProdAssignedToList() {
        return prodAssignedToList;
    }
    public void setProdAssignedToList(boolean newValue) {
        boolean old = prodAssignedToList;
        fireBeforePropertyChange(P_ProdAssignedToList, old, newValue);
        this.prodAssignedToList = newValue;
        firePropertyChange(P_ProdAssignedToList, old, this.prodAssignedToList);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryProdAssignedToList(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Sales Assigned To List", displayLength = 5, columnLength = 22)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getSalesAssignedToList() {
        return salesAssignedToList;
    }
    public void setSalesAssignedToList(boolean newValue) {
        boolean old = salesAssignedToList;
        fireBeforePropertyChange(P_SalesAssignedToList, old, newValue);
        this.salesAssignedToList = newValue;
        firePropertyChange(P_SalesAssignedToList, old, this.salesAssignedToList);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQuerySalesAssignedToList(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Salesperson List", displayLength = 5, columnLength = 16)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getSalesPersonList() {
        return salesPersonList;
    }
    public void setSalesPersonList(boolean newValue) {
        boolean old = salesPersonList;
        fireBeforePropertyChange(P_SalesPersonList, old, newValue);
        this.salesPersonList = newValue;
        firePropertyChange(P_SalesPersonList, old, this.salesPersonList);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQuerySalesPersonList(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Prod Inspector List", displayLength = 5, columnLength = 19)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getProdInspectorList() {
        return prodInspectorList;
    }
    public void setProdInspectorList(boolean newValue) {
        boolean old = prodInspectorList;
        fireBeforePropertyChange(P_ProdInspectorList, old, newValue);
        this.prodInspectorList = newValue;
        firePropertyChange(P_ProdInspectorList, old, this.prodInspectorList);
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryProdInspectorList(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Sales Access", trackPrimitiveNull = false, displayLength = 6, columnLength = 12, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSalesAccess() {
        return salesAccess;
    }
    public void setSalesAccess(int newValue) {
        int old = salesAccess;
        fireBeforePropertyChange(P_SalesAccess, old, newValue);
        this.salesAccess = newValue;
        firePropertyChange(P_SalesAccess, old, this.salesAccess);
    }
    public String getSalesAccessAsString() {
        if (isNull(P_SalesAccess)) return "";
        String s = hubSalesAccess.getAt(getSalesAccess());
        if (s == null) s = "";
        return s;
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQuerySalesAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Production Access", trackPrimitiveNull = false, displayLength = 6, columnLength = 11, columnName = "Prod Access", isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getProductionAccess() {
        return productionAccess;
    }
    public void setProductionAccess(int newValue) {
        int old = productionAccess;
        fireBeforePropertyChange(P_ProductionAccess, old, newValue);
        this.productionAccess = newValue;
        firePropertyChange(P_ProductionAccess, old, this.productionAccess);
    }
    public String getProductionAccessAsString() {
        if (isNull(P_ProductionAccess)) return "";
        String s = hubProductionAccess.getAt(getProductionAccess());
        if (s == null) s = "";
        return s;
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryProductionAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Customer Access", trackPrimitiveNull = false, displayLength = 6, columnLength = 11, columnName = "Cust Access", isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getCustomerAccess() {
        return customerAccess;
    }
    public void setCustomerAccess(int newValue) {
        int old = customerAccess;
        fireBeforePropertyChange(P_CustomerAccess, old, newValue);
        this.customerAccess = newValue;
        firePropertyChange(P_CustomerAccess, old, this.customerAccess);
    }
    public String getCustomerAccessAsString() {
        if (isNull(P_CustomerAccess)) return "";
        String s = hubCustomerAccess.getAt(getCustomerAccess());
        if (s == null) s = "";
        return s;
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryCustomerAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Item Access", trackPrimitiveNull = false, displayLength = 6, columnLength = 11, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getItemAccess() {
        return itemAccess;
    }
    public void setItemAccess(int newValue) {
        int old = itemAccess;
        fireBeforePropertyChange(P_ItemAccess, old, newValue);
        this.itemAccess = newValue;
        firePropertyChange(P_ItemAccess, old, this.itemAccess);
    }
    public String getItemAccessAsString() {
        if (isNull(P_ItemAccess)) return "";
        String s = hubItemAccess.getAt(getItemAccess());
        if (s == null) s = "";
        return s;
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryItemAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Pricing Access", trackPrimitiveNull = false, displayLength = 6, columnLength = 14, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getPricingAccess() {
        return pricingAccess;
    }
    public void setPricingAccess(int newValue) {
        int old = pricingAccess;
        fireBeforePropertyChange(P_PricingAccess, old, newValue);
        this.pricingAccess = newValue;
        firePropertyChange(P_PricingAccess, old, this.pricingAccess);
    }
    public String getPricingAccessAsString() {
        if (isNull(P_PricingAccess)) return "";
        String s = hubPricingAccess.getAt(getPricingAccess());
        if (s == null) s = "";
        return s;
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQueryPricingAccess(OAObjectEditQuery em) {
    }
     
    @OAProperty(displayName = "Search Access", trackPrimitiveNull = false, displayLength = 6, columnLength = 13, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSearchAccess() {
        return searchAccess;
    }
    public void setSearchAccess(int newValue) {
        int old = searchAccess;
        fireBeforePropertyChange(P_SearchAccess, old, newValue);
        this.searchAccess = newValue;
        firePropertyChange(P_SearchAccess, old, this.searchAccess);
    }
    public String getSearchAccessAsString() {
        if (isNull(P_SearchAccess)) return "";
        String s = hubSearchAccess.getAt(getSearchAccess());
        if (s == null) s = "";
        return s;
    }
    @OAEditQuery(contextEnabledProperty = AppUser.P_Admin)
    public void onEditQuerySearchAccess(OAObjectEditQuery em) {
    }
     
    @OACalculatedProperty(displayName = "Full Name", displayLength = 20, columnLength = 15, properties = {P_FirstName, P_LastName})
    public String getFullName() {
        String s = "";
        s = OAString.concat(s, getFirstName());
        s = OAString.concat(s, getLastName());
        return s; 
    }
     
    @OACalculatedProperty(displayName = "Calc Admin Access", displayLength = 5, columnLength = 17, properties = {P_AdminAccess, P_AppUser+"."+AppUser.P_Admin})
    public boolean getCalcAdminAccess() {
        boolean b = this.getAdminAccess();
        if (!b) {
            AppUser appUser = this.getAppUser();
            if (appUser != null) {
                b = appUser.getAdmin();
            }
        }
        return b;
    }
     
    @OACalculatedProperty(displayName = "Production Access", displayLength = 5, columnLength = 11, columnName = "Prod Access", properties = {P_ProductionAccess, P_AdminAccess, P_AppUser+"."+AppUser.P_Admin})
    public boolean getCalcProductionReadAccess() {
        boolean b = false;
        if (appUser != null) {
            b = appUser.getAdmin();
        }
        b = b || this.getAdminAccess();
    
        if (!b) {
            int x = this.getProductionAccess();
            b = (x > 0);
        }
        return b;
    }
     
    @OACalculatedProperty(displayName = "Calc Production Write Access", displayLength = 5, columnLength = 28, properties = {P_AdminAccess, P_ProductionAccess, P_AppUser+"."+AppUser.P_Admin})
    public boolean getCalcProductionWriteAccess() {
        boolean b = false;
        if (appUser != null) {
            b = appUser.getAdmin();
        }
        b = b || this.getAdminAccess();
    
        if (!b) {
            int x = this.getProductionAccess();
            b = (x == PRODUCTIONACCESS_yes);
        }
        return b;
    }
     
    @OACalculatedProperty(displayName = "Sales Read Access", displayLength = 5, columnLength = 17, properties = {P_AdminAccess, P_SalesAccess, P_AppUser+"."+AppUser.P_Admin})
    public boolean getCalcSalesReadAccess() {
        boolean b = false;
        if (appUser != null) {
            b = appUser.getAdmin();
        }
        b = b || this.getAdminAccess();
    
        if (!b) {
            int x = this.getSalesAccess();
            b = (x > 0);
        }
        return b;
    }
     
    @OACalculatedProperty(displayName = "Sales Write Access", displayLength = 5, columnLength = 18, properties = {P_AdminAccess, P_SalesAccess, P_AppUser+"."+AppUser.P_Admin})
    public boolean getCalcSalesWriteAccess() {
        boolean b = false;
        if (appUser != null) {
            b = appUser.getAdmin();
        }
        b = b || this.getAdminAccess();
    
        if (!b) {
            int x = this.getSalesAccess();
            b = (x == SALESACCESS_yes);
        }
        return b;
    }
     
    @OACalculatedProperty(displayName = "Calc Customer Read Access", displayLength = 5, columnLength = 25, properties = {P_CalcAdminAccess, P_CustomerAccess})
    public boolean getCalcCustomerReadAccess() {
        boolean b = this.getCalcAdminAccess();
        if (b) return true;
    
        int x = this.getCustomerAccess();
        return (x > 0);
    }
     
    @OACalculatedProperty(displayName = "Calc Customer Write Access", displayLength = 5, columnLength = 26, properties = {P_CalcAdminAccess, P_CustomerAccess})
    public boolean getCalcCustomerWriteAccess() {
        boolean b = this.getCalcAdminAccess();
        if (b) return true;
    
        int x = this.getCustomerAccess();
        return (x == CUSTOMERACCESS_yes);
    }
     
    @OACalculatedProperty(displayName = "Calc Item Read Access", displayLength = 5, columnLength = 21, properties = {P_CalcAdminAccess, P_ItemAccess})
    public boolean getCalcItemReadAccess() {
        if (this.getCalcAdminAccess()) return true;
        int x = this.getItemAccess();
        return (x > 0);
    }
     
    @OACalculatedProperty(displayName = "Calc Item Write Access", displayLength = 5, columnLength = 22, properties = {P_CalcAdminAccess, P_ItemAccess})
    public boolean getCalcItemWriteAccess() {
        if (this.getCalcAdminAccess()) return true;
        int x = this.getItemAccess();
        return (x == ITEMACCESS_yes);
    }
     
    @OACalculatedProperty(displayName = "Calc Pricing Read Access", displayLength = 5, columnLength = 24, properties = {P_CalcAdminAccess, P_PricingAccess})
    public boolean getCalcPricingReadAccess() {
        if (this.getCalcAdminAccess()) return true;
        int x = this.getPricingAccess();
        return (x > 0);
    }
     
    @OACalculatedProperty(displayName = "Calc Pricing Write Access", displayLength = 5, columnLength = 25, properties = {P_CalcAdminAccess, P_PricingAccess})
    public boolean getCalcPricingWriteAccess() {
        if (this.getCalcAdminAccess()) return true;
        int x = this.getPricingAccess();
        return (x == PRICINGACCESS_yes);
    }
     
    @OACalculatedProperty(displayName = "Calc Search Read Access", displayLength = 5, columnLength = 23, properties = {P_CalcAdminAccess, P_SearchAccess})
    public boolean getCalcSearchReadAccess() {
        if (this.getCalcAdminAccess()) return true;
        int x = this.getSearchAccess();
        return (x > 0);
    }
     
    @OACalculatedProperty(displayName = "Calc Search Write Access", displayLength = 5, columnLength = 24, properties = {P_CalcAdminAccess, P_SearchAccess})
    public boolean getCalcSearchWriteAccess() {
        if (this.getCalcAdminAccess()) return true;
        int x = this.getSearchAccess();
        return (x == SEARCHACCESS_yes);
    }
     
    @OAOne(
        displayName = "App User", 
        reverseName = AppUser.P_User, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"AppUserId"})
    public AppUser getAppUser() {
        if (appUser == null) {
            appUser = (AppUser) getObject(P_AppUser);
        }
        return appUser;
    }
    public void setAppUser(AppUser newValue) {
        AppUser old = this.appUser;
        fireBeforePropertyChange(P_AppUser, old, newValue);
        this.appUser = newValue;
        firePropertyChange(P_AppUser, old, this.appUser);
    }
    @OAEditQuery(contextVisibleProperty = AppUser.P_Admin)
    public void onEditQueryAppUser(OAObjectEditQuery em) {
    }
     
    @OAMany(
        displayName = "Assigned Sales Orders", 
        toClass = SalesOrder.class, 
        reverseName = SalesOrder.P_AssignedUser
    )
    public Hub<SalesOrder> getAssignedSalesOrders() {
        if (hubAssignedSalesOrders == null) {
            hubAssignedSalesOrders = (Hub<SalesOrder>) getHub(P_AssignedSalesOrders);
        }
        return hubAssignedSalesOrders;
    }
     
    @OAMany(
        displayName = "Assigned Work Orders", 
        toClass = WorkOrder.class, 
        reverseName = WorkOrder.P_AssignedUsers, 
        createMethod = false
    )
    @OALinkTable(name = "UserTableWorkOrder", indexName = "WorkOrderAssignedUser", columns = {"UserTableId"})
    private Hub<WorkOrder> getAssignedWorkOrders() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAMany(
        displayName = "Inspect Work Orders", 
        toClass = WorkOrder.class, 
        reverseName = WorkOrder.P_InspectUser, 
        createMethod = false
    )
    private Hub<WorkOrder> getInspectWorkOrders() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAMany(
        displayName = "Order Notes", 
        toClass = OrderNote.class, 
        reverseName = OrderNote.P_User, 
        isProcessed = true, 
        createMethod = false
    )
    private Hub<OrderNote> getOrderNotes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAMany(
        displayName = "Sales Order Notes", 
        toClass = SalesOrderNote.class, 
        reverseName = SalesOrderNote.P_User, 
        isProcessed = true, 
        createMethod = false
    )
    private Hub<SalesOrderNote> getSalesOrderNotes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAMany(
        displayName = "Sales Person Sales Orders", 
        toClass = SalesOrder.class, 
        reverseName = SalesOrder.P_SalesPersonUser, 
        createMethod = false
    )
    private Hub<SalesOrder> getSalesPersonSalesOrders() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    @OAMethod(displayName = "Update App User")
    public void updateAppUser() {
        // use this to run on server (remote)
        if (isRemoteAvailable()) {
            remote();
            return;
        }
        beginServerOnly();
        AppUser appUser = getAppUser();
        if (appUser == null) {
            appUser = new AppUser();
            setAppUser(appUser);
        }
        appUser.setFirstName(getFirstName());
        appUser.setLastName(getLastName());
        appUser.setLoginId(getLoginId());
        appUser.setPassword(getPassword());
        appUser.setInactiveDate(getInactiveDate());
        appUser.setAdmin(getAdminAccess());
        endServerOnly();
    }
    @OAEditQuery(contextVisibleProperty = AppUser.P_Admin)
    public void onEditQueryUpdateAppUser(OAObjectEditQuery em) {
    }

    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.dateCreated = new OADate(date);
        this.firstName = rs.getString(3);
        this.lastName = rs.getString(4);
        this.code = rs.getString(5);
        this.loginId = rs.getString(6);
        this.password = rs.getString(7);
        date = rs.getDate(8);
        if (date != null) this.inactiveDate = new OADate(date);
        this.newOrderAccess = (rs.getShort(9) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_NewOrderAccess, true);
        }
        this.initials = rs.getString(10);
        this.adminAccess = (rs.getShort(11) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_AdminAccess, true);
        }
        this.prodViewAccess = (rs.getShort(12) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_ProdViewAccess, true);
        }
        this.prodShippingAccess = (rs.getShort(13) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_ProdShippingAccess, true);
        }
        this.prodManagerAccess = (rs.getShort(14) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_ProdManagerAccess, true);
        }
        this.salesViewAccess = (rs.getShort(15) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_SalesViewAccess, true);
        }
        this.salesUserAccess = (rs.getShort(16) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_SalesUserAccess, true);
        }
        this.phoneWork = rs.getString(17);
        this.phoneHome = rs.getString(18);
        this.phoneCell = rs.getString(19);
        this.email = rs.getString(20);
        this.prodAssignedToList = (rs.getShort(21) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_ProdAssignedToList, true);
        }
        this.salesAssignedToList = (rs.getShort(22) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_SalesAssignedToList, true);
        }
        this.salesPersonList = (rs.getShort(23) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_SalesPersonList, true);
        }
        this.prodInspectorList = (rs.getShort(24) == 1);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_ProdInspectorList, true);
        }
        this.salesAccess = (int) rs.getInt(25);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_SalesAccess, true);
        }
        this.productionAccess = (int) rs.getInt(26);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_ProductionAccess, true);
        }
        this.customerAccess = (int) rs.getInt(27);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_CustomerAccess, true);
        }
        this.itemAccess = (int) rs.getInt(28);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_ItemAccess, true);
        }
        this.pricingAccess = (int) rs.getInt(29);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_PricingAccess, true);
        }
        this.searchAccess = (int) rs.getInt(30);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, User.P_SearchAccess, true);
        }
        int appUserFkey = rs.getInt(31);
        if (!rs.wasNull() && appUserFkey > 0) {
            setProperty(P_AppUser, new OAObjectKey(appUserFkey));
        }
        if (rs.getMetaData().getColumnCount() != 31) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
