// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
 
@OAClass(
    shortName = "wod",
    displayName = "WO Delivery",
    displayProperty = "workOrder.calcSalesOrderNumber"
)
@OATable(
    indexes = {
        @OAIndex(name = "WODeliveryDelivery", fkey = true, columns = { @OAIndexColumn(name = "DeliveryId") }), 
        @OAIndex(name = "WODeliveryWorkOrder", fkey = true, columns = { @OAIndexColumn(name = "WorkOrderId") })
    }
)
public class WODelivery extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WODelivery.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
     
     
    public static final String PROPERTY_Delivery = "Delivery";
    public static final String P_Delivery = "Delivery";
    public static final String PROPERTY_DeliveryTrucks = "DeliveryTrucks";
    public static final String P_DeliveryTrucks = "DeliveryTrucks";
    public static final String PROPERTY_WorkOrder = "WorkOrder";
    public static final String P_WorkOrder = "WorkOrder";
     
    protected volatile int id;
    protected volatile OADate created;
     
    // Links to other objects.
    protected volatile transient Delivery delivery;
    protected transient Hub<DeliveryTruck> hubDeliveryTrucks;
    protected volatile transient WorkOrder workOrder;
     
    public WODelivery() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public WODelivery(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        OADate old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
     
    @OAOne(
        reverseName = Delivery.P_WODeliveries, 
        required = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"DeliveryId"})
    public Delivery getDelivery() {
        if (delivery == null) {
            delivery = (Delivery) getObject(P_Delivery);
        }
        return delivery;
    }
    public void setDelivery(Delivery newValue) {
        Delivery old = this.delivery;
        fireBeforePropertyChange(P_Delivery, old, newValue);
        this.delivery = newValue;
        firePropertyChange(P_Delivery, old, this.delivery);
    }
     
    @OAMany(
        displayName = "Delivery Trucks", 
        toClass = DeliveryTruck.class, 
        reverseName = DeliveryTruck.P_WODeliveries
    )
    @OALinkTable(name = "WODeliveryDeliveryTruck", indexName = "WOTruckWoDelivery", columns = {"WODeliveryId"})
    public Hub<DeliveryTruck> getDeliveryTrucks() {
        if (hubDeliveryTrucks == null) {
            hubDeliveryTrucks = (Hub<DeliveryTruck>) getHub(P_DeliveryTrucks);
        }
        return hubDeliveryTrucks;
    }
     
    @OAOne(
        displayName = "Work Order", 
        reverseName = WorkOrder.P_WODeliveries, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"WorkOrderId"})
    public WorkOrder getWorkOrder() {
        if (workOrder == null) {
            workOrder = (WorkOrder) getObject(P_WorkOrder);
        }
        return workOrder;
    }
    public void setWorkOrder(WorkOrder newValue) {
        WorkOrder old = this.workOrder;
        fireBeforePropertyChange(P_WorkOrder, old, newValue);
        this.workOrder = newValue;
        firePropertyChange(P_WorkOrder, old, this.workOrder);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        int deliveryFkey = rs.getInt(3);
        if (!rs.wasNull() && deliveryFkey > 0) {
            setProperty(P_Delivery, new OAObjectKey(deliveryFkey));
        }
        int workOrderFkey = rs.getInt(4);
        if (!rs.wasNull() && workOrderFkey > 0) {
            setProperty(P_WorkOrder, new OAObjectKey(workOrderFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
