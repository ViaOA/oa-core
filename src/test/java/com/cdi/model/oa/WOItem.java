// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;

 
@OAClass(
    shortName = "woi",
    displayName = "WOItem",
    displayProperty = "workOrder"
)
@OATable(
    indexes = {
        @OAIndex(name = "OrderItemLoadOrderItem", fkey = true, columns = { @OAIndexColumn(name = "OrderItemId") }), 
        @OAIndex(name = "OrderItemLoadWorkOrder", fkey = true, columns = { @OAIndexColumn(name = "WorkOrderId") })
    }
)
public class WOItem extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WOItem.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Quantity = "Quantity";
    public static final String P_Quantity = "Quantity";
     
    public static final String PROPERTY_MinDays = "MinDays";
    public static final String P_MinDays = "MinDays";
     
    public static final String PROPERTY_OrderItem = "OrderItem";
    public static final String P_OrderItem = "OrderItem";
    public static final String PROPERTY_WorkOrder = "WorkOrder";
    public static final String P_WorkOrder = "WorkOrder";
     
    protected volatile int id;
    protected volatile int quantity;
     
    // Links to other objects.
    protected volatile transient OrderItem orderItem;
    protected volatile transient WorkOrder workOrder;
     
    public WOItem() {
    }
     
    public WOItem(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(displayLength = 6, columnName = "Qty")
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getQuantity() {
        return quantity;
    }
    public void setQuantity(int newValue) {
        int old = quantity;
        fireBeforePropertyChange(P_Quantity, old, newValue);
        this.quantity = newValue;
        firePropertyChange(P_Quantity, old, this.quantity);
    }
     
    @OACalculatedProperty(displayName = "Minimum Days Required", displayLength = 3, columnLength = 4, columnName = "Mini days", properties = {P_OrderItem+"."+OrderItem.P_Item+"."+Item.P_Mold+"."+Mold.P_OnHand, P_OrderItem+"."+OrderItem.P_Quantity})
    public int getMinDays() {
        OrderItem oi = getOrderItem();
        if (oi == null) return 0;
        
        Item item = oi.getItem();
        if (item == null) return 0;
        Mold mold = item.getMold();
        if (mold == null) return 0;
        
        int onHand = mold.getOnHand();
        if (onHand < 1) return 99;// per Nathan's request
        int qty = getQuantity();
        
        return (int) Math.ceil((double)qty/(double)onHand);
    }
     
    @OAOne(
        displayName = "Order Item", 
        reverseName = OrderItem.P_WOItems, 
        required = true, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"OrderItemId"})
    public OrderItem getOrderItem() {
        if (orderItem == null) {
            orderItem = (OrderItem) getObject(P_OrderItem);
        }
        return orderItem;
    }
    public void setOrderItem(OrderItem newValue) {
        OrderItem old = this.orderItem;
        fireBeforePropertyChange(P_OrderItem, old, newValue);
        this.orderItem = newValue;
        firePropertyChange(P_OrderItem, old, this.orderItem);
    }
     
    @OAOne(
        displayName = "Work Order", 
        reverseName = WorkOrder.P_WOItems, 
        required = true, 
        isProcessed = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"WorkOrderId"})
    public WorkOrder getWorkOrder() {
        if (workOrder == null) {
            workOrder = (WorkOrder) getObject(P_WorkOrder);
        }
        return workOrder;
    }
    public void setWorkOrder(WorkOrder newValue) {
        WorkOrder old = this.workOrder;
        fireBeforePropertyChange(P_WorkOrder, old, newValue);
        this.workOrder = newValue;
        firePropertyChange(P_WorkOrder, old, this.workOrder);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.quantity = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, WOItem.P_Quantity, true);
        }
        int orderItemFkey = rs.getInt(3);
        if (!rs.wasNull() && orderItemFkey > 0) {
            setProperty(P_OrderItem, new OAObjectKey(orderItemFkey));
        }
        int workOrderFkey = rs.getInt(4);
        if (!rs.wasNull() && workOrderFkey > 0) {
            setProperty(P_WorkOrder, new OAObjectKey(workOrderFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
