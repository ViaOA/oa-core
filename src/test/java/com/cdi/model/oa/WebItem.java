// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
 
@OAClass(
    shortName = "wbi",
    displayName = "Web Item",
    displayProperty = "item",
    rootTreePropertyPaths = {
        "[WebPage]."+WebPage.P_WebParts+"."+WebPart.P_WebItems
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "WebItemItem", fkey = true, columns = { @OAIndexColumn(name = "ItemId") }), 
        @OAIndex(name = "WebItemWebPart", fkey = true, columns = { @OAIndexColumn(name = "WebPartId") })
    }
)
public class WebItem extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WebItem.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
    public static final String PROPERTY_LastChanged = "LastChanged";
    public static final String P_LastChanged = "LastChanged";
     
     
    public static final String PROPERTY_Item = "Item";
    public static final String P_Item = "Item";
    public static final String PROPERTY_WebPart = "WebPart";
    public static final String P_WebPart = "WebPart";
     
    protected volatile int id;
    protected volatile OADate created;
    protected volatile int seq;
    protected volatile OADateTime lastChanged;
     
    // Links to other objects.
    protected volatile transient Item item;
    protected volatile transient WebPart webPart;
     
    public WebItem() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public WebItem(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        OADate old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
     
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
     
    @OAProperty(displayName = "Last Changed", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getLastChanged() {
        return lastChanged;
    }
    public void setLastChanged(OADateTime newValue) {
        OADateTime old = lastChanged;
        fireBeforePropertyChange(P_LastChanged, old, newValue);
        this.lastChanged = newValue;
        firePropertyChange(P_LastChanged, old, this.lastChanged);
    }
     
    @OAOne(
        reverseName = Item.P_WebItems, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ItemId"})
    public Item getItem() {
        if (item == null) {
            item = (Item) getObject(P_Item);
        }
        return item;
    }
    public void setItem(Item newValue) {
        Item old = this.item;
        fireBeforePropertyChange(P_Item, old, newValue);
        this.item = newValue;
        firePropertyChange(P_Item, old, this.item);
    }
     
    @OAOne(
        displayName = "Web Part", 
        reverseName = WebPart.P_WebItems, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"WebPartId"})
    public WebPart getWebPart() {
        if (webPart == null) {
            webPart = (WebPart) getObject(P_WebPart);
        }
        return webPart;
    }
    public void setWebPart(WebPart newValue) {
        WebPart old = this.webPart;
        fireBeforePropertyChange(P_WebPart, old, newValue);
        this.webPart = newValue;
        firePropertyChange(P_WebPart, old, this.webPart);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.seq = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, WebItem.P_Seq, true);
        }
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.lastChanged = new OADateTime(timestamp);
        int itemFkey = rs.getInt(5);
        if (!rs.wasNull() && itemFkey > 0) {
            setProperty(P_Item, new OAObjectKey(itemFkey));
        }
        int webPartFkey = rs.getInt(6);
        if (!rs.wasNull() && webPartFkey > 0) {
            setProperty(P_WebPart, new OAObjectKey(webPartFkey));
        }
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
