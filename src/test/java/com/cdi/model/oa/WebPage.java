// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
 
@OAClass(
    shortName = "wbp",
    displayName = "Web Page",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "title",
    sortProperty = "seq"
)
@OATable(
)
public class WebPage extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WebPage.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_URL = "URL";
    public static final String P_URL = "URL";
    public static final String PROPERTY_LastChanged = "LastChanged";
    public static final String P_LastChanged = "LastChanged";
    public static final String PROPERTY_Title = "Title";
    public static final String P_Title = "Title";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
     
     
    public static final String PROPERTY_LinkFromWebPart = "LinkFromWebPart";
    public static final String P_LinkFromWebPart = "LinkFromWebPart";
    public static final String PROPERTY_WebParts = "WebParts";
    public static final String P_WebParts = "WebParts";
     
    protected volatile int id;
    protected volatile OADate created;
    protected volatile String url;
    protected volatile OADateTime lastChanged;
    protected volatile String title;
    protected volatile int seq;
     
    // Links to other objects.
    protected transient Hub<WebPart> hubLinkFromWebPart;
    protected transient Hub<WebPart> hubWebParts;
     
    public WebPage() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public WebPage(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        OADate old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
     
    @OAProperty(maxLength = 150, displayLength = 20, isUrl = true)
    @OAColumn(maxLength = 150)
    public String getURL() {
        return url;
    }
    public void setURL(String newValue) {
        String old = url;
        fireBeforePropertyChange(P_URL, old, newValue);
        this.url = newValue;
        firePropertyChange(P_URL, old, this.url);
    }
     
    @OAProperty(displayName = "Last Changed", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getLastChanged() {
        return lastChanged;
    }
    public void setLastChanged(OADateTime newValue) {
        OADateTime old = lastChanged;
        fireBeforePropertyChange(P_LastChanged, old, newValue);
        this.lastChanged = newValue;
        firePropertyChange(P_LastChanged, old, this.lastChanged);
    }
     
    @OAProperty(maxLength = 75, displayLength = 20)
    @OAColumn(maxLength = 75)
    public String getTitle() {
        return title;
    }
    public void setTitle(String newValue) {
        String old = title;
        fireBeforePropertyChange(P_Title, old, newValue);
        this.title = newValue;
        firePropertyChange(P_Title, old, this.title);
    }
     
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
     
    @OAMany(
        displayName = "Web Parts", 
        toClass = WebPart.class, 
        recursive = false, 
        reverseName = WebPart.P_LinkToWebPage
    )
    public Hub<WebPart> getLinkFromWebPart() {
        if (hubLinkFromWebPart == null) {
            hubLinkFromWebPart = (Hub<WebPart>) getHub(P_LinkFromWebPart);
        }
        return hubLinkFromWebPart;
    }
     
    @OAMany(
        displayName = "Web Parts", 
        toClass = WebPart.class, 
        recursive = true, 
        owner = true, 
        reverseName = WebPart.P_WebPage, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = WebPart.P_Seq, 
        sortProperty = WebPart.P_Seq
    )
    public Hub<WebPart> getWebParts() {
        if (hubWebParts == null) {
            hubWebParts = (Hub<WebPart>) getHub(P_WebParts);
        }
        return hubWebParts;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.url = rs.getString(3);
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.lastChanged = new OADateTime(timestamp);
        this.title = rs.getString(5);
        this.seq = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, WebPage.P_Seq, true);
        }
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
