// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
 
@OAClass(
    shortName = "wbp",
    displayName = "Web Part",
    displayProperty = "title",
    rootTreePropertyPaths = {
        "[WebPage]."+WebPage.P_WebParts
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "WebPartImageStore", fkey = true, columns = { @OAIndexColumn(name = "ImageStoreId") }), 
        @OAIndex(name = "WebPartLinkToWebPage", fkey = true, columns = { @OAIndexColumn(name = "LinkToWebPageId") }), 
        @OAIndex(name = "WebPartParentWebPart", fkey = true, columns = { @OAIndexColumn(name = "ParentWebPartId") }), 
        @OAIndex(name = "WebPartWebPage", fkey = true, columns = { @OAIndexColumn(name = "WebPageId") })
    }
)
public class WebPart extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WebPart.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Title = "Title";
    public static final String P_Title = "Title";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
    public static final String PROPERTY_LastChanged = "LastChanged";
    public static final String P_LastChanged = "LastChanged";
     
     
    public static final String PROPERTY_ImageStore = "ImageStore";
    public static final String P_ImageStore = "ImageStore";
    public static final String PROPERTY_LinkToWebPage = "LinkToWebPage";
    public static final String P_LinkToWebPage = "LinkToWebPage";
    public static final String PROPERTY_ParentWebPart = "ParentWebPart";
    public static final String P_ParentWebPart = "ParentWebPart";
    public static final String PROPERTY_WebItems = "WebItems";
    public static final String P_WebItems = "WebItems";
    public static final String PROPERTY_WebPage = "WebPage";
    public static final String P_WebPage = "WebPage";
    public static final String PROPERTY_WebParts = "WebParts";
    public static final String P_WebParts = "WebParts";
     
    protected volatile int id;
    protected volatile OADate created;
    protected volatile String title;
    protected volatile String description;
    protected volatile int seq;
    protected volatile OADateTime lastChanged;
     
    // Links to other objects.
    protected volatile transient ImageStore imageStore;
    protected volatile transient WebPage linkToWebPage;
    protected volatile transient WebPart parentWebPart;
    protected transient Hub<WebItem> hubWebItems;
    protected volatile transient WebPage webPage;
    protected transient Hub<WebPart> hubWebParts;
     
    public WebPart() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public WebPart(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        OADate old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
     
    @OAProperty(maxLength = 75, displayLength = 20)
    @OAColumn(maxLength = 75)
    public String getTitle() {
        return title;
    }
    public void setTitle(String newValue) {
        String old = title;
        fireBeforePropertyChange(P_Title, old, newValue);
        this.title = newValue;
        firePropertyChange(P_Title, old, this.title);
    }
     
    @OAProperty(displayLength = 30, columnLength = 20, isHtml = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
     
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
     
    @OAProperty(displayName = "Last Changed", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getLastChanged() {
        return lastChanged;
    }
    public void setLastChanged(OADateTime newValue) {
        OADateTime old = lastChanged;
        fireBeforePropertyChange(P_LastChanged, old, newValue);
        this.lastChanged = newValue;
        firePropertyChange(P_LastChanged, old, this.lastChanged);
    }
     
    @OAOne(
        displayName = "Image Store", 
        reverseName = ImageStore.P_WebPart
    )
    @OAFkey(columns = {"ImageStoreId"})
    public ImageStore getImageStore() {
        if (imageStore == null) {
            imageStore = (ImageStore) getObject(P_ImageStore);
        }
        return imageStore;
    }
    public void setImageStore(ImageStore newValue) {
        ImageStore old = this.imageStore;
        fireBeforePropertyChange(P_ImageStore, old, newValue);
        this.imageStore = newValue;
        firePropertyChange(P_ImageStore, old, this.imageStore);
    }
     
    @OAOne(
        displayName = "Web Page", 
        reverseName = WebPage.P_LinkFromWebPart, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"LinkToWebPageId"})
    public WebPage getLinkToWebPage() {
        if (linkToWebPage == null) {
            linkToWebPage = (WebPage) getObject(P_LinkToWebPage);
        }
        return linkToWebPage;
    }
    public void setLinkToWebPage(WebPage newValue) {
        WebPage old = this.linkToWebPage;
        fireBeforePropertyChange(P_LinkToWebPage, old, newValue);
        this.linkToWebPage = newValue;
        firePropertyChange(P_LinkToWebPage, old, this.linkToWebPage);
    }
     
    @OAOne(
        displayName = "Parent Web Part", 
        reverseName = WebPart.P_WebParts, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ParentWebPartId"})
    public WebPart getParentWebPart() {
        if (parentWebPart == null) {
            parentWebPart = (WebPart) getObject(P_ParentWebPart);
        }
        return parentWebPart;
    }
    public void setParentWebPart(WebPart newValue) {
        WebPart old = this.parentWebPart;
        fireBeforePropertyChange(P_ParentWebPart, old, newValue);
        this.parentWebPart = newValue;
        firePropertyChange(P_ParentWebPart, old, this.parentWebPart);
    }
     
    @OAMany(
        displayName = "Web Items", 
        toClass = WebItem.class, 
        owner = true, 
        reverseName = WebItem.P_WebPart, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = WebItem.P_Seq, 
        sortProperty = WebItem.P_Seq
    )
    public Hub<WebItem> getWebItems() {
        if (hubWebItems == null) {
            hubWebItems = (Hub<WebItem>) getHub(P_WebItems);
        }
        return hubWebItems;
    }
     
    @OAOne(
        displayName = "Web Page", 
        reverseName = WebPage.P_WebParts, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"WebPageId"})
    public WebPage getWebPage() {
        if (webPage == null) {
            webPage = (WebPage) getObject(P_WebPage);
        }
        return webPage;
    }
    public void setWebPage(WebPage newValue) {
        WebPage old = this.webPage;
        fireBeforePropertyChange(P_WebPage, old, newValue);
        this.webPage = newValue;
        firePropertyChange(P_WebPage, old, this.webPage);
    }
     
    @OAMany(
        displayName = "Sub Web Parts", 
        toClass = WebPart.class, 
        recursive = true, 
        reverseName = WebPart.P_ParentWebPart, 
        seqProperty = WebPart.P_Seq, 
        sortProperty = WebPart.P_Seq
    )
    public Hub<WebPart> getWebParts() {
        if (hubWebParts == null) {
            hubWebParts = (Hub<WebPart>) getHub(P_WebParts);
        }
        return hubWebParts;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.title = rs.getString(3);
        this.description = rs.getString(4);
        this.seq = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, WebPart.P_Seq, true);
        }
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(6);
        if (timestamp != null) this.lastChanged = new OADateTime(timestamp);
        int imageStoreFkey = rs.getInt(7);
        if (!rs.wasNull() && imageStoreFkey > 0) {
            setProperty(P_ImageStore, new OAObjectKey(imageStoreFkey));
        }
        int linkToWebPageFkey = rs.getInt(8);
        if (!rs.wasNull() && linkToWebPageFkey > 0) {
            setProperty(P_LinkToWebPage, new OAObjectKey(linkToWebPageFkey));
        }
        int parentWebPartFkey = rs.getInt(9);
        if (!rs.wasNull() && parentWebPartFkey > 0) {
            setProperty(P_ParentWebPart, new OAObjectKey(parentWebPartFkey));
        }
        int webPageFkey = rs.getInt(10);
        if (!rs.wasNull() && webPageFkey > 0) {
            setProperty(P_WebPage, new OAObjectKey(webPageFkey));
        }
        if (rs.getMetaData().getColumnCount() != 10) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
