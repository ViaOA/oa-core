// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.util.OADate;
import java.awt.Color;
import java.util.Calendar;
 
@OAClass(
    shortName = "wo",
    displayName = "Work Order",
    isProcessed = true,
    displayProperty = "calcSalesOrderNumber",
    filterClasses = {WorkOrderOpenFilter.class}
)
@OATable(
    indexes = {
        @OAIndex(name = "WorkOrderCompleteDate", columns = {@OAIndexColumn(name = "CompleteDate")}),
        @OAIndex(name = "WorkOrderScheduledDateEnd", columns = {@OAIndexColumn(name = "ScheduledEndDate")}),
        @OAIndex(name = "WorkOrderInspectUser", fkey = true, columns = { @OAIndexColumn(name = "InspectUserId") }), 
        @OAIndex(name = "OrderLoadOrder", fkey = true, columns = { @OAIndexColumn(name = "OrderId") })
    }
)
public class WorkOrder extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WorkOrder.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_DateCreated = "DateCreated";
    public static final String P_DateCreated = "DateCreated";
    public static final String PROPERTY_Type = "Type";
    public static final String P_Type = "Type";
    public static final String PROPERTY_TypeAsString = "TypeAsString";
    public static final String P_TypeAsString = "TypeAsString";
    public static final String PROPERTY_StatusCode = "StatusCode";
    public static final String P_StatusCode = "StatusCode";
    public static final String PROPERTY_StatusCodeAsString = "StatusCodeAsString";
    public static final String P_StatusCodeAsString = "StatusCodeAsString";
    public static final String PROPERTY_ScheduledEndDate = "ScheduledEndDate";
    public static final String P_ScheduledEndDate = "ScheduledEndDate";
    public static final String PROPERTY_InspectByDate = "InspectByDate";
    public static final String P_InspectByDate = "InspectByDate";
    public static final String PROPERTY_InspectDate = "InspectDate";
    public static final String P_InspectDate = "InspectDate";
    public static final String PROPERTY_CompleteDate = "CompleteDate";
    public static final String P_CompleteDate = "CompleteDate";
     
    public static final String PROPERTY_CalcSalesOrderNumber = "CalcSalesOrderNumber";
    public static final String P_CalcSalesOrderNumber = "CalcSalesOrderNumber";
    public static final String PROPERTY_TotalWeight = "TotalWeight";
    public static final String P_TotalWeight = "TotalWeight";
    public static final String PROPERTY_MinDays = "MinDays";
    public static final String P_MinDays = "MinDays";
    public static final String PROPERTY_CalcStatusCode = "CalcStatusCode";
    public static final String P_CalcStatusCode = "CalcStatusCode";
    public static final String PROPERTY_WorkDays = "WorkDays";
    public static final String P_WorkDays = "WorkDays";
    public static final String PROPERTY_IconColor = "IconColor";
    public static final String P_IconColor = "IconColor";
     
    public static final String PROPERTY_AssignedUsers = "AssignedUsers";
    public static final String P_AssignedUsers = "AssignedUsers";
    public static final String PROPERTY_InspectUser = "InspectUser";
    public static final String P_InspectUser = "InspectUser";
    public static final String PROPERTY_Order = "Order";
    public static final String P_Order = "Order";
    public static final String PROPERTY_WODeliveries = "WODeliveries";
    public static final String P_WODeliveries = "WODeliveries";
    public static final String PROPERTY_WOItems = "WOItems";
    public static final String P_WOItems = "WOItems";
    public static final String PROPERTY_WorkOrderPallets = "WorkOrderPallets";
    public static final String P_WorkOrderPallets = "WorkOrderPallets";
     
    protected volatile int id;
    protected volatile OADate dateCreated;
    protected volatile int type;
    public static final int TYPE_NORMAL = 0;
    public static final int TYPE_BACKORDER = 1;
    public static final int TYPE_OTHER = 2;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("Normal");
        hubType.addElement("Backorder");
        hubType.addElement("Other");
    }
    protected volatile int statusCode;
    public static final int STATUSCODE_PurpleRed = 0;
    public static final int STATUSCODE_Red = 1;
    public static final int STATUSCODE_Purple = 2;
    public static final int STATUSCODE_Orange = 3;
    public static final int STATUSCODE_Yellow = 4;
    public static final int STATUSCODE_Green = 5;
    public static final int STATUSCODE_White = 6;
    public static final Hub<String> hubStatusCode;
    static {
        hubStatusCode = new Hub<String>(String.class);
        hubStatusCode.addElement("Purple & Red");
        hubStatusCode.addElement("Red");
        hubStatusCode.addElement("Purple");
        hubStatusCode.addElement("Orange");
        hubStatusCode.addElement("Yellow");
        hubStatusCode.addElement("Green");
        hubStatusCode.addElement("White");
    }
    protected volatile OADate scheduledEndDate;
    protected volatile OADate inspectByDate;
    protected volatile OADate inspectDate;
    protected volatile OADate completeDate;
     
    // Links to other objects.
    protected transient Hub<User> hubAssignedUsers;
    protected volatile transient User inspectUser;
    protected volatile transient Order order;
    protected transient Hub<WODelivery> hubWODeliveries;
    protected transient Hub<WOItem> hubWOItems;
    protected transient Hub<WorkOrderPallet> hubWorkOrderPallets;
     
    public WorkOrder() {
        if (!isLoading()) {
            setDateCreated(new OADate());
        }
    }
     
    public WorkOrder(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(displayName = "Date", description = "date created", defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    /**
      date created
    */
    public OADate getDateCreated() {
        return dateCreated;
    }
    public void setDateCreated(OADate newValue) {
        OADate old = dateCreated;
        fireBeforePropertyChange(P_DateCreated, old, newValue);
        this.dateCreated = newValue;
        firePropertyChange(P_DateCreated, old, this.dateCreated);
    }
     
    @OAProperty(displayLength = 6, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    public void setType(int newValue) {
        int old = type;
        fireBeforePropertyChange(P_Type, old, newValue);
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
    }
    public String getTypeAsString() {
        if (isNull(P_Type)) return "";
        String s = hubType.getAt(getType());
        if (s == null) s = "";
        return s;
    }
     
    @OAProperty(displayName = "Status Code", trackPrimitiveNull = false, displayLength = 6, columnLength = 11, hasCustomCode = true, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    // this is using calcStatusCode qqqq need to clean up later
    public int getStatusCode() {
        statusCode = getCalcStatusCode();
        return statusCode;
    }
    public void setStatusCode(int newValue) {
        int old = statusCode;
        fireBeforePropertyChange(P_StatusCode, old, newValue);
        this.statusCode = newValue;
        firePropertyChange(P_StatusCode, old, this.statusCode);
    }
    
    public String getStatusCodeAsString() {
        if (isNull(P_StatusCode)) return "";
        // String s = hubStatusCode.getAt(getStatusCode());
        String s = WorkOrderDelegate.getStatusCodeDescription(getStatusCode());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayName = "Scheduled Date End", displayLength = 8, columnLength = 13, columnName = "Scheduled End")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getScheduledEndDate() {
        return scheduledEndDate;
    }
    public void setScheduledEndDate(OADate newValue) {
        OADate old = scheduledEndDate;
        fireBeforePropertyChange(P_ScheduledEndDate, old, newValue);
        this.scheduledEndDate = newValue;
        firePropertyChange(P_ScheduledEndDate, old, this.scheduledEndDate);
    }
     
    @OAProperty(displayName = "Inspect By Date", displayLength = 8, columnLength = 10, columnName = "Inspect By")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInspectByDate() {
        return inspectByDate;
    }
    public void setInspectByDate(OADate newValue) {
        OADate old = inspectByDate;
        fireBeforePropertyChange(P_InspectByDate, old, newValue);
        this.inspectByDate = newValue;
        firePropertyChange(P_InspectByDate, old, this.inspectByDate);
    }
     
    @OAProperty(displayName = "Inspect Date", displayLength = 8, columnLength = 12)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInspectDate() {
        return inspectDate;
    }
    public void setInspectDate(OADate newValue) {
        OADate old = inspectDate;
        fireBeforePropertyChange(P_InspectDate, old, newValue);
        this.inspectDate = newValue;
        firePropertyChange(P_InspectDate, old, this.inspectDate);
    }
     
    @OAProperty(displayName = "Complete Date", displayLength = 8, columnLength = 9, columnName = "Completed")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCompleteDate() {
        return completeDate;
    }
    public void setCompleteDate(OADate newValue) {
        OADate old = completeDate;
        fireBeforePropertyChange(P_CompleteDate, old, newValue);
        this.completeDate = newValue;
        firePropertyChange(P_CompleteDate, old, this.completeDate);
    }
     
    @OACalculatedProperty(displayName = "Sales Order Number", displayLength = 12, columnLength = 10, columnName = "Sales Ord#")
    public String getCalcSalesOrderNumber() {
        Order order = getOrder();
        if (order == null) return "";
        String s = order.getSalesOrderNumber();
        int pos = order.getWorkOrders().getPos(this);
        s += "-" + (pos + 1);
        return s;
    }
     
    @OACalculatedProperty(displayName = "Calc Weight", description = "weight of all items.", displayLength = 10, properties = {P_WOItems+"."+WOItem.P_Quantity, P_WOItems+"."+WOItem.P_OrderItem+"."+OrderItem.P_Item+"."+Item.P_Weight})
    public int getTotalWeight() {
        int tot = 0;
        for (WOItem woi : getWOItems()) {
            int q = woi.getQuantity();
            if (q == 0) continue;
            OrderItem oi = woi.getOrderItem();
            if (oi == null) continue;
            Item item = oi.getItem();
            tot += q * item.getWeight();
        }
        return tot;
    }
     
    @OACalculatedProperty(displayName = "Mini Days", displayLength = 5)
    public int getMinDays() {
        int max = 0;
        for (WOItem woi : getWOItems()) {
            max = Math.max(max, woi.getMinDays());
        }
        return max;
    }
     
    @OACalculatedProperty(displayName = "Status", displayLength = 15, columnLength = 12, properties = {P_Order+"."+Order.P_IsOpen, P_ScheduledEndDate, P_WOItems+"."+WOItem.P_OrderItem+"."+OrderItem.P_Item, P_Order+"."+Order.P_OrderItems+"."+OrderItem.P_RemainingQuantity, P_WOItems+"."+WOItem.P_Quantity, P_WOItems+"."+WOItem.P_OrderItem+"."+OrderItem.P_Item+"."+Item.P_Mold+"."+Mold.P_OnHand})
    public int getCalcStatusCode() {
        if (getCompleteDate() != null) return STATUSCODE_White;
        
        Order order = getOrder();
        if (order == null || !order.getIsOpen()) return STATUSCODE_White;
    
        Hub hubWOItem = getWOItems();
        if (hubWOItem.getSize() == 0) return STATUSCODE_White;
        
        int statusCode = STATUSCODE_Green; // good to go
        
        OADate today = new OADate();
        OADate woDate = getScheduledEndDate();
        final int workDays = getWorkDays();
        for (int i=0; ; i++) {
            WOItem woi = (WOItem) hubWOItem.getAt(i);
            if (woi == null) break;
            OrderItem oi = woi.getOrderItem();
            if (oi == null) continue;
            
            int remain = oi.getRemainingQuantity();
            if (remain <= 0) continue;
            remain = Math.min(remain, woi.getQuantity());
            if (remain <= 0) continue;
    
            Item item = oi.getItem();
            if (item == null) continue; // should not happen, since woitems are only created for valid items
            
            Mold mold = item.getMold();
            if (mold == null || mold.getOnHand() <= 0) {
                if (statusCode == STATUSCODE_Red) {
                    statusCode = STATUSCODE_PurpleRed;
                    break;
                }
                statusCode = STATUSCODE_Purple;
                continue;
            }
            
            if (woDate == null || woDate.before(today)) {
                if (statusCode == STATUSCODE_Purple) {
                    statusCode = STATUSCODE_PurpleRed;
                    break;
                }
                statusCode = STATUSCODE_Red;
                continue;
            }
            
            int molds = mold.getOnHand();
            int max = (molds * workDays);
            if (max < remain) {
                if (statusCode == STATUSCODE_Purple) {
                    statusCode = STATUSCODE_PurpleRed;
                    break;
                }
                statusCode = STATUSCODE_Red;
                continue;
            }
            if (statusCode > STATUSCODE_Orange) {
                statusCode = STATUSCODE_Orange;
            }
        }
    
        if (statusCode > STATUSCODE_Yellow) {
            if (getInspectDate() == null) statusCode = STATUSCODE_Yellow;
        }
        return statusCode;
    }
    /* include this after removing status code
    public static final int STATUSCODE_PurpleRed = 0;
    public static final int STATUSCODE_Red = 1;
    public static final int STATUSCODE_Purple = 2;
    public static final int STATUSCODE_Orange = 3;
    public static final int STATUSCODE_Yellow = 4;
    public static final int STATUSCODE_Green = 5;
    public static final int STATUSCODE_White = 6;
    */
     
    @OACalculatedProperty(displayName = "Work Days", description = "number of work days to complete this work order", displayLength = 6, columnLength = 9, properties = {P_ScheduledEndDate})
    public int getWorkDays() {
        OADate endDate = getScheduledEndDate();
        if (endDate == null) return 0;
        OADate today = new OADate();
        int x = endDate.compareTo(today);
        if (x <= 0) return 0;
        
        x = 0;
        OADate d = today;
        for ( ; x<100; ) {
            d = (OADate) d.addDays(1);
            int dow = d.getDayOfWeek();
            if (dow != Calendar.SATURDAY && dow != Calendar.SUNDAY) x++;
            if (d.equals(endDate)) break;
        }
        return x;
    }
     
    @OACalculatedProperty(displayName = "Icon Color", displayLength = 12, columnLength = 10, properties = {P_CalcStatusCode})
    public Color getIconColor() {
        Color c = WorkOrderDelegate.getStatusCodeColor(this);
        return c;
    }
     
    @OAMany(
        displayName = "Assigned Users", 
        toClass = User.class, 
        reverseName = User.P_AssignedWorkOrders
    )
    @OALinkTable(name = "UserTableWorkOrder", indexName = "UserTableAssignedWorkOrder", columns = {"WorkOrderId"})
    public Hub<User> getAssignedUsers() {
        if (hubAssignedUsers == null) {
            hubAssignedUsers = (Hub<User>) getHub(P_AssignedUsers);
        }
        return hubAssignedUsers;
    }
     
    @OAOne(
        displayName = "Inspect User", 
        reverseName = User.P_InspectWorkOrders, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"InspectUserId"})
    public User getInspectUser() {
        if (inspectUser == null) {
            inspectUser = (User) getObject(P_InspectUser);
        }
        return inspectUser;
    }
    public void setInspectUser(User newValue) {
        User old = this.inspectUser;
        fireBeforePropertyChange(P_InspectUser, old, newValue);
        this.inspectUser = newValue;
        firePropertyChange(P_InspectUser, old, this.inspectUser);
    }
     
    @OAOne(
        reverseName = Order.P_WorkOrders, 
        required = true, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"OrderId"})
    public Order getOrder() {
        if (order == null) {
            order = (Order) getObject(P_Order);
        }
        return order;
    }
    public void setOrder(Order newValue) {
        Order old = this.order;
        fireBeforePropertyChange(P_Order, old, newValue);
        this.order = newValue;
        firePropertyChange(P_Order, old, this.order);
    }
     
    @OAMany(
        displayName = "WO Deliveries", 
        toClass = WODelivery.class, 
        reverseName = WODelivery.P_WorkOrder, 
        uniqueProperty = WODelivery.P_Delivery
    )
    public Hub<WODelivery> getWODeliveries() {
        if (hubWODeliveries == null) {
            hubWODeliveries = (Hub<WODelivery>) getHub(P_WODeliveries);
        }
        return hubWODeliveries;
    }
     
    @OAMany(
        displayName = "WO Items", 
        toClass = WOItem.class, 
        owner = true, 
        reverseName = WOItem.P_WorkOrder, 
        isProcessed = true, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<WOItem> getWOItems() {
        if (hubWOItems == null) {
            hubWOItems = (Hub<WOItem>) getHub(P_WOItems);
        }
        return hubWOItems;
    }
     
    @OAMany(
        displayName = "Work Order Pallets", 
        toClass = WorkOrderPallet.class, 
        owner = true, 
        reverseName = WorkOrderPallet.P_WorkOrder, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<WorkOrderPallet> getWorkOrderPallets() {
        if (hubWorkOrderPallets == null) {
            hubWorkOrderPallets = (Hub<WorkOrderPallet>) getHub(P_WorkOrderPallets);
        }
        return hubWorkOrderPallets;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.dateCreated = new OADate(date);
        this.type = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, WorkOrder.P_Type, true);
        }
        this.statusCode = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, WorkOrder.P_StatusCode, true);
        }
        date = rs.getDate(5);
        if (date != null) this.scheduledEndDate = new OADate(date);
        date = rs.getDate(6);
        if (date != null) this.inspectByDate = new OADate(date);
        date = rs.getDate(7);
        if (date != null) this.inspectDate = new OADate(date);
        date = rs.getDate(8);
        if (date != null) this.completeDate = new OADate(date);
        int inspectUserFkey = rs.getInt(9);
        if (!rs.wasNull() && inspectUserFkey > 0) {
            setProperty(P_InspectUser, new OAObjectKey(inspectUserFkey));
        }
        int orderFkey = rs.getInt(10);
        if (!rs.wasNull() && orderFkey > 0) {
            setProperty(P_Order, new OAObjectKey(orderFkey));
        }
        if (rs.getMetaData().getColumnCount() != 10) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
