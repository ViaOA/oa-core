// Generated by OABuilder
package com.cdi.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.cdi.delegate.oa.*;
import com.cdi.model.oa.filter.*;
import com.cdi.model.oa.propertypath.*;
 
@OAClass(
    shortName = "wop",
    displayName = "Work Order Pallet",
    displayProperty = "workOrder"
)
@OATable(
    indexes = {
        @OAIndex(name = "WorkOrderPalletPallet", fkey = true, columns = { @OAIndexColumn(name = "PalletId") }), 
        @OAIndex(name = "WorkOrderPalletWorkOrder", fkey = true, columns = { @OAIndexColumn(name = "WorkOrderId") })
    }
)
public class WorkOrderPallet extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WorkOrderPallet.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Amount = "Amount";
    public static final String P_Amount = "Amount";
     
     
    public static final String PROPERTY_Pallet = "Pallet";
    public static final String P_Pallet = "Pallet";
    public static final String PROPERTY_WorkOrder = "WorkOrder";
    public static final String P_WorkOrder = "WorkOrder";
     
    protected volatile int id;
    protected volatile int amount;
     
    // Links to other objects.
    protected volatile transient Pallet pallet;
    protected volatile transient WorkOrder workOrder;
     
    public WorkOrderPallet() {
    }
     
    public WorkOrderPallet(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
     
    @OAProperty(displayLength = 6)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getAmount() {
        return amount;
    }
    public void setAmount(int newValue) {
        int old = amount;
        fireBeforePropertyChange(P_Amount, old, newValue);
        this.amount = newValue;
        firePropertyChange(P_Amount, old, this.amount);
    }
     
    @OAOne(
        reverseName = Pallet.P_WorkOrderPallets
    )
    @OAFkey(columns = {"PalletId"})
    public Pallet getPallet() {
        if (pallet == null) {
            pallet = (Pallet) getObject(P_Pallet);
        }
        return pallet;
    }
    public void setPallet(Pallet newValue) {
        Pallet old = this.pallet;
        fireBeforePropertyChange(P_Pallet, old, newValue);
        this.pallet = newValue;
        firePropertyChange(P_Pallet, old, this.pallet);
    }
     
    @OAOne(
        displayName = "Work Order", 
        reverseName = WorkOrder.P_WorkOrderPallets, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"WorkOrderId"})
    public WorkOrder getWorkOrder() {
        if (workOrder == null) {
            workOrder = (WorkOrder) getObject(P_WorkOrder);
        }
        return workOrder;
    }
    public void setWorkOrder(WorkOrder newValue) {
        WorkOrder old = this.workOrder;
        fireBeforePropertyChange(P_WorkOrder, old, newValue);
        this.workOrder = newValue;
        firePropertyChange(P_WorkOrder, old, this.workOrder);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.amount = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, WorkOrderPallet.P_Amount, true);
        }
        int palletFkey = rs.getInt(3);
        if (!rs.wasNull() && palletFkey > 0) {
            setProperty(P_Pallet, new OAObjectKey(palletFkey));
        }
        int workOrderFkey = rs.getInt(4);
        if (!rs.wasNull() && workOrderFkey > 0) {
            setProperty(P_WorkOrder, new OAObjectKey(workOrderFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 
