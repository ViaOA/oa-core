// Generated by OABuilder
package com.cdi.model.oa.filter;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;
import com.cdi.model.search.*;
import com.cdi.model.oa.search.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "Active", displayName = "Active", hasInputParams = false)
public class ItemActiveFilter extends OAObject implements CustomHubFilter<Item> {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ItemActiveFilter.class.getName());

    public static final String PPCode = ":Active()";
    private Hub<Item> hubMaster;
    private Hub<Item> hub;
    private HubFilter<Item> hubFilter;
    private OAObjectCacheFilter<Item> cacheFilter;
    private boolean bUseObjectCache;

    public ItemActiveFilter() {
        this(null, null, false);
    }
    public ItemActiveFilter(Hub<Item> hub) {
        this(null, hub, true);
    }
    public ItemActiveFilter(Hub<Item> hubMaster, Hub<Item> hub) {
        this(hubMaster, hub, false);
    }
    public ItemActiveFilter(Hub<Item> hubMaster, Hub<Item> hubFiltered, boolean bUseObjectCache) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        this.bUseObjectCache = bUseObjectCache;
        if (hubMaster != null) getHubFilter();
        if (bUseObjectCache) getObjectCacheFilter();
    }


    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }
    public void refresh() {
        if (hubFilter != null) getHubFilter().refresh();
        if (cacheFilter != null) getObjectCacheFilter().refresh();
    }

    @Override
    public HubFilter<Item> getHubFilter() {
        if (hubFilter != null) return hubFilter;
        if (hubMaster == null) return null;
        hubFilter = new HubFilter<Item>(hubMaster, hub) {
            @Override
            public boolean isUsed(Item item) {
                return ItemActiveFilter.this.isUsed(item);
            }
        };
        hubFilter.addDependentProperty(ItemPP.discontinuedDate(), false);
        hubFilter.refresh();
        return hubFilter;
    }

    public OAObjectCacheFilter<Item> getObjectCacheFilter() {
        if (cacheFilter != null) return cacheFilter;
        if (!bUseObjectCache) return null;
        cacheFilter = new OAObjectCacheFilter<Item>(hub) {
            @Override
            public boolean isUsed(Item item) {
                return ItemActiveFilter.this.isUsed(item);
            }
            @Override
            protected void reselect() {
                ItemActiveFilter.this.reselect();
            }
        };
        cacheFilter.addDependentProperty(ItemPP.discontinuedDate(), false);
        cacheFilter.refresh();
        return cacheFilter;
    }

    public void reselect() {
        // can be overwritten to query datasource
    }

    // ==================
    // this method has custom code that will need to be put into the OABuilder filter

    @Override
    public boolean isUsed(Item item) {
        OADate d = item.getDiscontinuedDate();
        return d == null;
    }
    
    
}
