// Generated by OABuilder
package com.cdi.model.oa.filter;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;
import com.cdi.model.search.*;
import com.cdi.model.oa.search.*;
import com.cdi.delegate.ModelDelegate;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "SalesPerson", displayName = "Sales Person", hasInputParams = true)
public class SalesOrderSalesPersonFilter extends OAObject implements CustomHubFilter<SalesOrder> {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(SalesOrderSalesPersonFilter.class.getName());
    public static final String P_SalesOrderSalesPersonUser = "SalesOrderSalesPersonUser";
    public static final String P_SalesOrderSalesPersonUserUseNull = "SalesOrderSalesPersonUserUseNull";
    public static final String P_UseSalesOrderSalesPersonUserSearch = "UseSalesOrderSalesPersonUserSearch";

    protected User salesOrderSalesPersonUser;
    protected boolean salesOrderSalesPersonUserUseNull;
    protected boolean useSalesOrderSalesPersonUserSearch;
    protected UserSearch searchSalesOrderSalesPersonUser;
    public static final String PPCode = ":SalesPerson(?)";
    private Hub<SalesOrder> hubMaster;
    private Hub<SalesOrder> hub;
    private HubFilter<SalesOrder> hubFilter;
    private OAObjectCacheFilter<SalesOrder> cacheFilter;
    private boolean bUseObjectCache;

    public SalesOrderSalesPersonFilter() {
        this(null, null, false);
    }
    public SalesOrderSalesPersonFilter(Hub<SalesOrder> hub) {
        this(null, hub, true);
    }
    public SalesOrderSalesPersonFilter(Hub<SalesOrder> hubMaster, Hub<SalesOrder> hub) {
        this(hubMaster, hub, false);
    }
    public SalesOrderSalesPersonFilter(Hub<SalesOrder> hubMaster, Hub<SalesOrder> hubFiltered, boolean bUseObjectCache) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        this.bUseObjectCache = bUseObjectCache;
        if (hubMaster != null) getHubFilter();
        if (bUseObjectCache) getObjectCacheFilter();
    }
    public SalesOrderSalesPersonFilter(Hub<SalesOrder> hubMaster, Hub<SalesOrder> hubFiltered, User salesOrderSalesPersonUser) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        if (hubMaster == null) this.hubMaster = new Hub<SalesOrder>(SalesOrder.class);
        setSalesOrderSalesPersonUser(salesOrderSalesPersonUser);
        getHubFilter(); // create filter
    }


    @OAOne
    public User getSalesOrderSalesPersonUser() {
        if (salesOrderSalesPersonUser == null) {
            salesOrderSalesPersonUser = (User) getObject(P_SalesOrderSalesPersonUser);
        }
        return salesOrderSalesPersonUser;
    }
    public void setSalesOrderSalesPersonUser(User newValue) {
        User old = this.salesOrderSalesPersonUser;
        this.salesOrderSalesPersonUser = newValue;
        firePropertyChange(P_SalesOrderSalesPersonUser, old, this.salesOrderSalesPersonUser);
    }
    public boolean getSalesOrderSalesPersonUserUseNull() {
        return salesOrderSalesPersonUserUseNull;
    }
    public void setSalesOrderSalesPersonUserUseNull(boolean newValue) {
        boolean old = this.salesOrderSalesPersonUserUseNull;
        this.salesOrderSalesPersonUserUseNull = newValue;
        firePropertyChange(P_SalesOrderSalesPersonUserUseNull, old, this.salesOrderSalesPersonUserUseNull);
    }
    public boolean getUseSalesOrderSalesPersonUserSearch() {
        return useSalesOrderSalesPersonUserSearch;
    }
    public void setUseSalesOrderSalesPersonUserSearch(boolean newValue) {
        boolean old = this.useSalesOrderSalesPersonUserSearch;
        this.useSalesOrderSalesPersonUserSearch = newValue;
        firePropertyChange(P_UseSalesOrderSalesPersonUserSearch, old, this.useSalesOrderSalesPersonUserSearch);
    }
    public UserSearch getSalesOrderSalesPersonUserSearch() {
        return this.searchSalesOrderSalesPersonUser;
    }
    public void setSalesOrderSalesPersonUserSearch(UserSearch newValue) {
        this.searchSalesOrderSalesPersonUser = newValue;
    }

    public void reset() {
        setSalesOrderSalesPersonUser(null);
        setSalesOrderSalesPersonUserUseNull(false);
        setUseSalesOrderSalesPersonUserSearch(false);
    }

    public boolean isDataEntered() {
        if (getSalesOrderSalesPersonUser() != null) return true;
        if (getSalesOrderSalesPersonUserUseNull()) return true;
        if (getUseSalesOrderSalesPersonUserSearch()) return true;
        return false;
    }
    public void refresh() {
        if (hubFilter != null) getHubFilter().refresh();
        if (cacheFilter != null) getObjectCacheFilter().refresh();
    }

    @Override
    public HubFilter<SalesOrder> getHubFilter() {
        if (hubFilter != null) return hubFilter;
        if (hubMaster == null) return null;
        hubFilter = new HubFilter<SalesOrder>(hubMaster, hub) {
            @Override
            public boolean isUsed(SalesOrder salesOrder) {
                return SalesOrderSalesPersonFilter.this.isUsed(salesOrder);
            }
        };
        hubFilter.addDependentProperty(SalesOrderPP.salesPersonUser().pp, false);
        hubFilter.refresh();
        return hubFilter;
    }

    public OAObjectCacheFilter<SalesOrder> getObjectCacheFilter() {
        if (cacheFilter != null) return cacheFilter;
        if (!bUseObjectCache) return null;
        cacheFilter = new OAObjectCacheFilter<SalesOrder>(hub) {
            @Override
            public boolean isUsed(SalesOrder salesOrder) {
                return SalesOrderSalesPersonFilter.this.isUsed(salesOrder);
            }
            @Override
            protected void reselect() {
                SalesOrderSalesPersonFilter.this.reselect();
            }
        };
        cacheFilter.addDependentProperty(SalesOrderPP.salesPersonUser().pp, false);
        cacheFilter.refresh();
        return cacheFilter;
    }

    public void reselect() {
        // can be overwritten to query datasource
    }

    // ==================
    // this method has custom code that will need to be put into the OABuilder filter

    @Override
    public boolean isUsed(SalesOrder salesOrder) {
        boolean bResult = false;
        User user = salesOrder.getSalesPersonUser();
        if (user != null) {
            if (user == this.salesOrderSalesPersonUser) bResult = true;
        }
        return bResult;
    }
}
