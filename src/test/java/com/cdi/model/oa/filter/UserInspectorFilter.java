// Generated by OABuilder
package com.cdi.model.oa.filter;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;
import com.cdi.model.search.*;
import com.cdi.model.oa.search.*;


@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "Inspector", displayName = "Inspector", hasInputParams = false)
public class UserInspectorFilter extends OAObject implements CustomHubFilter<User> {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(UserInspectorFilter.class.getName());

    public static final String PPCode = ":Inspector()";
    private Hub<User> hubMaster;
    private Hub<User> hub;
    private HubFilter<User> hubFilter;
    private OAObjectCacheFilter<User> cacheFilter;
    private boolean bUseObjectCache;

    public UserInspectorFilter() {
        this(null, null, false);
    }
    public UserInspectorFilter(Hub<User> hub) {
        this(null, hub, true);
    }
    public UserInspectorFilter(Hub<User> hubMaster, Hub<User> hub) {
        this(hubMaster, hub, false);
    }
    public UserInspectorFilter(Hub<User> hubMaster, Hub<User> hubFiltered, boolean bUseObjectCache) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        this.bUseObjectCache = bUseObjectCache;
        if (hubMaster != null) getHubFilter();
        if (bUseObjectCache) getObjectCacheFilter();
    }


    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }
    public void refresh() {
        if (hubFilter != null) getHubFilter().refresh();
        if (cacheFilter != null) getObjectCacheFilter().refresh();
    }

    @Override
    public HubFilter<User> getHubFilter() {
        if (hubFilter != null) return hubFilter;
        if (hubMaster == null) return null;
        hubFilter = new HubFilter<User>(hubMaster, hub) {
            @Override
            public boolean isUsed(User user) {
                return UserInspectorFilter.this.isUsed(user);
            }
        };
        hubFilter.addDependentProperty(UserPP.inactiveDate(), false);
        hubFilter.addDependentProperty(UserPP.prodInspectorList(), false);
        hubFilter.refresh();
        return hubFilter;
    }

    public OAObjectCacheFilter<User> getObjectCacheFilter() {
        if (cacheFilter != null) return cacheFilter;
        if (!bUseObjectCache) return null;
        cacheFilter = new OAObjectCacheFilter<User>(hub) {
            @Override
            public boolean isUsed(User user) {
                return UserInspectorFilter.this.isUsed(user);
            }
            @Override
            protected void reselect() {
                UserInspectorFilter.this.reselect();
            }
        };
        cacheFilter.addDependentProperty(UserPP.inactiveDate(), false);
        cacheFilter.addDependentProperty(UserPP.prodInspectorList(), false);
        cacheFilter.refresh();
        return cacheFilter;
    }

    public void reselect() {
        // can be overwritten to query datasource
    }

    // ==================
    // this method has custom code that will need to be put into the OABuilder filter

    @Override
    public boolean isUsed(User user) {
        if (user.getInactiveDate() != null) return false;
        return user.getProdInspectorList();
    }
}
