// Generated by OABuilder
package com.cdi.model.oa.propertypath;
 
import java.io.Serializable;
import com.cdi.model.oa.*;
 
public class SalesOrderPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public SalesOrderPPx(String name) {
        this(null, name);
    }

    public SalesOrderPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public UserPPx assignedUser() {
        UserPPx ppx = new UserPPx(this, SalesOrder.P_AssignedUser);
        return ppx;
    }

    public OrderPPx order() {
        OrderPPx ppx = new OrderPPx(this, SalesOrder.P_Order);
        return ppx;
    }

    public PriceCodePPx priceCode() {
        PriceCodePPx ppx = new PriceCodePPx(this, SalesOrder.P_PriceCode);
        return ppx;
    }

    public SalesCustomerPPx salesCustomer() {
        SalesCustomerPPx ppx = new SalesCustomerPPx(this, SalesOrder.P_SalesCustomer);
        return ppx;
    }

    public SalesOrderItemPPx salesOrderItems() {
        SalesOrderItemPPx ppx = new SalesOrderItemPPx(this, SalesOrder.P_SalesOrderItems);
        return ppx;
    }

    public SalesOrderNotePPx salesOrderNotes() {
        SalesOrderNotePPx ppx = new SalesOrderNotePPx(this, SalesOrder.P_SalesOrderNotes);
        return ppx;
    }

    public SalesOrderSourcePPx salesOrderSource() {
        SalesOrderSourcePPx ppx = new SalesOrderSourcePPx(this, SalesOrder.P_SalesOrderSource);
        return ppx;
    }

    public SalesOrderStatusPPx salesOrderStatus() {
        SalesOrderStatusPPx ppx = new SalesOrderStatusPPx(this, SalesOrder.P_SalesOrderStatus);
        return ppx;
    }

    public UserPPx salesPersonUser() {
        UserPPx ppx = new UserPPx(this, SalesOrder.P_SalesPersonUser);
        return ppx;
    }

    public String id() {
        return pp + "." + SalesOrder.P_Id;
    }

    public String date() {
        return pp + "." + SalesOrder.P_Date;
    }

    public String project() {
        return pp + "." + SalesOrder.P_Project;
    }

    public String dateExpected() {
        return pp + "." + SalesOrder.P_DateExpected;
    }

    public String dateSubmitted() {
        return pp + "." + SalesOrder.P_DateSubmitted;
    }

    public String dateProcessed() {
        return pp + "." + SalesOrder.P_DateProcessed;
    }

    public String dateComplete() {
        return pp + "." + SalesOrder.P_DateComplete;
    }

    public String dateClosed() {
        return pp + "." + SalesOrder.P_DateClosed;
    }

    public String closeReason() {
        return pp + "." + SalesOrder.P_CloseReason;
    }

    public String taxRate() {
        return pp + "." + SalesOrder.P_TaxRate;
    }

    public String discountPercent() {
        return pp + "." + SalesOrder.P_DiscountPercent;
    }

    public String shippingPrice() {
        return pp + "." + SalesOrder.P_ShippingPrice;
    }

    public String color() {
        return pp + "." + SalesOrder.P_Color;
    }

    public String texture() {
        return pp + "." + SalesOrder.P_Texture;
    }

    public String customerPickUp() {
        return pp + "." + SalesOrder.P_CustomerPickUp;
    }

    public String lastRevisedDate() {
        return pp + "." + SalesOrder.P_LastRevisedDate;
    }

    public String lastRevisedNote() {
        return pp + "." + SalesOrder.P_LastRevisedNote;
    }

    public String bidDate() {
        return pp + "." + SalesOrder.P_BidDate;
    }

    public String sample() {
        return pp + "." + SalesOrder.P_Sample;
    }

    public String calculatedTotal() {
        return pp + "." + SalesOrder.P_CalculatedTotal;
    }

    public String architect() {
        return pp + "." + SalesOrder.P_Architect;
    }

    public String contractor() {
        return pp + "." + SalesOrder.P_Contractor;
    }

    public String submitError() {
        return pp + "." + SalesOrder.P_SubmitError;
    }

    public String totalItemOurPrice() {
        return pp + "." + SalesOrder.P_TotalItemOurPrice;
    }

    public String totalItemSellPrice() {
        return pp + "." + SalesOrder.P_TotalItemSellPrice;
    }

    public String totalItemDiscount() {
        return pp + "." + SalesOrder.P_TotalItemDiscount;
    }

    public String totalService() {
        return pp + "." + SalesOrder.P_TotalService;
    }

    public String totalBeforeTax() {
        return pp + "." + SalesOrder.P_TotalBeforeTax;
    }

    public String totalTax() {
        return pp + "." + SalesOrder.P_TotalTax;
    }

    public String totalWithTax() {
        return pp + "." + SalesOrder.P_TotalWithTax;
    }

    public String totalOrder() {
        return pp + "." + SalesOrder.P_TotalOrder;
    }

    public String totalWeight() {
        return pp + "." + SalesOrder.P_TotalWeight;
    }

    public String currentDateStatus() {
        return pp + "." + SalesOrder.P_CurrentDateStatus;
    }

    public String lastFollowUp() {
        return pp + "." + SalesOrder.P_LastFollowUp;
    }

    public String display() {
        return pp + "." + SalesOrder.P_Display;
    }

    public String canEdit() {
        return pp + "." + SalesOrder.P_CanEdit;
    }

    public String calcFollowupDate() {
        return pp + "." + SalesOrder.P_CalcFollowupDate;
    }

    public String submitToQuickBooks() {
        return pp + ".submitToQuickBooks";
    }

    public String close() {
        return pp + ".close";
    }

    public String reopen() {
        return pp + ".reopen";
    }

    public SalesOrderPPx openFilter() {
        SalesOrderPPx ppx = new SalesOrderPPx(this, ":open()");
        return ppx;
    }

    public SalesOrderPPx salesPersonFilter() {
        SalesOrderPPx ppx = new SalesOrderPPx(this, ":salesPerson(?)");
        return ppx;
    }

    @Override
    public String toString() {
        return pp;
    }
    public String pp() {
        return pp;
    }
}
 
