// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class AppUserLoginSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(AppUserLoginSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Id2 = "Id2";
    public static final String P_Created = "Created";
    public static final String P_CreatedUseNull = "CreatedUseNull";
    public static final String P_CreatedUseNotNull = "CreatedUseNotNull";
    public static final String P_Location = "Location";
    public static final String P_LocationUseNull = "LocationUseNull";
    public static final String P_LocationUseNotNull = "LocationUseNotNull";
    public static final String P_ComputerName = "ComputerName";
    public static final String P_ComputerNameUseNull = "ComputerNameUseNull";
    public static final String P_ComputerNameUseNotNull = "ComputerNameUseNotNull";
    public static final String P_AppUserLoginAppUser = "AppUserLoginAppUser";
    public static final String P_UseAppUserLoginAppUserSearch = "UseAppUserLoginAppUserSearch";
    public static final String P_MaxResults = "MaxResults";

    protected int id;
    protected int id2;
    protected OADateTime created;
    protected boolean createdUseNull;
    protected boolean createdUseNotNull;
    protected String location;
    protected boolean locationUseNull;
    protected boolean locationUseNotNull;
    protected String computerName;
    protected boolean computerNameUseNull;
    protected boolean computerNameUseNotNull;
    protected AppUser appUserLoginAppUser;
    protected boolean useAppUserLoginAppUserSearch;
    protected AppUserSearch searchAppUserLoginAppUser;
    protected int maxResults;

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
        if (isLoading()) return;
        if (id > id2) setId2(this.id);
    } 
    public int getId2() {
        return id2;
    }
    public void setId2(int newValue) {
        int old = id2;
        fireBeforePropertyChange(P_Id2, old, newValue);
        this.id2 = newValue;
        firePropertyChange(P_Id2, old, this.id2);
        if (isLoading()) return;
        if (id > id2) setId(this.id2);
    }

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      
    public boolean getCreatedUseNull() {
        return createdUseNull;
    }
    public void setCreatedUseNull(boolean newValue) {
        boolean old = this.createdUseNull;
        this.createdUseNull = newValue;
        firePropertyChange(P_CreatedUseNull, old, this.createdUseNull);
    }
    public boolean getCreatedUseNotNull() {
        return createdUseNotNull;
    }
    public void setCreatedUseNotNull(boolean newValue) {
        boolean old = this.createdUseNotNull;
        this.createdUseNotNull = newValue;
        firePropertyChange(P_CreatedUseNotNull, old, this.createdUseNotNull);
    }

    public String getLocation() {
        return location;
    }
    public void setLocation(String newValue) {
        String old = location;
        fireBeforePropertyChange(P_Location, old, newValue);
        this.location = newValue;
        firePropertyChange(P_Location, old, this.location);
    }
      
    public boolean getLocationUseNull() {
        return locationUseNull;
    }
    public void setLocationUseNull(boolean newValue) {
        boolean old = this.locationUseNull;
        this.locationUseNull = newValue;
        firePropertyChange(P_LocationUseNull, old, this.locationUseNull);
    }
    public boolean getLocationUseNotNull() {
        return locationUseNotNull;
    }
    public void setLocationUseNotNull(boolean newValue) {
        boolean old = this.locationUseNotNull;
        this.locationUseNotNull = newValue;
        firePropertyChange(P_LocationUseNotNull, old, this.locationUseNotNull);
    }

    public String getComputerName() {
        return computerName;
    }
    public void setComputerName(String newValue) {
        String old = computerName;
        fireBeforePropertyChange(P_ComputerName, old, newValue);
        this.computerName = newValue;
        firePropertyChange(P_ComputerName, old, this.computerName);
    }
      
    public boolean getComputerNameUseNull() {
        return computerNameUseNull;
    }
    public void setComputerNameUseNull(boolean newValue) {
        boolean old = this.computerNameUseNull;
        this.computerNameUseNull = newValue;
        firePropertyChange(P_ComputerNameUseNull, old, this.computerNameUseNull);
    }
    public boolean getComputerNameUseNotNull() {
        return computerNameUseNotNull;
    }
    public void setComputerNameUseNotNull(boolean newValue) {
        boolean old = this.computerNameUseNotNull;
        this.computerNameUseNotNull = newValue;
        firePropertyChange(P_ComputerNameUseNotNull, old, this.computerNameUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public AppUser getAppUserLoginAppUser() {
        if (appUserLoginAppUser == null) {
            appUserLoginAppUser = (AppUser) getObject(P_AppUserLoginAppUser);
        }
        return appUserLoginAppUser;
    }
    public void setAppUserLoginAppUser(AppUser newValue) {
        AppUser old = this.appUserLoginAppUser;
        this.appUserLoginAppUser = newValue;
        firePropertyChange(P_AppUserLoginAppUser, old, this.appUserLoginAppUser);
    }
    public boolean getUseAppUserLoginAppUserSearch() {
        return useAppUserLoginAppUserSearch;
    }
    public void setUseAppUserLoginAppUserSearch(boolean newValue) {
        boolean old = this.useAppUserLoginAppUserSearch;
        this.useAppUserLoginAppUserSearch = newValue;
        firePropertyChange(P_UseAppUserLoginAppUserSearch, old, this.useAppUserLoginAppUserSearch);
    }
    public AppUserSearch getAppUserLoginAppUserSearch() {
        return this.searchAppUserLoginAppUser;
    }
    public void setAppUserLoginAppUserSearch(AppUserSearch newValue) {
        this.searchAppUserLoginAppUser = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setId2(0);
        setNull(P_Id2);
        setCreated(null);
        setCreatedUseNull(false);
        setCreatedUseNotNull(false);
        setLocation(null);
        setLocationUseNull(false);
        setLocationUseNotNull(false);
        setComputerName(null);
        setComputerNameUseNull(false);
        setComputerNameUseNotNull(false);
        setAppUserLoginAppUser(null);
        setUseAppUserLoginAppUserSearch(false);
    }

    public boolean isDataEntered() {

        if (getCreated() != null) return true;
        if (getCreatedUseNull()) return true;
        if (getCreatedUseNull()) return true;
        if (getCreatedUseNull()) return true;
        if (getCreatedUseNotNull()) return true;
        if (getLocation() != null) return true;
        if (getLocationUseNull()) return true;if (getLocationUseNotNull()) return true;
        if (getLocationUseNull()) return true;
        if (getLocationUseNotNull()) return true;
        if (getComputerName() != null) return true;
        if (getComputerNameUseNull()) return true;if (getComputerNameUseNotNull()) return true;
        if (getComputerNameUseNull()) return true;
        if (getComputerNameUseNotNull()) return true;
        if (getAppUserLoginAppUser() != null) return true;
        if (getUseAppUserLoginAppUserSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<AppUserLogin> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<AppUserLogin> f = new OAQueryFilter<AppUserLogin>(AppUserLogin.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<AppUserLogin> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<AppUserLogin> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<AppUserLogin> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += AppUserLogin.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + AppUserLogin.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += AppUserLogin.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (createdUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_Created + " = null";
        }
        else if (createdUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_Created + " != null";
        }
        else if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (locationUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + AppUserLogin.P_Location + " = null OR " + AppUserLogin.P_Location + " == '')";
        }
        else if (locationUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_Location + " != null";
        }
        else if (!OAString.isEmpty(this.location)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.location.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += AppUserLogin.P_Location + " LIKE ?";
            }
            else {
                sql += AppUserLogin.P_Location + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (computerNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + AppUserLogin.P_ComputerName + " = null OR " + AppUserLogin.P_ComputerName + " == '')";
        }
        else if (computerNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_ComputerName + " != null";
        }
        else if (!OAString.isEmpty(this.computerName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.computerName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += AppUserLogin.P_ComputerName + " LIKE ?";
            }
            else {
                sql += AppUserLogin.P_ComputerName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useAppUserLoginAppUserSearch && getAppUserLoginAppUser() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLoginPP.appUser().pp + " = ?";
            args = OAArray.add(Object.class, args, getAppUserLoginAppUser());
            finder = new OAFinder<AppUser, AppUserLogin>(getAppUserLoginAppUser(), AppUser.P_AppUserLogins);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<AppUserLogin> select = new OASelect<AppUserLogin>(AppUserLogin.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useAppUserLoginAppUserSearch && getAppUserLoginAppUserSearch() != null) {
            getAppUserLoginAppUserSearch().appendSelect(AppUserLoginPP.appUser().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += AppUserLogin.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + AppUserLogin.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += AppUserLogin.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (createdUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_Created + " = null";
        }
        else if (createdUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_Created + " != null";
        }
        else if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (locationUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + AppUserLogin.P_Location + " = null OR " + AppUserLogin.P_Location + " == '')";
        }
        else if (locationUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_Location + " != null";
        }
        else if (!OAString.isEmpty(this.location)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.location.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += AppUserLogin.P_Location + " LIKE ?";
            }
            else {
                sql += AppUserLogin.P_Location + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (computerNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + AppUserLogin.P_ComputerName + " = null OR " + AppUserLogin.P_ComputerName + " == '')";
        }
        else if (computerNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += AppUserLogin.P_ComputerName + " != null";
        }
        else if (!OAString.isEmpty(this.computerName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.computerName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += AppUserLogin.P_ComputerName + " LIKE ?";
            }
            else {
                sql += AppUserLogin.P_ComputerName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useAppUserLoginAppUserSearch && getAppUserLoginAppUser() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + AppUserLoginPP.appUser().pp + " = ?";
            args = OAArray.add(Object.class, args, getAppUserLoginAppUser());
        }
        if (useAppUserLoginAppUserSearch && getAppUserLoginAppUserSearch() != null) {
            getAppUserLoginAppUserSearch().appendSelect(prefix + AppUserLoginPP.appUser().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<AppUserLogin> filterDataSourceFilter;
    public OAFilter<AppUserLogin> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<AppUserLogin>() {
            @Override
            public boolean isUsed(AppUserLogin appUserLogin) {
                return AppUserLoginSearch.this.isUsedForDataSourceFilter(appUserLogin);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<AppUserLogin> filterCustomFilter;
    public OAFilter<AppUserLogin> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<AppUserLogin>() {
            @Override
            public boolean isUsed(AppUserLogin appUserLogin) {
                boolean b = AppUserLoginSearch.this.isUsedForCustomFilter(appUserLogin);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(appUserLogin);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(AppUserLogin searchAppUserLogin) {
        if (!isNull(P_Id2)) {
            if (!OACompare.isEqualOrBetween(searchAppUserLogin.getId(), id, id2)) return false;
        }
        if (appUserLoginAppUser != null) {
            if (!OACompare.isEqual(searchAppUserLogin.getAppUser(), appUserLoginAppUser)) return false;
        }
        if (createdUseNull) {
            if (OACompare.isNotEmpty(searchAppUserLogin.getCreated())) return false;
        }
        else if (createdUseNotNull) {
            if (OACompare.isEmpty(searchAppUserLogin.getCreated())) return false;
        }
        else if (created != null) {
            if (!OACompare.isEqual(searchAppUserLogin.getCreated(), created)) return false;
        }
        if (locationUseNull) {
            if (OACompare.isNotEmpty(searchAppUserLogin.getLocation())) return false;
        }
        else if (locationUseNotNull) {
            if (OACompare.isEmpty(searchAppUserLogin.getLocation())) return false;
        }
        else if (location != null) {
            String s = getLocation();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchAppUserLogin.getLocation(), s)) return false;
        }
        if (computerNameUseNull) {
            if (OACompare.isNotEmpty(searchAppUserLogin.getComputerName())) return false;
        }
        else if (computerNameUseNotNull) {
            if (OACompare.isEmpty(searchAppUserLogin.getComputerName())) return false;
        }
        else if (computerName != null) {
            String s = getComputerName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchAppUserLogin.getComputerName(), s)) return false;
        }
        if (useAppUserLoginAppUserSearch && getAppUserLoginAppUserSearch() != null) {
            AppUser appUser = (AppUser) searchAppUserLogin.getProperty(AppUserLoginPP.appUser().pp);
            if (appUser == null) return false;
            if (!getAppUserLoginAppUserSearch().isUsedForDataSourceFilter(appUser)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(AppUserLogin searchAppUserLogin) {
        return true;
    }
}
