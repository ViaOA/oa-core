// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class CustomerSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(CustomerSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_CustomerNumber = "CustomerNumber";
    public static final String P_CustomerNumberUseNull = "CustomerNumberUseNull";
    public static final String P_CustomerNumberUseNotNull = "CustomerNumberUseNotNull";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_Address = "Address";
    public static final String P_AddressUseNull = "AddressUseNull";
    public static final String P_AddressUseNotNull = "AddressUseNotNull";
    public static final String P_City = "City";
    public static final String P_CityUseNull = "CityUseNull";
    public static final String P_CityUseNotNull = "CityUseNotNull";
    public static final String P_State = "State";
    public static final String P_StateUseNull = "StateUseNull";
    public static final String P_StateUseNotNull = "StateUseNotNull";
    public static final String P_Zip = "Zip";
    public static final String P_ZipUseNull = "ZipUseNull";
    public static final String P_ZipUseNotNull = "ZipUseNotNull";
    public static final String P_Phone = "Phone";
    public static final String P_PhoneUseNull = "PhoneUseNull";
    public static final String P_PhoneUseNotNull = "PhoneUseNotNull";
    public static final String P_Salesperson = "Salesperson";
    public static final String P_SalespersonUseNull = "SalespersonUseNull";
    public static final String P_SalespersonUseNotNull = "SalespersonUseNotNull";
    public static final String P_InactiveDate = "InactiveDate";
    public static final String P_InactiveDate2 = "InactiveDate2";
    public static final String P_InactiveDateUseNull = "InactiveDateUseNull";
    public static final String P_InactiveDateUseNotNull = "InactiveDateUseNotNull";
    public static final String P_CustomerContacts = "CustomerContacts";
    public static final String P_UseCustomerContactsSearch = "UseCustomerContactsSearch";
    public static final String P_CustomerOrders = "CustomerOrders";
    public static final String P_UseCustomerOrdersSearch = "UseCustomerOrdersSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected String customerNumber;
    protected boolean customerNumberUseNull;
    protected boolean customerNumberUseNotNull;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected String address;
    protected boolean addressUseNull;
    protected boolean addressUseNotNull;
    protected String city;
    protected boolean cityUseNull;
    protected boolean cityUseNotNull;
    protected String state;
    protected boolean stateUseNull;
    protected boolean stateUseNotNull;
    protected String zip;
    protected boolean zipUseNull;
    protected boolean zipUseNotNull;
    protected String phone;
    protected boolean phoneUseNull;
    protected boolean phoneUseNotNull;
    protected String salesperson;
    protected boolean salespersonUseNull;
    protected boolean salespersonUseNotNull;
    protected OADate inactiveDate;
    protected OADate inactiveDate2;
    protected boolean inactiveDateUseNull;
    protected boolean inactiveDateUseNotNull;
    protected Contact customerContacts;
    protected boolean useCustomerContactsSearch;
    protected ContactSearch searchCustomerContacts;
    protected Order customerOrders;
    protected boolean useCustomerOrdersSearch;
    protected OrderSearch searchCustomerOrders;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_customerNumber = 1;
    public static final int SORTBYTYPE_name = 2;
    public static final int SORTBYTYPE_salesperson = 3;
    public static final int SORTBYTYPE_state = 4;
    public static final int SORTBYTYPE_phone = 5;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Customer Number");
        hubSortByType.add("Name");
        hubSortByType.add("Salesperson");
        hubSortByType.add("State");
        hubSortByType.add("Phone");
    }

    public CustomerSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getCustomerNumber() {
        return customerNumber;
    }
    public void setCustomerNumber(String newValue) {
        String old = customerNumber;
        fireBeforePropertyChange(P_CustomerNumber, old, newValue);
        this.customerNumber = newValue;
        firePropertyChange(P_CustomerNumber, old, this.customerNumber);
    }
      
    public boolean getCustomerNumberUseNull() {
        return customerNumberUseNull;
    }
    public void setCustomerNumberUseNull(boolean newValue) {
        boolean old = this.customerNumberUseNull;
        this.customerNumberUseNull = newValue;
        firePropertyChange(P_CustomerNumberUseNull, old, this.customerNumberUseNull);
    }
    public boolean getCustomerNumberUseNotNull() {
        return customerNumberUseNotNull;
    }
    public void setCustomerNumberUseNotNull(boolean newValue) {
        boolean old = this.customerNumberUseNotNull;
        this.customerNumberUseNotNull = newValue;
        firePropertyChange(P_CustomerNumberUseNotNull, old, this.customerNumberUseNotNull);
    }

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public String getAddress() {
        return address;
    }
    public void setAddress(String newValue) {
        String old = address;
        fireBeforePropertyChange(P_Address, old, newValue);
        this.address = newValue;
        firePropertyChange(P_Address, old, this.address);
    }
      
    public boolean getAddressUseNull() {
        return addressUseNull;
    }
    public void setAddressUseNull(boolean newValue) {
        boolean old = this.addressUseNull;
        this.addressUseNull = newValue;
        firePropertyChange(P_AddressUseNull, old, this.addressUseNull);
    }
    public boolean getAddressUseNotNull() {
        return addressUseNotNull;
    }
    public void setAddressUseNotNull(boolean newValue) {
        boolean old = this.addressUseNotNull;
        this.addressUseNotNull = newValue;
        firePropertyChange(P_AddressUseNotNull, old, this.addressUseNotNull);
    }

    public String getCity() {
        return city;
    }
    public void setCity(String newValue) {
        String old = city;
        fireBeforePropertyChange(P_City, old, newValue);
        this.city = newValue;
        firePropertyChange(P_City, old, this.city);
    }
      
    public boolean getCityUseNull() {
        return cityUseNull;
    }
    public void setCityUseNull(boolean newValue) {
        boolean old = this.cityUseNull;
        this.cityUseNull = newValue;
        firePropertyChange(P_CityUseNull, old, this.cityUseNull);
    }
    public boolean getCityUseNotNull() {
        return cityUseNotNull;
    }
    public void setCityUseNotNull(boolean newValue) {
        boolean old = this.cityUseNotNull;
        this.cityUseNotNull = newValue;
        firePropertyChange(P_CityUseNotNull, old, this.cityUseNotNull);
    }

    public String getState() {
        return state;
    }
    public void setState(String newValue) {
        String old = state;
        fireBeforePropertyChange(P_State, old, newValue);
        this.state = newValue;
        firePropertyChange(P_State, old, this.state);
    }
      
    public boolean getStateUseNull() {
        return stateUseNull;
    }
    public void setStateUseNull(boolean newValue) {
        boolean old = this.stateUseNull;
        this.stateUseNull = newValue;
        firePropertyChange(P_StateUseNull, old, this.stateUseNull);
    }
    public boolean getStateUseNotNull() {
        return stateUseNotNull;
    }
    public void setStateUseNotNull(boolean newValue) {
        boolean old = this.stateUseNotNull;
        this.stateUseNotNull = newValue;
        firePropertyChange(P_StateUseNotNull, old, this.stateUseNotNull);
    }

    public String getZip() {
        return zip;
    }
    public void setZip(String newValue) {
        String old = zip;
        fireBeforePropertyChange(P_Zip, old, newValue);
        this.zip = newValue;
        firePropertyChange(P_Zip, old, this.zip);
    }
      
    public boolean getZipUseNull() {
        return zipUseNull;
    }
    public void setZipUseNull(boolean newValue) {
        boolean old = this.zipUseNull;
        this.zipUseNull = newValue;
        firePropertyChange(P_ZipUseNull, old, this.zipUseNull);
    }
    public boolean getZipUseNotNull() {
        return zipUseNotNull;
    }
    public void setZipUseNotNull(boolean newValue) {
        boolean old = this.zipUseNotNull;
        this.zipUseNotNull = newValue;
        firePropertyChange(P_ZipUseNotNull, old, this.zipUseNotNull);
    }

    public String getPhone() {
        return phone;
    }
    public void setPhone(String newValue) {
        String old = phone;
        fireBeforePropertyChange(P_Phone, old, newValue);
        this.phone = newValue;
        firePropertyChange(P_Phone, old, this.phone);
    }
      
    public boolean getPhoneUseNull() {
        return phoneUseNull;
    }
    public void setPhoneUseNull(boolean newValue) {
        boolean old = this.phoneUseNull;
        this.phoneUseNull = newValue;
        firePropertyChange(P_PhoneUseNull, old, this.phoneUseNull);
    }
    public boolean getPhoneUseNotNull() {
        return phoneUseNotNull;
    }
    public void setPhoneUseNotNull(boolean newValue) {
        boolean old = this.phoneUseNotNull;
        this.phoneUseNotNull = newValue;
        firePropertyChange(P_PhoneUseNotNull, old, this.phoneUseNotNull);
    }

    public String getSalesperson() {
        return salesperson;
    }
    public void setSalesperson(String newValue) {
        String old = salesperson;
        fireBeforePropertyChange(P_Salesperson, old, newValue);
        this.salesperson = newValue;
        firePropertyChange(P_Salesperson, old, this.salesperson);
    }
      
    public boolean getSalespersonUseNull() {
        return salespersonUseNull;
    }
    public void setSalespersonUseNull(boolean newValue) {
        boolean old = this.salespersonUseNull;
        this.salespersonUseNull = newValue;
        firePropertyChange(P_SalespersonUseNull, old, this.salespersonUseNull);
    }
    public boolean getSalespersonUseNotNull() {
        return salespersonUseNotNull;
    }
    public void setSalespersonUseNotNull(boolean newValue) {
        boolean old = this.salespersonUseNotNull;
        this.salespersonUseNotNull = newValue;
        firePropertyChange(P_SalespersonUseNotNull, old, this.salespersonUseNotNull);
    }

    public OADate getInactiveDate() {
        return inactiveDate;
    }
    public void setInactiveDate(OADate newValue) {
        OADate old = inactiveDate;
        fireBeforePropertyChange(P_InactiveDate, old, newValue);
        this.inactiveDate = newValue;
        firePropertyChange(P_InactiveDate, old, this.inactiveDate);
        if (isLoading()) return;
        if (inactiveDate != null) {
            if (inactiveDate2 == null) setInactiveDate2(this.inactiveDate);
            else if (inactiveDate.compareTo(inactiveDate2) > 0) setInactiveDate2(this.inactiveDate);
        }
    } 
    public OADate getInactiveDate2() {
        return inactiveDate2;
    }
    public void setInactiveDate2(OADate newValue) {
        OADate old = inactiveDate2;
        fireBeforePropertyChange(P_InactiveDate2, old, newValue);
        this.inactiveDate2 = newValue;
        firePropertyChange(P_InactiveDate2, old, this.inactiveDate2);
        if (inactiveDate != null && inactiveDate2 != null) {
            if (inactiveDate.compareTo(inactiveDate2) > 0) setInactiveDate(this.inactiveDate2);
        }
    }
    public boolean getInactiveDateUseNull() {
        return inactiveDateUseNull;
    }
    public void setInactiveDateUseNull(boolean newValue) {
        boolean old = this.inactiveDateUseNull;
        this.inactiveDateUseNull = newValue;
        firePropertyChange(P_InactiveDateUseNull, old, this.inactiveDateUseNull);
    }
    public boolean getInactiveDateUseNotNull() {
        return inactiveDateUseNotNull;
    }
    public void setInactiveDateUseNotNull(boolean newValue) {
        boolean old = this.inactiveDateUseNotNull;
        this.inactiveDateUseNotNull = newValue;
        firePropertyChange(P_InactiveDateUseNotNull, old, this.inactiveDateUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public Contact getCustomerContacts() {
        if (customerContacts == null) {
            customerContacts = (Contact) getObject(P_CustomerContacts);
        }
        return customerContacts;
    }
    public void setCustomerContacts(Contact newValue) {
        Contact old = this.customerContacts;
        this.customerContacts = newValue;
        firePropertyChange(P_CustomerContacts, old, this.customerContacts);
    }
    public boolean getUseCustomerContactsSearch() {
        return useCustomerContactsSearch;
    }
    public void setUseCustomerContactsSearch(boolean newValue) {
        boolean old = this.useCustomerContactsSearch;
        this.useCustomerContactsSearch = newValue;
        firePropertyChange(P_UseCustomerContactsSearch, old, this.useCustomerContactsSearch);
    }
    public ContactSearch getCustomerContactsSearch() {
        return this.searchCustomerContacts;
    }
    public void setCustomerContactsSearch(ContactSearch newValue) {
        this.searchCustomerContacts = newValue;
    }

    @OAOne
    public Order getCustomerOrders() {
        if (customerOrders == null) {
            customerOrders = (Order) getObject(P_CustomerOrders);
        }
        return customerOrders;
    }
    public void setCustomerOrders(Order newValue) {
        Order old = this.customerOrders;
        this.customerOrders = newValue;
        firePropertyChange(P_CustomerOrders, old, this.customerOrders);
    }
    public boolean getUseCustomerOrdersSearch() {
        return useCustomerOrdersSearch;
    }
    public void setUseCustomerOrdersSearch(boolean newValue) {
        boolean old = this.useCustomerOrdersSearch;
        this.useCustomerOrdersSearch = newValue;
        firePropertyChange(P_UseCustomerOrdersSearch, old, this.useCustomerOrdersSearch);
    }
    public OrderSearch getCustomerOrdersSearch() {
        return this.searchCustomerOrders;
    }
    public void setCustomerOrdersSearch(OrderSearch newValue) {
        this.searchCustomerOrders = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setCustomerNumber(null);
        setCustomerNumberUseNull(false);
        setCustomerNumberUseNotNull(false);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setAddress(null);
        setAddressUseNull(false);
        setAddressUseNotNull(false);
        setCity(null);
        setCityUseNull(false);
        setCityUseNotNull(false);
        setState(null);
        setStateUseNull(false);
        setStateUseNotNull(false);
        setZip(null);
        setZipUseNull(false);
        setZipUseNotNull(false);
        setPhone(null);
        setPhoneUseNull(false);
        setPhoneUseNotNull(false);
        setSalesperson(null);
        setSalespersonUseNull(false);
        setSalespersonUseNotNull(false);
        setInactiveDate(null);
        setInactiveDate2(null);
        setInactiveDateUseNull(true);  // inactive property for Customer
        setInactiveDateUseNotNull(false);
        setCustomerContacts(null);
        setUseCustomerContactsSearch(false);
        setCustomerOrders(null);
        setUseCustomerOrdersSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getCustomerNumber() != null) return true;
        if (getCustomerNumberUseNull()) return true;if (getCustomerNumberUseNotNull()) return true;
        if (getCustomerNumberUseNull()) return true;
        if (getCustomerNumberUseNotNull()) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (getAddress() != null) return true;
        if (getAddressUseNull()) return true;if (getAddressUseNotNull()) return true;
        if (getAddressUseNull()) return true;
        if (getAddressUseNotNull()) return true;
        if (getCity() != null) return true;
        if (getCityUseNull()) return true;if (getCityUseNotNull()) return true;
        if (getCityUseNull()) return true;
        if (getCityUseNotNull()) return true;
        if (getState() != null) return true;
        if (getStateUseNull()) return true;if (getStateUseNotNull()) return true;
        if (getStateUseNull()) return true;
        if (getStateUseNotNull()) return true;
        if (getZip() != null) return true;
        if (getZipUseNull()) return true;if (getZipUseNotNull()) return true;
        if (getZipUseNull()) return true;
        if (getZipUseNotNull()) return true;
        if (getPhone() != null) return true;
        if (getPhoneUseNull()) return true;if (getPhoneUseNotNull()) return true;
        if (getPhoneUseNull()) return true;
        if (getPhoneUseNotNull()) return true;
        if (getSalesperson() != null) return true;
        if (getSalespersonUseNull()) return true;if (getSalespersonUseNotNull()) return true;
        if (getSalespersonUseNull()) return true;
        if (getSalespersonUseNotNull()) return true;
        if (getInactiveDate() != null) return true;
        if (getInactiveDateUseNull()) return true;
        if (getInactiveDateUseNull()) return true;
        if (getInactiveDateUseNull()) return true;
        if (getInactiveDateUseNotNull()) return true;
        if (getCustomerContacts() != null) return true;
        if (getUseCustomerContactsSearch()) return true;
        if (getCustomerOrders() != null) return true;
        if (getUseCustomerOrdersSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Customer> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Customer> f = new OAQueryFilter<Customer>(Customer.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Customer> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Customer> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Customer> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_customerNumber: sortOrder = Customer.P_CustomerNumber; break;
            case SORTBYTYPE_name: sortOrder = Customer.P_Name; break;
            case SORTBYTYPE_salesperson: sortOrder = Customer.P_Salesperson; break;
            case SORTBYTYPE_state: sortOrder = Customer.P_State; break;
            case SORTBYTYPE_phone: sortOrder = Customer.P_Phone; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (customerNumberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_CustomerNumber + " = null OR " + Customer.P_CustomerNumber + " == '')";
        }
        else if (customerNumberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_CustomerNumber + " != null";
        }
        else if (!OAString.isEmpty(this.customerNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_CustomerNumber + " LIKE ?";
            }
            else {
                sql += Customer.P_CustomerNumber + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Name + " = null OR " + Customer.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Name + " LIKE ?";
            }
            else {
                sql += Customer.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (addressUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Address + " = null OR " + Customer.P_Address + " == '')";
        }
        else if (addressUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Address + " != null";
        }
        else if (!OAString.isEmpty(this.address)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.address.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Address + " LIKE ?";
            }
            else {
                sql += Customer.P_Address + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (cityUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_City + " = null OR " + Customer.P_City + " == '')";
        }
        else if (cityUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_City + " != null";
        }
        else if (!OAString.isEmpty(this.city)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.city.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_City + " LIKE ?";
            }
            else {
                sql += Customer.P_City + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (stateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_State + " = null OR " + Customer.P_State + " == '')";
        }
        else if (stateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_State + " != null";
        }
        else if (!OAString.isEmpty(this.state)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.state.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_State + " LIKE ?";
            }
            else {
                sql += Customer.P_State + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (zipUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Zip + " = null OR " + Customer.P_Zip + " == '')";
        }
        else if (zipUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Zip + " != null";
        }
        else if (!OAString.isEmpty(this.zip)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.zip.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Zip + " LIKE ?";
            }
            else {
                sql += Customer.P_Zip + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (phoneUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Phone + " = null OR " + Customer.P_Phone + " == '')";
        }
        else if (phoneUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Phone + " != null";
        }
        else if (!OAString.isEmpty(this.phone)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.phone.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Phone + " LIKE ?";
            }
            else {
                sql += Customer.P_Phone + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (salespersonUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Salesperson + " = null OR " + Customer.P_Salesperson + " == '')";
        }
        else if (salespersonUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Salesperson + " != null";
        }
        else if (!OAString.isEmpty(this.salesperson)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesperson.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Salesperson + " LIKE ?";
            }
            else {
                sql += Customer.P_Salesperson + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        // custom: default to null
        if (inactiveDateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_InactiveDate + " != null";
        }
        else if (inactiveDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_InactiveDate + " = ?";
            args = OAArray.add(Object.class, args, this.inactiveDate);
        }
        else {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_InactiveDate + " = null";
        }
        if (!useCustomerContactsSearch && getCustomerContacts() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += CustomerPP.contacts().pp + " = ?";
            args = OAArray.add(Object.class, args, getCustomerContacts());
            finder = new OAFinder<Contact, Customer>(getCustomerContacts(), Contact.P_Customer);
        }
        if (!useCustomerOrdersSearch && getCustomerOrders() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += CustomerPP.orders().pp + " = ?";
            args = OAArray.add(Object.class, args, getCustomerOrders());
            finder = new OAFinder<Order, Customer>(getCustomerOrders(), Order.P_Customer);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Customer> select = new OASelect<Customer>(Customer.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useCustomerContactsSearch && getCustomerContactsSearch() != null) {
            getCustomerContactsSearch().appendSelect(CustomerPP.contacts().pp, select);
        }
        if (useCustomerOrdersSearch && getCustomerOrdersSearch() != null) {
            getCustomerOrdersSearch().appendSelect(CustomerPP.orders().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (customerNumberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_CustomerNumber + " = null OR " + Customer.P_CustomerNumber + " == '')";
        }
        else if (customerNumberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_CustomerNumber + " != null";
        }
        else if (!OAString.isEmpty(this.customerNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_CustomerNumber + " LIKE ?";
            }
            else {
                sql += Customer.P_CustomerNumber + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Name + " = null OR " + Customer.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Name + " LIKE ?";
            }
            else {
                sql += Customer.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (addressUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Address + " = null OR " + Customer.P_Address + " == '')";
        }
        else if (addressUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Address + " != null";
        }
        else if (!OAString.isEmpty(this.address)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.address.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Address + " LIKE ?";
            }
            else {
                sql += Customer.P_Address + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (cityUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_City + " = null OR " + Customer.P_City + " == '')";
        }
        else if (cityUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_City + " != null";
        }
        else if (!OAString.isEmpty(this.city)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.city.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_City + " LIKE ?";
            }
            else {
                sql += Customer.P_City + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (stateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_State + " = null OR " + Customer.P_State + " == '')";
        }
        else if (stateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_State + " != null";
        }
        else if (!OAString.isEmpty(this.state)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.state.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_State + " LIKE ?";
            }
            else {
                sql += Customer.P_State + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (zipUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Zip + " = null OR " + Customer.P_Zip + " == '')";
        }
        else if (zipUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Zip + " != null";
        }
        else if (!OAString.isEmpty(this.zip)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.zip.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Zip + " LIKE ?";
            }
            else {
                sql += Customer.P_Zip + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (phoneUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Phone + " = null OR " + Customer.P_Phone + " == '')";
        }
        else if (phoneUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Phone + " != null";
        }
        else if (!OAString.isEmpty(this.phone)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.phone.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Phone + " LIKE ?";
            }
            else {
                sql += Customer.P_Phone + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (salespersonUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Customer.P_Salesperson + " = null OR " + Customer.P_Salesperson + " == '')";
        }
        else if (salespersonUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_Salesperson + " != null";
        }
        else if (!OAString.isEmpty(this.salesperson)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesperson.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Customer.P_Salesperson + " LIKE ?";
            }
            else {
                sql += Customer.P_Salesperson + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        // custom: default to null
        if (inactiveDateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_InactiveDate + " != null";
        }
        else if (inactiveDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_InactiveDate + " = ?";
            args = OAArray.add(Object.class, args, this.inactiveDate);
        }
        else {
            if (sql.length() > 0) sql += " AND ";
            sql += Customer.P_InactiveDate + " = null";
        }
        if (!useCustomerContactsSearch && getCustomerContacts() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + CustomerPP.contacts().pp + " = ?";
            args = OAArray.add(Object.class, args, getCustomerContacts());
        }
        if (useCustomerContactsSearch && getCustomerContactsSearch() != null) {
            getCustomerContactsSearch().appendSelect(prefix + CustomerPP.contacts().pp, select);
        }
        if (!useCustomerOrdersSearch && getCustomerOrders() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + CustomerPP.orders().pp + " = ?";
            args = OAArray.add(Object.class, args, getCustomerOrders());
        }
        if (useCustomerOrdersSearch && getCustomerOrdersSearch() != null) {
            getCustomerOrdersSearch().appendSelect(prefix + CustomerPP.orders().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Customer> filterDataSourceFilter;
    public OAFilter<Customer> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Customer>() {
            @Override
            public boolean isUsed(Customer customer) {
                return CustomerSearch.this.isUsedForDataSourceFilter(customer);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Customer> filterCustomFilter;
    public OAFilter<Customer> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Customer>() {
            @Override
            public boolean isUsed(Customer customer) {
                boolean b = CustomerSearch.this.isUsedForCustomFilter(customer);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(customer);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Customer searchCustomer) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchCustomer.getId(), id)) return false;
        }
        if (customerNumberUseNull) {
            if (OACompare.isNotEmpty(searchCustomer.getCustomerNumber())) return false;
        }
        else if (customerNumberUseNotNull) {
            if (OACompare.isEmpty(searchCustomer.getCustomerNumber())) return false;
        }
        else if (customerNumber != null) {
            String s = getCustomerNumber();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchCustomer.getCustomerNumber(), s)) return false;
        }
        if (nameUseNull) {
            if (OACompare.isNotEmpty(searchCustomer.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(searchCustomer.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchCustomer.getName(), s)) return false;
        }
        if (addressUseNull) {
            if (OACompare.isNotEmpty(searchCustomer.getAddress())) return false;
        }
        else if (addressUseNotNull) {
            if (OACompare.isEmpty(searchCustomer.getAddress())) return false;
        }
        else if (address != null) {
            String s = getAddress();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchCustomer.getAddress(), s)) return false;
        }
        if (cityUseNull) {
            if (OACompare.isNotEmpty(searchCustomer.getCity())) return false;
        }
        else if (cityUseNotNull) {
            if (OACompare.isEmpty(searchCustomer.getCity())) return false;
        }
        else if (city != null) {
            String s = getCity();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchCustomer.getCity(), s)) return false;
        }
        if (stateUseNull) {
            if (OACompare.isNotEmpty(searchCustomer.getState())) return false;
        }
        else if (stateUseNotNull) {
            if (OACompare.isEmpty(searchCustomer.getState())) return false;
        }
        else if (state != null) {
            String s = getState();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchCustomer.getState(), s)) return false;
        }
        if (zipUseNull) {
            if (OACompare.isNotEmpty(searchCustomer.getZip())) return false;
        }
        else if (zipUseNotNull) {
            if (OACompare.isEmpty(searchCustomer.getZip())) return false;
        }
        else if (zip != null) {
            String s = getZip();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchCustomer.getZip(), s)) return false;
        }
        if (phoneUseNull) {
            if (OACompare.isNotEmpty(searchCustomer.getPhone())) return false;
        }
        else if (phoneUseNotNull) {
            if (OACompare.isEmpty(searchCustomer.getPhone())) return false;
        }
        else if (phone != null) {
            String s = getPhone();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchCustomer.getPhone(), s)) return false;
        }
        if (salespersonUseNull) {
            if (OACompare.isNotEmpty(searchCustomer.getSalesperson())) return false;
        }
        else if (salespersonUseNotNull) {
            if (OACompare.isEmpty(searchCustomer.getSalesperson())) return false;
        }
        else if (salesperson != null) {
            String s = getSalesperson();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchCustomer.getSalesperson(), s)) return false;
        }
        if (inactiveDateUseNull) {
            if (OACompare.isNotEmpty(searchCustomer.getInactiveDate())) return false;
        }
        else if (inactiveDateUseNotNull) {
            if (OACompare.isEmpty(searchCustomer.getInactiveDate())) return false;
        }
        else if (inactiveDate2 != null) {
            if (!OACompare.isEqualOrBetween(searchCustomer.getInactiveDate(), inactiveDate, inactiveDate2)) return false;
        }
        if (customerContacts != null) {
            if (!OACompare.isIn(customerContacts, searchCustomer.getContacts())) return false;
        }
        if (customerOrders != null) {
            if (!OACompare.isIn(customerOrders, searchCustomer.getOrders())) return false;
        }
        if (useCustomerContactsSearch && getCustomerContactsSearch() != null) {
            Contact contact = (Contact) searchCustomer.getProperty(CustomerPP.contacts().pp);
            if (contact == null) return false;
            if (!getCustomerContactsSearch().isUsedForDataSourceFilter(contact)) return false;
        }
        if (useCustomerOrdersSearch && getCustomerOrdersSearch() != null) {
            Order order = (Order) searchCustomer.getProperty(CustomerPP.orders().pp);
            if (order == null) return false;
            if (!getCustomerOrdersSearch().isUsedForDataSourceFilter(order)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Customer searchCustomer) {
        return true;
    }
}
