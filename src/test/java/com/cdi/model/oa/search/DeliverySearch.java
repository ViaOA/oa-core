// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class DeliverySearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(DeliverySearch.class.getName());
    public static final String P_Date = "Date";
    public static final String P_Date2 = "Date2";
    public static final String P_Carrier = "Carrier";
    public static final String P_SalesOrderNumber = "SalesOrderNumber";
    public static final String P_Truck = "Truck";
    public static final String P_UseTruckSearch = "UseTruckSearch";
    public static final String P_Order = "Order";
    public static final String P_UseOrderSearch = "UseOrderSearch";
    public static final String P_MaxResults = "MaxResults";

    protected OADate date;
    protected OADate date2;
    protected String carrier;
    protected String salesOrderNumber;
    protected Truck truck;
    protected boolean useTruckSearch;
    protected TruckSearch searchTruck;
    protected Order order;
    protected boolean useOrderSearch;
    protected OrderSearch searchOrder;
    protected int maxResults;

    public OADate getDate() {
        return date;
    }
    public void setDate(OADate newValue) {
        OADate old = date;
        fireBeforePropertyChange(P_Date, old, newValue);
        this.date = newValue;
        firePropertyChange(P_Date, old, this.date);
        if (isLoading()) return;
        if (date != null) {
            if (date2 == null) setDate2(this.date);
            else if (date.compareTo(date2) > 0) setDate2(this.date);
        }
    } 
    public OADate getDate2() {
        return date2;
    }
    public void setDate2(OADate newValue) {
        OADate old = date2;
        fireBeforePropertyChange(P_Date2, old, newValue);
        this.date2 = newValue;
        firePropertyChange(P_Date2, old, this.date2);
        if (date != null && date2 != null) {
            if (date.compareTo(date2) > 0) setDate(this.date2);
        }
    }

    public String getCarrier() {
        return carrier;
    }
    public void setCarrier(String newValue) {
        String old = carrier;
        fireBeforePropertyChange(P_Carrier, old, newValue);
        this.carrier = newValue;
        firePropertyChange(P_Carrier, old, this.carrier);
    }
      

    public String getSalesOrderNumber() {
        return salesOrderNumber;
    }
    public void setSalesOrderNumber(String newValue) {
        String old = salesOrderNumber;
        fireBeforePropertyChange(P_SalesOrderNumber, old, newValue);
        this.salesOrderNumber = newValue;
        firePropertyChange(P_SalesOrderNumber, old, this.salesOrderNumber);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Truck getTruck() {
        if (truck == null) {
            truck = (Truck) getObject(P_Truck);
        }
        return truck;
    }
    public void setTruck(Truck newValue) {
        Truck old = this.truck;
        this.truck = newValue;
        firePropertyChange(P_Truck, old, this.truck);
    }
    public boolean getUseTruckSearch() {
        return useTruckSearch;
    }
    public void setUseTruckSearch(boolean newValue) {
        boolean old = this.useTruckSearch;
        this.useTruckSearch = newValue;
        firePropertyChange(P_UseTruckSearch, old, this.useTruckSearch);
    }
    public TruckSearch getTruckSearch() {
        return this.searchTruck;
    }
    public void setTruckSearch(TruckSearch newValue) {
        this.searchTruck = newValue;
    }

    @OAOne
    public Order getOrder() {
        if (order == null) {
            order = (Order) getObject(P_Order);
        }
        return order;
    }
    public void setOrder(Order newValue) {
        Order old = this.order;
        this.order = newValue;
        firePropertyChange(P_Order, old, this.order);
    }
    public boolean getUseOrderSearch() {
        return useOrderSearch;
    }
    public void setUseOrderSearch(boolean newValue) {
        boolean old = this.useOrderSearch;
        this.useOrderSearch = newValue;
        firePropertyChange(P_UseOrderSearch, old, this.useOrderSearch);
    }
    public OrderSearch getOrderSearch() {
        return this.searchOrder;
    }
    public void setOrderSearch(OrderSearch newValue) {
        this.searchOrder = newValue;
    }

    public void reset() {
        setDate(null);
        setDate2(null);
        setCarrier(null);
        setSalesOrderNumber(null);
        setTruck(null);
        setUseTruckSearch(false);
        setOrder(null);
        setUseOrderSearch(false);
    }

    public boolean isDataEntered() {
        if (getDate() != null) return true;
        if (getCarrier() != null) return true;
        if (getSalesOrderNumber() != null) return true;
        if (getTruck() != null) return true;
        if (getUseTruckSearch()) return true;
        if (getOrder() != null) return true;
        if (getUseOrderSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Delivery> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Delivery> f = new OAQueryFilter<Delivery>(Delivery.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Delivery> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Delivery> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Delivery> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += Delivery.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + Delivery.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += Delivery.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (!OAString.isEmpty(this.carrier)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.carrier.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += DeliveryPP.deliveryTrucks().truck().carrier() + " LIKE ?";
            }
            else {
                sql += DeliveryPP.deliveryTrucks().truck().carrier() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.salesOrderNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesOrderNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += DeliveryPP.woDeliveries().workOrder().order().salesOrderNumber() + " LIKE ?";
            }
            else {
                sql += DeliveryPP.woDeliveries().workOrder().order().salesOrderNumber() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useTruckSearch && getTruck() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += DeliveryPP.deliveryTrucks().truck().pp + " = ?";
            args = OAArray.add(Object.class, args, getTruck());
            String pp = TruckPP.deliveryTrucks().delivery().pp;
            finder = new OAFinder<Truck, Delivery>(getTruck(), pp);
        }
        if (!useOrderSearch && getOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += DeliveryPP.woDeliveries().workOrder().order().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrder());
            String pp = OrderPP.workOrders().woDeliveries().delivery().pp;
            finder = new OAFinder<Order, Delivery>(getOrder(), pp);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Delivery> select = new OASelect<Delivery>(Delivery.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useTruckSearch && getTruckSearch() != null) {
            getTruckSearch().appendSelect(DeliveryPP.deliveryTrucks().truck().pp, select);
        }
        if (useOrderSearch && getOrderSearch() != null) {
            getOrderSearch().appendSelect(DeliveryPP.woDeliveries().workOrder().order().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += Delivery.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + Delivery.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += Delivery.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (!OAString.isEmpty(this.carrier)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.carrier.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += DeliveryPP.deliveryTrucks().truck().carrier() + " LIKE ?";
            }
            else {
                sql += DeliveryPP.deliveryTrucks().truck().carrier() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.salesOrderNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesOrderNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += DeliveryPP.woDeliveries().workOrder().order().salesOrderNumber() + " LIKE ?";
            }
            else {
                sql += DeliveryPP.woDeliveries().workOrder().order().salesOrderNumber() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useTruckSearch && getTruck() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + DeliveryPP.deliveryTrucks().truck().pp + " = ?";
            args = OAArray.add(Object.class, args, getTruck());
        }
        if (useTruckSearch && getTruckSearch() != null) {
            getTruckSearch().appendSelect(prefix + DeliveryPP.deliveryTrucks().truck().pp, select);
        }
        if (!useOrderSearch && getOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + DeliveryPP.woDeliveries().workOrder().order().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrder());
        }
        if (useOrderSearch && getOrderSearch() != null) {
            getOrderSearch().appendSelect(prefix + DeliveryPP.woDeliveries().workOrder().order().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Delivery> filterDataSourceFilter;
    public OAFilter<Delivery> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Delivery>() {
            @Override
            public boolean isUsed(Delivery delivery) {
                return DeliverySearch.this.isUsedForDataSourceFilter(delivery);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Delivery> filterCustomFilter;
    public OAFilter<Delivery> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Delivery>() {
            @Override
            public boolean isUsed(Delivery delivery) {
                boolean b = DeliverySearch.this.isUsedForCustomFilter(delivery);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(delivery);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Delivery searchDelivery) {
        if (date2 != null) {
            if (!OACompare.isEqualOrBetween(searchDelivery.getDate(), date, date2)) return false;
        }
        if (this.carrier != null) {
            OAFinder<Delivery, Truck> finder = new OAFinder<Delivery, Truck>(DeliveryPP.deliveryTrucks().truck().pp);
             if (carrier != null) {
                String s = getCarrier();
                if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
                finder.addLikeFilter(TruckPP.carrier(), s);
            }
            if (finder.findFirst(searchDelivery) == null) return false;
        }
        if (this.truck != null) {
            OAFinder<Delivery, DeliveryTruck> finder = new OAFinder<Delivery, DeliveryTruck>(DeliveryPP.deliveryTrucks().pp);
             if (truck != null) {
                finder.addEqualFilter(DeliveryTruckPP.truck().pp, getTruck());
            }
            if (finder.findFirst(searchDelivery) == null) return false;
        }
        if (this.salesOrderNumber != null) {
            OAFinder<Delivery, Order> finder = new OAFinder<Delivery, Order>(DeliveryPP.woDeliveries().workOrder().order().pp);
             if (salesOrderNumber != null) {
                String s = getSalesOrderNumber();
                if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
                finder.addLikeFilter(OrderPP.salesOrderNumber(), s);
            }
            if (finder.findFirst(searchDelivery) == null) return false;
        }
        if (this.order != null) {
            OAFinder<Delivery, WorkOrder> finder = new OAFinder<Delivery, WorkOrder>(DeliveryPP.woDeliveries().workOrder().pp);
             if (order != null) {
                finder.addEqualFilter(WorkOrderPP.order().pp, getOrder());
            }
            if (finder.findFirst(searchDelivery) == null) return false;
        }
        if (useTruckSearch && getTruckSearch() != null) {
            OAFinder<Delivery, Truck> finder = new OAFinder<Delivery, Truck>(DeliveryPP.deliveryTrucks().truck().pp) {
                @Override
                protected boolean isUsed(Truck truck) {
                    return getTruckSearch().isUsedForDataSourceFilter(truck);
                }
            };
            if (finder.findFirst(searchDelivery) == null) return false;;
        }
        if (useOrderSearch && getOrderSearch() != null) {
            OAFinder<Delivery, Order> finder = new OAFinder<Delivery, Order>(DeliveryPP.woDeliveries().workOrder().order().pp) {
                @Override
                protected boolean isUsed(Order order) {
                    return getOrderSearch().isUsedForDataSourceFilter(order);
                }
            };
            if (finder.findFirst(searchDelivery) == null) return false;;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Delivery searchDelivery) {
        return true;
    }
}
