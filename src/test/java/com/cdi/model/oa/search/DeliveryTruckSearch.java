// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;
import java.awt.Color;

@OAClass(useDataSource=false, localOnly=true)
public class DeliveryTruckSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(DeliveryTruckSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_WOTruckTruck = "WOTruckTruck";
    public static final String P_UseWOTruckTruckSearch = "UseWOTruckTruckSearch";
    public static final String P_WODeliveriesWorkOrder = "WODeliveriesWorkOrder";
    public static final String P_UseWODeliveriesWorkOrderSearch = "UseWODeliveriesWorkOrderSearch";
    public static final String P_MaxResults = "MaxResults";

    protected int id;
    protected Truck woTruckTruck;
    protected boolean useWOTruckTruckSearch;
    protected TruckSearch searchWOTruckTruck;
    protected WorkOrder woDeliveriesWorkOrder;
    protected boolean useWODeliveriesWorkOrderSearch;
    protected WorkOrderSearch searchWODeliveriesWorkOrder;
    protected int maxResults;

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Truck getWOTruckTruck() {
        if (woTruckTruck == null) {
            woTruckTruck = (Truck) getObject(P_WOTruckTruck);
        }
        return woTruckTruck;
    }
    public void setWOTruckTruck(Truck newValue) {
        Truck old = this.woTruckTruck;
        this.woTruckTruck = newValue;
        firePropertyChange(P_WOTruckTruck, old, this.woTruckTruck);
    }
    public boolean getUseWOTruckTruckSearch() {
        return useWOTruckTruckSearch;
    }
    public void setUseWOTruckTruckSearch(boolean newValue) {
        boolean old = this.useWOTruckTruckSearch;
        this.useWOTruckTruckSearch = newValue;
        firePropertyChange(P_UseWOTruckTruckSearch, old, this.useWOTruckTruckSearch);
    }
    public TruckSearch getWOTruckTruckSearch() {
        return this.searchWOTruckTruck;
    }
    public void setWOTruckTruckSearch(TruckSearch newValue) {
        this.searchWOTruckTruck = newValue;
    }

    @OAOne
    public WorkOrder getWODeliveriesWorkOrder() {
        if (woDeliveriesWorkOrder == null) {
            woDeliveriesWorkOrder = (WorkOrder) getObject(P_WODeliveriesWorkOrder);
        }
        return woDeliveriesWorkOrder;
    }
    public void setWODeliveriesWorkOrder(WorkOrder newValue) {
        WorkOrder old = this.woDeliveriesWorkOrder;
        this.woDeliveriesWorkOrder = newValue;
        firePropertyChange(P_WODeliveriesWorkOrder, old, this.woDeliveriesWorkOrder);
    }
    public boolean getUseWODeliveriesWorkOrderSearch() {
        return useWODeliveriesWorkOrderSearch;
    }
    public void setUseWODeliveriesWorkOrderSearch(boolean newValue) {
        boolean old = this.useWODeliveriesWorkOrderSearch;
        this.useWODeliveriesWorkOrderSearch = newValue;
        firePropertyChange(P_UseWODeliveriesWorkOrderSearch, old, this.useWODeliveriesWorkOrderSearch);
    }
    public WorkOrderSearch getWODeliveriesWorkOrderSearch() {
        return this.searchWODeliveriesWorkOrder;
    }
    public void setWODeliveriesWorkOrderSearch(WorkOrderSearch newValue) {
        this.searchWODeliveriesWorkOrder = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setWOTruckTruck(null);
        setUseWOTruckTruckSearch(false);
        setWODeliveriesWorkOrder(null);
        setUseWODeliveriesWorkOrderSearch(false);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getWOTruckTruck() != null) return true;
        if (getUseWOTruckTruckSearch()) return true;
        if (getWODeliveriesWorkOrder() != null) return true;
        if (getUseWODeliveriesWorkOrderSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<DeliveryTruck> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<DeliveryTruck> f = new OAQueryFilter<DeliveryTruck>(DeliveryTruck.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<DeliveryTruck> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<DeliveryTruck> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<DeliveryTruck> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += DeliveryTruck.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!useWOTruckTruckSearch && getWOTruckTruck() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += DeliveryTruckPP.truck().pp + " = ?";
            args = OAArray.add(Object.class, args, getWOTruckTruck());
            finder = new OAFinder<Truck, DeliveryTruck>(getWOTruckTruck(), Truck.P_DeliveryTrucks);
        }
        if (!useWODeliveriesWorkOrderSearch && getWODeliveriesWorkOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += DeliveryTruckPP.woDeliveries().workOrder().pp + " = ?";
            args = OAArray.add(Object.class, args, getWODeliveriesWorkOrder());
            String pp = WorkOrderPP.woDeliveries().deliveryTrucks().pp;
            finder = new OAFinder<WorkOrder, DeliveryTruck>(getWODeliveriesWorkOrder(), pp);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<DeliveryTruck> select = new OASelect<DeliveryTruck>(DeliveryTruck.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useWOTruckTruckSearch && getWOTruckTruckSearch() != null) {
            getWOTruckTruckSearch().appendSelect(DeliveryTruckPP.truck().pp, select);
        }
        if (useWODeliveriesWorkOrderSearch && getWODeliveriesWorkOrderSearch() != null) {
            getWODeliveriesWorkOrderSearch().appendSelect(DeliveryTruckPP.woDeliveries().workOrder().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += DeliveryTruck.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!useWOTruckTruckSearch && getWOTruckTruck() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + DeliveryTruckPP.truck().pp + " = ?";
            args = OAArray.add(Object.class, args, getWOTruckTruck());
        }
        if (useWOTruckTruckSearch && getWOTruckTruckSearch() != null) {
            getWOTruckTruckSearch().appendSelect(prefix + DeliveryTruckPP.truck().pp, select);
        }
        if (!useWODeliveriesWorkOrderSearch && getWODeliveriesWorkOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + DeliveryTruckPP.woDeliveries().workOrder().pp + " = ?";
            args = OAArray.add(Object.class, args, getWODeliveriesWorkOrder());
        }
        if (useWODeliveriesWorkOrderSearch && getWODeliveriesWorkOrderSearch() != null) {
            getWODeliveriesWorkOrderSearch().appendSelect(prefix + DeliveryTruckPP.woDeliveries().workOrder().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<DeliveryTruck> filterDataSourceFilter;
    public OAFilter<DeliveryTruck> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<DeliveryTruck>() {
            @Override
            public boolean isUsed(DeliveryTruck deliveryTruck) {
                return DeliveryTruckSearch.this.isUsedForDataSourceFilter(deliveryTruck);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<DeliveryTruck> filterCustomFilter;
    public OAFilter<DeliveryTruck> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<DeliveryTruck>() {
            @Override
            public boolean isUsed(DeliveryTruck deliveryTruck) {
                boolean b = DeliveryTruckSearch.this.isUsedForCustomFilter(deliveryTruck);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(deliveryTruck);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(DeliveryTruck searchDeliveryTruck) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchDeliveryTruck.getId(), id)) return false;
        }
        if (woTruckTruck != null) {
            if (!OACompare.isEqual(searchDeliveryTruck.getTruck(), woTruckTruck)) return false;
        }
        if (this.woDeliveriesWorkOrder != null) {
            OAFinder<DeliveryTruck, WODelivery> finder = new OAFinder<DeliveryTruck, WODelivery>(DeliveryTruckPP.woDeliveries().pp);
             if (woDeliveriesWorkOrder != null) {
                finder.addEqualFilter(WODeliveryPP.workOrder().pp, getWODeliveriesWorkOrder());
            }
            if (finder.findFirst(searchDeliveryTruck) == null) return false;
        }
        if (useWOTruckTruckSearch && getWOTruckTruckSearch() != null) {
            Truck truck = (Truck) searchDeliveryTruck.getProperty(DeliveryTruckPP.truck().pp);
            if (truck == null) return false;
            if (!getWOTruckTruckSearch().isUsedForDataSourceFilter(truck)) return false;
        }
        if (useWODeliveriesWorkOrderSearch && getWODeliveriesWorkOrderSearch() != null) {
            OAFinder<DeliveryTruck, WorkOrder> finder = new OAFinder<DeliveryTruck, WorkOrder>(DeliveryTruckPP.woDeliveries().workOrder().pp) {
                @Override
                protected boolean isUsed(WorkOrder workOrder) {
                    return getWODeliveriesWorkOrderSearch().isUsedForDataSourceFilter(workOrder);
                }
            };
            if (finder.findFirst(searchDeliveryTruck) == null) return false;;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(DeliveryTruck searchDeliveryTruck) {
        return true;
    }
}
