// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class FileInfoSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(FileInfoSearch.class.getName());
    public static final String P_Created = "Created";
    public static final String P_LastDateTime = "LastDateTime";
    public static final String P_FileName = "FileName";
    public static final String P_Size = "Size";
    public static final String P_Size2 = "Size2";
    public static final String P_Description = "Description";
    public static final String P_MaxResults = "MaxResults";

    protected OADate created;
    protected OADateTime lastDateTime;
    protected String fileName;
    protected int size;
    protected int size2;
    protected String description;
    protected int maxResults;

    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        OADate old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      

    public OADateTime getLastDateTime() {
        return lastDateTime;
    }
    public void setLastDateTime(OADateTime newValue) {
        OADateTime old = lastDateTime;
        fireBeforePropertyChange(P_LastDateTime, old, newValue);
        this.lastDateTime = newValue;
        firePropertyChange(P_LastDateTime, old, this.lastDateTime);
    }
      

    public String getFileName() {
        return fileName;
    }
    public void setFileName(String newValue) {
        String old = fileName;
        fireBeforePropertyChange(P_FileName, old, newValue);
        this.fileName = newValue;
        firePropertyChange(P_FileName, old, this.fileName);
    }
      

    public int getSize() {
        return size;
    }
    public void setSize(int newValue) {
        int old = size;
        fireBeforePropertyChange(P_Size, old, newValue);
        this.size = newValue;
        firePropertyChange(P_Size, old, this.size);
        if (isLoading()) return;
        if (size > size2) setSize2(this.size);
    } 
    public int getSize2() {
        return size2;
    }
    public void setSize2(int newValue) {
        int old = size2;
        fireBeforePropertyChange(P_Size2, old, newValue);
        this.size2 = newValue;
        firePropertyChange(P_Size2, old, this.size2);
        if (isLoading()) return;
        if (size > size2) setSize(this.size2);
    }

    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
        setCreated(null);
        setLastDateTime(null);
        setFileName(null);
        setSize(0);
        setNull(P_Size);
        setSize2(0);
        setNull(P_Size2);
        setDescription(null);
    }

    public boolean isDataEntered() {
        if (getCreated() != null) return true;
        if (getLastDateTime() != null) return true;
        if (getFileName() != null) return true;

        if (getDescription() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<FileInfo> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<FileInfo> f = new OAQueryFilter<FileInfo>(FileInfo.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<FileInfo> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<FileInfo> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<FileInfo> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += FileInfo.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (lastDateTime != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += FileInfo.P_LastDateTime + " = ?";
            args = OAArray.add(Object.class, args, this.lastDateTime);
        }
        if (!OAString.isEmpty(this.fileName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.fileName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += FileInfo.P_FileName + " LIKE ?";
            }
            else {
                sql += FileInfo.P_FileName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_Size)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Size2) && size != size2) {
                sql += FileInfo.P_Size + " >= ?";
                args = OAArray.add(Object.class, args, getSize());
                sql += " AND " + FileInfo.P_Size + " <= ?";
                args = OAArray.add(Object.class, args, getSize2());
            }
            else {
                sql += FileInfo.P_Size + " = ?";
                args = OAArray.add(Object.class, args, getSize());
            }
        }
        if (!OAString.isEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.description.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += FileInfo.P_Description + " LIKE ?";
            }
            else {
                sql += FileInfo.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<FileInfo> select = new OASelect<FileInfo>(FileInfo.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += FileInfo.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (lastDateTime != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += FileInfo.P_LastDateTime + " = ?";
            args = OAArray.add(Object.class, args, this.lastDateTime);
        }
        if (!OAString.isEmpty(this.fileName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.fileName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += FileInfo.P_FileName + " LIKE ?";
            }
            else {
                sql += FileInfo.P_FileName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_Size)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Size2) && size != size2) {
                sql += FileInfo.P_Size + " >= ?";
                args = OAArray.add(Object.class, args, getSize());
                sql += " AND " + FileInfo.P_Size + " <= ?";
                args = OAArray.add(Object.class, args, getSize2());
            }
            else {
                sql += FileInfo.P_Size + " = ?";
                args = OAArray.add(Object.class, args, getSize());
            }
        }
        if (!OAString.isEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.description.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += FileInfo.P_Description + " LIKE ?";
            }
            else {
                sql += FileInfo.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        select.add(sql, args);
    }

    private OAFilter<FileInfo> filterDataSourceFilter;
    public OAFilter<FileInfo> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<FileInfo>() {
            @Override
            public boolean isUsed(FileInfo fileInfo) {
                return FileInfoSearch.this.isUsedForDataSourceFilter(fileInfo);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<FileInfo> filterCustomFilter;
    public OAFilter<FileInfo> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<FileInfo>() {
            @Override
            public boolean isUsed(FileInfo fileInfo) {
                boolean b = FileInfoSearch.this.isUsedForCustomFilter(fileInfo);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(fileInfo);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(FileInfo searchFileInfo) {
        if (created != null) {
            if (!OACompare.isEqual(searchFileInfo.getCreated(), created)) return false;
        }
        if (lastDateTime != null) {
            if (!OACompare.isEqual(searchFileInfo.getLastDateTime(), lastDateTime)) return false;
        }
        if (fileName != null) {
            String s = getFileName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchFileInfo.getFileName(), s)) return false;
        }
        if (!isNull(P_Size2)) {
            if (!OACompare.isEqualOrBetween(searchFileInfo.getSize(), size, size2)) return false;
        }
        if (description != null) {
            String s = getDescription();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchFileInfo.getDescription(), s)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(FileInfo searchFileInfo) {
        return true;
    }
}
