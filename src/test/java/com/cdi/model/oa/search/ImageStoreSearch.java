// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class ImageStoreSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ImageStoreSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Date = "Date";
    public static final String P_Date2 = "Date2";
    public static final String P_DateUseNull = "DateUseNull";
    public static final String P_DateUseNotNull = "DateUseNotNull";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_OrigFileName = "OrigFileName";
    public static final String P_Updated = "Updated";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected OADate date;
    protected OADate date2;
    protected boolean dateUseNull;
    protected boolean dateUseNotNull;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected String origFileName;
    protected OADate updated;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_date = 1;
    public static final int SORTBYTYPE_name = 2;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Date");
        hubSortByType.add("Name");
    }

    public ImageStoreSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public OADate getDate() {
        return date;
    }
    public void setDate(OADate newValue) {
        OADate old = date;
        fireBeforePropertyChange(P_Date, old, newValue);
        this.date = newValue;
        firePropertyChange(P_Date, old, this.date);
        if (isLoading()) return;
        if (date != null) {
            if (date2 == null) setDate2(this.date);
            else if (date.compareTo(date2) > 0) setDate2(this.date);
        }
    } 
    public OADate getDate2() {
        return date2;
    }
    public void setDate2(OADate newValue) {
        OADate old = date2;
        fireBeforePropertyChange(P_Date2, old, newValue);
        this.date2 = newValue;
        firePropertyChange(P_Date2, old, this.date2);
        if (date != null && date2 != null) {
            if (date.compareTo(date2) > 0) setDate(this.date2);
        }
    }
    public boolean getDateUseNull() {
        return dateUseNull;
    }
    public void setDateUseNull(boolean newValue) {
        boolean old = this.dateUseNull;
        this.dateUseNull = newValue;
        firePropertyChange(P_DateUseNull, old, this.dateUseNull);
    }
    public boolean getDateUseNotNull() {
        return dateUseNotNull;
    }
    public void setDateUseNotNull(boolean newValue) {
        boolean old = this.dateUseNotNull;
        this.dateUseNotNull = newValue;
        firePropertyChange(P_DateUseNotNull, old, this.dateUseNotNull);
    }

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public String getOrigFileName() {
        return origFileName;
    }
    public void setOrigFileName(String newValue) {
        String old = origFileName;
        fireBeforePropertyChange(P_OrigFileName, old, newValue);
        this.origFileName = newValue;
        firePropertyChange(P_OrigFileName, old, this.origFileName);
    }
      

    public OADate getUpdated() {
        return updated;
    }
    public void setUpdated(OADate newValue) {
        OADate old = updated;
        fireBeforePropertyChange(P_Updated, old, newValue);
        this.updated = newValue;
        firePropertyChange(P_Updated, old, this.updated);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setDate(null);
        setDate2(null);
        setDateUseNull(false);
        setDateUseNotNull(false);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setOrigFileName(null);
        setUpdated(null);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getDate() != null) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNotNull()) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (getOrigFileName() != null) return true;
        if (getUpdated() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<ImageStore> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<ImageStore> f = new OAQueryFilter<ImageStore>(ImageStore.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<ImageStore> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<ImageStore> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<ImageStore> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_date: sortOrder = ImageStore.P_Date; break;
            case SORTBYTYPE_name: sortOrder = ImageStore.P_Name; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (dateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Date + " = null";
        }
        else if (dateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Date + " != null";
        }
        else if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += ImageStore.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + ImageStore.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += ImageStore.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ImageStore.P_Name + " = null OR " + ImageStore.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ImageStore.P_Name + " LIKE ?";
            }
            else {
                sql += ImageStore.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.origFileName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.origFileName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ImageStore.P_OrigFileName + " LIKE ?";
            }
            else {
                sql += ImageStore.P_OrigFileName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (updated != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Updated + " = ?";
            args = OAArray.add(Object.class, args, this.updated);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<ImageStore> select = new OASelect<ImageStore>(ImageStore.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (dateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Date + " = null";
        }
        else if (dateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Date + " != null";
        }
        else if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += ImageStore.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + ImageStore.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += ImageStore.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ImageStore.P_Name + " = null OR " + ImageStore.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ImageStore.P_Name + " LIKE ?";
            }
            else {
                sql += ImageStore.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.origFileName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.origFileName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ImageStore.P_OrigFileName + " LIKE ?";
            }
            else {
                sql += ImageStore.P_OrigFileName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (updated != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += ImageStore.P_Updated + " = ?";
            args = OAArray.add(Object.class, args, this.updated);
        }
        select.add(sql, args);
    }

    private OAFilter<ImageStore> filterDataSourceFilter;
    public OAFilter<ImageStore> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<ImageStore>() {
            @Override
            public boolean isUsed(ImageStore imageStore) {
                return ImageStoreSearch.this.isUsedForDataSourceFilter(imageStore);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<ImageStore> filterCustomFilter;
    public OAFilter<ImageStore> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<ImageStore>() {
            @Override
            public boolean isUsed(ImageStore imageStore) {
                boolean b = ImageStoreSearch.this.isUsedForCustomFilter(imageStore);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(imageStore);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(ImageStore searchImageStore) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchImageStore.getId(), id)) return false;
        }
        if (dateUseNull) {
            if (OACompare.isNotEmpty(searchImageStore.getDate())) return false;
        }
        else if (dateUseNotNull) {
            if (OACompare.isEmpty(searchImageStore.getDate())) return false;
        }
        else if (date2 != null) {
            if (!OACompare.isEqualOrBetween(searchImageStore.getDate(), date, date2)) return false;
        }
        if (nameUseNull) {
            if (OACompare.isNotEmpty(searchImageStore.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(searchImageStore.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchImageStore.getName(), s)) return false;
        }
        if (origFileName != null) {
            String s = getOrigFileName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchImageStore.getOrigFileName(), s)) return false;
        }
        if (updated != null) {
            if (!OACompare.isEqual(searchImageStore.getUpdated(), updated)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(ImageStore searchImageStore) {
        return true;
    }
}
