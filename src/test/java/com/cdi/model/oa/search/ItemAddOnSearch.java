// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class ItemAddOnSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ItemAddOnSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Code = "Code";
    public static final String P_CodeUseNull = "CodeUseNull";
    public static final String P_CodeUseNotNull = "CodeUseNotNull";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_Price = "Price";
    public static final String P_Price2 = "Price2";
    public static final String P_PriceUseNull = "PriceUseNull";
    public static final String P_PriceUseNotNull = "PriceUseNotNull";
    public static final String P_DiscontinuedDate = "DiscontinuedDate";
    public static final String P_DiscontinuedDate2 = "DiscontinuedDate2";
    public static final String P_DiscontinuedDateUseNull = "DiscontinuedDateUseNull";
    public static final String P_DiscontinuedDateUseNotNull = "DiscontinuedDateUseNotNull";
    public static final String P_Description = "Description";
    public static final String P_DescriptionUseNull = "DescriptionUseNull";
    public static final String P_DescriptionUseNotNull = "DescriptionUseNotNull";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected String code;
    protected boolean codeUseNull;
    protected boolean codeUseNotNull;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected double price;
    protected double price2;
    protected boolean priceUseNull;
    protected boolean priceUseNotNull;
    protected OADate discontinuedDate;
    protected OADate discontinuedDate2;
    protected boolean discontinuedDateUseNull;
    protected boolean discontinuedDateUseNotNull;
    protected String description;
    protected boolean descriptionUseNull;
    protected boolean descriptionUseNotNull;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_code = 1;
    public static final int SORTBYTYPE_name = 2;
    public static final int SORTBYTYPE_discontinuedDate = 3;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Code");
        hubSortByType.add("Name");
        hubSortByType.add("Discontinued Date");
    }

    public ItemAddOnSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
      
    public boolean getCodeUseNull() {
        return codeUseNull;
    }
    public void setCodeUseNull(boolean newValue) {
        boolean old = this.codeUseNull;
        this.codeUseNull = newValue;
        firePropertyChange(P_CodeUseNull, old, this.codeUseNull);
    }
    public boolean getCodeUseNotNull() {
        return codeUseNotNull;
    }
    public void setCodeUseNotNull(boolean newValue) {
        boolean old = this.codeUseNotNull;
        this.codeUseNotNull = newValue;
        firePropertyChange(P_CodeUseNotNull, old, this.codeUseNotNull);
    }

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public double getPrice() {
        return price;
    }
    public void setPrice(double newValue) {
        double old = price;
        fireBeforePropertyChange(P_Price, old, newValue);
        this.price = newValue;
        firePropertyChange(P_Price, old, this.price);
        if (isLoading()) return;
        if (price > price2) setPrice2(this.price);
    } 
    public double getPrice2() {
        return price2;
    }
    public void setPrice2(double newValue) {
        double old = price2;
        fireBeforePropertyChange(P_Price2, old, newValue);
        this.price2 = newValue;
        firePropertyChange(P_Price2, old, this.price2);
        if (isLoading()) return;
        if (price > price2) setPrice(this.price2);
    }
    public boolean getPriceUseNull() {
        return priceUseNull;
    }
    public void setPriceUseNull(boolean newValue) {
        boolean old = this.priceUseNull;
        this.priceUseNull = newValue;
        firePropertyChange(P_PriceUseNull, old, this.priceUseNull);
    }
    public boolean getPriceUseNotNull() {
        return priceUseNotNull;
    }
    public void setPriceUseNotNull(boolean newValue) {
        boolean old = this.priceUseNotNull;
        this.priceUseNotNull = newValue;
        firePropertyChange(P_PriceUseNotNull, old, this.priceUseNotNull);
    }

    public OADate getDiscontinuedDate() {
        return discontinuedDate;
    }
    public void setDiscontinuedDate(OADate newValue) {
        OADate old = discontinuedDate;
        fireBeforePropertyChange(P_DiscontinuedDate, old, newValue);
        this.discontinuedDate = newValue;
        firePropertyChange(P_DiscontinuedDate, old, this.discontinuedDate);
        if (isLoading()) return;
        if (discontinuedDate != null) {
            if (discontinuedDate2 == null) setDiscontinuedDate2(this.discontinuedDate);
            else if (discontinuedDate.compareTo(discontinuedDate2) > 0) setDiscontinuedDate2(this.discontinuedDate);
        }
    } 
    public OADate getDiscontinuedDate2() {
        return discontinuedDate2;
    }
    public void setDiscontinuedDate2(OADate newValue) {
        OADate old = discontinuedDate2;
        fireBeforePropertyChange(P_DiscontinuedDate2, old, newValue);
        this.discontinuedDate2 = newValue;
        firePropertyChange(P_DiscontinuedDate2, old, this.discontinuedDate2);
        if (discontinuedDate != null && discontinuedDate2 != null) {
            if (discontinuedDate.compareTo(discontinuedDate2) > 0) setDiscontinuedDate(this.discontinuedDate2);
        }
    }
    public boolean getDiscontinuedDateUseNull() {
        return discontinuedDateUseNull;
    }
    public void setDiscontinuedDateUseNull(boolean newValue) {
        boolean old = this.discontinuedDateUseNull;
        this.discontinuedDateUseNull = newValue;
        firePropertyChange(P_DiscontinuedDateUseNull, old, this.discontinuedDateUseNull);
    }
    public boolean getDiscontinuedDateUseNotNull() {
        return discontinuedDateUseNotNull;
    }
    public void setDiscontinuedDateUseNotNull(boolean newValue) {
        boolean old = this.discontinuedDateUseNotNull;
        this.discontinuedDateUseNotNull = newValue;
        firePropertyChange(P_DiscontinuedDateUseNotNull, old, this.discontinuedDateUseNotNull);
    }

    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
      
    public boolean getDescriptionUseNull() {
        return descriptionUseNull;
    }
    public void setDescriptionUseNull(boolean newValue) {
        boolean old = this.descriptionUseNull;
        this.descriptionUseNull = newValue;
        firePropertyChange(P_DescriptionUseNull, old, this.descriptionUseNull);
    }
    public boolean getDescriptionUseNotNull() {
        return descriptionUseNotNull;
    }
    public void setDescriptionUseNotNull(boolean newValue) {
        boolean old = this.descriptionUseNotNull;
        this.descriptionUseNotNull = newValue;
        firePropertyChange(P_DescriptionUseNotNull, old, this.descriptionUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setCode(null);
        setCodeUseNull(false);
        setCodeUseNotNull(false);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setPrice(0);
        setNull(P_Price);
        setPrice2(0);
        setNull(P_Price2);
        setPriceUseNull(false);
        setPriceUseNotNull(false);
        setDiscontinuedDate(null);
        setDiscontinuedDate2(null);
        setDiscontinuedDateUseNull(true);  // inactive property for ItemAddOn
        setDiscontinuedDateUseNotNull(false);
        setDescription(null);
        setDescriptionUseNull(false);
        setDescriptionUseNotNull(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getCode() != null) return true;
        if (getCodeUseNull()) return true;if (getCodeUseNotNull()) return true;
        if (getCodeUseNull()) return true;
        if (getCodeUseNotNull()) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (!isNull(P_PriceUseNotNull)) return true;
        if (getPriceUseNull()) return true;if (getPriceUseNotNull()) return true;
        if (getPriceUseNull()) return true;
        if (getPriceUseNotNull()) return true;
        if (getDiscontinuedDate() != null) return true;
        if (getDiscontinuedDateUseNull()) return true;
        if (getDiscontinuedDateUseNull()) return true;
        if (getDiscontinuedDateUseNull()) return true;
        if (getDiscontinuedDateUseNotNull()) return true;
        if (getDescription() != null) return true;
        if (getDescriptionUseNull()) return true;if (getDescriptionUseNotNull()) return true;
        if (getDescriptionUseNull()) return true;
        if (getDescriptionUseNotNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<ItemAddOn> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<ItemAddOn> f = new OAQueryFilter<ItemAddOn>(ItemAddOn.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<ItemAddOn> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<ItemAddOn> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<ItemAddOn> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_code: sortOrder = ItemAddOn.P_Code; break;
            case SORTBYTYPE_name: sortOrder = ItemAddOn.P_Name; break;
            case SORTBYTYPE_discontinuedDate: sortOrder = ItemAddOn.P_DiscontinuedDate; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (codeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ItemAddOn.P_Code + " = null OR " + ItemAddOn.P_Code + " == '')";
        }
        else if (codeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Code + " != null";
        }
        else if (!OAString.isEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.code.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ItemAddOn.P_Code + " LIKE ?";
            }
            else {
                sql += ItemAddOn.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ItemAddOn.P_Name + " = null OR " + ItemAddOn.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ItemAddOn.P_Name + " LIKE ?";
            }
            else {
                sql += ItemAddOn.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (priceUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Price + " = null";
        }
        else if (priceUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Price + " != null";
        }
        else if (!isNull(P_Price)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Price2) && price != price2) {
                sql += ItemAddOn.P_Price + " >= ?";
                args = OAArray.add(Object.class, args, getPrice());
                sql += " AND " + ItemAddOn.P_Price + " <= ?";
                args = OAArray.add(Object.class, args, getPrice2());
            }
            else {
                sql += ItemAddOn.P_Price + " = ?";
                args = OAArray.add(Object.class, args, getPrice());
            }
        }
        if (discontinuedDateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_DiscontinuedDate + " = null";
        }
        else if (discontinuedDateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_DiscontinuedDate + " != null";
        }
        else if (discontinuedDate != null) {
            if (sql.length() > 0) sql += " AND ";
            if (discontinuedDate2 != null && !discontinuedDate.equals(discontinuedDate2)) {
                sql += ItemAddOn.P_DiscontinuedDate + " >= ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate);
                sql += " AND " + ItemAddOn.P_DiscontinuedDate + " <= ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate2);
            }
            else {
                sql += ItemAddOn.P_DiscontinuedDate + " = ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate);
            }
        }
        if (descriptionUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ItemAddOn.P_Description + " = null OR " + ItemAddOn.P_Description + " == '')";
        }
        else if (descriptionUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Description + " != null";
        }
        else if (!OAString.isEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.description.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ItemAddOn.P_Description + " LIKE ?";
            }
            else {
                sql += ItemAddOn.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<ItemAddOn> select = new OASelect<ItemAddOn>(ItemAddOn.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (codeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ItemAddOn.P_Code + " = null OR " + ItemAddOn.P_Code + " == '')";
        }
        else if (codeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Code + " != null";
        }
        else if (!OAString.isEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.code.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ItemAddOn.P_Code + " LIKE ?";
            }
            else {
                sql += ItemAddOn.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ItemAddOn.P_Name + " = null OR " + ItemAddOn.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ItemAddOn.P_Name + " LIKE ?";
            }
            else {
                sql += ItemAddOn.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (priceUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Price + " = null";
        }
        else if (priceUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Price + " != null";
        }
        else if (!isNull(P_Price)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Price2) && price != price2) {
                sql += ItemAddOn.P_Price + " >= ?";
                args = OAArray.add(Object.class, args, getPrice());
                sql += " AND " + ItemAddOn.P_Price + " <= ?";
                args = OAArray.add(Object.class, args, getPrice2());
            }
            else {
                sql += ItemAddOn.P_Price + " = ?";
                args = OAArray.add(Object.class, args, getPrice());
            }
        }
        if (discontinuedDateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_DiscontinuedDate + " = null";
        }
        else if (discontinuedDateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_DiscontinuedDate + " != null";
        }
        else if (discontinuedDate != null) {
            if (sql.length() > 0) sql += " AND ";
            if (discontinuedDate2 != null && !discontinuedDate.equals(discontinuedDate2)) {
                sql += ItemAddOn.P_DiscontinuedDate + " >= ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate);
                sql += " AND " + ItemAddOn.P_DiscontinuedDate + " <= ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate2);
            }
            else {
                sql += ItemAddOn.P_DiscontinuedDate + " = ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate);
            }
        }
        if (descriptionUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ItemAddOn.P_Description + " = null OR " + ItemAddOn.P_Description + " == '')";
        }
        else if (descriptionUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemAddOn.P_Description + " != null";
        }
        else if (!OAString.isEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.description.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ItemAddOn.P_Description + " LIKE ?";
            }
            else {
                sql += ItemAddOn.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        select.add(sql, args);
    }

    private OAFilter<ItemAddOn> filterDataSourceFilter;
    public OAFilter<ItemAddOn> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<ItemAddOn>() {
            @Override
            public boolean isUsed(ItemAddOn itemAddOn) {
                return ItemAddOnSearch.this.isUsedForDataSourceFilter(itemAddOn);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<ItemAddOn> filterCustomFilter;
    public OAFilter<ItemAddOn> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<ItemAddOn>() {
            @Override
            public boolean isUsed(ItemAddOn itemAddOn) {
                boolean b = ItemAddOnSearch.this.isUsedForCustomFilter(itemAddOn);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(itemAddOn);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(ItemAddOn searchItemAddOn) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchItemAddOn.getId(), id)) return false;
        }
        if (codeUseNull) {
            if (OACompare.isNotEmpty(searchItemAddOn.getCode())) return false;
        }
        else if (codeUseNotNull) {
            if (OACompare.isEmpty(searchItemAddOn.getCode())) return false;
        }
        else if (code != null) {
            String s = getCode();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchItemAddOn.getCode(), s)) return false;
        }
        if (nameUseNull) {
            if (OACompare.isNotEmpty(searchItemAddOn.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(searchItemAddOn.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchItemAddOn.getName(), s)) return false;
        }
        if (priceUseNull) {
            if (OACompare.isNotEmpty(searchItemAddOn.getPrice())) return false;
        }
        else if (priceUseNotNull) {
            if (OACompare.isEmpty(searchItemAddOn.getPrice())) return false;
        }
        else if (!isNull(P_Price2)) {
            if (!OACompare.isEqualOrBetween(searchItemAddOn.getPrice(), price, price2)) return false;
        }
        if (discontinuedDateUseNull) {
            if (OACompare.isNotEmpty(searchItemAddOn.getDiscontinuedDate())) return false;
        }
        else if (discontinuedDateUseNotNull) {
            if (OACompare.isEmpty(searchItemAddOn.getDiscontinuedDate())) return false;
        }
        else if (discontinuedDate2 != null) {
            if (!OACompare.isEqualOrBetween(searchItemAddOn.getDiscontinuedDate(), discontinuedDate, discontinuedDate2)) return false;
        }
        if (descriptionUseNull) {
            if (OACompare.isNotEmpty(searchItemAddOn.getDescription())) return false;
        }
        else if (descriptionUseNotNull) {
            if (OACompare.isEmpty(searchItemAddOn.getDescription())) return false;
        }
        else if (description != null) {
            String s = getDescription();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchItemAddOn.getDescription(), s)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(ItemAddOn searchItemAddOn) {
        return true;
    }
}
