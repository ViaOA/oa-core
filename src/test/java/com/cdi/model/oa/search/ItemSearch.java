// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class ItemSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ItemSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Code = "Code";
    public static final String P_CodeUseNull = "CodeUseNull";
    public static final String P_CodeUseNotNull = "CodeUseNotNull";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_MoldLocation = "MoldLocation";
    public static final String P_Description = "Description";
    public static final String P_DescriptionUseNull = "DescriptionUseNull";
    public static final String P_DescriptionUseNotNull = "DescriptionUseNotNull";
    public static final String P_DiscontinuedDate = "DiscontinuedDate";
    public static final String P_DiscontinuedDate2 = "DiscontinuedDate2";
    public static final String P_DiscontinuedDateUseNull = "DiscontinuedDateUseNull";
    public static final String P_DiscontinuedDateUseNotNull = "DiscontinuedDateUseNotNull";
    public static final String P_IsProduced = "IsProduced";
    public static final String P_SpecialOnly = "SpecialOnly";
    public static final String P_Price = "Price";
    public static final String P_Price2 = "Price2";
    public static final String P_PriceUseNull = "PriceUseNull";
    public static final String P_PriceUseNotNull = "PriceUseNotNull";
    public static final String P_QuickBooksId = "QuickBooksId";
    public static final String P_QuickBooksIdUseNull = "QuickBooksIdUseNull";
    public static final String P_QuickBooksIdUseNotNull = "QuickBooksIdUseNotNull";
    public static final String P_Mold = "Mold";
    public static final String P_MoldUseNull = "MoldUseNull";
    public static final String P_MoldUseNotNull = "MoldUseNotNull";
    public static final String P_UseMoldSearch = "UseMoldSearch";
    public static final String P_ItemCategory = "ItemCategory";
    public static final String P_ItemCategoryUseNull = "ItemCategoryUseNull";
    public static final String P_ItemCategoryUseNotNull = "ItemCategoryUseNotNull";
    public static final String P_UseItemCategorySearch = "UseItemCategorySearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected String code;
    protected boolean codeUseNull;
    protected boolean codeUseNotNull;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected String moldLocation;
    protected String description;
    protected boolean descriptionUseNull;
    protected boolean descriptionUseNotNull;
    protected OADate discontinuedDate;
    protected OADate discontinuedDate2;
    protected boolean discontinuedDateUseNull;
    protected boolean discontinuedDateUseNotNull;
    protected boolean isProduced;
    protected boolean specialOnly;
    protected double price;
    protected double price2;
    protected boolean priceUseNull;
    protected boolean priceUseNotNull;
    protected String qbListId;
    protected boolean qbListIdUseNull;
    protected boolean qbListIdUseNotNull;
    protected Mold mold;
    protected boolean moldUseNull;
    protected boolean moldUseNotNull;
    protected boolean useMoldSearch;
    protected MoldSearch searchMold;
    protected ItemCategory itemCategory;
    protected boolean itemCategoryUseNull;
    protected boolean itemCategoryUseNotNull;
    protected boolean useItemCategorySearch;
    protected ItemCategorySearch searchItemCategory;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_code = 1;
    public static final int SORTBYTYPE_name = 2;
    public static final int SORTBYTYPE_discontinuedDate = 3;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Code");
        hubSortByType.add("Name");
        hubSortByType.add("Discontinued Date");
    }

    public ItemSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
      
    public boolean getCodeUseNull() {
        return codeUseNull;
    }
    public void setCodeUseNull(boolean newValue) {
        boolean old = this.codeUseNull;
        this.codeUseNull = newValue;
        firePropertyChange(P_CodeUseNull, old, this.codeUseNull);
    }
    public boolean getCodeUseNotNull() {
        return codeUseNotNull;
    }
    public void setCodeUseNotNull(boolean newValue) {
        boolean old = this.codeUseNotNull;
        this.codeUseNotNull = newValue;
        firePropertyChange(P_CodeUseNotNull, old, this.codeUseNotNull);
    }

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    /**
      location of the mold
    */
    public String getMoldLocation() {
        return moldLocation;
    }
    public void setMoldLocation(String newValue) {
        String old = moldLocation;
        fireBeforePropertyChange(P_MoldLocation, old, newValue);
        this.moldLocation = newValue;
        firePropertyChange(P_MoldLocation, old, this.moldLocation);
    }
      

    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
      
    public boolean getDescriptionUseNull() {
        return descriptionUseNull;
    }
    public void setDescriptionUseNull(boolean newValue) {
        boolean old = this.descriptionUseNull;
        this.descriptionUseNull = newValue;
        firePropertyChange(P_DescriptionUseNull, old, this.descriptionUseNull);
    }
    public boolean getDescriptionUseNotNull() {
        return descriptionUseNotNull;
    }
    public void setDescriptionUseNotNull(boolean newValue) {
        boolean old = this.descriptionUseNotNull;
        this.descriptionUseNotNull = newValue;
        firePropertyChange(P_DescriptionUseNotNull, old, this.descriptionUseNotNull);
    }

    public OADate getDiscontinuedDate() {
        return discontinuedDate;
    }
    public void setDiscontinuedDate(OADate newValue) {
        OADate old = discontinuedDate;
        fireBeforePropertyChange(P_DiscontinuedDate, old, newValue);
        this.discontinuedDate = newValue;
        firePropertyChange(P_DiscontinuedDate, old, this.discontinuedDate);
        if (isLoading()) return;
        if (discontinuedDate != null) {
            if (discontinuedDate2 == null) setDiscontinuedDate2(this.discontinuedDate);
            else if (discontinuedDate.compareTo(discontinuedDate2) > 0) setDiscontinuedDate2(this.discontinuedDate);
        }
    } 
    public OADate getDiscontinuedDate2() {
        return discontinuedDate2;
    }
    public void setDiscontinuedDate2(OADate newValue) {
        OADate old = discontinuedDate2;
        fireBeforePropertyChange(P_DiscontinuedDate2, old, newValue);
        this.discontinuedDate2 = newValue;
        firePropertyChange(P_DiscontinuedDate2, old, this.discontinuedDate2);
        if (discontinuedDate != null && discontinuedDate2 != null) {
            if (discontinuedDate.compareTo(discontinuedDate2) > 0) setDiscontinuedDate(this.discontinuedDate2);
        }
    }
    public boolean getDiscontinuedDateUseNull() {
        return discontinuedDateUseNull;
    }
    public void setDiscontinuedDateUseNull(boolean newValue) {
        boolean old = this.discontinuedDateUseNull;
        this.discontinuedDateUseNull = newValue;
        firePropertyChange(P_DiscontinuedDateUseNull, old, this.discontinuedDateUseNull);
    }
    public boolean getDiscontinuedDateUseNotNull() {
        return discontinuedDateUseNotNull;
    }
    public void setDiscontinuedDateUseNotNull(boolean newValue) {
        boolean old = this.discontinuedDateUseNotNull;
        this.discontinuedDateUseNotNull = newValue;
        firePropertyChange(P_DiscontinuedDateUseNotNull, old, this.discontinuedDateUseNotNull);
    }

    public boolean getIsProduced() {
        return isProduced;
    }
    public void setIsProduced(boolean newValue) {
        boolean old = isProduced;
        fireBeforePropertyChange(P_IsProduced, old, newValue);
        this.isProduced = newValue;
        firePropertyChange(P_IsProduced, old, this.isProduced);
    }
      

    public boolean getSpecialOnly() {
        return specialOnly;
    }
    public void setSpecialOnly(boolean newValue) {
        boolean old = specialOnly;
        fireBeforePropertyChange(P_SpecialOnly, old, newValue);
        this.specialOnly = newValue;
        firePropertyChange(P_SpecialOnly, old, this.specialOnly);
    }
      

    public double getPrice() {
        return price;
    }
    public void setPrice(double newValue) {
        double old = price;
        fireBeforePropertyChange(P_Price, old, newValue);
        this.price = newValue;
        firePropertyChange(P_Price, old, this.price);
        if (isLoading()) return;
        if (price > price2) setPrice2(this.price);
    } 
    public double getPrice2() {
        return price2;
    }
    public void setPrice2(double newValue) {
        double old = price2;
        fireBeforePropertyChange(P_Price2, old, newValue);
        this.price2 = newValue;
        firePropertyChange(P_Price2, old, this.price2);
        if (isLoading()) return;
        if (price > price2) setPrice(this.price2);
    }
    public boolean getPriceUseNull() {
        return priceUseNull;
    }
    public void setPriceUseNull(boolean newValue) {
        boolean old = this.priceUseNull;
        this.priceUseNull = newValue;
        firePropertyChange(P_PriceUseNull, old, this.priceUseNull);
    }
    public boolean getPriceUseNotNull() {
        return priceUseNotNull;
    }
    public void setPriceUseNotNull(boolean newValue) {
        boolean old = this.priceUseNotNull;
        this.priceUseNotNull = newValue;
        firePropertyChange(P_PriceUseNotNull, old, this.priceUseNotNull);
    }

    public String getQuickBooksId() {
        return qbListId;
    }
    public void setQuickBooksId(String newValue) {
        String old = qbListId;
        fireBeforePropertyChange(P_QuickBooksId, old, newValue);
        this.qbListId = newValue;
        firePropertyChange(P_QuickBooksId, old, this.qbListId);
    }
      
    public boolean getQuickBooksIdUseNull() {
        return qbListIdUseNull;
    }
    public void setQuickBooksIdUseNull(boolean newValue) {
        boolean old = this.qbListIdUseNull;
        this.qbListIdUseNull = newValue;
        firePropertyChange(P_QuickBooksIdUseNull, old, this.qbListIdUseNull);
    }
    public boolean getQuickBooksIdUseNotNull() {
        return qbListIdUseNotNull;
    }
    public void setQuickBooksIdUseNotNull(boolean newValue) {
        boolean old = this.qbListIdUseNotNull;
        this.qbListIdUseNotNull = newValue;
        firePropertyChange(P_QuickBooksIdUseNotNull, old, this.qbListIdUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public Mold getMold() {
        if (mold == null) {
            mold = (Mold) getObject(P_Mold);
        }
        return mold;
    }
    public void setMold(Mold newValue) {
        Mold old = this.mold;
        this.mold = newValue;
        firePropertyChange(P_Mold, old, this.mold);
    }
    public boolean getMoldUseNull() {
        return moldUseNull;
    }
    public void setMoldUseNull(boolean newValue) {
        boolean old = this.moldUseNull;
        this.moldUseNull = newValue;
        firePropertyChange(P_MoldUseNull, old, this.moldUseNull);
    }
    public boolean getMoldUseNotNull() {
        return moldUseNotNull;
    }
    public void setMoldUseNotNull(boolean newValue) {
        boolean old = this.moldUseNotNull;
        this.moldUseNotNull = newValue;
        firePropertyChange(P_MoldUseNotNull, old, this.moldUseNotNull);
    }
    public boolean getUseMoldSearch() {
        return useMoldSearch;
    }
    public void setUseMoldSearch(boolean newValue) {
        boolean old = this.useMoldSearch;
        this.useMoldSearch = newValue;
        firePropertyChange(P_UseMoldSearch, old, this.useMoldSearch);
    }
    public MoldSearch getMoldSearch() {
        return this.searchMold;
    }
    public void setMoldSearch(MoldSearch newValue) {
        this.searchMold = newValue;
    }

    @OAOne
    public ItemCategory getItemCategory() {
        if (itemCategory == null) {
            itemCategory = (ItemCategory) getObject(P_ItemCategory);
        }
        return itemCategory;
    }
    public void setItemCategory(ItemCategory newValue) {
        ItemCategory old = this.itemCategory;
        this.itemCategory = newValue;
        firePropertyChange(P_ItemCategory, old, this.itemCategory);
    }
    public boolean getItemCategoryUseNull() {
        return itemCategoryUseNull;
    }
    public void setItemCategoryUseNull(boolean newValue) {
        boolean old = this.itemCategoryUseNull;
        this.itemCategoryUseNull = newValue;
        firePropertyChange(P_ItemCategoryUseNull, old, this.itemCategoryUseNull);
    }
    public boolean getItemCategoryUseNotNull() {
        return itemCategoryUseNotNull;
    }
    public void setItemCategoryUseNotNull(boolean newValue) {
        boolean old = this.itemCategoryUseNotNull;
        this.itemCategoryUseNotNull = newValue;
        firePropertyChange(P_ItemCategoryUseNotNull, old, this.itemCategoryUseNotNull);
    }
    public boolean getUseItemCategorySearch() {
        return useItemCategorySearch;
    }
    public void setUseItemCategorySearch(boolean newValue) {
        boolean old = this.useItemCategorySearch;
        this.useItemCategorySearch = newValue;
        firePropertyChange(P_UseItemCategorySearch, old, this.useItemCategorySearch);
    }
    public ItemCategorySearch getItemCategorySearch() {
        return this.searchItemCategory;
    }
    public void setItemCategorySearch(ItemCategorySearch newValue) {
        this.searchItemCategory = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setCode(null);
        setCodeUseNull(false);
        setCodeUseNotNull(false);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setMoldLocation(null);
        setDescription(null);
        setDescriptionUseNull(false);
        setDescriptionUseNotNull(false);
        setDiscontinuedDate(null);
        setDiscontinuedDate2(null);
        setDiscontinuedDateUseNull(true);  // inactive property for Item
        setDiscontinuedDateUseNotNull(false);
        setIsProduced(false);
        setNull(P_IsProduced);
        setSpecialOnly(false);
        setNull(P_SpecialOnly);
        setPrice(0);
        setNull(P_Price);
        setPrice2(0);
        setNull(P_Price2);
        setPriceUseNull(false);
        setPriceUseNotNull(false);
        setQuickBooksId(null);
        setQuickBooksIdUseNull(false);
        setQuickBooksIdUseNotNull(false);
        setMold(null);
        setMoldUseNull(false);
        setMoldUseNotNull(false);
        setUseMoldSearch(false);
        setItemCategory(null);
        setItemCategoryUseNull(false);
        setItemCategoryUseNotNull(false);
        setUseItemCategorySearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getCode() != null) return true;
        if (getCodeUseNull()) return true;if (getCodeUseNotNull()) return true;
        if (getCodeUseNull()) return true;
        if (getCodeUseNotNull()) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (getMoldLocation() != null) return true;
        if (getDescription() != null) return true;
        if (getDescriptionUseNull()) return true;if (getDescriptionUseNotNull()) return true;
        if (getDescriptionUseNull()) return true;
        if (getDescriptionUseNotNull()) return true;
        if (getDiscontinuedDate() != null) return true;
        if (getDiscontinuedDateUseNull()) return true;
        if (getDiscontinuedDateUseNull()) return true;
        if (getDiscontinuedDateUseNull()) return true;
        if (getDiscontinuedDateUseNotNull()) return true;
        if (!isNull(P_IsProduced)) return true;
        if (!isNull(P_SpecialOnly)) return true;
        if (!isNull(P_PriceUseNotNull)) return true;
        if (getPriceUseNull()) return true;if (getPriceUseNotNull()) return true;
        if (getPriceUseNull()) return true;
        if (getPriceUseNotNull()) return true;
        if (getQuickBooksId() != null) return true;
        if (getQuickBooksIdUseNull()) return true;if (getQuickBooksIdUseNotNull()) return true;
        if (getQuickBooksIdUseNull()) return true;
        if (getQuickBooksIdUseNotNull()) return true;
        if (getMold() != null) return true;
        if (getMoldUseNull()) return true;
        if (getMoldUseNotNull()) return true;
        if (getUseMoldSearch()) return true;
        if (getItemCategory() != null) return true;
        if (getItemCategoryUseNull()) return true;
        if (getItemCategoryUseNotNull()) return true;
        if (getUseItemCategorySearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Item> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Item> f = new OAQueryFilter<Item>(Item.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Item> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Item> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Item> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_code: sortOrder = Item.P_Code; break;
            case SORTBYTYPE_name: sortOrder = Item.P_Name; break;
            case SORTBYTYPE_discontinuedDate: sortOrder = Item.P_DiscontinuedDate; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (codeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Item.P_Code + " = null OR " + Item.P_Code + " == '')";
        }
        else if (codeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Code + " != null";
        }
        else if (!OAString.isEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.code.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Item.P_Code + " LIKE ?";
            }
            else {
                sql += Item.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Item.P_Name + " = null OR " + Item.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Item.P_Name + " LIKE ?";
            }
            else {
                sql += Item.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.moldLocation)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.moldLocation.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ItemPP.mold().location() + " LIKE ?";
            }
            else {
                sql += ItemPP.mold().location() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (descriptionUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Item.P_Description + " = null OR " + Item.P_Description + " == '')";
        }
        else if (descriptionUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Description + " != null";
        }
        else if (!OAString.isEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.description.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Item.P_Description + " LIKE ?";
            }
            else {
                sql += Item.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (discontinuedDateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_DiscontinuedDate + " = null";
        }
        else if (discontinuedDateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_DiscontinuedDate + " != null";
        }
        else if (discontinuedDate != null) {
            if (sql.length() > 0) sql += " AND ";
            if (discontinuedDate2 != null && !discontinuedDate.equals(discontinuedDate2)) {
                sql += Item.P_DiscontinuedDate + " >= ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate);
                sql += " AND " + Item.P_DiscontinuedDate + " <= ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate2);
            }
            else {
                sql += Item.P_DiscontinuedDate + " = ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate);
            }
        }
        if (!isNull(P_IsProduced)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_IsProduced + " = ?";
            args = OAArray.add(Object.class, args, this.isProduced);
        }
        if (!isNull(P_SpecialOnly)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_SpecialOnly + " = ?";
            args = OAArray.add(Object.class, args, this.specialOnly);
        }
        if (priceUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Price + " = null";
        }
        else if (priceUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Price + " != null";
        }
        else if (!isNull(P_Price)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Price2) && price != price2) {
                sql += Item.P_Price + " >= ?";
                args = OAArray.add(Object.class, args, getPrice());
                sql += " AND " + Item.P_Price + " <= ?";
                args = OAArray.add(Object.class, args, getPrice2());
            }
            else {
                sql += Item.P_Price + " = ?";
                args = OAArray.add(Object.class, args, getPrice());
            }
        }
        if (qbListIdUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Item.P_QbListId + " = null OR " + Item.P_QbListId + " == '')";
        }
        else if (qbListIdUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_QbListId + " != null";
        }
        else if (!OAString.isEmpty(this.qbListId)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.qbListId.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Item.P_QbListId + " LIKE ?";
            }
            else {
                sql += Item.P_QbListId + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (moldUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemPP.mold().pp + " = null";
        }
        if (moldUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemPP.mold().pp + " != null";
        }
        else if (!useMoldSearch && getMold() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemPP.mold().pp + " = ?";
            args = OAArray.add(Object.class, args, getMold());
            finder = new OAFinder<Mold, Item>(getMold(), Mold.P_Items);
        }
        if (itemCategoryUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemPP.itemCategory().pp + " = null";
        }
        if (itemCategoryUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemPP.itemCategory().pp + " != null";
        }
        else if (!useItemCategorySearch && getItemCategory() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += ItemPP.itemCategory().pp + " = ?";
            args = OAArray.add(Object.class, args, getItemCategory());
            finder = new OAFinder<ItemCategory, Item>(getItemCategory(), ItemCategory.P_Items);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Item> select = new OASelect<Item>(Item.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useMoldSearch && getMoldSearch() != null) {
            getMoldSearch().appendSelect(ItemPP.mold().pp, select);
        }
        if (useItemCategorySearch && getItemCategorySearch() != null) {
            getItemCategorySearch().appendSelect(ItemPP.itemCategory().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (codeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Item.P_Code + " = null OR " + Item.P_Code + " == '')";
        }
        else if (codeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Code + " != null";
        }
        else if (!OAString.isEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.code.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Item.P_Code + " LIKE ?";
            }
            else {
                sql += Item.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Item.P_Name + " = null OR " + Item.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Item.P_Name + " LIKE ?";
            }
            else {
                sql += Item.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.moldLocation)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.moldLocation.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ItemPP.mold().location() + " LIKE ?";
            }
            else {
                sql += ItemPP.mold().location() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (descriptionUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Item.P_Description + " = null OR " + Item.P_Description + " == '')";
        }
        else if (descriptionUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Description + " != null";
        }
        else if (!OAString.isEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.description.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Item.P_Description + " LIKE ?";
            }
            else {
                sql += Item.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (discontinuedDateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_DiscontinuedDate + " = null";
        }
        else if (discontinuedDateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_DiscontinuedDate + " != null";
        }
        else if (discontinuedDate != null) {
            if (sql.length() > 0) sql += " AND ";
            if (discontinuedDate2 != null && !discontinuedDate.equals(discontinuedDate2)) {
                sql += Item.P_DiscontinuedDate + " >= ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate);
                sql += " AND " + Item.P_DiscontinuedDate + " <= ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate2);
            }
            else {
                sql += Item.P_DiscontinuedDate + " = ?";
                args = OAArray.add(Object.class, args, this.discontinuedDate);
            }
        }
        if (!isNull(P_IsProduced)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_IsProduced + " = ?";
            args = OAArray.add(Object.class, args, this.isProduced);
        }
        if (!isNull(P_SpecialOnly)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_SpecialOnly + " = ?";
            args = OAArray.add(Object.class, args, this.specialOnly);
        }
        if (priceUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Price + " = null";
        }
        else if (priceUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_Price + " != null";
        }
        else if (!isNull(P_Price)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Price2) && price != price2) {
                sql += Item.P_Price + " >= ?";
                args = OAArray.add(Object.class, args, getPrice());
                sql += " AND " + Item.P_Price + " <= ?";
                args = OAArray.add(Object.class, args, getPrice2());
            }
            else {
                sql += Item.P_Price + " = ?";
                args = OAArray.add(Object.class, args, getPrice());
            }
        }
        if (qbListIdUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Item.P_QbListId + " = null OR " + Item.P_QbListId + " == '')";
        }
        else if (qbListIdUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Item.P_QbListId + " != null";
        }
        else if (!OAString.isEmpty(this.qbListId)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.qbListId.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Item.P_QbListId + " LIKE ?";
            }
            else {
                sql += Item.P_QbListId + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (moldUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + ItemPP.mold().pp + " = null";
        }
        if (moldUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + ItemPP.mold().pp + " != null";
        }
        else if (!useMoldSearch && getMold() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + ItemPP.mold().pp + " = ?";
            args = OAArray.add(Object.class, args, getMold());
        }
        if (useMoldSearch && getMoldSearch() != null) {
            getMoldSearch().appendSelect(prefix + ItemPP.mold().pp, select);
        }
        if (itemCategoryUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + ItemPP.itemCategory().pp + " = null";
        }
        if (itemCategoryUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + ItemPP.itemCategory().pp + " != null";
        }
        else if (!useItemCategorySearch && getItemCategory() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + ItemPP.itemCategory().pp + " = ?";
            args = OAArray.add(Object.class, args, getItemCategory());
        }
        if (useItemCategorySearch && getItemCategorySearch() != null) {
            getItemCategorySearch().appendSelect(prefix + ItemPP.itemCategory().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Item> filterDataSourceFilter;
    public OAFilter<Item> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Item>() {
            @Override
            public boolean isUsed(Item item) {
                return ItemSearch.this.isUsedForDataSourceFilter(item);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Item> filterCustomFilter;
    public OAFilter<Item> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Item>() {
            @Override
            public boolean isUsed(Item item) {
                boolean b = ItemSearch.this.isUsedForCustomFilter(item);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(item);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Item searchItem) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchItem.getId(), id)) return false;
        }
        if (codeUseNull) {
            if (OACompare.isNotEmpty(searchItem.getCode())) return false;
        }
        else if (codeUseNotNull) {
            if (OACompare.isEmpty(searchItem.getCode())) return false;
        }
        else if (code != null) {
            String s = getCode();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchItem.getCode(), s)) return false;
        }
        if (nameUseNull) {
            if (OACompare.isNotEmpty(searchItem.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(searchItem.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchItem.getName(), s)) return false;
        }
        if (moldLocation != null) {
            String s = getMoldLocation();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchItem.getProperty(ItemPP.mold().location()), s)) return false;
        }
        if (moldUseNull) {
            if (OACompare.isNotEmpty(searchItem.getMold())) return false;
        }
        else if (moldUseNotNull) {
            if (OACompare.isEmpty(searchItem.getMold())) return false;
        }
        else if (mold != null) {
            if (!OACompare.isEqual(searchItem.getMold(), mold)) return false;
        }
        if (descriptionUseNull) {
            if (OACompare.isNotEmpty(searchItem.getDescription())) return false;
        }
        else if (descriptionUseNotNull) {
            if (OACompare.isEmpty(searchItem.getDescription())) return false;
        }
        else if (description != null) {
            String s = getDescription();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchItem.getDescription(), s)) return false;
        }
        if (discontinuedDateUseNull) {
            if (OACompare.isNotEmpty(searchItem.getDiscontinuedDate())) return false;
        }
        else if (discontinuedDateUseNotNull) {
            if (OACompare.isEmpty(searchItem.getDiscontinuedDate())) return false;
        }
        else if (discontinuedDate2 != null) {
            if (!OACompare.isEqualOrBetween(searchItem.getDiscontinuedDate(), discontinuedDate, discontinuedDate2)) return false;
        }
        if (!isNull(P_IsProduced)) {
            if (!OACompare.isEqual(searchItem.getIsProduced(), isProduced)) return false;
        }
        if (!isNull(P_SpecialOnly)) {
            if (!OACompare.isEqual(searchItem.getSpecialOnly(), specialOnly)) return false;
        }
        if (priceUseNull) {
            if (OACompare.isNotEmpty(searchItem.getPrice())) return false;
        }
        else if (priceUseNotNull) {
            if (OACompare.isEmpty(searchItem.getPrice())) return false;
        }
        else if (!isNull(P_Price2)) {
            if (!OACompare.isEqualOrBetween(searchItem.getPrice(), price, price2)) return false;
        }
        if (qbListIdUseNull) {
            if (OACompare.isNotEmpty(searchItem.getQbListId())) return false;
        }
        else if (qbListIdUseNotNull) {
            if (OACompare.isEmpty(searchItem.getQbListId())) return false;
        }
        else if (qbListId != null) {
            String s = getQuickBooksId();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchItem.getQbListId(), s)) return false;
        }
        if (itemCategoryUseNull) {
            if (OACompare.isNotEmpty(searchItem.getItemCategory())) return false;
        }
        else if (itemCategoryUseNotNull) {
            if (OACompare.isEmpty(searchItem.getItemCategory())) return false;
        }
        else if (itemCategory != null) {
            if (!OACompare.isEqual(searchItem.getItemCategory(), itemCategory)) return false;
        }
        if (useMoldSearch && getMoldSearch() != null) {
            Mold mold = (Mold) searchItem.getProperty(ItemPP.mold().pp);
            if (mold == null) return false;
            if (!getMoldSearch().isUsedForDataSourceFilter(mold)) return false;
        }
        if (useItemCategorySearch && getItemCategorySearch() != null) {
            ItemCategory itemCategory = (ItemCategory) searchItem.getProperty(ItemPP.itemCategory().pp);
            if (itemCategory == null) return false;
            if (!getItemCategorySearch().isUsedForDataSourceFilter(itemCategory)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Item searchItem) {
        return true;
    }
}
