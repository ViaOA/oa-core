// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class MoldSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MoldSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_IdUseNull = "IdUseNull";
    public static final String P_IdUseNotNull = "IdUseNotNull";
    public static final String P_Code = "Code";
    public static final String P_CodeUseNull = "CodeUseNull";
    public static final String P_CodeUseNotNull = "CodeUseNotNull";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_Location = "Location";
    public static final String P_LocationUseNull = "LocationUseNull";
    public static final String P_LocationUseNotNull = "LocationUseNotNull";
    public static final String P_MoldItems = "MoldItems";
    public static final String P_MoldItemsUseNull = "MoldItemsUseNull";
    public static final String P_UseMoldItemsSearch = "UseMoldItemsSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected boolean idUseNull;
    protected boolean idUseNotNull;
    protected String code;
    protected boolean codeUseNull;
    protected boolean codeUseNotNull;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected String location;
    protected boolean locationUseNull;
    protected boolean locationUseNotNull;
    protected Item moldItems;
    protected boolean moldItemsUseNull;
    protected boolean useMoldItemsSearch;
    protected ItemSearch searchMoldItems;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_code = 1;
    public static final int SORTBYTYPE_name = 2;
    public static final int SORTBYTYPE_onHand = 3;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Code");
        hubSortByType.add("Name");
        hubSortByType.add("On Hand");
    }

    public MoldSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      
    public boolean getIdUseNull() {
        return idUseNull;
    }
    public void setIdUseNull(boolean newValue) {
        boolean old = this.idUseNull;
        this.idUseNull = newValue;
        firePropertyChange(P_IdUseNull, old, this.idUseNull);
    }
    public boolean getIdUseNotNull() {
        return idUseNotNull;
    }
    public void setIdUseNotNull(boolean newValue) {
        boolean old = this.idUseNotNull;
        this.idUseNotNull = newValue;
        firePropertyChange(P_IdUseNotNull, old, this.idUseNotNull);
    }

    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
      
    public boolean getCodeUseNull() {
        return codeUseNull;
    }
    public void setCodeUseNull(boolean newValue) {
        boolean old = this.codeUseNull;
        this.codeUseNull = newValue;
        firePropertyChange(P_CodeUseNull, old, this.codeUseNull);
    }
    public boolean getCodeUseNotNull() {
        return codeUseNotNull;
    }
    public void setCodeUseNotNull(boolean newValue) {
        boolean old = this.codeUseNotNull;
        this.codeUseNotNull = newValue;
        firePropertyChange(P_CodeUseNotNull, old, this.codeUseNotNull);
    }

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    /**
      location of the mold
    */
    public String getLocation() {
        return location;
    }
    public void setLocation(String newValue) {
        String old = location;
        fireBeforePropertyChange(P_Location, old, newValue);
        this.location = newValue;
        firePropertyChange(P_Location, old, this.location);
    }
      
    public boolean getLocationUseNull() {
        return locationUseNull;
    }
    public void setLocationUseNull(boolean newValue) {
        boolean old = this.locationUseNull;
        this.locationUseNull = newValue;
        firePropertyChange(P_LocationUseNull, old, this.locationUseNull);
    }
    public boolean getLocationUseNotNull() {
        return locationUseNotNull;
    }
    public void setLocationUseNotNull(boolean newValue) {
        boolean old = this.locationUseNotNull;
        this.locationUseNotNull = newValue;
        firePropertyChange(P_LocationUseNotNull, old, this.locationUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public Item getMoldItems() {
        if (moldItems == null) {
            moldItems = (Item) getObject(P_MoldItems);
        }
        return moldItems;
    }
    public void setMoldItems(Item newValue) {
        Item old = this.moldItems;
        this.moldItems = newValue;
        firePropertyChange(P_MoldItems, old, this.moldItems);
    }
    public boolean getMoldItemsUseNull() {
        return moldItemsUseNull;
    }
    public void setMoldItemsUseNull(boolean newValue) {
        boolean old = this.moldItemsUseNull;
        this.moldItemsUseNull = newValue;
        firePropertyChange(P_MoldItemsUseNull, old, this.moldItemsUseNull);
    }
    public boolean getUseMoldItemsSearch() {
        return useMoldItemsSearch;
    }
    public void setUseMoldItemsSearch(boolean newValue) {
        boolean old = this.useMoldItemsSearch;
        this.useMoldItemsSearch = newValue;
        firePropertyChange(P_UseMoldItemsSearch, old, this.useMoldItemsSearch);
    }
    public ItemSearch getMoldItemsSearch() {
        return this.searchMoldItems;
    }
    public void setMoldItemsSearch(ItemSearch newValue) {
        this.searchMoldItems = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setIdUseNull(false);
        setIdUseNotNull(false);
        setCode(null);
        setCodeUseNull(false);
        setCodeUseNotNull(false);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setLocation(null);
        setLocationUseNull(false);
        setLocationUseNotNull(false);
        setMoldItems(null);
        setMoldItemsUseNull(false);
        setUseMoldItemsSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getIdUseNull()) return true;if (getIdUseNotNull()) return true;
        if (getIdUseNull()) return true;
        if (getIdUseNotNull()) return true;
        if (getCode() != null) return true;
        if (getCodeUseNull()) return true;if (getCodeUseNotNull()) return true;
        if (getCodeUseNull()) return true;
        if (getCodeUseNotNull()) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (getLocation() != null) return true;
        if (getLocationUseNull()) return true;if (getLocationUseNotNull()) return true;
        if (getLocationUseNull()) return true;
        if (getLocationUseNotNull()) return true;
        if (getMoldItems() != null) return true;
        if (getMoldItemsUseNull()) return true;
        if (getUseMoldItemsSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Mold> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Mold> f = new OAQueryFilter<Mold>(Mold.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Mold> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Mold> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Mold> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_code: sortOrder = Mold.P_Code; break;
            case SORTBYTYPE_name: sortOrder = Mold.P_Name; break;
            case SORTBYTYPE_onHand: sortOrder = Mold.P_OnHand; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (idUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Id + " = null";
        }
        else if (idUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Id + " != null";
        }
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (codeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Mold.P_Code + " = null OR " + Mold.P_Code + " == '')";
        }
        else if (codeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Code + " != null";
        }
        else if (!OAString.isEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.code.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Mold.P_Code + " LIKE ?";
            }
            else {
                sql += Mold.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Mold.P_Name + " = null OR " + Mold.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Mold.P_Name + " LIKE ?";
            }
            else {
                sql += Mold.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (locationUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Mold.P_Location + " = null OR " + Mold.P_Location + " == '')";
        }
        else if (locationUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Location + " != null";
        }
        else if (!OAString.isEmpty(this.location)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.location.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Mold.P_Location + " LIKE ?";
            }
            else {
                sql += Mold.P_Location + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (moldItemsUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MoldPP.items().pp + " = null";
        }
        else if (!useMoldItemsSearch && getMoldItems() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MoldPP.items().pp + " = ?";
            args = OAArray.add(Object.class, args, getMoldItems());
            finder = new OAFinder<Item, Mold>(getMoldItems(), Item.P_Mold);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Mold> select = new OASelect<Mold>(Mold.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useMoldItemsSearch && getMoldItemsSearch() != null) {
            getMoldItemsSearch().appendSelect(MoldPP.items().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (idUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Id + " = null";
        }
        else if (idUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Id + " != null";
        }
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (codeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Mold.P_Code + " = null OR " + Mold.P_Code + " == '')";
        }
        else if (codeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Code + " != null";
        }
        else if (!OAString.isEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.code.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Mold.P_Code + " LIKE ?";
            }
            else {
                sql += Mold.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Mold.P_Name + " = null OR " + Mold.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Mold.P_Name + " LIKE ?";
            }
            else {
                sql += Mold.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (locationUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Mold.P_Location + " = null OR " + Mold.P_Location + " == '')";
        }
        else if (locationUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Mold.P_Location + " != null";
        }
        else if (!OAString.isEmpty(this.location)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.location.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Mold.P_Location + " LIKE ?";
            }
            else {
                sql += Mold.P_Location + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (moldItemsUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MoldPP.items().pp + " = null";
        }
        else if (!useMoldItemsSearch && getMoldItems() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MoldPP.items().pp + " = ?";
            args = OAArray.add(Object.class, args, getMoldItems());
        }
        if (useMoldItemsSearch && getMoldItemsSearch() != null) {
            getMoldItemsSearch().appendSelect(prefix + MoldPP.items().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Mold> filterDataSourceFilter;
    public OAFilter<Mold> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Mold>() {
            @Override
            public boolean isUsed(Mold mold) {
                return MoldSearch.this.isUsedForDataSourceFilter(mold);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Mold> filterCustomFilter;
    public OAFilter<Mold> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Mold>() {
            @Override
            public boolean isUsed(Mold mold) {
                boolean b = MoldSearch.this.isUsedForCustomFilter(mold);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(mold);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Mold searchMold) {
        if (idUseNull) {
            if (OACompare.isNotEmpty(searchMold.getId())) return false;
        }
        else if (idUseNotNull) {
            if (OACompare.isEmpty(searchMold.getId())) return false;
        }
        else if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchMold.getId(), id)) return false;
        }
        if (codeUseNull) {
            if (OACompare.isNotEmpty(searchMold.getCode())) return false;
        }
        else if (codeUseNotNull) {
            if (OACompare.isEmpty(searchMold.getCode())) return false;
        }
        else if (code != null) {
            String s = getCode();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchMold.getCode(), s)) return false;
        }
        if (nameUseNull) {
            if (OACompare.isNotEmpty(searchMold.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(searchMold.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchMold.getName(), s)) return false;
        }
        if (locationUseNull) {
            if (OACompare.isNotEmpty(searchMold.getLocation())) return false;
        }
        else if (locationUseNotNull) {
            if (OACompare.isEmpty(searchMold.getLocation())) return false;
        }
        else if (location != null) {
            String s = getLocation();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchMold.getLocation(), s)) return false;
        }
        if (moldItemsUseNull) {
            if (OACompare.isNotEmpty(searchMold.getItems())) return false;
        }
        else if (moldItems != null) {
            if (!OACompare.isIn(moldItems, searchMold.getItems())) return false;
        }
        if (useMoldItemsSearch && getMoldItemsSearch() != null) {
            Item item = (Item) searchMold.getProperty(MoldPP.items().pp);
            if (item == null) return false;
            if (!getMoldItemsSearch().isUsedForDataSourceFilter(item)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Mold searchMold) {
        return true;
    }
}
