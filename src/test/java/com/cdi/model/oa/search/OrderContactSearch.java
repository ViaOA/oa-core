// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class OrderContactSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(OrderContactSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Date = "Date";
    public static final String P_Date2 = "Date2";
    public static final String P_DateUseNull = "DateUseNull";
    public static final String P_DateUseNotNull = "DateUseNotNull";
    public static final String P_FollowupDate = "FollowupDate";
    public static final String P_FollowupDate2 = "FollowupDate2";
    public static final String P_FollowupDateUseNull = "FollowupDateUseNull";
    public static final String P_FollowupDateUseNotNull = "FollowupDateUseNotNull";
    public static final String P_OrderContactOrder = "OrderContactOrder";
    public static final String P_UseOrderContactOrderSearch = "UseOrderContactOrderSearch";
    public static final String P_Contact = "Contact";
    public static final String P_UseContactSearch = "UseContactSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected OADate date;
    protected OADate date2;
    protected boolean dateUseNull;
    protected boolean dateUseNotNull;
    protected OADate followupDate;
    protected OADate followupDate2;
    protected boolean followupDateUseNull;
    protected boolean followupDateUseNotNull;
    protected Order orderContactOrder;
    protected boolean useOrderContactOrderSearch;
    protected OrderSearch searchOrderContactOrder;
    protected Contact contact;
    protected boolean useContactSearch;
    protected ContactSearch searchContact;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_date = 1;
    public static final int SORTBYTYPE_salesOrderNumber = 2;
    public static final int SORTBYTYPE_id = 3;
    public static final int SORTBYTYPE_name = 4;
    public static final int SORTBYTYPE_customerNumber = 5;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Date");
        hubSortByType.add("Sales Order Number");
        hubSortByType.add("Id");
        hubSortByType.add("Name");
        hubSortByType.add("Customer Number");
    }

    public OrderContactSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public OADate getDate() {
        return date;
    }
    public void setDate(OADate newValue) {
        OADate old = date;
        fireBeforePropertyChange(P_Date, old, newValue);
        this.date = newValue;
        firePropertyChange(P_Date, old, this.date);
        if (isLoading()) return;
        if (date != null) {
            if (date2 == null) setDate2(this.date);
            else if (date.compareTo(date2) > 0) setDate2(this.date);
        }
    } 
    public OADate getDate2() {
        return date2;
    }
    public void setDate2(OADate newValue) {
        OADate old = date2;
        fireBeforePropertyChange(P_Date2, old, newValue);
        this.date2 = newValue;
        firePropertyChange(P_Date2, old, this.date2);
        if (date != null && date2 != null) {
            if (date.compareTo(date2) > 0) setDate(this.date2);
        }
    }
    public boolean getDateUseNull() {
        return dateUseNull;
    }
    public void setDateUseNull(boolean newValue) {
        boolean old = this.dateUseNull;
        this.dateUseNull = newValue;
        firePropertyChange(P_DateUseNull, old, this.dateUseNull);
    }
    public boolean getDateUseNotNull() {
        return dateUseNotNull;
    }
    public void setDateUseNotNull(boolean newValue) {
        boolean old = this.dateUseNotNull;
        this.dateUseNotNull = newValue;
        firePropertyChange(P_DateUseNotNull, old, this.dateUseNotNull);
    }

    public OADate getFollowupDate() {
        return followupDate;
    }
    public void setFollowupDate(OADate newValue) {
        OADate old = followupDate;
        fireBeforePropertyChange(P_FollowupDate, old, newValue);
        this.followupDate = newValue;
        firePropertyChange(P_FollowupDate, old, this.followupDate);
        if (isLoading()) return;
        if (followupDate != null) {
            if (followupDate2 == null) setFollowupDate2(this.followupDate);
            else if (followupDate.compareTo(followupDate2) > 0) setFollowupDate2(this.followupDate);
        }
    } 
    public OADate getFollowupDate2() {
        return followupDate2;
    }
    public void setFollowupDate2(OADate newValue) {
        OADate old = followupDate2;
        fireBeforePropertyChange(P_FollowupDate2, old, newValue);
        this.followupDate2 = newValue;
        firePropertyChange(P_FollowupDate2, old, this.followupDate2);
        if (followupDate != null && followupDate2 != null) {
            if (followupDate.compareTo(followupDate2) > 0) setFollowupDate(this.followupDate2);
        }
    }
    public boolean getFollowupDateUseNull() {
        return followupDateUseNull;
    }
    public void setFollowupDateUseNull(boolean newValue) {
        boolean old = this.followupDateUseNull;
        this.followupDateUseNull = newValue;
        firePropertyChange(P_FollowupDateUseNull, old, this.followupDateUseNull);
    }
    public boolean getFollowupDateUseNotNull() {
        return followupDateUseNotNull;
    }
    public void setFollowupDateUseNotNull(boolean newValue) {
        boolean old = this.followupDateUseNotNull;
        this.followupDateUseNotNull = newValue;
        firePropertyChange(P_FollowupDateUseNotNull, old, this.followupDateUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public Order getOrderContactOrder() {
        if (orderContactOrder == null) {
            orderContactOrder = (Order) getObject(P_OrderContactOrder);
        }
        return orderContactOrder;
    }
    public void setOrderContactOrder(Order newValue) {
        Order old = this.orderContactOrder;
        this.orderContactOrder = newValue;
        firePropertyChange(P_OrderContactOrder, old, this.orderContactOrder);
    }
    public boolean getUseOrderContactOrderSearch() {
        return useOrderContactOrderSearch;
    }
    public void setUseOrderContactOrderSearch(boolean newValue) {
        boolean old = this.useOrderContactOrderSearch;
        this.useOrderContactOrderSearch = newValue;
        firePropertyChange(P_UseOrderContactOrderSearch, old, this.useOrderContactOrderSearch);
    }
    public OrderSearch getOrderContactOrderSearch() {
        return this.searchOrderContactOrder;
    }
    public void setOrderContactOrderSearch(OrderSearch newValue) {
        this.searchOrderContactOrder = newValue;
    }

    @OAOne
    public Contact getContact() {
        if (contact == null) {
            contact = (Contact) getObject(P_Contact);
        }
        return contact;
    }
    public void setContact(Contact newValue) {
        Contact old = this.contact;
        this.contact = newValue;
        firePropertyChange(P_Contact, old, this.contact);
    }
    public boolean getUseContactSearch() {
        return useContactSearch;
    }
    public void setUseContactSearch(boolean newValue) {
        boolean old = this.useContactSearch;
        this.useContactSearch = newValue;
        firePropertyChange(P_UseContactSearch, old, this.useContactSearch);
    }
    public ContactSearch getContactSearch() {
        return this.searchContact;
    }
    public void setContactSearch(ContactSearch newValue) {
        this.searchContact = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setDate(null);
        setDate2(null);
        setDateUseNull(false);
        setDateUseNotNull(false);
        setFollowupDate(null);
        setFollowupDate2(null);
        setFollowupDateUseNull(false);
        setFollowupDateUseNotNull(false);
        setOrderContactOrder(null);
        setUseOrderContactOrderSearch(false);
        setContact(null);
        setUseContactSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getDate() != null) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNotNull()) return true;
        if (getFollowupDate() != null) return true;
        if (getFollowupDateUseNull()) return true;
        if (getFollowupDateUseNull()) return true;
        if (getFollowupDateUseNull()) return true;
        if (getFollowupDateUseNotNull()) return true;
        if (getOrderContactOrder() != null) return true;
        if (getUseOrderContactOrderSearch()) return true;
        if (getContact() != null) return true;
        if (getUseContactSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<OrderContact> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<OrderContact> f = new OAQueryFilter<OrderContact>(OrderContact.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<OrderContact> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<OrderContact> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<OrderContact> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_date: sortOrder = OrderContact.P_Date; break;
            case SORTBYTYPE_salesOrderNumber: sortOrder = OrderContactPP.order().salesOrderNumber(); break;
            case SORTBYTYPE_id: sortOrder = OrderContactPP.order().id(); break;
            case SORTBYTYPE_name: sortOrder = OrderContactPP.contact().name(); break;
            case SORTBYTYPE_customerNumber: sortOrder = OrderContactPP.contact().customer().customerNumber(); break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (dateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_Date + " = null";
        }
        else if (dateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_Date + " != null";
        }
        else if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += OrderContact.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + OrderContact.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += OrderContact.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (followupDateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_FollowupDate + " = null";
        }
        else if (followupDateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_FollowupDate + " != null";
        }
        else if (followupDate != null) {
            if (sql.length() > 0) sql += " AND ";
            if (followupDate2 != null && !followupDate.equals(followupDate2)) {
                sql += OrderContact.P_FollowupDate + " >= ?";
                args = OAArray.add(Object.class, args, this.followupDate);
                sql += " AND " + OrderContact.P_FollowupDate + " <= ?";
                args = OAArray.add(Object.class, args, this.followupDate2);
            }
            else {
                sql += OrderContact.P_FollowupDate + " = ?";
                args = OAArray.add(Object.class, args, this.followupDate);
            }
        }
        if (!useOrderContactOrderSearch && getOrderContactOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContactPP.order().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderContactOrder());
            finder = new OAFinder<Order, OrderContact>(getOrderContactOrder(), Order.P_OrderContacts);
        }
        if (!useContactSearch && getContact() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContactPP.contact().pp + " = ?";
            args = OAArray.add(Object.class, args, getContact());
            finder = new OAFinder<Contact, OrderContact>(getContact(), Contact.P_OrderContacts);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<OrderContact> select = new OASelect<OrderContact>(OrderContact.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useOrderContactOrderSearch && getOrderContactOrderSearch() != null) {
            getOrderContactOrderSearch().appendSelect(OrderContactPP.order().pp, select);
        }
        if (useContactSearch && getContactSearch() != null) {
            getContactSearch().appendSelect(OrderContactPP.contact().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (dateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_Date + " = null";
        }
        else if (dateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_Date + " != null";
        }
        else if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += OrderContact.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + OrderContact.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += OrderContact.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (followupDateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_FollowupDate + " = null";
        }
        else if (followupDateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderContact.P_FollowupDate + " != null";
        }
        else if (followupDate != null) {
            if (sql.length() > 0) sql += " AND ";
            if (followupDate2 != null && !followupDate.equals(followupDate2)) {
                sql += OrderContact.P_FollowupDate + " >= ?";
                args = OAArray.add(Object.class, args, this.followupDate);
                sql += " AND " + OrderContact.P_FollowupDate + " <= ?";
                args = OAArray.add(Object.class, args, this.followupDate2);
            }
            else {
                sql += OrderContact.P_FollowupDate + " = ?";
                args = OAArray.add(Object.class, args, this.followupDate);
            }
        }
        if (!useOrderContactOrderSearch && getOrderContactOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderContactPP.order().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderContactOrder());
        }
        if (useOrderContactOrderSearch && getOrderContactOrderSearch() != null) {
            getOrderContactOrderSearch().appendSelect(prefix + OrderContactPP.order().pp, select);
        }
        if (!useContactSearch && getContact() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderContactPP.contact().pp + " = ?";
            args = OAArray.add(Object.class, args, getContact());
        }
        if (useContactSearch && getContactSearch() != null) {
            getContactSearch().appendSelect(prefix + OrderContactPP.contact().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<OrderContact> filterDataSourceFilter;
    public OAFilter<OrderContact> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<OrderContact>() {
            @Override
            public boolean isUsed(OrderContact orderContact) {
                return OrderContactSearch.this.isUsedForDataSourceFilter(orderContact);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<OrderContact> filterCustomFilter;
    public OAFilter<OrderContact> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<OrderContact>() {
            @Override
            public boolean isUsed(OrderContact orderContact) {
                boolean b = OrderContactSearch.this.isUsedForCustomFilter(orderContact);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(orderContact);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(OrderContact searchOrderContact) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchOrderContact.getId(), id)) return false;
        }
        if (orderContactOrder != null) {
            if (!OACompare.isEqual(searchOrderContact.getOrder(), orderContactOrder)) return false;
        }
        if (dateUseNull) {
            if (OACompare.isNotEmpty(searchOrderContact.getDate())) return false;
        }
        else if (dateUseNotNull) {
            if (OACompare.isEmpty(searchOrderContact.getDate())) return false;
        }
        else if (date2 != null) {
            if (!OACompare.isEqualOrBetween(searchOrderContact.getDate(), date, date2)) return false;
        }
        if (followupDateUseNull) {
            if (OACompare.isNotEmpty(searchOrderContact.getFollowupDate())) return false;
        }
        else if (followupDateUseNotNull) {
            if (OACompare.isEmpty(searchOrderContact.getFollowupDate())) return false;
        }
        else if (followupDate2 != null) {
            if (!OACompare.isEqualOrBetween(searchOrderContact.getFollowupDate(), followupDate, followupDate2)) return false;
        }
        if (contact != null) {
            if (!OACompare.isEqual(searchOrderContact.getContact(), contact)) return false;
        }
        if (useOrderContactOrderSearch && getOrderContactOrderSearch() != null) {
            Order order = (Order) searchOrderContact.getProperty(OrderContactPP.order().pp);
            if (order == null) return false;
            if (!getOrderContactOrderSearch().isUsedForDataSourceFilter(order)) return false;
        }
        if (useContactSearch && getContactSearch() != null) {
            Contact contact = (Contact) searchOrderContact.getProperty(OrderContactPP.contact().pp);
            if (contact == null) return false;
            if (!getContactSearch().isUsedForDataSourceFilter(contact)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(OrderContact searchOrderContact) {
        return true;
    }
}
