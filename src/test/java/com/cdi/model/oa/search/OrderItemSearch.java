// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.OAQueryFilter;


@OAClass(useDataSource=false, localOnly=true)
public class OrderItemSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(OrderItemSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_OrderItemItem = "OrderItemItem";
    public static final String P_UseOrderItemItemSearch = "UseOrderItemItemSearch";
    public static final String P_OrderItemOrder = "OrderItemOrder";
    public static final String P_UseOrderItemOrderSearch = "UseOrderItemOrderSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected Item orderItemItem;
    protected boolean useOrderItemItemSearch;
    protected ItemSearch searchOrderItemItem;
    protected Order orderItemOrder;
    protected boolean useOrderItemOrderSearch;
    protected OrderSearch searchOrderItemOrder;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_code = 1;
    public static final int SORTBYTYPE_name = 2;
    public static final int SORTBYTYPE_salesOrderNumber = 3;
    public static final int SORTBYTYPE_id = 4;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Code");
        hubSortByType.add("Name");
        hubSortByType.add("Sales Order Number");
        hubSortByType.add("Id");
    }

    public OrderItemSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public Item getOrderItemItem() {
        if (orderItemItem == null) {
            orderItemItem = (Item) getObject(P_OrderItemItem);
        }
        return orderItemItem;
    }
    public void setOrderItemItem(Item newValue) {
        Item old = this.orderItemItem;
        this.orderItemItem = newValue;
        firePropertyChange(P_OrderItemItem, old, this.orderItemItem);
    }
    public boolean getUseOrderItemItemSearch() {
        return useOrderItemItemSearch;
    }
    public void setUseOrderItemItemSearch(boolean newValue) {
        boolean old = this.useOrderItemItemSearch;
        this.useOrderItemItemSearch = newValue;
        firePropertyChange(P_UseOrderItemItemSearch, old, this.useOrderItemItemSearch);
    }
    public ItemSearch getOrderItemItemSearch() {
        return this.searchOrderItemItem;
    }
    public void setOrderItemItemSearch(ItemSearch newValue) {
        this.searchOrderItemItem = newValue;
    }

    @OAOne
    public Order getOrderItemOrder() {
        if (orderItemOrder == null) {
            orderItemOrder = (Order) getObject(P_OrderItemOrder);
        }
        return orderItemOrder;
    }
    public void setOrderItemOrder(Order newValue) {
        Order old = this.orderItemOrder;
        this.orderItemOrder = newValue;
        firePropertyChange(P_OrderItemOrder, old, this.orderItemOrder);
    }
    public boolean getUseOrderItemOrderSearch() {
        return useOrderItemOrderSearch;
    }
    public void setUseOrderItemOrderSearch(boolean newValue) {
        boolean old = this.useOrderItemOrderSearch;
        this.useOrderItemOrderSearch = newValue;
        firePropertyChange(P_UseOrderItemOrderSearch, old, this.useOrderItemOrderSearch);
    }
    public OrderSearch getOrderItemOrderSearch() {
        return this.searchOrderItemOrder;
    }
    public void setOrderItemOrderSearch(OrderSearch newValue) {
        this.searchOrderItemOrder = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setOrderItemItem(null);
        setUseOrderItemItemSearch(false);
        setOrderItemOrder(null);
        setUseOrderItemOrderSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getOrderItemItem() != null) return true;
        if (getUseOrderItemItemSearch()) return true;
        if (getOrderItemOrder() != null) return true;
        if (getUseOrderItemOrderSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<OrderItem> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<OrderItem> f = new OAQueryFilter<OrderItem>(OrderItem.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<OrderItem> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<OrderItem> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<OrderItem> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_code: sortOrder = OrderItemPP.item().code(); break;
            case SORTBYTYPE_name: sortOrder = OrderItemPP.item().name(); break;
            case SORTBYTYPE_salesOrderNumber: sortOrder = OrderItemPP.order().salesOrderNumber(); break;
            case SORTBYTYPE_id: sortOrder = OrderItemPP.order().id(); break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderItem.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!useOrderItemItemSearch && getOrderItemItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderItemPP.item().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemItem());
        }
        if (!useOrderItemOrderSearch && getOrderItemOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderItemPP.order().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemOrder());
            finder = new OAFinder<Order, OrderItem>(getOrderItemOrder(), Order.P_OrderItems);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<OrderItem> select = new OASelect<OrderItem>(OrderItem.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            getOrderItemItemSearch().appendSelect(OrderItemPP.item().pp, select);
        }
        if (useOrderItemOrderSearch && getOrderItemOrderSearch() != null) {
            getOrderItemOrderSearch().appendSelect(OrderItemPP.order().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderItem.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!useOrderItemItemSearch && getOrderItemItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderItemPP.item().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemItem());
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            getOrderItemItemSearch().appendSelect(prefix + OrderItemPP.item().pp, select);
        }
        if (!useOrderItemOrderSearch && getOrderItemOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderItemPP.order().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemOrder());
        }
        if (useOrderItemOrderSearch && getOrderItemOrderSearch() != null) {
            getOrderItemOrderSearch().appendSelect(prefix + OrderItemPP.order().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<OrderItem> filterDataSourceFilter;
    public OAFilter<OrderItem> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<OrderItem>() {
            @Override
            public boolean isUsed(OrderItem orderItem) {
                return OrderItemSearch.this.isUsedForDataSourceFilter(orderItem);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<OrderItem> filterCustomFilter;
    public OAFilter<OrderItem> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<OrderItem>() {
            @Override
            public boolean isUsed(OrderItem orderItem) {
                boolean b = OrderItemSearch.this.isUsedForCustomFilter(orderItem);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(orderItem);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(OrderItem searchOrderItem) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchOrderItem.getId(), id)) return false;
        }
        if (orderItemItem != null) {
            if (!OACompare.isEqual(searchOrderItem.getItem(), orderItemItem)) return false;
        }
        if (orderItemOrder != null) {
            if (!OACompare.isEqual(searchOrderItem.getOrder(), orderItemOrder)) return false;
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            Item item = (Item) searchOrderItem.getProperty(OrderItemPP.item().pp);
            if (item == null) return false;
            if (!getOrderItemItemSearch().isUsedForDataSourceFilter(item)) return false;
        }
        if (useOrderItemOrderSearch && getOrderItemOrderSearch() != null) {
            Order order = (Order) searchOrderItem.getProperty(OrderItemPP.order().pp);
            if (order == null) return false;
            if (!getOrderItemOrderSearch().isUsedForDataSourceFilter(order)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(OrderItem searchOrderItem) {
        return true;
    }
}
