// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;
import com.cdi.delegate.ModelDelegate;

@OAClass(useDataSource=false, localOnly=true)
public class OrderNoteSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(OrderNoteSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_Created2 = "Created2";
    public static final String P_CreatedUseNull = "CreatedUseNull";
    public static final String P_CreatedUseNotNull = "CreatedUseNotNull";
    public static final String P_Note = "Note";
    public static final String P_NoteUseNull = "NoteUseNull";
    public static final String P_NoteUseNotNull = "NoteUseNotNull";
    public static final String P_OrderNoteOrder = "OrderNoteOrder";
    public static final String P_UseOrderNoteOrderSearch = "UseOrderNoteOrderSearch";
    public static final String P_OrderNoteUser = "OrderNoteUser";
    public static final String P_UseOrderNoteUserSearch = "UseOrderNoteUserSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected OADateTime created;
    protected OADateTime created2;
    protected boolean createdUseNull;
    protected boolean createdUseNotNull;
    protected String note;
    protected boolean noteUseNull;
    protected boolean noteUseNotNull;
    protected Order orderNoteOrder;
    protected boolean useOrderNoteOrderSearch;
    protected OrderSearch searchOrderNoteOrder;
    protected User orderNoteUser;
    protected boolean useOrderNoteUserSearch;
    protected UserSearch searchOrderNoteUser;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_code = 1;
    public static final int SORTBYTYPE_lastName = 2;
    public static final int SORTBYTYPE_loginId = 3;
    public static final int SORTBYTYPE_id = 4;
    public static final int SORTBYTYPE_salesOrderNumber = 5;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Code");
        hubSortByType.add("Last Name");
        hubSortByType.add("Login Id");
        hubSortByType.add("Id");
        hubSortByType.add("Sales Order Number");
    }

    public OrderNoteSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
        if (isLoading()) return;
        if (created != null) {
            if (created2 == null) setCreated2(this.created);
            else if (created.compareTo(created2) > 0) setCreated2(this.created);
        }
    } 
    public OADateTime getCreated2() {
        return created2;
    }
    public void setCreated2(OADateTime newValue) {
        OADateTime old = created2;
        fireBeforePropertyChange(P_Created2, old, newValue);
        this.created2 = newValue;
        firePropertyChange(P_Created2, old, this.created2);
        if (created != null && created2 != null) {
            if (created.compareTo(created2) > 0) setCreated(this.created2);
        }
    }
    public boolean getCreatedUseNull() {
        return createdUseNull;
    }
    public void setCreatedUseNull(boolean newValue) {
        boolean old = this.createdUseNull;
        this.createdUseNull = newValue;
        firePropertyChange(P_CreatedUseNull, old, this.createdUseNull);
    }
    public boolean getCreatedUseNotNull() {
        return createdUseNotNull;
    }
    public void setCreatedUseNotNull(boolean newValue) {
        boolean old = this.createdUseNotNull;
        this.createdUseNotNull = newValue;
        firePropertyChange(P_CreatedUseNotNull, old, this.createdUseNotNull);
    }

    public String getNote() {
        return note;
    }
    public void setNote(String newValue) {
        String old = note;
        fireBeforePropertyChange(P_Note, old, newValue);
        this.note = newValue;
        firePropertyChange(P_Note, old, this.note);
    }
      
    public boolean getNoteUseNull() {
        return noteUseNull;
    }
    public void setNoteUseNull(boolean newValue) {
        boolean old = this.noteUseNull;
        this.noteUseNull = newValue;
        firePropertyChange(P_NoteUseNull, old, this.noteUseNull);
    }
    public boolean getNoteUseNotNull() {
        return noteUseNotNull;
    }
    public void setNoteUseNotNull(boolean newValue) {
        boolean old = this.noteUseNotNull;
        this.noteUseNotNull = newValue;
        firePropertyChange(P_NoteUseNotNull, old, this.noteUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public Order getOrderNoteOrder() {
        if (orderNoteOrder == null) {
            orderNoteOrder = (Order) getObject(P_OrderNoteOrder);
        }
        return orderNoteOrder;
    }
    public void setOrderNoteOrder(Order newValue) {
        Order old = this.orderNoteOrder;
        this.orderNoteOrder = newValue;
        firePropertyChange(P_OrderNoteOrder, old, this.orderNoteOrder);
    }
    public boolean getUseOrderNoteOrderSearch() {
        return useOrderNoteOrderSearch;
    }
    public void setUseOrderNoteOrderSearch(boolean newValue) {
        boolean old = this.useOrderNoteOrderSearch;
        this.useOrderNoteOrderSearch = newValue;
        firePropertyChange(P_UseOrderNoteOrderSearch, old, this.useOrderNoteOrderSearch);
    }
    public OrderSearch getOrderNoteOrderSearch() {
        return this.searchOrderNoteOrder;
    }
    public void setOrderNoteOrderSearch(OrderSearch newValue) {
        this.searchOrderNoteOrder = newValue;
    }

    @OAOne
    public User getOrderNoteUser() {
        if (orderNoteUser == null) {
            orderNoteUser = (User) getObject(P_OrderNoteUser);
        }
        return orderNoteUser;
    }
    public void setOrderNoteUser(User newValue) {
        User old = this.orderNoteUser;
        this.orderNoteUser = newValue;
        firePropertyChange(P_OrderNoteUser, old, this.orderNoteUser);
    }
    public boolean getUseOrderNoteUserSearch() {
        return useOrderNoteUserSearch;
    }
    public void setUseOrderNoteUserSearch(boolean newValue) {
        boolean old = this.useOrderNoteUserSearch;
        this.useOrderNoteUserSearch = newValue;
        firePropertyChange(P_UseOrderNoteUserSearch, old, this.useOrderNoteUserSearch);
    }
    public UserSearch getOrderNoteUserSearch() {
        return this.searchOrderNoteUser;
    }
    public void setOrderNoteUserSearch(UserSearch newValue) {
        this.searchOrderNoteUser = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setCreated(null);
        setCreated2(null);
        setCreatedUseNull(false);
        setCreatedUseNotNull(false);
        setNote(null);
        setNoteUseNull(false);
        setNoteUseNotNull(false);
        setOrderNoteOrder(null);
        setUseOrderNoteOrderSearch(false);
        setOrderNoteUser(null);
        setUseOrderNoteUserSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getCreated() != null) return true;
        if (getCreatedUseNull()) return true;
        if (getCreatedUseNull()) return true;
        if (getCreatedUseNull()) return true;
        if (getCreatedUseNotNull()) return true;
        if (getNote() != null) return true;
        if (getNoteUseNull()) return true;if (getNoteUseNotNull()) return true;
        if (getNoteUseNull()) return true;
        if (getNoteUseNotNull()) return true;
        if (getOrderNoteOrder() != null) return true;
        if (getUseOrderNoteOrderSearch()) return true;
        if (getOrderNoteUser() != null) return true;
        if (getUseOrderNoteUserSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<OrderNote> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<OrderNote> f = new OAQueryFilter<OrderNote>(OrderNote.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<OrderNote> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<OrderNote> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<OrderNote> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_code: sortOrder = OrderNotePP.user().code(); break;
            case SORTBYTYPE_lastName: sortOrder = OrderNotePP.user().lastName(); break;
            case SORTBYTYPE_loginId: sortOrder = OrderNotePP.user().loginId(); break;
            case SORTBYTYPE_id: sortOrder = OrderNotePP.order().id(); break;
            case SORTBYTYPE_salesOrderNumber: sortOrder = OrderNotePP.order().salesOrderNumber(); break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNote.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (createdUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNote.P_Created + " = null";
        }
        else if (createdUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNote.P_Created + " != null";
        }
        else if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            if (created2 != null && !created.equals(created2)) {
                sql += OrderNote.P_Created + " >= ?";
                args = OAArray.add(Object.class, args, this.created);
                sql += " AND " + OrderNote.P_Created + " <= ?";
                args = OAArray.add(Object.class, args, this.created2);
            }
            else {
                sql += OrderNote.P_Created + " = ?";
                args = OAArray.add(Object.class, args, this.created);
            }
        }
        if (noteUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + OrderNote.P_Note + " = null OR " + OrderNote.P_Note + " == '')";
        }
        else if (noteUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNote.P_Note + " != null";
        }
        else if (!OAString.isEmpty(this.note)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.note.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderNote.P_Note + " LIKE ?";
            }
            else {
                sql += OrderNote.P_Note + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useOrderNoteOrderSearch && getOrderNoteOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNotePP.order().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderNoteOrder());
            finder = new OAFinder<Order, OrderNote>(getOrderNoteOrder(), Order.P_OrderNotes);
        }
        if (!useOrderNoteUserSearch && getOrderNoteUser() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNotePP.user().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderNoteUser());
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<OrderNote> select = new OASelect<OrderNote>(OrderNote.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useOrderNoteOrderSearch && getOrderNoteOrderSearch() != null) {
            getOrderNoteOrderSearch().appendSelect(OrderNotePP.order().pp, select);
        }
        if (useOrderNoteUserSearch && getOrderNoteUserSearch() != null) {
            getOrderNoteUserSearch().appendSelect(OrderNotePP.user().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNote.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (createdUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNote.P_Created + " = null";
        }
        else if (createdUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNote.P_Created + " != null";
        }
        else if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            if (created2 != null && !created.equals(created2)) {
                sql += OrderNote.P_Created + " >= ?";
                args = OAArray.add(Object.class, args, this.created);
                sql += " AND " + OrderNote.P_Created + " <= ?";
                args = OAArray.add(Object.class, args, this.created2);
            }
            else {
                sql += OrderNote.P_Created + " = ?";
                args = OAArray.add(Object.class, args, this.created);
            }
        }
        if (noteUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + OrderNote.P_Note + " = null OR " + OrderNote.P_Note + " == '')";
        }
        else if (noteUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderNote.P_Note + " != null";
        }
        else if (!OAString.isEmpty(this.note)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.note.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderNote.P_Note + " LIKE ?";
            }
            else {
                sql += OrderNote.P_Note + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useOrderNoteOrderSearch && getOrderNoteOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderNotePP.order().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderNoteOrder());
        }
        if (useOrderNoteOrderSearch && getOrderNoteOrderSearch() != null) {
            getOrderNoteOrderSearch().appendSelect(prefix + OrderNotePP.order().pp, select);
        }
        if (!useOrderNoteUserSearch && getOrderNoteUser() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderNotePP.user().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderNoteUser());
        }
        if (useOrderNoteUserSearch && getOrderNoteUserSearch() != null) {
            getOrderNoteUserSearch().appendSelect(prefix + OrderNotePP.user().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<OrderNote> filterDataSourceFilter;
    public OAFilter<OrderNote> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<OrderNote>() {
            @Override
            public boolean isUsed(OrderNote orderNote) {
                return OrderNoteSearch.this.isUsedForDataSourceFilter(orderNote);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<OrderNote> filterCustomFilter;
    public OAFilter<OrderNote> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<OrderNote>() {
            @Override
            public boolean isUsed(OrderNote orderNote) {
                boolean b = OrderNoteSearch.this.isUsedForCustomFilter(orderNote);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(orderNote);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(OrderNote searchOrderNote) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchOrderNote.getId(), id)) return false;
        }
        if (orderNoteOrder != null) {
            if (!OACompare.isEqual(searchOrderNote.getOrder(), orderNoteOrder)) return false;
        }
        if (orderNoteUser != null) {
            if (!OACompare.isEqual(searchOrderNote.getUser(), orderNoteUser)) return false;
        }
        if (createdUseNull) {
            if (OACompare.isNotEmpty(searchOrderNote.getCreated())) return false;
        }
        else if (createdUseNotNull) {
            if (OACompare.isEmpty(searchOrderNote.getCreated())) return false;
        }
        else if (created2 != null) {
            if (!OACompare.isEqualOrBetween(searchOrderNote.getCreated(), created, created2)) return false;
        }
        if (noteUseNull) {
            if (OACompare.isNotEmpty(searchOrderNote.getNote())) return false;
        }
        else if (noteUseNotNull) {
            if (OACompare.isEmpty(searchOrderNote.getNote())) return false;
        }
        else if (note != null) {
            String s = getNote();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchOrderNote.getNote(), s)) return false;
        }
        if (useOrderNoteOrderSearch && getOrderNoteOrderSearch() != null) {
            Order order = (Order) searchOrderNote.getProperty(OrderNotePP.order().pp);
            if (order == null) return false;
            if (!getOrderNoteOrderSearch().isUsedForDataSourceFilter(order)) return false;
        }
        if (useOrderNoteUserSearch && getOrderNoteUserSearch() != null) {
            User user = (User) searchOrderNote.getProperty(OrderNotePP.user().pp);
            if (user == null) return false;
            if (!getOrderNoteUserSearch().isUsedForDataSourceFilter(user)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(OrderNote searchOrderNote) {
        return true;
    }
}
