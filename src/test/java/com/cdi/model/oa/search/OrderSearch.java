// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;


@OAClass(useDataSource=false, localOnly=true)
public class OrderSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(OrderSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Date = "Date";
    public static final String P_Date2 = "Date2";
    public static final String P_DateUseNull = "DateUseNull";
    public static final String P_DateUseNotNull = "DateUseNotNull";
    public static final String P_SalesOrderNumber = "SalesOrderNumber";
    public static final String P_TotalPrice = "TotalPrice";
    public static final String P_TotalPrice2 = "TotalPrice2";
    public static final String P_DateCompleted = "DateCompleted";
    public static final String P_DateCompleted2 = "DateCompleted2";
    public static final String P_DateCompletedUseNull = "DateCompletedUseNull";
    public static final String P_DateCompletedUseNotNull = "DateCompletedUseNotNull";
    public static final String P_CustExpectedDate = "CustExpectedDate";
    public static final String P_InspectByDate = "InspectByDate";
    public static final String P_CustomerAddress = "CustomerAddress";
    public static final String P_CustomerCity = "CustomerCity";
    public static final String P_CustomerState = "CustomerState";
    public static final String P_CustomerZip = "CustomerZip";
    public static final String P_SalesOrderSalesPersonUser = "SalesOrderSalesPersonUser";
    public static final String P_UseSalesOrderSalesPersonUserSearch = "UseSalesOrderSalesPersonUserSearch";
    public static final String P_OrderItemItem = "OrderItemItem";
    public static final String P_UseOrderItemItemSearch = "UseOrderItemItemSearch";
    public static final String P_OrderCustomer = "OrderCustomer";
    public static final String P_UseOrderCustomerSearch = "UseOrderCustomerSearch";
    public static final String P_OrderOrderContacts = "OrderOrderContacts";
    public static final String P_UseOrderOrderContactsSearch = "UseOrderOrderContactsSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected OADate date;
    protected OADate date2;
    protected boolean dateUseNull;
    protected boolean dateUseNotNull;
    protected String salesOrderNumber;
    protected double totalPrice;
    protected double totalPrice2;
    protected OADate dateCompleted;
    protected OADate dateCompleted2;
    protected boolean dateCompletedUseNull;
    protected boolean dateCompletedUseNotNull;
    protected OADate custExpectedDate;
    protected OADate inspectByDate;
    protected String customerAddress;
    protected String customerCity;
    protected String customerState;
    protected String customerZip;
    protected User salesOrderSalesPersonUser;
    protected boolean useSalesOrderSalesPersonUserSearch;
    protected UserSearch searchSalesOrderSalesPersonUser;
    protected Item orderItemItem;
    protected boolean useOrderItemItemSearch;
    protected ItemSearch searchOrderItemItem;
    protected Customer orderCustomer;
    protected boolean useOrderCustomerSearch;
    protected CustomerSearch searchOrderCustomer;
    protected OrderContact orderOrderContacts;
    protected boolean useOrderOrderContactsSearch;
    protected OrderContactSearch searchOrderOrderContacts;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_id = 1;
    public static final int SORTBYTYPE_date = 2;
    public static final int SORTBYTYPE_salesOrderNumber = 3;
    public static final int SORTBYTYPE_customerNumber = 4;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Id");
        hubSortByType.add("Date");
        hubSortByType.add("Sales Order Number");
        hubSortByType.add("Customer Number");
    }

    public OrderSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public OADate getDate() {
        return date;
    }
    public void setDate(OADate newValue) {
        OADate old = date;
        fireBeforePropertyChange(P_Date, old, newValue);
        this.date = newValue;
        firePropertyChange(P_Date, old, this.date);
        if (isLoading()) return;
        if (date != null) {
            if (date2 == null) setDate2(this.date);
            else if (date.compareTo(date2) > 0) setDate2(this.date);
        }
    } 
    public OADate getDate2() {
        return date2;
    }
    public void setDate2(OADate newValue) {
        OADate old = date2;
        fireBeforePropertyChange(P_Date2, old, newValue);
        this.date2 = newValue;
        firePropertyChange(P_Date2, old, this.date2);
        if (date != null && date2 != null) {
            if (date.compareTo(date2) > 0) setDate(this.date2);
        }
    }
    public boolean getDateUseNull() {
        return dateUseNull;
    }
    public void setDateUseNull(boolean newValue) {
        boolean old = this.dateUseNull;
        this.dateUseNull = newValue;
        firePropertyChange(P_DateUseNull, old, this.dateUseNull);
    }
    public boolean getDateUseNotNull() {
        return dateUseNotNull;
    }
    public void setDateUseNotNull(boolean newValue) {
        boolean old = this.dateUseNotNull;
        this.dateUseNotNull = newValue;
        firePropertyChange(P_DateUseNotNull, old, this.dateUseNotNull);
    }

    public String getSalesOrderNumber() {
        return salesOrderNumber;
    }
    public void setSalesOrderNumber(String newValue) {
        String old = salesOrderNumber;
        fireBeforePropertyChange(P_SalesOrderNumber, old, newValue);
        this.salesOrderNumber = newValue;
        firePropertyChange(P_SalesOrderNumber, old, this.salesOrderNumber);
    }
      

    public double getTotalPrice() {
        return totalPrice;
    }
    public void setTotalPrice(double newValue) {
        double old = totalPrice;
        fireBeforePropertyChange(P_TotalPrice, old, newValue);
        this.totalPrice = newValue;
        firePropertyChange(P_TotalPrice, old, this.totalPrice);
        if (isLoading()) return;
        if (totalPrice > totalPrice2) setTotalPrice2(this.totalPrice);
    } 
    public double getTotalPrice2() {
        return totalPrice2;
    }
    public void setTotalPrice2(double newValue) {
        double old = totalPrice2;
        fireBeforePropertyChange(P_TotalPrice2, old, newValue);
        this.totalPrice2 = newValue;
        firePropertyChange(P_TotalPrice2, old, this.totalPrice2);
        if (isLoading()) return;
        if (totalPrice > totalPrice2) setTotalPrice(this.totalPrice2);
    }

    public OADate getDateCompleted() {
        return dateCompleted;
    }
    public void setDateCompleted(OADate newValue) {
        OADate old = dateCompleted;
        fireBeforePropertyChange(P_DateCompleted, old, newValue);
        this.dateCompleted = newValue;
        firePropertyChange(P_DateCompleted, old, this.dateCompleted);
        if (isLoading()) return;
        if (dateCompleted != null) {
            if (dateCompleted2 == null) setDateCompleted2(this.dateCompleted);
            else if (dateCompleted.compareTo(dateCompleted2) > 0) setDateCompleted2(this.dateCompleted);
        }
    } 
    public OADate getDateCompleted2() {
        return dateCompleted2;
    }
    public void setDateCompleted2(OADate newValue) {
        OADate old = dateCompleted2;
        fireBeforePropertyChange(P_DateCompleted2, old, newValue);
        this.dateCompleted2 = newValue;
        firePropertyChange(P_DateCompleted2, old, this.dateCompleted2);
        if (dateCompleted != null && dateCompleted2 != null) {
            if (dateCompleted.compareTo(dateCompleted2) > 0) setDateCompleted(this.dateCompleted2);
        }
    }
    public boolean getDateCompletedUseNull() {
        return dateCompletedUseNull;
    }
    public void setDateCompletedUseNull(boolean newValue) {
        boolean old = this.dateCompletedUseNull;
        this.dateCompletedUseNull = newValue;
        firePropertyChange(P_DateCompletedUseNull, old, this.dateCompletedUseNull);
    }
    public boolean getDateCompletedUseNotNull() {
        return dateCompletedUseNotNull;
    }
    public void setDateCompletedUseNotNull(boolean newValue) {
        boolean old = this.dateCompletedUseNotNull;
        this.dateCompletedUseNotNull = newValue;
        firePropertyChange(P_DateCompletedUseNotNull, old, this.dateCompletedUseNotNull);
    }

    public OADate getCustExpectedDate() {
        return custExpectedDate;
    }
    public void setCustExpectedDate(OADate newValue) {
        OADate old = custExpectedDate;
        fireBeforePropertyChange(P_CustExpectedDate, old, newValue);
        this.custExpectedDate = newValue;
        firePropertyChange(P_CustExpectedDate, old, this.custExpectedDate);
    }
      

    public OADate getInspectByDate() {
        return inspectByDate;
    }
    public void setInspectByDate(OADate newValue) {
        OADate old = inspectByDate;
        fireBeforePropertyChange(P_InspectByDate, old, newValue);
        this.inspectByDate = newValue;
        firePropertyChange(P_InspectByDate, old, this.inspectByDate);
    }
      

    public String getCustomerAddress() {
        return customerAddress;
    }
    public void setCustomerAddress(String newValue) {
        String old = customerAddress;
        fireBeforePropertyChange(P_CustomerAddress, old, newValue);
        this.customerAddress = newValue;
        firePropertyChange(P_CustomerAddress, old, this.customerAddress);
    }
      

    public String getCustomerCity() {
        return customerCity;
    }
    public void setCustomerCity(String newValue) {
        String old = customerCity;
        fireBeforePropertyChange(P_CustomerCity, old, newValue);
        this.customerCity = newValue;
        firePropertyChange(P_CustomerCity, old, this.customerCity);
    }
      

    public String getCustomerState() {
        return customerState;
    }
    public void setCustomerState(String newValue) {
        String old = customerState;
        fireBeforePropertyChange(P_CustomerState, old, newValue);
        this.customerState = newValue;
        firePropertyChange(P_CustomerState, old, this.customerState);
    }
      

    public String getCustomerZip() {
        return customerZip;
    }
    public void setCustomerZip(String newValue) {
        String old = customerZip;
        fireBeforePropertyChange(P_CustomerZip, old, newValue);
        this.customerZip = newValue;
        firePropertyChange(P_CustomerZip, old, this.customerZip);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public User getSalesOrderSalesPersonUser() {
        if (salesOrderSalesPersonUser == null) {
            salesOrderSalesPersonUser = (User) getObject(P_SalesOrderSalesPersonUser);
        }
        return salesOrderSalesPersonUser;
    }
    public void setSalesOrderSalesPersonUser(User newValue) {
        User old = this.salesOrderSalesPersonUser;
        this.salesOrderSalesPersonUser = newValue;
        firePropertyChange(P_SalesOrderSalesPersonUser, old, this.salesOrderSalesPersonUser);
    }
    public boolean getUseSalesOrderSalesPersonUserSearch() {
        return useSalesOrderSalesPersonUserSearch;
    }
    public void setUseSalesOrderSalesPersonUserSearch(boolean newValue) {
        boolean old = this.useSalesOrderSalesPersonUserSearch;
        this.useSalesOrderSalesPersonUserSearch = newValue;
        firePropertyChange(P_UseSalesOrderSalesPersonUserSearch, old, this.useSalesOrderSalesPersonUserSearch);
    }
    public UserSearch getSalesOrderSalesPersonUserSearch() {
        return this.searchSalesOrderSalesPersonUser;
    }
    public void setSalesOrderSalesPersonUserSearch(UserSearch newValue) {
        this.searchSalesOrderSalesPersonUser = newValue;
    }

    @OAOne
    public Item getOrderItemItem() {
        if (orderItemItem == null) {
            orderItemItem = (Item) getObject(P_OrderItemItem);
        }
        return orderItemItem;
    }
    public void setOrderItemItem(Item newValue) {
        Item old = this.orderItemItem;
        this.orderItemItem = newValue;
        firePropertyChange(P_OrderItemItem, old, this.orderItemItem);
    }
    public boolean getUseOrderItemItemSearch() {
        return useOrderItemItemSearch;
    }
    public void setUseOrderItemItemSearch(boolean newValue) {
        boolean old = this.useOrderItemItemSearch;
        this.useOrderItemItemSearch = newValue;
        firePropertyChange(P_UseOrderItemItemSearch, old, this.useOrderItemItemSearch);
    }
    public ItemSearch getOrderItemItemSearch() {
        return this.searchOrderItemItem;
    }
    public void setOrderItemItemSearch(ItemSearch newValue) {
        this.searchOrderItemItem = newValue;
    }

    @OAOne
    public Customer getOrderCustomer() {
        if (orderCustomer == null) {
            orderCustomer = (Customer) getObject(P_OrderCustomer);
        }
        return orderCustomer;
    }
    public void setOrderCustomer(Customer newValue) {
        Customer old = this.orderCustomer;
        this.orderCustomer = newValue;
        firePropertyChange(P_OrderCustomer, old, this.orderCustomer);
    }
    public boolean getUseOrderCustomerSearch() {
        return useOrderCustomerSearch;
    }
    public void setUseOrderCustomerSearch(boolean newValue) {
        boolean old = this.useOrderCustomerSearch;
        this.useOrderCustomerSearch = newValue;
        firePropertyChange(P_UseOrderCustomerSearch, old, this.useOrderCustomerSearch);
    }
    public CustomerSearch getOrderCustomerSearch() {
        return this.searchOrderCustomer;
    }
    public void setOrderCustomerSearch(CustomerSearch newValue) {
        this.searchOrderCustomer = newValue;
    }

    @OAOne
    public OrderContact getOrderOrderContacts() {
        if (orderOrderContacts == null) {
            orderOrderContacts = (OrderContact) getObject(P_OrderOrderContacts);
        }
        return orderOrderContacts;
    }
    public void setOrderOrderContacts(OrderContact newValue) {
        OrderContact old = this.orderOrderContacts;
        this.orderOrderContacts = newValue;
        firePropertyChange(P_OrderOrderContacts, old, this.orderOrderContacts);
    }
    public boolean getUseOrderOrderContactsSearch() {
        return useOrderOrderContactsSearch;
    }
    public void setUseOrderOrderContactsSearch(boolean newValue) {
        boolean old = this.useOrderOrderContactsSearch;
        this.useOrderOrderContactsSearch = newValue;
        firePropertyChange(P_UseOrderOrderContactsSearch, old, this.useOrderOrderContactsSearch);
    }
    public OrderContactSearch getOrderOrderContactsSearch() {
        return this.searchOrderOrderContacts;
    }
    public void setOrderOrderContactsSearch(OrderContactSearch newValue) {
        this.searchOrderOrderContacts = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setDate(null);
        setDate2(null);
        setDateUseNull(false);
        setDateUseNotNull(false);
        setSalesOrderNumber(null);
        setTotalPrice(0);
        setNull(P_TotalPrice);
        setTotalPrice2(0);
        setNull(P_TotalPrice2);
        setDateCompleted(null);
        setDateCompleted2(null);
        setDateCompletedUseNull(false);
        setDateCompletedUseNotNull(false);
        setCustExpectedDate(null);
        setInspectByDate(null);
        setCustomerAddress(null);
        setCustomerCity(null);
        setCustomerState(null);
        setCustomerZip(null);
        setSalesOrderSalesPersonUser(null);
        setUseSalesOrderSalesPersonUserSearch(false);
        setOrderItemItem(null);
        setUseOrderItemItemSearch(false);
        setOrderCustomer(null);
        setUseOrderCustomerSearch(false);
        setOrderOrderContacts(null);
        setUseOrderOrderContactsSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getDate() != null) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNotNull()) return true;
        if (getSalesOrderNumber() != null) return true;

        if (getDateCompleted() != null) return true;
        if (getDateCompletedUseNull()) return true;
        if (getDateCompletedUseNull()) return true;
        if (getDateCompletedUseNull()) return true;
        if (getDateCompletedUseNotNull()) return true;
        if (getCustExpectedDate() != null) return true;
        if (getInspectByDate() != null) return true;
        if (getCustomerAddress() != null) return true;
        if (getCustomerCity() != null) return true;
        if (getCustomerState() != null) return true;
        if (getCustomerZip() != null) return true;
        if (getSalesOrderSalesPersonUser() != null) return true;
        if (getUseSalesOrderSalesPersonUserSearch()) return true;
        if (getOrderItemItem() != null) return true;
        if (getUseOrderItemItemSearch()) return true;
        if (getOrderCustomer() != null) return true;
        if (getUseOrderCustomerSearch()) return true;
        if (getOrderOrderContacts() != null) return true;
        if (getUseOrderOrderContactsSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Order> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Order> f = new OAQueryFilter<Order>(Order.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Order> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Order> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Order> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_id: sortOrder = Order.P_Id; break;
            case SORTBYTYPE_date: sortOrder = Order.P_Date; break;
            case SORTBYTYPE_salesOrderNumber: sortOrder = Order.P_SalesOrderNumber; break;
            case SORTBYTYPE_customerNumber: sortOrder = OrderPP.customer().customerNumber(); break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (dateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_Date + " = null";
        }
        else if (dateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_Date + " != null";
        }
        else if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += Order.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + Order.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += Order.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (!OAString.isEmpty(this.salesOrderNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesOrderNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Order.P_SalesOrderNumber + " LIKE ?";
            }
            else {
                sql += Order.P_SalesOrderNumber + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_TotalPrice)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_TotalPrice2) && totalPrice != totalPrice2) {
                sql += Order.P_TotalPrice + " >= ?";
                args = OAArray.add(Object.class, args, getTotalPrice());
                sql += " AND " + Order.P_TotalPrice + " <= ?";
                args = OAArray.add(Object.class, args, getTotalPrice2());
            }
            else {
                sql += Order.P_TotalPrice + " = ?";
                args = OAArray.add(Object.class, args, getTotalPrice());
            }
        }
        if (dateCompletedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_DateCompleted + " = null";
        }
        else if (dateCompletedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_DateCompleted + " != null";
        }
        else if (dateCompleted != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateCompleted2 != null && !dateCompleted.equals(dateCompleted2)) {
                sql += Order.P_DateCompleted + " >= ?";
                args = OAArray.add(Object.class, args, this.dateCompleted);
                sql += " AND " + Order.P_DateCompleted + " <= ?";
                args = OAArray.add(Object.class, args, this.dateCompleted2);
            }
            else {
                sql += Order.P_DateCompleted + " = ?";
                args = OAArray.add(Object.class, args, this.dateCompleted);
            }
        }
        if (custExpectedDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_CustExpectedDate + " = ?";
            args = OAArray.add(Object.class, args, this.custExpectedDate);
        }
        if (inspectByDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_InspectByDate + " = ?";
            args = OAArray.add(Object.class, args, this.inspectByDate);
        }
        if (!OAString.isEmpty(this.customerAddress)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerAddress.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderPP.customer().address() + " LIKE ?";
            }
            else {
                sql += OrderPP.customer().address() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.customerCity)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerCity.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderPP.customer().city() + " LIKE ?";
            }
            else {
                sql += OrderPP.customer().city() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.customerState)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerState.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderPP.customer().state() + " LIKE ?";
            }
            else {
                sql += OrderPP.customer().state() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.customerZip)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerZip.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderPP.customer().zip() + " LIKE ?";
            }
            else {
                sql += OrderPP.customer().zip() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUser() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderPP.salesOrder().salesPersonUser().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesOrderSalesPersonUser());
        }
        if (!useOrderItemItemSearch && getOrderItemItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderPP.orderItems().item().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemItem());
        }
        if (!useOrderCustomerSearch && getOrderCustomer() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderPP.customer().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderCustomer());
            finder = new OAFinder<Customer, Order>(getOrderCustomer(), Customer.P_Orders);
        }
        if (!useOrderOrderContactsSearch && getOrderOrderContacts() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OrderPP.orderContacts().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderOrderContacts());
            finder = new OAFinder<OrderContact, Order>(getOrderOrderContacts(), OrderContact.P_Order);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Order> select = new OASelect<Order>(Order.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUserSearch() != null) {
            getSalesOrderSalesPersonUserSearch().appendSelect(OrderPP.salesOrder().salesPersonUser().pp, select);
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            getOrderItemItemSearch().appendSelect(OrderPP.orderItems().item().pp, select);
        }
        if (useOrderCustomerSearch && getOrderCustomerSearch() != null) {
            getOrderCustomerSearch().appendSelect(OrderPP.customer().pp, select);
        }
        if (useOrderOrderContactsSearch && getOrderOrderContactsSearch() != null) {
            getOrderOrderContactsSearch().appendSelect(OrderPP.orderContacts().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (dateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_Date + " = null";
        }
        else if (dateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_Date + " != null";
        }
        else if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += Order.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + Order.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += Order.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (!OAString.isEmpty(this.salesOrderNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesOrderNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Order.P_SalesOrderNumber + " LIKE ?";
            }
            else {
                sql += Order.P_SalesOrderNumber + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_TotalPrice)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_TotalPrice2) && totalPrice != totalPrice2) {
                sql += Order.P_TotalPrice + " >= ?";
                args = OAArray.add(Object.class, args, getTotalPrice());
                sql += " AND " + Order.P_TotalPrice + " <= ?";
                args = OAArray.add(Object.class, args, getTotalPrice2());
            }
            else {
                sql += Order.P_TotalPrice + " = ?";
                args = OAArray.add(Object.class, args, getTotalPrice());
            }
        }
        if (dateCompletedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_DateCompleted + " = null";
        }
        else if (dateCompletedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_DateCompleted + " != null";
        }
        else if (dateCompleted != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateCompleted2 != null && !dateCompleted.equals(dateCompleted2)) {
                sql += Order.P_DateCompleted + " >= ?";
                args = OAArray.add(Object.class, args, this.dateCompleted);
                sql += " AND " + Order.P_DateCompleted + " <= ?";
                args = OAArray.add(Object.class, args, this.dateCompleted2);
            }
            else {
                sql += Order.P_DateCompleted + " = ?";
                args = OAArray.add(Object.class, args, this.dateCompleted);
            }
        }
        if (custExpectedDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_CustExpectedDate + " = ?";
            args = OAArray.add(Object.class, args, this.custExpectedDate);
        }
        if (inspectByDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Order.P_InspectByDate + " = ?";
            args = OAArray.add(Object.class, args, this.inspectByDate);
        }
        if (!OAString.isEmpty(this.customerAddress)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerAddress.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderPP.customer().address() + " LIKE ?";
            }
            else {
                sql += OrderPP.customer().address() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.customerCity)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerCity.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderPP.customer().city() + " LIKE ?";
            }
            else {
                sql += OrderPP.customer().city() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.customerState)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerState.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderPP.customer().state() + " LIKE ?";
            }
            else {
                sql += OrderPP.customer().state() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.customerZip)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerZip.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += OrderPP.customer().zip() + " LIKE ?";
            }
            else {
                sql += OrderPP.customer().zip() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUser() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderPP.salesOrder().salesPersonUser().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesOrderSalesPersonUser());
        }
        if (useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUserSearch() != null) {
            getSalesOrderSalesPersonUserSearch().appendSelect(prefix + OrderPP.salesOrder().salesPersonUser().pp, select);
        }
        if (!useOrderItemItemSearch && getOrderItemItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderPP.orderItems().item().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemItem());
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            getOrderItemItemSearch().appendSelect(prefix + OrderPP.orderItems().item().pp, select);
        }
        if (!useOrderCustomerSearch && getOrderCustomer() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderPP.customer().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderCustomer());
        }
        if (useOrderCustomerSearch && getOrderCustomerSearch() != null) {
            getOrderCustomerSearch().appendSelect(prefix + OrderPP.customer().pp, select);
        }
        if (!useOrderOrderContactsSearch && getOrderOrderContacts() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + OrderPP.orderContacts().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderOrderContacts());
        }
        if (useOrderOrderContactsSearch && getOrderOrderContactsSearch() != null) {
            getOrderOrderContactsSearch().appendSelect(prefix + OrderPP.orderContacts().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Order> filterDataSourceFilter;
    public OAFilter<Order> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Order>() {
            @Override
            public boolean isUsed(Order order) {
                return OrderSearch.this.isUsedForDataSourceFilter(order);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Order> filterCustomFilter;
    public OAFilter<Order> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Order>() {
            @Override
            public boolean isUsed(Order order) {
                boolean b = OrderSearch.this.isUsedForCustomFilter(order);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(order);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Order searchOrder) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchOrder.getId(), id)) return false;
        }
        if (dateUseNull) {
            if (OACompare.isNotEmpty(searchOrder.getDate())) return false;
        }
        else if (dateUseNotNull) {
            if (OACompare.isEmpty(searchOrder.getDate())) return false;
        }
        else if (date2 != null) {
            if (!OACompare.isEqualOrBetween(searchOrder.getDate(), date, date2)) return false;
        }
        if (salesOrderNumber != null) {
            String s = getSalesOrderNumber();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchOrder.getSalesOrderNumber(), s)) return false;
        }
        if (!useSalesOrderSalesPersonUserSearch && salesOrderSalesPersonUser != null) {
            if (!OACompare.isEqual(searchOrder.getProperty(OrderPP.salesOrder().salesPersonUser().pp), salesOrderSalesPersonUser)) return false;
        }
        if (this.orderItemItem != null) {
            OAFinder<Order, OrderItem> finder = new OAFinder<Order, OrderItem>(OrderPP.orderItems().pp);
             if (orderItemItem != null) {
                finder.addEqualFilter(OrderItemPP.item().pp, getOrderItemItem());
            }
            if (finder.findFirst(searchOrder) == null) return false;
        }
        if (!isNull(P_TotalPrice2)) {
            if (!OACompare.isEqualOrBetween(searchOrder.getTotalPrice(), totalPrice, totalPrice2)) return false;
        }
        if (orderCustomer != null) {
            if (!OACompare.isEqual(searchOrder.getCustomer(), orderCustomer)) return false;
        }
        if (orderOrderContacts != null) {
            if (!OACompare.isIn(orderOrderContacts, searchOrder.getOrderContacts())) return false;
        }
        if (dateCompletedUseNull) {
            if (OACompare.isNotEmpty(searchOrder.getDateCompleted())) return false;
        }
        else if (dateCompletedUseNotNull) {
            if (OACompare.isEmpty(searchOrder.getDateCompleted())) return false;
        }
        else if (dateCompleted2 != null) {
            if (!OACompare.isEqualOrBetween(searchOrder.getDateCompleted(), dateCompleted, dateCompleted2)) return false;
        }
        if (custExpectedDate != null) {
            if (!OACompare.isEqual(searchOrder.getCustExpectedDate(), custExpectedDate)) return false;
        }
        if (inspectByDate != null) {
            if (!OACompare.isEqual(searchOrder.getInspectByDate(), inspectByDate)) return false;
        }
        if (customerAddress != null) {
            String s = getCustomerAddress();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchOrder.getProperty(OrderPP.customer().address()), s)) return false;
        }
        if (customerCity != null) {
            String s = getCustomerCity();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchOrder.getProperty(OrderPP.customer().city()), s)) return false;
        }
        if (customerState != null) {
            String s = getCustomerState();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchOrder.getProperty(OrderPP.customer().state()), s)) return false;
        }
        if (customerZip != null) {
            String s = getCustomerZip();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchOrder.getProperty(OrderPP.customer().zip()), s)) return false;
        }
        if (useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUserSearch() != null) {
            User user = (User) searchOrder.getProperty(OrderPP.salesOrder().salesPersonUser().pp);
            if (user == null) return false;
            if (!getSalesOrderSalesPersonUserSearch().isUsedForDataSourceFilter(user)) return false;
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            OAFinder<Order, Item> finder = new OAFinder<Order, Item>(OrderPP.orderItems().item().pp) {
                @Override
                protected boolean isUsed(Item item) {
                    return getOrderItemItemSearch().isUsedForDataSourceFilter(item);
                }
            };
            if (finder.findFirst(searchOrder) == null) return false;;
        }
        if (useOrderCustomerSearch && getOrderCustomerSearch() != null) {
            Customer customer = (Customer) searchOrder.getProperty(OrderPP.customer().pp);
            if (customer == null) return false;
            if (!getOrderCustomerSearch().isUsedForDataSourceFilter(customer)) return false;
        }
        if (useOrderOrderContactsSearch && getOrderOrderContactsSearch() != null) {
            OrderContact orderContact = (OrderContact) searchOrder.getProperty(OrderPP.orderContacts().pp);
            if (orderContact == null) return false;
            if (!getOrderOrderContactsSearch().isUsedForDataSourceFilter(orderContact)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Order searchOrder) {
        return true;
    }
}
