// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class PhoneSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(PhoneSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Id2 = "Id2";
    public static final String P_Number = "Number";
    public static final String P_NumberUseNull = "NumberUseNull";
    public static final String P_NumberUseNotNull = "NumberUseNotNull";
    public static final String P_PhoneContact = "PhoneContact";
    public static final String P_UsePhoneContactSearch = "UsePhoneContactSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected int id2;
    protected String number;
    protected boolean numberUseNull;
    protected boolean numberUseNotNull;
    protected Contact phoneContact;
    protected boolean usePhoneContactSearch;
    protected ContactSearch searchPhoneContact;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_number = 1;
    public static final int SORTBYTYPE_name = 2;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Number");
        hubSortByType.add("Name");
    }

    public PhoneSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
        if (isLoading()) return;
        if (id > id2) setId2(this.id);
    } 
    public int getId2() {
        return id2;
    }
    public void setId2(int newValue) {
        int old = id2;
        fireBeforePropertyChange(P_Id2, old, newValue);
        this.id2 = newValue;
        firePropertyChange(P_Id2, old, this.id2);
        if (isLoading()) return;
        if (id > id2) setId(this.id2);
    }

    public String getNumber() {
        return number;
    }
    public void setNumber(String newValue) {
        String old = number;
        fireBeforePropertyChange(P_Number, old, newValue);
        this.number = newValue;
        firePropertyChange(P_Number, old, this.number);
    }
      
    public boolean getNumberUseNull() {
        return numberUseNull;
    }
    public void setNumberUseNull(boolean newValue) {
        boolean old = this.numberUseNull;
        this.numberUseNull = newValue;
        firePropertyChange(P_NumberUseNull, old, this.numberUseNull);
    }
    public boolean getNumberUseNotNull() {
        return numberUseNotNull;
    }
    public void setNumberUseNotNull(boolean newValue) {
        boolean old = this.numberUseNotNull;
        this.numberUseNotNull = newValue;
        firePropertyChange(P_NumberUseNotNull, old, this.numberUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public Contact getPhoneContact() {
        if (phoneContact == null) {
            phoneContact = (Contact) getObject(P_PhoneContact);
        }
        return phoneContact;
    }
    public void setPhoneContact(Contact newValue) {
        Contact old = this.phoneContact;
        this.phoneContact = newValue;
        firePropertyChange(P_PhoneContact, old, this.phoneContact);
    }
    public boolean getUsePhoneContactSearch() {
        return usePhoneContactSearch;
    }
    public void setUsePhoneContactSearch(boolean newValue) {
        boolean old = this.usePhoneContactSearch;
        this.usePhoneContactSearch = newValue;
        firePropertyChange(P_UsePhoneContactSearch, old, this.usePhoneContactSearch);
    }
    public ContactSearch getPhoneContactSearch() {
        return this.searchPhoneContact;
    }
    public void setPhoneContactSearch(ContactSearch newValue) {
        this.searchPhoneContact = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setId2(0);
        setNull(P_Id2);
        setNumber(null);
        setNumberUseNull(false);
        setNumberUseNotNull(false);
        setPhoneContact(null);
        setUsePhoneContactSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {

        if (getNumber() != null) return true;
        if (getNumberUseNull()) return true;if (getNumberUseNotNull()) return true;
        if (getNumberUseNull()) return true;
        if (getNumberUseNotNull()) return true;
        if (getPhoneContact() != null) return true;
        if (getUsePhoneContactSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Phone> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Phone> f = new OAQueryFilter<Phone>(Phone.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Phone> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Phone> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Phone> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_number: sortOrder = Phone.P_Number; break;
            case SORTBYTYPE_name: sortOrder = PhonePP.contact().name(); break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += Phone.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + Phone.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += Phone.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (numberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Phone.P_Number + " = null OR " + Phone.P_Number + " == '')";
        }
        else if (numberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Phone.P_Number + " != null";
        }
        else if (!OAString.isEmpty(this.number)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.number.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Phone.P_Number + " LIKE ?";
            }
            else {
                sql += Phone.P_Number + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!usePhoneContactSearch && getPhoneContact() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += PhonePP.contact().pp + " = ?";
            args = OAArray.add(Object.class, args, getPhoneContact());
            finder = new OAFinder<Contact, Phone>(getPhoneContact(), Contact.P_Phones);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Phone> select = new OASelect<Phone>(Phone.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (usePhoneContactSearch && getPhoneContactSearch() != null) {
            getPhoneContactSearch().appendSelect(PhonePP.contact().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += Phone.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + Phone.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += Phone.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (numberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Phone.P_Number + " = null OR " + Phone.P_Number + " == '')";
        }
        else if (numberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Phone.P_Number + " != null";
        }
        else if (!OAString.isEmpty(this.number)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.number.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Phone.P_Number + " LIKE ?";
            }
            else {
                sql += Phone.P_Number + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!usePhoneContactSearch && getPhoneContact() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + PhonePP.contact().pp + " = ?";
            args = OAArray.add(Object.class, args, getPhoneContact());
        }
        if (usePhoneContactSearch && getPhoneContactSearch() != null) {
            getPhoneContactSearch().appendSelect(prefix + PhonePP.contact().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Phone> filterDataSourceFilter;
    public OAFilter<Phone> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Phone>() {
            @Override
            public boolean isUsed(Phone phone) {
                return PhoneSearch.this.isUsedForDataSourceFilter(phone);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Phone> filterCustomFilter;
    public OAFilter<Phone> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Phone>() {
            @Override
            public boolean isUsed(Phone phone) {
                boolean b = PhoneSearch.this.isUsedForCustomFilter(phone);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(phone);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Phone searchPhone) {
        if (!isNull(P_Id2)) {
            if (!OACompare.isEqualOrBetween(searchPhone.getId(), id, id2)) return false;
        }
        if (numberUseNull) {
            if (OACompare.isNotEmpty(searchPhone.getNumber())) return false;
        }
        else if (numberUseNotNull) {
            if (OACompare.isEmpty(searchPhone.getNumber())) return false;
        }
        else if (number != null) {
            String s = getNumber();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchPhone.getNumber(), s)) return false;
        }
        if (phoneContact != null) {
            if (!OACompare.isEqual(searchPhone.getContact(), phoneContact)) return false;
        }
        if (usePhoneContactSearch && getPhoneContactSearch() != null) {
            Contact contact = (Contact) searchPhone.getProperty(PhonePP.contact().pp);
            if (contact == null) return false;
            if (!getPhoneContactSearch().isUsedForDataSourceFilter(contact)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Phone searchPhone) {
        return true;
    }
}
