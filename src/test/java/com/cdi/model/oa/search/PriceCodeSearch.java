// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class PriceCodeSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(PriceCodeSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_Rate = "Rate";
    public static final String P_Rate2 = "Rate2";
    public static final String P_Texture = "Texture";
    public static final String P_TextureUseNull = "TextureUseNull";
    public static final String P_TextureUseNotNull = "TextureUseNotNull";
    public static final String P_Color = "Color";
    public static final String P_ColorUseNull = "ColorUseNull";
    public static final String P_ColorUseNotNull = "ColorUseNotNull";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected double rate;
    protected double rate2;
    protected String texture;
    protected boolean textureUseNull;
    protected boolean textureUseNotNull;
    protected String color;
    protected boolean colorUseNull;
    protected boolean colorUseNotNull;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_rate = 1;
    public static final int SORTBYTYPE_name = 2;
    public static final int SORTBYTYPE_itemCode = 3;
    public static final int SORTBYTYPE_color = 4;
    public static final int SORTBYTYPE_texture = 5;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Rate");
        hubSortByType.add("Name");
        hubSortByType.add("Item Code");
        hubSortByType.add("Color");
        hubSortByType.add("Texture");
    }

    public PriceCodeSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public double getRate() {
        return rate;
    }
    public void setRate(double newValue) {
        double old = rate;
        fireBeforePropertyChange(P_Rate, old, newValue);
        this.rate = newValue;
        firePropertyChange(P_Rate, old, this.rate);
        if (isLoading()) return;
        if (rate > rate2) setRate2(this.rate);
    } 
    public double getRate2() {
        return rate2;
    }
    public void setRate2(double newValue) {
        double old = rate2;
        fireBeforePropertyChange(P_Rate2, old, newValue);
        this.rate2 = newValue;
        firePropertyChange(P_Rate2, old, this.rate2);
        if (isLoading()) return;
        if (rate > rate2) setRate(this.rate2);
    }

    public String getTexture() {
        return texture;
    }
    public void setTexture(String newValue) {
        String old = texture;
        fireBeforePropertyChange(P_Texture, old, newValue);
        this.texture = newValue;
        firePropertyChange(P_Texture, old, this.texture);
    }
      
    public boolean getTextureUseNull() {
        return textureUseNull;
    }
    public void setTextureUseNull(boolean newValue) {
        boolean old = this.textureUseNull;
        this.textureUseNull = newValue;
        firePropertyChange(P_TextureUseNull, old, this.textureUseNull);
    }
    public boolean getTextureUseNotNull() {
        return textureUseNotNull;
    }
    public void setTextureUseNotNull(boolean newValue) {
        boolean old = this.textureUseNotNull;
        this.textureUseNotNull = newValue;
        firePropertyChange(P_TextureUseNotNull, old, this.textureUseNotNull);
    }

    public String getColor() {
        return color;
    }
    public void setColor(String newValue) {
        String old = color;
        fireBeforePropertyChange(P_Color, old, newValue);
        this.color = newValue;
        firePropertyChange(P_Color, old, this.color);
    }
      
    public boolean getColorUseNull() {
        return colorUseNull;
    }
    public void setColorUseNull(boolean newValue) {
        boolean old = this.colorUseNull;
        this.colorUseNull = newValue;
        firePropertyChange(P_ColorUseNull, old, this.colorUseNull);
    }
    public boolean getColorUseNotNull() {
        return colorUseNotNull;
    }
    public void setColorUseNotNull(boolean newValue) {
        boolean old = this.colorUseNotNull;
        this.colorUseNotNull = newValue;
        firePropertyChange(P_ColorUseNotNull, old, this.colorUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setRate(0);
        setNull(P_Rate);
        setRate2(0);
        setNull(P_Rate2);
        setTexture(null);
        setTextureUseNull(false);
        setTextureUseNotNull(false);
        setColor(null);
        setColorUseNull(false);
        setColorUseNotNull(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;

        if (getTexture() != null) return true;
        if (getTextureUseNull()) return true;if (getTextureUseNotNull()) return true;
        if (getTextureUseNull()) return true;
        if (getTextureUseNotNull()) return true;
        if (getColor() != null) return true;
        if (getColorUseNull()) return true;if (getColorUseNotNull()) return true;
        if (getColorUseNull()) return true;
        if (getColorUseNotNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<PriceCode> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<PriceCode> f = new OAQueryFilter<PriceCode>(PriceCode.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<PriceCode> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<PriceCode> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<PriceCode> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_rate: sortOrder = PriceCode.P_Rate; break;
            case SORTBYTYPE_name: sortOrder = PriceCode.P_Name; break;
            case SORTBYTYPE_itemCode: sortOrder = PriceCode.P_ItemCode; break;
            case SORTBYTYPE_color: sortOrder = PriceCode.P_Color; break;
            case SORTBYTYPE_texture: sortOrder = PriceCode.P_Texture; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += PriceCode.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + PriceCode.P_Name + " = null OR " + PriceCode.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += PriceCode.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += PriceCode.P_Name + " LIKE ?";
            }
            else {
                sql += PriceCode.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_Rate)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Rate2) && rate != rate2) {
                sql += PriceCode.P_Rate + " >= ?";
                args = OAArray.add(Object.class, args, getRate());
                sql += " AND " + PriceCode.P_Rate + " <= ?";
                args = OAArray.add(Object.class, args, getRate2());
            }
            else {
                sql += PriceCode.P_Rate + " = ?";
                args = OAArray.add(Object.class, args, getRate());
            }
        }
        if (textureUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + PriceCode.P_Texture + " = null OR " + PriceCode.P_Texture + " == '')";
        }
        else if (textureUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += PriceCode.P_Texture + " != null";
        }
        else if (!OAString.isEmpty(this.texture)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.texture.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += PriceCode.P_Texture + " LIKE ?";
            }
            else {
                sql += PriceCode.P_Texture + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (colorUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + PriceCode.P_Color + " = null OR " + PriceCode.P_Color + " == '')";
        }
        else if (colorUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += PriceCode.P_Color + " != null";
        }
        else if (!OAString.isEmpty(this.color)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.color.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += PriceCode.P_Color + " LIKE ?";
            }
            else {
                sql += PriceCode.P_Color + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<PriceCode> select = new OASelect<PriceCode>(PriceCode.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += PriceCode.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + PriceCode.P_Name + " = null OR " + PriceCode.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += PriceCode.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += PriceCode.P_Name + " LIKE ?";
            }
            else {
                sql += PriceCode.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_Rate)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Rate2) && rate != rate2) {
                sql += PriceCode.P_Rate + " >= ?";
                args = OAArray.add(Object.class, args, getRate());
                sql += " AND " + PriceCode.P_Rate + " <= ?";
                args = OAArray.add(Object.class, args, getRate2());
            }
            else {
                sql += PriceCode.P_Rate + " = ?";
                args = OAArray.add(Object.class, args, getRate());
            }
        }
        if (textureUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + PriceCode.P_Texture + " = null OR " + PriceCode.P_Texture + " == '')";
        }
        else if (textureUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += PriceCode.P_Texture + " != null";
        }
        else if (!OAString.isEmpty(this.texture)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.texture.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += PriceCode.P_Texture + " LIKE ?";
            }
            else {
                sql += PriceCode.P_Texture + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (colorUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + PriceCode.P_Color + " = null OR " + PriceCode.P_Color + " == '')";
        }
        else if (colorUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += PriceCode.P_Color + " != null";
        }
        else if (!OAString.isEmpty(this.color)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.color.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += PriceCode.P_Color + " LIKE ?";
            }
            else {
                sql += PriceCode.P_Color + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        select.add(sql, args);
    }

    private OAFilter<PriceCode> filterDataSourceFilter;
    public OAFilter<PriceCode> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<PriceCode>() {
            @Override
            public boolean isUsed(PriceCode priceCode) {
                return PriceCodeSearch.this.isUsedForDataSourceFilter(priceCode);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<PriceCode> filterCustomFilter;
    public OAFilter<PriceCode> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<PriceCode>() {
            @Override
            public boolean isUsed(PriceCode priceCode) {
                boolean b = PriceCodeSearch.this.isUsedForCustomFilter(priceCode);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(priceCode);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(PriceCode searchPriceCode) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchPriceCode.getId(), id)) return false;
        }
        if (nameUseNull) {
            if (OACompare.isNotEmpty(searchPriceCode.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(searchPriceCode.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchPriceCode.getName(), s)) return false;
        }
        if (!isNull(P_Rate2)) {
            if (!OACompare.isEqualOrBetween(searchPriceCode.getRate(), rate, rate2)) return false;
        }
        if (textureUseNull) {
            if (OACompare.isNotEmpty(searchPriceCode.getTexture())) return false;
        }
        else if (textureUseNotNull) {
            if (OACompare.isEmpty(searchPriceCode.getTexture())) return false;
        }
        else if (texture != null) {
            String s = getTexture();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchPriceCode.getTexture(), s)) return false;
        }
        if (colorUseNull) {
            if (OACompare.isNotEmpty(searchPriceCode.getColor())) return false;
        }
        else if (colorUseNotNull) {
            if (OACompare.isEmpty(searchPriceCode.getColor())) return false;
        }
        else if (color != null) {
            String s = getColor();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchPriceCode.getColor(), s)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(PriceCode searchPriceCode) {
        return true;
    }
}
