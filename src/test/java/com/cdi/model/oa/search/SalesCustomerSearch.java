// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.OAQueryFilter;


@OAClass(useDataSource=false, localOnly=true)
public class SalesCustomerSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(SalesCustomerSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_CustomerNumber = "CustomerNumber";
    public static final String P_CustomerNumberUseNull = "CustomerNumberUseNull";
    public static final String P_CustomerNumberUseNotNull = "CustomerNumberUseNotNull";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_State = "State";
    public static final String P_StateUseNull = "StateUseNull";
    public static final String P_StateUseNotNull = "StateUseNotNull";
    public static final String P_Contact = "Contact";
    public static final String P_ContactUseNull = "ContactUseNull";
    public static final String P_ContactUseNotNull = "ContactUseNotNull";
    public static final String P_SalesCustomerSalesOrder = "SalesCustomerSalesOrder";
    public static final String P_UseSalesCustomerSalesOrderSearch = "UseSalesCustomerSalesOrderSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected String customerNumber;
    protected boolean customerNumberUseNull;
    protected boolean customerNumberUseNotNull;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected String state;
    protected boolean stateUseNull;
    protected boolean stateUseNotNull;
    protected String contact;
    protected boolean contactUseNull;
    protected boolean contactUseNotNull;
    protected SalesOrder salesCustomerSalesOrder;
    protected boolean useSalesCustomerSalesOrderSearch;
    protected SalesOrderSearch searchSalesCustomerSalesOrder;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_customerNumber = 1;
    public static final int SORTBYTYPE_name = 2;
    public static final int SORTBYTYPE_state = 3;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Customer Number");
        hubSortByType.add("Name");
        hubSortByType.add("State");
    }

    public SalesCustomerSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getCustomerNumber() {
        return customerNumber;
    }
    public void setCustomerNumber(String newValue) {
        String old = customerNumber;
        fireBeforePropertyChange(P_CustomerNumber, old, newValue);
        this.customerNumber = newValue;
        firePropertyChange(P_CustomerNumber, old, this.customerNumber);
    }
      
    public boolean getCustomerNumberUseNull() {
        return customerNumberUseNull;
    }
    public void setCustomerNumberUseNull(boolean newValue) {
        boolean old = this.customerNumberUseNull;
        this.customerNumberUseNull = newValue;
        firePropertyChange(P_CustomerNumberUseNull, old, this.customerNumberUseNull);
    }
    public boolean getCustomerNumberUseNotNull() {
        return customerNumberUseNotNull;
    }
    public void setCustomerNumberUseNotNull(boolean newValue) {
        boolean old = this.customerNumberUseNotNull;
        this.customerNumberUseNotNull = newValue;
        firePropertyChange(P_CustomerNumberUseNotNull, old, this.customerNumberUseNotNull);
    }

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public String getState() {
        return state;
    }
    public void setState(String newValue) {
        String old = state;
        fireBeforePropertyChange(P_State, old, newValue);
        this.state = newValue;
        firePropertyChange(P_State, old, this.state);
    }
      
    public boolean getStateUseNull() {
        return stateUseNull;
    }
    public void setStateUseNull(boolean newValue) {
        boolean old = this.stateUseNull;
        this.stateUseNull = newValue;
        firePropertyChange(P_StateUseNull, old, this.stateUseNull);
    }
    public boolean getStateUseNotNull() {
        return stateUseNotNull;
    }
    public void setStateUseNotNull(boolean newValue) {
        boolean old = this.stateUseNotNull;
        this.stateUseNotNull = newValue;
        firePropertyChange(P_StateUseNotNull, old, this.stateUseNotNull);
    }

    public String getContact() {
        return contact;
    }
    public void setContact(String newValue) {
        String old = contact;
        fireBeforePropertyChange(P_Contact, old, newValue);
        this.contact = newValue;
        firePropertyChange(P_Contact, old, this.contact);
    }
      
    public boolean getContactUseNull() {
        return contactUseNull;
    }
    public void setContactUseNull(boolean newValue) {
        boolean old = this.contactUseNull;
        this.contactUseNull = newValue;
        firePropertyChange(P_ContactUseNull, old, this.contactUseNull);
    }
    public boolean getContactUseNotNull() {
        return contactUseNotNull;
    }
    public void setContactUseNotNull(boolean newValue) {
        boolean old = this.contactUseNotNull;
        this.contactUseNotNull = newValue;
        firePropertyChange(P_ContactUseNotNull, old, this.contactUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public SalesOrder getSalesCustomerSalesOrder() {
        if (salesCustomerSalesOrder == null) {
            salesCustomerSalesOrder = (SalesOrder) getObject(P_SalesCustomerSalesOrder);
        }
        return salesCustomerSalesOrder;
    }
    public void setSalesCustomerSalesOrder(SalesOrder newValue) {
        SalesOrder old = this.salesCustomerSalesOrder;
        this.salesCustomerSalesOrder = newValue;
        firePropertyChange(P_SalesCustomerSalesOrder, old, this.salesCustomerSalesOrder);
    }
    public boolean getUseSalesCustomerSalesOrderSearch() {
        return useSalesCustomerSalesOrderSearch;
    }
    public void setUseSalesCustomerSalesOrderSearch(boolean newValue) {
        boolean old = this.useSalesCustomerSalesOrderSearch;
        this.useSalesCustomerSalesOrderSearch = newValue;
        firePropertyChange(P_UseSalesCustomerSalesOrderSearch, old, this.useSalesCustomerSalesOrderSearch);
    }
    public SalesOrderSearch getSalesCustomerSalesOrderSearch() {
        return this.searchSalesCustomerSalesOrder;
    }
    public void setSalesCustomerSalesOrderSearch(SalesOrderSearch newValue) {
        this.searchSalesCustomerSalesOrder = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setCustomerNumber(null);
        setCustomerNumberUseNull(false);
        setCustomerNumberUseNotNull(false);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setState(null);
        setStateUseNull(false);
        setStateUseNotNull(false);
        setContact(null);
        setContactUseNull(false);
        setContactUseNotNull(false);
        setSalesCustomerSalesOrder(null);
        setUseSalesCustomerSalesOrderSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getCustomerNumber() != null) return true;
        if (getCustomerNumberUseNull()) return true;if (getCustomerNumberUseNotNull()) return true;
        if (getCustomerNumberUseNull()) return true;
        if (getCustomerNumberUseNotNull()) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (getState() != null) return true;
        if (getStateUseNull()) return true;if (getStateUseNotNull()) return true;
        if (getStateUseNull()) return true;
        if (getStateUseNotNull()) return true;
        if (getContact() != null) return true;
        if (getContactUseNull()) return true;if (getContactUseNotNull()) return true;
        if (getContactUseNull()) return true;
        if (getContactUseNotNull()) return true;
        if (getSalesCustomerSalesOrder() != null) return true;
        if (getUseSalesCustomerSalesOrderSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<SalesCustomer> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<SalesCustomer> f = new OAQueryFilter<SalesCustomer>(SalesCustomer.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<SalesCustomer> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<SalesCustomer> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<SalesCustomer> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_customerNumber: sortOrder = SalesCustomer.P_CustomerNumber; break;
            case SORTBYTYPE_name: sortOrder = SalesCustomer.P_Name; break;
            case SORTBYTYPE_state: sortOrder = SalesCustomer.P_State; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (customerNumberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesCustomer.P_CustomerNumber + " = null OR " + SalesCustomer.P_CustomerNumber + " == '')";
        }
        else if (customerNumberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_CustomerNumber + " != null";
        }
        else if (!OAString.isEmpty(this.customerNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesCustomer.P_CustomerNumber + " LIKE ?";
            }
            else {
                sql += SalesCustomer.P_CustomerNumber + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesCustomer.P_Name + " = null OR " + SalesCustomer.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesCustomer.P_Name + " LIKE ?";
            }
            else {
                sql += SalesCustomer.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (stateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesCustomer.P_State + " = null OR " + SalesCustomer.P_State + " == '')";
        }
        else if (stateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_State + " != null";
        }
        else if (!OAString.isEmpty(this.state)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.state.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesCustomer.P_State + " LIKE ?";
            }
            else {
                sql += SalesCustomer.P_State + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (contactUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesCustomer.P_Contact + " = null OR " + SalesCustomer.P_Contact + " == '')";
        }
        else if (contactUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_Contact + " != null";
        }
        else if (!OAString.isEmpty(this.contact)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.contact.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesCustomer.P_Contact + " LIKE ?";
            }
            else {
                sql += SalesCustomer.P_Contact + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useSalesCustomerSalesOrderSearch && getSalesCustomerSalesOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomerPP.salesOrder().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesCustomerSalesOrder());
            finder = new OAFinder<SalesOrder, SalesCustomer>(getSalesCustomerSalesOrder(), SalesOrder.P_SalesCustomer);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<SalesCustomer> select = new OASelect<SalesCustomer>(SalesCustomer.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useSalesCustomerSalesOrderSearch && getSalesCustomerSalesOrderSearch() != null) {
            getSalesCustomerSalesOrderSearch().appendSelect(SalesCustomerPP.salesOrder().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (customerNumberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesCustomer.P_CustomerNumber + " = null OR " + SalesCustomer.P_CustomerNumber + " == '')";
        }
        else if (customerNumberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_CustomerNumber + " != null";
        }
        else if (!OAString.isEmpty(this.customerNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.customerNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesCustomer.P_CustomerNumber + " LIKE ?";
            }
            else {
                sql += SalesCustomer.P_CustomerNumber + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesCustomer.P_Name + " = null OR " + SalesCustomer.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesCustomer.P_Name + " LIKE ?";
            }
            else {
                sql += SalesCustomer.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (stateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesCustomer.P_State + " = null OR " + SalesCustomer.P_State + " == '')";
        }
        else if (stateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_State + " != null";
        }
        else if (!OAString.isEmpty(this.state)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.state.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesCustomer.P_State + " LIKE ?";
            }
            else {
                sql += SalesCustomer.P_State + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (contactUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesCustomer.P_Contact + " = null OR " + SalesCustomer.P_Contact + " == '')";
        }
        else if (contactUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesCustomer.P_Contact + " != null";
        }
        else if (!OAString.isEmpty(this.contact)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.contact.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesCustomer.P_Contact + " LIKE ?";
            }
            else {
                sql += SalesCustomer.P_Contact + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useSalesCustomerSalesOrderSearch && getSalesCustomerSalesOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + SalesCustomerPP.salesOrder().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesCustomerSalesOrder());
        }
        if (useSalesCustomerSalesOrderSearch && getSalesCustomerSalesOrderSearch() != null) {
            getSalesCustomerSalesOrderSearch().appendSelect(prefix + SalesCustomerPP.salesOrder().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<SalesCustomer> filterDataSourceFilter;
    public OAFilter<SalesCustomer> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<SalesCustomer>() {
            @Override
            public boolean isUsed(SalesCustomer salesCustomer) {
                return SalesCustomerSearch.this.isUsedForDataSourceFilter(salesCustomer);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<SalesCustomer> filterCustomFilter;
    public OAFilter<SalesCustomer> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<SalesCustomer>() {
            @Override
            public boolean isUsed(SalesCustomer salesCustomer) {
                boolean b = SalesCustomerSearch.this.isUsedForCustomFilter(salesCustomer);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(salesCustomer);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(SalesCustomer searchSalesCustomer) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchSalesCustomer.getId(), id)) return false;
        }
        if (customerNumberUseNull) {
            if (OACompare.isNotEmpty(searchSalesCustomer.getCustomerNumber())) return false;
        }
        else if (customerNumberUseNotNull) {
            if (OACompare.isEmpty(searchSalesCustomer.getCustomerNumber())) return false;
        }
        else if (customerNumber != null) {
            String s = getCustomerNumber();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesCustomer.getCustomerNumber(), s)) return false;
        }
        if (nameUseNull) {
            if (OACompare.isNotEmpty(searchSalesCustomer.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(searchSalesCustomer.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesCustomer.getName(), s)) return false;
        }
        if (stateUseNull) {
            if (OACompare.isNotEmpty(searchSalesCustomer.getState())) return false;
        }
        else if (stateUseNotNull) {
            if (OACompare.isEmpty(searchSalesCustomer.getState())) return false;
        }
        else if (state != null) {
            String s = getState();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesCustomer.getState(), s)) return false;
        }
        if (contactUseNull) {
            if (OACompare.isNotEmpty(searchSalesCustomer.getContact())) return false;
        }
        else if (contactUseNotNull) {
            if (OACompare.isEmpty(searchSalesCustomer.getContact())) return false;
        }
        else if (contact != null) {
            String s = getContact();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesCustomer.getContact(), s)) return false;
        }
        if (salesCustomerSalesOrder != null) {
            if (!OACompare.isEqual(searchSalesCustomer.getSalesOrder(), salesCustomerSalesOrder)) return false;
        }
        if (useSalesCustomerSalesOrderSearch && getSalesCustomerSalesOrderSearch() != null) {
            SalesOrder salesOrder = (SalesOrder) searchSalesCustomer.getProperty(SalesCustomerPP.salesOrder().pp);
            if (salesOrder == null) return false;
            if (!getSalesCustomerSalesOrderSearch().isUsedForDataSourceFilter(salesOrder)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(SalesCustomer searchSalesCustomer) {
        return true;
    }
}
