// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;
import com.cdi.delegate.ModelDelegate;

@OAClass(useDataSource=false, localOnly=true)
public class SalesOrderSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(SalesOrderSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_SalesCustomerName = "SalesCustomerName";
    public static final String P_Project = "Project";
    public static final String P_ProjectUseNull = "ProjectUseNull";
    public static final String P_ProjectUseNotNull = "ProjectUseNotNull";
    public static final String P_Date = "Date";
    public static final String P_Date2 = "Date2";
    public static final String P_DateUseNull = "DateUseNull";
    public static final String P_DateExpected = "DateExpected";
    public static final String P_DateExpected2 = "DateExpected2";
    public static final String P_DateExpectedUseNull = "DateExpectedUseNull";
    public static final String P_DateSubmitted = "DateSubmitted";
    public static final String P_DateSubmitted2 = "DateSubmitted2";
    public static final String P_DateSubmittedUseNull = "DateSubmittedUseNull";
    public static final String P_DateSubmittedUseNotNull = "DateSubmittedUseNotNull";
    public static final String P_DateProcessed = "DateProcessed";
    public static final String P_DateProcessed2 = "DateProcessed2";
    public static final String P_DateProcessedUseNull = "DateProcessedUseNull";
    public static final String P_DateProcessedUseNotNull = "DateProcessedUseNotNull";
    public static final String P_DateClosed = "DateClosed";
    public static final String P_DateClosedUseNull = "DateClosedUseNull";
    public static final String P_DateClosedUseNotNull = "DateClosedUseNotNull";
    public static final String P_SalesCustomerShipToCity = "SalesCustomerShipToCity";
    public static final String P_SalesCustomerShipToCityUseNull = "SalesCustomerShipToCityUseNull";
    public static final String P_SalesCustomerShipToCityUseNotNull = "SalesCustomerShipToCityUseNotNull";
    public static final String P_SalesCustomerShipToState = "SalesCustomerShipToState";
    public static final String P_SalesCustomerShipToStateUseNull = "SalesCustomerShipToStateUseNull";
    public static final String P_SalesCustomerShipToStateUseNotNull = "SalesCustomerShipToStateUseNotNull";
    public static final String P_Color = "Color";
    public static final String P_ColorUseNull = "ColorUseNull";
    public static final String P_Texture = "Texture";
    public static final String P_TextureUseNull = "TextureUseNull";
    public static final String P_SalesOrderSalesPersonUser = "SalesOrderSalesPersonUser";
    public static final String P_SalesOrderSalesPersonUserUseNull = "SalesOrderSalesPersonUserUseNull";
    public static final String P_UseSalesOrderSalesPersonUserSearch = "UseSalesOrderSalesPersonUserSearch";
    public static final String P_SalesCustomer = "SalesCustomer";
    public static final String P_UseSalesCustomerSearch = "UseSalesCustomerSearch";
    public static final String P_SalesCustomerCustomer = "SalesCustomerCustomer";
    public static final String P_SalesCustomerCustomerUseNull = "SalesCustomerCustomerUseNull";
    public static final String P_UseSalesCustomerCustomerSearch = "UseSalesCustomerCustomerSearch";
    public static final String P_SalesOrderItemsItem = "SalesOrderItemsItem";
    public static final String P_UseSalesOrderItemsItemSearch = "UseSalesOrderItemsItemSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected String salesCustomerName;
    protected String project;
    protected boolean projectUseNull;
    protected boolean projectUseNotNull;
    protected OADate date;
    protected OADate date2;
    protected boolean dateUseNull;
    protected OADate dateExpected;
    protected OADate dateExpected2;
    protected boolean dateExpectedUseNull;
    protected OADate dateSubmitted;
    protected OADate dateSubmitted2;
    protected boolean dateSubmittedUseNull;
    protected boolean dateSubmittedUseNotNull;
    protected OADate dateProcessed;
    protected OADate dateProcessed2;
    protected boolean dateProcessedUseNull;
    protected boolean dateProcessedUseNotNull;
    protected OADate dateClosed;
    protected boolean dateClosedUseNull;
    protected boolean dateClosedUseNotNull;
    protected String salesCustomerShipToCity;
    protected boolean salesCustomerShipToCityUseNull;
    protected boolean salesCustomerShipToCityUseNotNull;
    protected String salesCustomerShipToState;
    protected boolean salesCustomerShipToStateUseNull;
    protected boolean salesCustomerShipToStateUseNotNull;
    protected String color;
    protected boolean colorUseNull;
    protected String texture;
    protected boolean textureUseNull;
    protected User salesOrderSalesPersonUser;
    protected boolean salesOrderSalesPersonUserUseNull;
    protected boolean useSalesOrderSalesPersonUserSearch;
    protected UserSearch searchSalesOrderSalesPersonUser;
    protected SalesCustomer salesCustomer;
    protected boolean useSalesCustomerSearch;
    protected SalesCustomerSearch searchSalesCustomer;
    protected Customer salesCustomerCustomer;
    protected boolean salesCustomerCustomerUseNull;
    protected boolean useSalesCustomerCustomerSearch;
    protected CustomerSearch searchSalesCustomerCustomer;
    protected Item salesOrderItemsItem;
    protected boolean useSalesOrderItemsItemSearch;
    protected ItemSearch searchSalesOrderItemsItem;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_id = 1;
    public static final int SORTBYTYPE_date = 2;
    public static final int SORTBYTYPE_customerNumber = 3;
    public static final int SORTBYTYPE_salesCustomerName = 4;
    public static final int SORTBYTYPE_salesPersonUserName = 5;
    public static final int SORTBYTYPE_orderStatus = 6;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Id");
        hubSortByType.add("Date");
        hubSortByType.add("Customer Number");
        hubSortByType.add("Customer Name");
        hubSortByType.add("Sales Person Name");
        hubSortByType.add("Order Status");
    }

    public SalesOrderSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getSalesCustomerName() {
        return salesCustomerName;
    }
    public void setSalesCustomerName(String newValue) {
        String old = salesCustomerName;
        fireBeforePropertyChange(P_SalesCustomerName, old, newValue);
        this.salesCustomerName = newValue;
        firePropertyChange(P_SalesCustomerName, old, this.salesCustomerName);
    }
      

    public String getProject() {
        return project;
    }
    public void setProject(String newValue) {
        String old = project;
        fireBeforePropertyChange(P_Project, old, newValue);
        this.project = newValue;
        firePropertyChange(P_Project, old, this.project);
    }
      
    public boolean getProjectUseNull() {
        return projectUseNull;
    }
    public void setProjectUseNull(boolean newValue) {
        boolean old = this.projectUseNull;
        this.projectUseNull = newValue;
        firePropertyChange(P_ProjectUseNull, old, this.projectUseNull);
    }
    public boolean getProjectUseNotNull() {
        return projectUseNotNull;
    }
    public void setProjectUseNotNull(boolean newValue) {
        boolean old = this.projectUseNotNull;
        this.projectUseNotNull = newValue;
        firePropertyChange(P_ProjectUseNotNull, old, this.projectUseNotNull);
    }

    public OADate getDate() {
        return date;
    }
    public void setDate(OADate newValue) {
        OADate old = date;
        fireBeforePropertyChange(P_Date, old, newValue);
        this.date = newValue;
        firePropertyChange(P_Date, old, this.date);
        if (isLoading()) return;
        if (date != null) {
            if (date2 == null) setDate2(this.date);
            else if (date.compareTo(date2) > 0) setDate2(this.date);
        }
    } 
    public OADate getDate2() {
        return date2;
    }
    public void setDate2(OADate newValue) {
        OADate old = date2;
        fireBeforePropertyChange(P_Date2, old, newValue);
        this.date2 = newValue;
        firePropertyChange(P_Date2, old, this.date2);
        if (date != null && date2 != null) {
            if (date.compareTo(date2) > 0) setDate(this.date2);
        }
    }
    public boolean getDateUseNull() {
        return dateUseNull;
    }
    public void setDateUseNull(boolean newValue) {
        boolean old = this.dateUseNull;
        this.dateUseNull = newValue;
        firePropertyChange(P_DateUseNull, old, this.dateUseNull);
    }

    public OADate getDateExpected() {
        return dateExpected;
    }
    public void setDateExpected(OADate newValue) {
        OADate old = dateExpected;
        fireBeforePropertyChange(P_DateExpected, old, newValue);
        this.dateExpected = newValue;
        firePropertyChange(P_DateExpected, old, this.dateExpected);
        if (isLoading()) return;
        if (dateExpected != null) {
            if (dateExpected2 == null) setDateExpected2(this.dateExpected);
            else if (dateExpected.compareTo(dateExpected2) > 0) setDateExpected2(this.dateExpected);
        }
    } 
    public OADate getDateExpected2() {
        return dateExpected2;
    }
    public void setDateExpected2(OADate newValue) {
        OADate old = dateExpected2;
        fireBeforePropertyChange(P_DateExpected2, old, newValue);
        this.dateExpected2 = newValue;
        firePropertyChange(P_DateExpected2, old, this.dateExpected2);
        if (dateExpected != null && dateExpected2 != null) {
            if (dateExpected.compareTo(dateExpected2) > 0) setDateExpected(this.dateExpected2);
        }
    }
    public boolean getDateExpectedUseNull() {
        return dateExpectedUseNull;
    }
    public void setDateExpectedUseNull(boolean newValue) {
        boolean old = this.dateExpectedUseNull;
        this.dateExpectedUseNull = newValue;
        firePropertyChange(P_DateExpectedUseNull, old, this.dateExpectedUseNull);
    }

    public OADate getDateSubmitted() {
        return dateSubmitted;
    }
    public void setDateSubmitted(OADate newValue) {
        OADate old = dateSubmitted;
        fireBeforePropertyChange(P_DateSubmitted, old, newValue);
        this.dateSubmitted = newValue;
        firePropertyChange(P_DateSubmitted, old, this.dateSubmitted);
        if (isLoading()) return;
        if (dateSubmitted != null) {
            if (dateSubmitted2 == null) setDateSubmitted2(this.dateSubmitted);
            else if (dateSubmitted.compareTo(dateSubmitted2) > 0) setDateSubmitted2(this.dateSubmitted);
        }
    } 
    public OADate getDateSubmitted2() {
        return dateSubmitted2;
    }
    public void setDateSubmitted2(OADate newValue) {
        OADate old = dateSubmitted2;
        fireBeforePropertyChange(P_DateSubmitted2, old, newValue);
        this.dateSubmitted2 = newValue;
        firePropertyChange(P_DateSubmitted2, old, this.dateSubmitted2);
        if (dateSubmitted != null && dateSubmitted2 != null) {
            if (dateSubmitted.compareTo(dateSubmitted2) > 0) setDateSubmitted(this.dateSubmitted2);
        }
    }
    public boolean getDateSubmittedUseNull() {
        return dateSubmittedUseNull;
    }
    public void setDateSubmittedUseNull(boolean newValue) {
        boolean old = this.dateSubmittedUseNull;
        this.dateSubmittedUseNull = newValue;
        firePropertyChange(P_DateSubmittedUseNull, old, this.dateSubmittedUseNull);
    }
    public boolean getDateSubmittedUseNotNull() {
        return dateSubmittedUseNotNull;
    }
    public void setDateSubmittedUseNotNull(boolean newValue) {
        boolean old = this.dateSubmittedUseNotNull;
        this.dateSubmittedUseNotNull = newValue;
        firePropertyChange(P_DateSubmittedUseNotNull, old, this.dateSubmittedUseNotNull);
    }

    public OADate getDateProcessed() {
        return dateProcessed;
    }
    public void setDateProcessed(OADate newValue) {
        OADate old = dateProcessed;
        fireBeforePropertyChange(P_DateProcessed, old, newValue);
        this.dateProcessed = newValue;
        firePropertyChange(P_DateProcessed, old, this.dateProcessed);
        if (isLoading()) return;
        if (dateProcessed != null) {
            if (dateProcessed2 == null) setDateProcessed2(this.dateProcessed);
            else if (dateProcessed.compareTo(dateProcessed2) > 0) setDateProcessed2(this.dateProcessed);
        }
    } 
    public OADate getDateProcessed2() {
        return dateProcessed2;
    }
    public void setDateProcessed2(OADate newValue) {
        OADate old = dateProcessed2;
        fireBeforePropertyChange(P_DateProcessed2, old, newValue);
        this.dateProcessed2 = newValue;
        firePropertyChange(P_DateProcessed2, old, this.dateProcessed2);
        if (dateProcessed != null && dateProcessed2 != null) {
            if (dateProcessed.compareTo(dateProcessed2) > 0) setDateProcessed(this.dateProcessed2);
        }
    }
    public boolean getDateProcessedUseNull() {
        return dateProcessedUseNull;
    }
    public void setDateProcessedUseNull(boolean newValue) {
        boolean old = this.dateProcessedUseNull;
        this.dateProcessedUseNull = newValue;
        firePropertyChange(P_DateProcessedUseNull, old, this.dateProcessedUseNull);
    }
    public boolean getDateProcessedUseNotNull() {
        return dateProcessedUseNotNull;
    }
    public void setDateProcessedUseNotNull(boolean newValue) {
        boolean old = this.dateProcessedUseNotNull;
        this.dateProcessedUseNotNull = newValue;
        firePropertyChange(P_DateProcessedUseNotNull, old, this.dateProcessedUseNotNull);
    }

    public OADate getDateClosed() {
        return dateClosed;
    }
    public void setDateClosed(OADate newValue) {
        OADate old = dateClosed;
        fireBeforePropertyChange(P_DateClosed, old, newValue);
        this.dateClosed = newValue;
        firePropertyChange(P_DateClosed, old, this.dateClosed);
    }
      
    public boolean getDateClosedUseNull() {
        return dateClosedUseNull;
    }
    public void setDateClosedUseNull(boolean newValue) {
        boolean old = this.dateClosedUseNull;
        this.dateClosedUseNull = newValue;
        firePropertyChange(P_DateClosedUseNull, old, this.dateClosedUseNull);
    }
    public boolean getDateClosedUseNotNull() {
        return dateClosedUseNotNull;
    }
    public void setDateClosedUseNotNull(boolean newValue) {
        boolean old = this.dateClosedUseNotNull;
        this.dateClosedUseNotNull = newValue;
        firePropertyChange(P_DateClosedUseNotNull, old, this.dateClosedUseNotNull);
    }

    public String getSalesCustomerShipToCity() {
        return salesCustomerShipToCity;
    }
    public void setSalesCustomerShipToCity(String newValue) {
        String old = salesCustomerShipToCity;
        fireBeforePropertyChange(P_SalesCustomerShipToCity, old, newValue);
        this.salesCustomerShipToCity = newValue;
        firePropertyChange(P_SalesCustomerShipToCity, old, this.salesCustomerShipToCity);
    }
      
    public boolean getSalesCustomerShipToCityUseNull() {
        return salesCustomerShipToCityUseNull;
    }
    public void setSalesCustomerShipToCityUseNull(boolean newValue) {
        boolean old = this.salesCustomerShipToCityUseNull;
        this.salesCustomerShipToCityUseNull = newValue;
        firePropertyChange(P_SalesCustomerShipToCityUseNull, old, this.salesCustomerShipToCityUseNull);
    }
    public boolean getSalesCustomerShipToCityUseNotNull() {
        return salesCustomerShipToCityUseNotNull;
    }
    public void setSalesCustomerShipToCityUseNotNull(boolean newValue) {
        boolean old = this.salesCustomerShipToCityUseNotNull;
        this.salesCustomerShipToCityUseNotNull = newValue;
        firePropertyChange(P_SalesCustomerShipToCityUseNotNull, old, this.salesCustomerShipToCityUseNotNull);
    }

    public String getSalesCustomerShipToState() {
        return salesCustomerShipToState;
    }
    public void setSalesCustomerShipToState(String newValue) {
        String old = salesCustomerShipToState;
        fireBeforePropertyChange(P_SalesCustomerShipToState, old, newValue);
        this.salesCustomerShipToState = newValue;
        firePropertyChange(P_SalesCustomerShipToState, old, this.salesCustomerShipToState);
    }
      
    public boolean getSalesCustomerShipToStateUseNull() {
        return salesCustomerShipToStateUseNull;
    }
    public void setSalesCustomerShipToStateUseNull(boolean newValue) {
        boolean old = this.salesCustomerShipToStateUseNull;
        this.salesCustomerShipToStateUseNull = newValue;
        firePropertyChange(P_SalesCustomerShipToStateUseNull, old, this.salesCustomerShipToStateUseNull);
    }
    public boolean getSalesCustomerShipToStateUseNotNull() {
        return salesCustomerShipToStateUseNotNull;
    }
    public void setSalesCustomerShipToStateUseNotNull(boolean newValue) {
        boolean old = this.salesCustomerShipToStateUseNotNull;
        this.salesCustomerShipToStateUseNotNull = newValue;
        firePropertyChange(P_SalesCustomerShipToStateUseNotNull, old, this.salesCustomerShipToStateUseNotNull);
    }

    public String getColor() {
        return color;
    }
    public void setColor(String newValue) {
        String old = color;
        fireBeforePropertyChange(P_Color, old, newValue);
        this.color = newValue;
        firePropertyChange(P_Color, old, this.color);
    }
      
    public boolean getColorUseNull() {
        return colorUseNull;
    }
    public void setColorUseNull(boolean newValue) {
        boolean old = this.colorUseNull;
        this.colorUseNull = newValue;
        firePropertyChange(P_ColorUseNull, old, this.colorUseNull);
    }

    public String getTexture() {
        return texture;
    }
    public void setTexture(String newValue) {
        String old = texture;
        fireBeforePropertyChange(P_Texture, old, newValue);
        this.texture = newValue;
        firePropertyChange(P_Texture, old, this.texture);
    }
      
    public boolean getTextureUseNull() {
        return textureUseNull;
    }
    public void setTextureUseNull(boolean newValue) {
        boolean old = this.textureUseNull;
        this.textureUseNull = newValue;
        firePropertyChange(P_TextureUseNull, old, this.textureUseNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public User getSalesOrderSalesPersonUser() {
        if (salesOrderSalesPersonUser == null) {
            salesOrderSalesPersonUser = (User) getObject(P_SalesOrderSalesPersonUser);
        }
        return salesOrderSalesPersonUser;
    }
    public void setSalesOrderSalesPersonUser(User newValue) {
        User old = this.salesOrderSalesPersonUser;
        this.salesOrderSalesPersonUser = newValue;
        firePropertyChange(P_SalesOrderSalesPersonUser, old, this.salesOrderSalesPersonUser);
    }
    public boolean getSalesOrderSalesPersonUserUseNull() {
        return salesOrderSalesPersonUserUseNull;
    }
    public void setSalesOrderSalesPersonUserUseNull(boolean newValue) {
        boolean old = this.salesOrderSalesPersonUserUseNull;
        this.salesOrderSalesPersonUserUseNull = newValue;
        firePropertyChange(P_SalesOrderSalesPersonUserUseNull, old, this.salesOrderSalesPersonUserUseNull);
    }
    public boolean getUseSalesOrderSalesPersonUserSearch() {
        return useSalesOrderSalesPersonUserSearch;
    }
    public void setUseSalesOrderSalesPersonUserSearch(boolean newValue) {
        boolean old = this.useSalesOrderSalesPersonUserSearch;
        this.useSalesOrderSalesPersonUserSearch = newValue;
        firePropertyChange(P_UseSalesOrderSalesPersonUserSearch, old, this.useSalesOrderSalesPersonUserSearch);
    }
    public UserSearch getSalesOrderSalesPersonUserSearch() {
        return this.searchSalesOrderSalesPersonUser;
    }
    public void setSalesOrderSalesPersonUserSearch(UserSearch newValue) {
        this.searchSalesOrderSalesPersonUser = newValue;
    }

    @OAOne
    public SalesCustomer getSalesCustomer() {
        if (salesCustomer == null) {
            salesCustomer = (SalesCustomer) getObject(P_SalesCustomer);
        }
        return salesCustomer;
    }
    public void setSalesCustomer(SalesCustomer newValue) {
        SalesCustomer old = this.salesCustomer;
        this.salesCustomer = newValue;
        firePropertyChange(P_SalesCustomer, old, this.salesCustomer);
    }
    public boolean getUseSalesCustomerSearch() {
        return useSalesCustomerSearch;
    }
    public void setUseSalesCustomerSearch(boolean newValue) {
        boolean old = this.useSalesCustomerSearch;
        this.useSalesCustomerSearch = newValue;
        firePropertyChange(P_UseSalesCustomerSearch, old, this.useSalesCustomerSearch);
    }
    public SalesCustomerSearch getSalesCustomerSearch() {
        return this.searchSalesCustomer;
    }
    public void setSalesCustomerSearch(SalesCustomerSearch newValue) {
        this.searchSalesCustomer = newValue;
    }

    @OAOne
    public Customer getSalesCustomerCustomer() {
        if (salesCustomerCustomer == null) {
            salesCustomerCustomer = (Customer) getObject(P_SalesCustomerCustomer);
        }
        return salesCustomerCustomer;
    }
    public void setSalesCustomerCustomer(Customer newValue) {
        Customer old = this.salesCustomerCustomer;
        this.salesCustomerCustomer = newValue;
        firePropertyChange(P_SalesCustomerCustomer, old, this.salesCustomerCustomer);
    }
    public boolean getSalesCustomerCustomerUseNull() {
        return salesCustomerCustomerUseNull;
    }
    public void setSalesCustomerCustomerUseNull(boolean newValue) {
        boolean old = this.salesCustomerCustomerUseNull;
        this.salesCustomerCustomerUseNull = newValue;
        firePropertyChange(P_SalesCustomerCustomerUseNull, old, this.salesCustomerCustomerUseNull);
    }
    public boolean getUseSalesCustomerCustomerSearch() {
        return useSalesCustomerCustomerSearch;
    }
    public void setUseSalesCustomerCustomerSearch(boolean newValue) {
        boolean old = this.useSalesCustomerCustomerSearch;
        this.useSalesCustomerCustomerSearch = newValue;
        firePropertyChange(P_UseSalesCustomerCustomerSearch, old, this.useSalesCustomerCustomerSearch);
    }
    public CustomerSearch getSalesCustomerCustomerSearch() {
        return this.searchSalesCustomerCustomer;
    }
    public void setSalesCustomerCustomerSearch(CustomerSearch newValue) {
        this.searchSalesCustomerCustomer = newValue;
    }

    @OAOne
    public Item getSalesOrderItemsItem() {
        if (salesOrderItemsItem == null) {
            salesOrderItemsItem = (Item) getObject(P_SalesOrderItemsItem);
        }
        return salesOrderItemsItem;
    }
    public void setSalesOrderItemsItem(Item newValue) {
        Item old = this.salesOrderItemsItem;
        this.salesOrderItemsItem = newValue;
        firePropertyChange(P_SalesOrderItemsItem, old, this.salesOrderItemsItem);
    }
    public boolean getUseSalesOrderItemsItemSearch() {
        return useSalesOrderItemsItemSearch;
    }
    public void setUseSalesOrderItemsItemSearch(boolean newValue) {
        boolean old = this.useSalesOrderItemsItemSearch;
        this.useSalesOrderItemsItemSearch = newValue;
        firePropertyChange(P_UseSalesOrderItemsItemSearch, old, this.useSalesOrderItemsItemSearch);
    }
    public ItemSearch getSalesOrderItemsItemSearch() {
        return this.searchSalesOrderItemsItem;
    }
    public void setSalesOrderItemsItemSearch(ItemSearch newValue) {
        this.searchSalesOrderItemsItem = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setSalesCustomerName(null);
        setProject(null);
        setProjectUseNull(false);
        setProjectUseNotNull(false);
        setDate(null);
        setDate2(null);
        setDateUseNull(false);
        setDateExpected(null);
        setDateExpected2(null);
        setDateExpectedUseNull(false);
        setDateSubmitted(null);
        setDateSubmitted2(null);
        setDateSubmittedUseNull(false);
        setDateSubmittedUseNotNull(false);
        setDateProcessed(null);
        setDateProcessed2(null);
        setDateProcessedUseNull(false);
        setDateProcessedUseNotNull(false);
        setDateClosed(null);
        setDateClosedUseNull(false);
        setDateClosedUseNotNull(false);
        setSalesCustomerShipToCity(null);
        setSalesCustomerShipToCityUseNull(false);
        setSalesCustomerShipToCityUseNotNull(false);
        setSalesCustomerShipToState(null);
        setSalesCustomerShipToStateUseNull(false);
        setSalesCustomerShipToStateUseNotNull(false);
        setColor(null);
        setColorUseNull(false);
        setTexture(null);
        setTextureUseNull(false);
        setSalesOrderSalesPersonUser(null);
        setSalesOrderSalesPersonUserUseNull(false);
        setUseSalesOrderSalesPersonUserSearch(false);
        setSalesCustomer(null);
        setUseSalesCustomerSearch(false);
        setSalesCustomerCustomer(null);
        setSalesCustomerCustomerUseNull(false);
        setUseSalesCustomerCustomerSearch(false);
        setSalesOrderItemsItem(null);
        setUseSalesOrderItemsItemSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getSalesCustomerName() != null) return true;
        if (getProject() != null) return true;
        if (getProjectUseNull()) return true;if (getProjectUseNotNull()) return true;
        if (getProjectUseNull()) return true;
        if (getProjectUseNotNull()) return true;
        if (getDate() != null) return true;
        if (getDateUseNull()) return true;
        if (getDateUseNull()) return true;
        if (getDateExpected() != null) return true;
        if (getDateExpectedUseNull()) return true;
        if (getDateExpectedUseNull()) return true;
        if (getDateSubmitted() != null) return true;
        if (getDateSubmittedUseNull()) return true;
        if (getDateSubmittedUseNull()) return true;
        if (getDateSubmittedUseNull()) return true;
        if (getDateSubmittedUseNotNull()) return true;
        if (getDateProcessed() != null) return true;
        if (getDateProcessedUseNull()) return true;
        if (getDateProcessedUseNull()) return true;
        if (getDateProcessedUseNull()) return true;
        if (getDateProcessedUseNotNull()) return true;
        if (getDateClosed() != null) return true;
        if (getDateClosedUseNull()) return true;
        if (getDateClosedUseNull()) return true;
        if (getDateClosedUseNull()) return true;
        if (getDateClosedUseNotNull()) return true;
        if (getSalesCustomerShipToCity() != null) return true;
        if (getSalesCustomerShipToCityUseNull()) return true;if (getSalesCustomerShipToCityUseNotNull()) return true;
        if (getSalesCustomerShipToCityUseNull()) return true;
        if (getSalesCustomerShipToCityUseNotNull()) return true;
        if (getSalesCustomerShipToState() != null) return true;
        if (getSalesCustomerShipToStateUseNull()) return true;if (getSalesCustomerShipToStateUseNotNull()) return true;
        if (getSalesCustomerShipToStateUseNull()) return true;
        if (getSalesCustomerShipToStateUseNotNull()) return true;
        if (getColor() != null) return true;
        if (getColorUseNull()) return true;
        if (getColorUseNull()) return true;
        if (getTexture() != null) return true;
        if (getTextureUseNull()) return true;
        if (getTextureUseNull()) return true;
        if (getSalesOrderSalesPersonUser() != null) return true;
        if (getSalesOrderSalesPersonUserUseNull()) return true;
        if (getUseSalesOrderSalesPersonUserSearch()) return true;
        if (getSalesCustomer() != null) return true;
        if (getUseSalesCustomerSearch()) return true;
        if (getSalesCustomerCustomer() != null) return true;
        if (getSalesCustomerCustomerUseNull()) return true;
        if (getUseSalesCustomerCustomerSearch()) return true;
        if (getSalesOrderItemsItem() != null) return true;
        if (getUseSalesOrderItemsItemSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<SalesOrder> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<SalesOrder> f = new OAQueryFilter<SalesOrder>(SalesOrder.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<SalesOrder> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<SalesOrder> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<SalesOrder> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_id: sortOrder = SalesOrder.P_Id; break;
            case SORTBYTYPE_date: sortOrder = SalesOrder.P_Date; break;
            case SORTBYTYPE_customerNumber: sortOrder = SalesOrderPP.salesCustomer().customerNumber(); break;
            case SORTBYTYPE_salesCustomerName: sortOrder = SalesOrderPP.salesCustomer().name(); break;
            case SORTBYTYPE_salesPersonUserName: sortOrder = SalesOrderPP.salesPersonUser().lastName(); break;
            case SORTBYTYPE_orderStatus: sortOrder = SalesOrderPP.salesOrderStatus().name(); break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!OAString.isEmpty(this.salesCustomerName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesCustomerName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderPP.salesCustomer().name() + " LIKE ?";
            }
            else {
                sql += SalesOrderPP.salesCustomer().name() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (projectUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrder.P_Project + " = null OR " + SalesOrder.P_Project + " == '')";
        }
        else if (projectUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_Project + " != null";
        }
        else if (!OAString.isEmpty(this.project)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.project.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrder.P_Project + " LIKE ?";
            }
            else {
                sql += SalesOrder.P_Project + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (dateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_Date + " = null";
        }
        else if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += SalesOrder.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + SalesOrder.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += SalesOrder.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (dateExpectedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateExpected + " = null";
        }
        else if (dateExpected != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateExpected2 != null && !dateExpected.equals(dateExpected2)) {
                sql += SalesOrder.P_DateExpected + " >= ?";
                args = OAArray.add(Object.class, args, this.dateExpected);
                sql += " AND " + SalesOrder.P_DateExpected + " <= ?";
                args = OAArray.add(Object.class, args, this.dateExpected2);
            }
            else {
                sql += SalesOrder.P_DateExpected + " = ?";
                args = OAArray.add(Object.class, args, this.dateExpected);
            }
        }
        if (dateSubmittedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateSubmitted + " = null";
        }
        else if (dateSubmittedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateSubmitted + " != null";
        }
        else if (dateSubmitted != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateSubmitted2 != null && !dateSubmitted.equals(dateSubmitted2)) {
                sql += SalesOrder.P_DateSubmitted + " >= ?";
                args = OAArray.add(Object.class, args, this.dateSubmitted);
                sql += " AND " + SalesOrder.P_DateSubmitted + " <= ?";
                args = OAArray.add(Object.class, args, this.dateSubmitted2);
            }
            else {
                sql += SalesOrder.P_DateSubmitted + " = ?";
                args = OAArray.add(Object.class, args, this.dateSubmitted);
            }
        }
        if (dateProcessedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateProcessed + " = null";
        }
        else if (dateProcessedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateProcessed + " != null";
        }
        else if (dateProcessed != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateProcessed2 != null && !dateProcessed.equals(dateProcessed2)) {
                sql += SalesOrder.P_DateProcessed + " >= ?";
                args = OAArray.add(Object.class, args, this.dateProcessed);
                sql += " AND " + SalesOrder.P_DateProcessed + " <= ?";
                args = OAArray.add(Object.class, args, this.dateProcessed2);
            }
            else {
                sql += SalesOrder.P_DateProcessed + " = ?";
                args = OAArray.add(Object.class, args, this.dateProcessed);
            }
        }
        if (dateClosedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateClosed + " = null";
        }
        else if (dateClosedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateClosed + " != null";
        }
        else if (dateClosed != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateClosed + " = ?";
            args = OAArray.add(Object.class, args, this.dateClosed);
        }
        if (salesCustomerShipToCityUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrderPP.salesCustomer().shipTo().city() + " = null OR " + SalesOrderPP.salesCustomer().shipTo().city() + " == '')";
        }
        else if (salesCustomerShipToCityUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesCustomer().shipTo().city() + " != null";
        }
        else if (!OAString.isEmpty(this.salesCustomerShipToCity)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesCustomerShipToCity.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderPP.salesCustomer().shipTo().city() + " LIKE ?";
            }
            else {
                sql += SalesOrderPP.salesCustomer().shipTo().city() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (salesCustomerShipToStateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrderPP.salesCustomer().shipTo().state() + " = null OR " + SalesOrderPP.salesCustomer().shipTo().state() + " == '')";
        }
        else if (salesCustomerShipToStateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesCustomer().shipTo().state() + " != null";
        }
        else if (!OAString.isEmpty(this.salesCustomerShipToState)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesCustomerShipToState.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderPP.salesCustomer().shipTo().state() + " LIKE ?";
            }
            else {
                sql += SalesOrderPP.salesCustomer().shipTo().state() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (colorUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrder.P_Color + " = null OR " + SalesOrder.P_Color + " == '')";
        }
        else if (!OAString.isEmpty(this.color)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.color.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrder.P_Color + " LIKE ?";
            }
            else {
                sql += SalesOrder.P_Color + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (textureUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrder.P_Texture + " = null OR " + SalesOrder.P_Texture + " == '')";
        }
        else if (!OAString.isEmpty(this.texture)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.texture.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrder.P_Texture + " LIKE ?";
            }
            else {
                sql += SalesOrder.P_Texture + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (salesOrderSalesPersonUserUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesPersonUser().pp + " = null";
        }
        else if (!useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUser() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesPersonUser().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesOrderSalesPersonUser());
        }
        if (!useSalesCustomerSearch && getSalesCustomer() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesCustomer().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesCustomer());
            finder = new OAFinder<SalesCustomer, SalesOrder>(getSalesCustomer(), SalesCustomer.P_SalesOrder);
        }
        if (salesCustomerCustomerUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesCustomer().customer().pp + " = null";
        }
        else if (!useSalesCustomerCustomerSearch && getSalesCustomerCustomer() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesCustomer().customer().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesCustomerCustomer());
        }
        if (!useSalesOrderItemsItemSearch && getSalesOrderItemsItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesOrderItems().item().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesOrderItemsItem());
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<SalesOrder> select = new OASelect<SalesOrder>(SalesOrder.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUserSearch() != null) {
            getSalesOrderSalesPersonUserSearch().appendSelect(SalesOrderPP.salesPersonUser().pp, select);
        }
        if (useSalesCustomerSearch && getSalesCustomerSearch() != null) {
            getSalesCustomerSearch().appendSelect(SalesOrderPP.salesCustomer().pp, select);
        }
        if (useSalesCustomerCustomerSearch && getSalesCustomerCustomerSearch() != null) {
            getSalesCustomerCustomerSearch().appendSelect(SalesOrderPP.salesCustomer().customer().pp, select);
        }
        if (useSalesOrderItemsItemSearch && getSalesOrderItemsItemSearch() != null) {
            getSalesOrderItemsItemSearch().appendSelect(SalesOrderPP.salesOrderItems().item().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!OAString.isEmpty(this.salesCustomerName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesCustomerName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderPP.salesCustomer().name() + " LIKE ?";
            }
            else {
                sql += SalesOrderPP.salesCustomer().name() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (projectUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrder.P_Project + " = null OR " + SalesOrder.P_Project + " == '')";
        }
        else if (projectUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_Project + " != null";
        }
        else if (!OAString.isEmpty(this.project)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.project.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrder.P_Project + " LIKE ?";
            }
            else {
                sql += SalesOrder.P_Project + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (dateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_Date + " = null";
        }
        else if (date != null) {
            if (sql.length() > 0) sql += " AND ";
            if (date2 != null && !date.equals(date2)) {
                sql += SalesOrder.P_Date + " >= ?";
                args = OAArray.add(Object.class, args, this.date);
                sql += " AND " + SalesOrder.P_Date + " <= ?";
                args = OAArray.add(Object.class, args, this.date2);
            }
            else {
                sql += SalesOrder.P_Date + " = ?";
                args = OAArray.add(Object.class, args, this.date);
            }
        }
        if (dateExpectedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateExpected + " = null";
        }
        else if (dateExpected != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateExpected2 != null && !dateExpected.equals(dateExpected2)) {
                sql += SalesOrder.P_DateExpected + " >= ?";
                args = OAArray.add(Object.class, args, this.dateExpected);
                sql += " AND " + SalesOrder.P_DateExpected + " <= ?";
                args = OAArray.add(Object.class, args, this.dateExpected2);
            }
            else {
                sql += SalesOrder.P_DateExpected + " = ?";
                args = OAArray.add(Object.class, args, this.dateExpected);
            }
        }
        if (dateSubmittedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateSubmitted + " = null";
        }
        else if (dateSubmittedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateSubmitted + " != null";
        }
        else if (dateSubmitted != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateSubmitted2 != null && !dateSubmitted.equals(dateSubmitted2)) {
                sql += SalesOrder.P_DateSubmitted + " >= ?";
                args = OAArray.add(Object.class, args, this.dateSubmitted);
                sql += " AND " + SalesOrder.P_DateSubmitted + " <= ?";
                args = OAArray.add(Object.class, args, this.dateSubmitted2);
            }
            else {
                sql += SalesOrder.P_DateSubmitted + " = ?";
                args = OAArray.add(Object.class, args, this.dateSubmitted);
            }
        }
        if (dateProcessedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateProcessed + " = null";
        }
        else if (dateProcessedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateProcessed + " != null";
        }
        else if (dateProcessed != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateProcessed2 != null && !dateProcessed.equals(dateProcessed2)) {
                sql += SalesOrder.P_DateProcessed + " >= ?";
                args = OAArray.add(Object.class, args, this.dateProcessed);
                sql += " AND " + SalesOrder.P_DateProcessed + " <= ?";
                args = OAArray.add(Object.class, args, this.dateProcessed2);
            }
            else {
                sql += SalesOrder.P_DateProcessed + " = ?";
                args = OAArray.add(Object.class, args, this.dateProcessed);
            }
        }
        if (dateClosedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateClosed + " = null";
        }
        else if (dateClosedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateClosed + " != null";
        }
        else if (dateClosed != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrder.P_DateClosed + " = ?";
            args = OAArray.add(Object.class, args, this.dateClosed);
        }
        if (salesCustomerShipToCityUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrderPP.salesCustomer().shipTo().city() + " = null OR " + SalesOrderPP.salesCustomer().shipTo().city() + " == '')";
        }
        else if (salesCustomerShipToCityUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesCustomer().shipTo().city() + " != null";
        }
        else if (!OAString.isEmpty(this.salesCustomerShipToCity)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesCustomerShipToCity.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderPP.salesCustomer().shipTo().city() + " LIKE ?";
            }
            else {
                sql += SalesOrderPP.salesCustomer().shipTo().city() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (salesCustomerShipToStateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrderPP.salesCustomer().shipTo().state() + " = null OR " + SalesOrderPP.salesCustomer().shipTo().state() + " == '')";
        }
        else if (salesCustomerShipToStateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderPP.salesCustomer().shipTo().state() + " != null";
        }
        else if (!OAString.isEmpty(this.salesCustomerShipToState)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.salesCustomerShipToState.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderPP.salesCustomer().shipTo().state() + " LIKE ?";
            }
            else {
                sql += SalesOrderPP.salesCustomer().shipTo().state() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (colorUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrder.P_Color + " = null OR " + SalesOrder.P_Color + " == '')";
        }
        else if (!OAString.isEmpty(this.color)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.color.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrder.P_Color + " LIKE ?";
            }
            else {
                sql += SalesOrder.P_Color + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (textureUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrder.P_Texture + " = null OR " + SalesOrder.P_Texture + " == '')";
        }
        else if (!OAString.isEmpty(this.texture)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.texture.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrder.P_Texture + " LIKE ?";
            }
            else {
                sql += SalesOrder.P_Texture + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (salesOrderSalesPersonUserUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + SalesOrderPP.salesPersonUser().pp + " = null";
        }
        else if (!useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUser() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + SalesOrderPP.salesPersonUser().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesOrderSalesPersonUser());
        }
        if (useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUserSearch() != null) {
            getSalesOrderSalesPersonUserSearch().appendSelect(prefix + SalesOrderPP.salesPersonUser().pp, select);
        }
        if (!useSalesCustomerSearch && getSalesCustomer() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + SalesOrderPP.salesCustomer().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesCustomer());
        }
        if (useSalesCustomerSearch && getSalesCustomerSearch() != null) {
            getSalesCustomerSearch().appendSelect(prefix + SalesOrderPP.salesCustomer().pp, select);
        }
        if (salesCustomerCustomerUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + SalesOrderPP.salesCustomer().customer().pp + " = null";
        }
        else if (!useSalesCustomerCustomerSearch && getSalesCustomerCustomer() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + SalesOrderPP.salesCustomer().customer().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesCustomerCustomer());
        }
        if (useSalesCustomerCustomerSearch && getSalesCustomerCustomerSearch() != null) {
            getSalesCustomerCustomerSearch().appendSelect(prefix + SalesOrderPP.salesCustomer().customer().pp, select);
        }
        if (!useSalesOrderItemsItemSearch && getSalesOrderItemsItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + SalesOrderPP.salesOrderItems().item().pp + " = ?";
            args = OAArray.add(Object.class, args, getSalesOrderItemsItem());
        }
        if (useSalesOrderItemsItemSearch && getSalesOrderItemsItemSearch() != null) {
            getSalesOrderItemsItemSearch().appendSelect(prefix + SalesOrderPP.salesOrderItems().item().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<SalesOrder> filterDataSourceFilter;
    public OAFilter<SalesOrder> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<SalesOrder>() {
            @Override
            public boolean isUsed(SalesOrder salesOrder) {
                return SalesOrderSearch.this.isUsedForDataSourceFilter(salesOrder);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<SalesOrder> filterCustomFilter;
    public OAFilter<SalesOrder> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<SalesOrder>() {
            @Override
            public boolean isUsed(SalesOrder salesOrder) {
                boolean b = SalesOrderSearch.this.isUsedForCustomFilter(salesOrder);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(salesOrder);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(SalesOrder searchSalesOrder) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchSalesOrder.getId(), id)) return false;
        }
        if (salesCustomerName != null) {
            String s = getSalesCustomerName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().name()), s)) return false;
        }
        if (salesOrderSalesPersonUserUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getSalesPersonUser())) return false;
        }
        else if (salesOrderSalesPersonUser != null) {
            if (!OACompare.isEqual(searchSalesOrder.getSalesPersonUser(), salesOrderSalesPersonUser)) return false;
        }
        if (projectUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getProject())) return false;
        }
        else if (projectUseNotNull) {
            if (OACompare.isEmpty(searchSalesOrder.getProject())) return false;
        }
        else if (project != null) {
            String s = getProject();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesOrder.getProject(), s)) return false;
        }
        if (dateUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getDate())) return false;
        }
        else if (date2 != null) {
            if (!OACompare.isEqualOrBetween(searchSalesOrder.getDate(), date, date2)) return false;
        }
        if (dateExpectedUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getDateExpected())) return false;
        }
        else if (dateExpected2 != null) {
            if (!OACompare.isEqualOrBetween(searchSalesOrder.getDateExpected(), dateExpected, dateExpected2)) return false;
        }
        if (dateSubmittedUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getDateSubmitted())) return false;
        }
        else if (dateSubmittedUseNotNull) {
            if (OACompare.isEmpty(searchSalesOrder.getDateSubmitted())) return false;
        }
        else if (dateSubmitted2 != null) {
            if (!OACompare.isEqualOrBetween(searchSalesOrder.getDateSubmitted(), dateSubmitted, dateSubmitted2)) return false;
        }
        if (dateProcessedUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getDateProcessed())) return false;
        }
        else if (dateProcessedUseNotNull) {
            if (OACompare.isEmpty(searchSalesOrder.getDateProcessed())) return false;
        }
        else if (dateProcessed2 != null) {
            if (!OACompare.isEqualOrBetween(searchSalesOrder.getDateProcessed(), dateProcessed, dateProcessed2)) return false;
        }
        if (dateClosedUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getDateClosed())) return false;
        }
        else if (dateClosedUseNotNull) {
            if (OACompare.isEmpty(searchSalesOrder.getDateClosed())) return false;
        }
        else if (dateClosed != null) {
            if (!OACompare.isEqual(searchSalesOrder.getDateClosed(), dateClosed)) return false;
        }
        if (salesCustomerShipToCityUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().shipTo().city()))) return false;
        }
        else if (salesCustomerShipToCityUseNotNull) {
            if (OACompare.isEmpty(searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().shipTo().city()))) return false;
        }
        else if (salesCustomerShipToCity != null) {
            String s = getSalesCustomerShipToCity();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().shipTo().city()), s)) return false;
        }
        if (salesCustomerShipToStateUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().shipTo().state()))) return false;
        }
        else if (salesCustomerShipToStateUseNotNull) {
            if (OACompare.isEmpty(searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().shipTo().state()))) return false;
        }
        else if (salesCustomerShipToState != null) {
            String s = getSalesCustomerShipToState();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().shipTo().state()), s)) return false;
        }
        if (colorUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getColor())) return false;
        }
        else if (color != null) {
            String s = getColor();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesOrder.getColor(), s)) return false;
        }
        if (textureUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getTexture())) return false;
        }
        else if (texture != null) {
            String s = getTexture();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesOrder.getTexture(), s)) return false;
        }
        if (salesCustomer != null) {
            if (!OACompare.isEqual(searchSalesOrder.getSalesCustomer(), salesCustomer)) return false;
        }
        if (salesCustomerCustomerUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().customer().pp))) return false;
        }
        else if (!useSalesCustomerCustomerSearch && salesCustomerCustomer != null) {
            if (!OACompare.isEqual(searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().customer().pp), salesCustomerCustomer)) return false;
        }
        if (this.salesOrderItemsItem != null) {
            OAFinder<SalesOrder, SalesOrderItem> finder = new OAFinder<SalesOrder, SalesOrderItem>(SalesOrderPP.salesOrderItems().pp);
             if (salesOrderItemsItem != null) {
                finder.addEqualFilter(SalesOrderItemPP.item().pp, getSalesOrderItemsItem());
            }
            if (finder.findFirst(searchSalesOrder) == null) return false;
        }
        if (useSalesOrderSalesPersonUserSearch && getSalesOrderSalesPersonUserSearch() != null) {
            User user = (User) searchSalesOrder.getProperty(SalesOrderPP.salesPersonUser().pp);
            if (user == null) return false;
            if (!getSalesOrderSalesPersonUserSearch().isUsedForDataSourceFilter(user)) return false;
        }
        if (useSalesCustomerSearch && getSalesCustomerSearch() != null) {
            SalesCustomer salesCustomer = (SalesCustomer) searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().pp);
            if (salesCustomer == null) return false;
            if (!getSalesCustomerSearch().isUsedForDataSourceFilter(salesCustomer)) return false;
        }
        if (useSalesCustomerCustomerSearch && getSalesCustomerCustomerSearch() != null) {
            Customer customer = (Customer) searchSalesOrder.getProperty(SalesOrderPP.salesCustomer().customer().pp);
            if (customer == null) return false;
            if (!getSalesCustomerCustomerSearch().isUsedForDataSourceFilter(customer)) return false;
        }
        if (useSalesOrderItemsItemSearch && getSalesOrderItemsItemSearch() != null) {
            OAFinder<SalesOrder, Item> finder = new OAFinder<SalesOrder, Item>(SalesOrderPP.salesOrderItems().item().pp) {
                @Override
                protected boolean isUsed(Item item) {
                    return getSalesOrderItemsItemSearch().isUsedForDataSourceFilter(item);
                }
            };
            if (finder.findFirst(searchSalesOrder) == null) return false;;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(SalesOrder searchSalesOrder) {
        return true;
    }
}
