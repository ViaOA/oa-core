// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class SalesOrderStatusSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(SalesOrderStatusSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_Description = "Description";
    public static final String P_DescriptionUseNull = "DescriptionUseNull";
    public static final String P_DescriptionUseNotNull = "DescriptionUseNotNull";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected String description;
    protected boolean descriptionUseNull;
    protected boolean descriptionUseNotNull;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_name = 1;
    public static final int SORTBYTYPE_id = 2;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Name");
        hubSortByType.add("Id");
    }

    public SalesOrderStatusSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
      
    public boolean getDescriptionUseNull() {
        return descriptionUseNull;
    }
    public void setDescriptionUseNull(boolean newValue) {
        boolean old = this.descriptionUseNull;
        this.descriptionUseNull = newValue;
        firePropertyChange(P_DescriptionUseNull, old, this.descriptionUseNull);
    }
    public boolean getDescriptionUseNotNull() {
        return descriptionUseNotNull;
    }
    public void setDescriptionUseNotNull(boolean newValue) {
        boolean old = this.descriptionUseNotNull;
        this.descriptionUseNotNull = newValue;
        firePropertyChange(P_DescriptionUseNotNull, old, this.descriptionUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setDescription(null);
        setDescriptionUseNull(false);
        setDescriptionUseNotNull(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (getDescription() != null) return true;
        if (getDescriptionUseNull()) return true;if (getDescriptionUseNotNull()) return true;
        if (getDescriptionUseNull()) return true;
        if (getDescriptionUseNotNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<SalesOrderStatus> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<SalesOrderStatus> f = new OAQueryFilter<SalesOrderStatus>(SalesOrderStatus.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<SalesOrderStatus> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<SalesOrderStatus> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<SalesOrderStatus> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_name: sortOrder = SalesOrderStatus.P_Name; break;
            case SORTBYTYPE_id: sortOrder = SalesOrderStatus.P_Id; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderStatus.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrderStatus.P_Name + " = null OR " + SalesOrderStatus.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderStatus.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderStatus.P_Name + " LIKE ?";
            }
            else {
                sql += SalesOrderStatus.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (descriptionUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrderStatus.P_Description + " = null OR " + SalesOrderStatus.P_Description + " == '')";
        }
        else if (descriptionUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderStatus.P_Description + " != null";
        }
        else if (!OAString.isEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.description.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderStatus.P_Description + " LIKE ?";
            }
            else {
                sql += SalesOrderStatus.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<SalesOrderStatus> select = new OASelect<SalesOrderStatus>(SalesOrderStatus.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderStatus.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrderStatus.P_Name + " = null OR " + SalesOrderStatus.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderStatus.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderStatus.P_Name + " LIKE ?";
            }
            else {
                sql += SalesOrderStatus.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (descriptionUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + SalesOrderStatus.P_Description + " = null OR " + SalesOrderStatus.P_Description + " == '')";
        }
        else if (descriptionUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += SalesOrderStatus.P_Description + " != null";
        }
        else if (!OAString.isEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.description.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += SalesOrderStatus.P_Description + " LIKE ?";
            }
            else {
                sql += SalesOrderStatus.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        select.add(sql, args);
    }

    private OAFilter<SalesOrderStatus> filterDataSourceFilter;
    public OAFilter<SalesOrderStatus> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<SalesOrderStatus>() {
            @Override
            public boolean isUsed(SalesOrderStatus salesOrderStatus) {
                return SalesOrderStatusSearch.this.isUsedForDataSourceFilter(salesOrderStatus);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<SalesOrderStatus> filterCustomFilter;
    public OAFilter<SalesOrderStatus> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<SalesOrderStatus>() {
            @Override
            public boolean isUsed(SalesOrderStatus salesOrderStatus) {
                boolean b = SalesOrderStatusSearch.this.isUsedForCustomFilter(salesOrderStatus);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(salesOrderStatus);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(SalesOrderStatus searchSalesOrderStatus) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchSalesOrderStatus.getId(), id)) return false;
        }
        if (nameUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrderStatus.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(searchSalesOrderStatus.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesOrderStatus.getName(), s)) return false;
        }
        if (descriptionUseNull) {
            if (OACompare.isNotEmpty(searchSalesOrderStatus.getDescription())) return false;
        }
        else if (descriptionUseNotNull) {
            if (OACompare.isEmpty(searchSalesOrderStatus.getDescription())) return false;
        }
        else if (description != null) {
            String s = getDescription();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchSalesOrderStatus.getDescription(), s)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(SalesOrderStatus searchSalesOrderStatus) {
        return true;
    }
}
