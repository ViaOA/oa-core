// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class ScheduleTypeSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ScheduleTypeSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_BreakageDays = "BreakageDays";
    public static final String P_BreakageDays2 = "BreakageDays2";
    public static final String P_MaxResults = "MaxResults";

    protected int id;
    protected int breakageDays;
    protected int breakageDays2;
    protected int maxResults;

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    /**
      Number of days to allow for breakage.
    */
    public int getBreakageDays() {
        return breakageDays;
    }
    public void setBreakageDays(int newValue) {
        int old = breakageDays;
        fireBeforePropertyChange(P_BreakageDays, old, newValue);
        this.breakageDays = newValue;
        firePropertyChange(P_BreakageDays, old, this.breakageDays);
        if (isLoading()) return;
        if (breakageDays > breakageDays2) setBreakageDays2(this.breakageDays);
    } 
    /**
      Number of days to allow for breakage.
    */
    public int getBreakageDays2() {
        return breakageDays2;
    }
    public void setBreakageDays2(int newValue) {
        int old = breakageDays2;
        fireBeforePropertyChange(P_BreakageDays2, old, newValue);
        this.breakageDays2 = newValue;
        firePropertyChange(P_BreakageDays2, old, this.breakageDays2);
        if (isLoading()) return;
        if (breakageDays > breakageDays2) setBreakageDays(this.breakageDays2);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setBreakageDays(0);
        setNull(P_BreakageDays);
        setBreakageDays2(0);
        setNull(P_BreakageDays2);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;

        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<ScheduleType> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<ScheduleType> f = new OAQueryFilter<ScheduleType>(ScheduleType.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<ScheduleType> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<ScheduleType> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<ScheduleType> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += ScheduleType.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!isNull(P_BreakageDays)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_BreakageDays2) && breakageDays != breakageDays2) {
                sql += ScheduleType.P_BreakageDays + " >= ?";
                args = OAArray.add(Object.class, args, getBreakageDays());
                sql += " AND " + ScheduleType.P_BreakageDays + " <= ?";
                args = OAArray.add(Object.class, args, getBreakageDays2());
            }
            else {
                sql += ScheduleType.P_BreakageDays + " = ?";
                args = OAArray.add(Object.class, args, getBreakageDays());
            }
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<ScheduleType> select = new OASelect<ScheduleType>(ScheduleType.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += ScheduleType.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!isNull(P_BreakageDays)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_BreakageDays2) && breakageDays != breakageDays2) {
                sql += ScheduleType.P_BreakageDays + " >= ?";
                args = OAArray.add(Object.class, args, getBreakageDays());
                sql += " AND " + ScheduleType.P_BreakageDays + " <= ?";
                args = OAArray.add(Object.class, args, getBreakageDays2());
            }
            else {
                sql += ScheduleType.P_BreakageDays + " = ?";
                args = OAArray.add(Object.class, args, getBreakageDays());
            }
        }
        select.add(sql, args);
    }

    private OAFilter<ScheduleType> filterDataSourceFilter;
    public OAFilter<ScheduleType> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<ScheduleType>() {
            @Override
            public boolean isUsed(ScheduleType scheduleType) {
                return ScheduleTypeSearch.this.isUsedForDataSourceFilter(scheduleType);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<ScheduleType> filterCustomFilter;
    public OAFilter<ScheduleType> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<ScheduleType>() {
            @Override
            public boolean isUsed(ScheduleType scheduleType) {
                boolean b = ScheduleTypeSearch.this.isUsedForCustomFilter(scheduleType);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(scheduleType);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(ScheduleType searchScheduleType) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchScheduleType.getId(), id)) return false;
        }
        if (!isNull(P_BreakageDays2)) {
            if (!OACompare.isEqualOrBetween(searchScheduleType.getBreakageDays(), breakageDays, breakageDays2)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(ScheduleType searchScheduleType) {
        return true;
    }
}
