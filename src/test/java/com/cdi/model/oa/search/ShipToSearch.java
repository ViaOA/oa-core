// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class ShipToSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ShipToSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_Name2 = "Name2";
    public static final String P_Name2UseNull = "Name2UseNull";
    public static final String P_Name2UseNotNull = "Name2UseNotNull";
    public static final String P_Address = "Address";
    public static final String P_AddressUseNull = "AddressUseNull";
    public static final String P_AddressUseNotNull = "AddressUseNotNull";
    public static final String P_Address2 = "Address2";
    public static final String P_Address2UseNull = "Address2UseNull";
    public static final String P_Address2UseNotNull = "Address2UseNotNull";
    public static final String P_Address3 = "Address3";
    public static final String P_Address3UseNull = "Address3UseNull";
    public static final String P_Address3UseNotNull = "Address3UseNotNull";
    public static final String P_City = "City";
    public static final String P_CityUseNull = "CityUseNull";
    public static final String P_CityUseNotNull = "CityUseNotNull";
    public static final String P_State = "State";
    public static final String P_StateUseNull = "StateUseNull";
    public static final String P_StateUseNotNull = "StateUseNotNull";
    public static final String P_Zip = "Zip";
    public static final String P_ZipUseNull = "ZipUseNull";
    public static final String P_ZipUseNotNull = "ZipUseNotNull";
    public static final String P_ShipToOrders = "ShipToOrders";
    public static final String P_UseShipToOrdersSearch = "UseShipToOrdersSearch";
    public static final String P_ShipToSalesCustomers = "ShipToSalesCustomers";
    public static final String P_UseShipToSalesCustomersSearch = "UseShipToSalesCustomersSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected String name2;
    protected boolean name2UseNull;
    protected boolean name2UseNotNull;
    protected String address;
    protected boolean addressUseNull;
    protected boolean addressUseNotNull;
    protected String address2;
    protected boolean address2UseNull;
    protected boolean address2UseNotNull;
    protected String address3;
    protected boolean address3UseNull;
    protected boolean address3UseNotNull;
    protected String city;
    protected boolean cityUseNull;
    protected boolean cityUseNotNull;
    protected String state;
    protected boolean stateUseNull;
    protected boolean stateUseNotNull;
    protected String zip;
    protected boolean zipUseNull;
    protected boolean zipUseNotNull;
    protected Order shipToOrders;
    protected boolean useShipToOrdersSearch;
    protected OrderSearch searchShipToOrders;
    protected SalesCustomer shipToSalesCustomers;
    protected boolean useShipToSalesCustomersSearch;
    protected SalesCustomerSearch searchShipToSalesCustomers;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_state = 1;
    public static final int SORTBYTYPE_country = 2;
    public static final int SORTBYTYPE_name = 3;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("State");
        hubSortByType.add("Country");
        hubSortByType.add("Name");
    }

    public ShipToSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public String getName2() {
        return name2;
    }
    public void setName2(String newValue) {
        String old = name2;
        fireBeforePropertyChange(P_Name2, old, newValue);
        this.name2 = newValue;
        firePropertyChange(P_Name2, old, this.name2);
    }
      
    public boolean getName2UseNull() {
        return name2UseNull;
    }
    public void setName2UseNull(boolean newValue) {
        boolean old = this.name2UseNull;
        this.name2UseNull = newValue;
        firePropertyChange(P_Name2UseNull, old, this.name2UseNull);
    }
    public boolean getName2UseNotNull() {
        return name2UseNotNull;
    }
    public void setName2UseNotNull(boolean newValue) {
        boolean old = this.name2UseNotNull;
        this.name2UseNotNull = newValue;
        firePropertyChange(P_Name2UseNotNull, old, this.name2UseNotNull);
    }

    public String getAddress() {
        return address;
    }
    public void setAddress(String newValue) {
        String old = address;
        fireBeforePropertyChange(P_Address, old, newValue);
        this.address = newValue;
        firePropertyChange(P_Address, old, this.address);
    }
      
    public boolean getAddressUseNull() {
        return addressUseNull;
    }
    public void setAddressUseNull(boolean newValue) {
        boolean old = this.addressUseNull;
        this.addressUseNull = newValue;
        firePropertyChange(P_AddressUseNull, old, this.addressUseNull);
    }
    public boolean getAddressUseNotNull() {
        return addressUseNotNull;
    }
    public void setAddressUseNotNull(boolean newValue) {
        boolean old = this.addressUseNotNull;
        this.addressUseNotNull = newValue;
        firePropertyChange(P_AddressUseNotNull, old, this.addressUseNotNull);
    }

    public String getAddress2() {
        return address2;
    }
    public void setAddress2(String newValue) {
        String old = address2;
        fireBeforePropertyChange(P_Address2, old, newValue);
        this.address2 = newValue;
        firePropertyChange(P_Address2, old, this.address2);
    }
      
    public boolean getAddress2UseNull() {
        return address2UseNull;
    }
    public void setAddress2UseNull(boolean newValue) {
        boolean old = this.address2UseNull;
        this.address2UseNull = newValue;
        firePropertyChange(P_Address2UseNull, old, this.address2UseNull);
    }
    public boolean getAddress2UseNotNull() {
        return address2UseNotNull;
    }
    public void setAddress2UseNotNull(boolean newValue) {
        boolean old = this.address2UseNotNull;
        this.address2UseNotNull = newValue;
        firePropertyChange(P_Address2UseNotNull, old, this.address2UseNotNull);
    }

    public String getAddress3() {
        return address3;
    }
    public void setAddress3(String newValue) {
        String old = address3;
        fireBeforePropertyChange(P_Address3, old, newValue);
        this.address3 = newValue;
        firePropertyChange(P_Address3, old, this.address3);
    }
      
    public boolean getAddress3UseNull() {
        return address3UseNull;
    }
    public void setAddress3UseNull(boolean newValue) {
        boolean old = this.address3UseNull;
        this.address3UseNull = newValue;
        firePropertyChange(P_Address3UseNull, old, this.address3UseNull);
    }
    public boolean getAddress3UseNotNull() {
        return address3UseNotNull;
    }
    public void setAddress3UseNotNull(boolean newValue) {
        boolean old = this.address3UseNotNull;
        this.address3UseNotNull = newValue;
        firePropertyChange(P_Address3UseNotNull, old, this.address3UseNotNull);
    }

    public String getCity() {
        return city;
    }
    public void setCity(String newValue) {
        String old = city;
        fireBeforePropertyChange(P_City, old, newValue);
        this.city = newValue;
        firePropertyChange(P_City, old, this.city);
    }
      
    public boolean getCityUseNull() {
        return cityUseNull;
    }
    public void setCityUseNull(boolean newValue) {
        boolean old = this.cityUseNull;
        this.cityUseNull = newValue;
        firePropertyChange(P_CityUseNull, old, this.cityUseNull);
    }
    public boolean getCityUseNotNull() {
        return cityUseNotNull;
    }
    public void setCityUseNotNull(boolean newValue) {
        boolean old = this.cityUseNotNull;
        this.cityUseNotNull = newValue;
        firePropertyChange(P_CityUseNotNull, old, this.cityUseNotNull);
    }

    public String getState() {
        return state;
    }
    public void setState(String newValue) {
        String old = state;
        fireBeforePropertyChange(P_State, old, newValue);
        this.state = newValue;
        firePropertyChange(P_State, old, this.state);
    }
      
    public boolean getStateUseNull() {
        return stateUseNull;
    }
    public void setStateUseNull(boolean newValue) {
        boolean old = this.stateUseNull;
        this.stateUseNull = newValue;
        firePropertyChange(P_StateUseNull, old, this.stateUseNull);
    }
    public boolean getStateUseNotNull() {
        return stateUseNotNull;
    }
    public void setStateUseNotNull(boolean newValue) {
        boolean old = this.stateUseNotNull;
        this.stateUseNotNull = newValue;
        firePropertyChange(P_StateUseNotNull, old, this.stateUseNotNull);
    }

    public String getZip() {
        return zip;
    }
    public void setZip(String newValue) {
        String old = zip;
        fireBeforePropertyChange(P_Zip, old, newValue);
        this.zip = newValue;
        firePropertyChange(P_Zip, old, this.zip);
    }
      
    public boolean getZipUseNull() {
        return zipUseNull;
    }
    public void setZipUseNull(boolean newValue) {
        boolean old = this.zipUseNull;
        this.zipUseNull = newValue;
        firePropertyChange(P_ZipUseNull, old, this.zipUseNull);
    }
    public boolean getZipUseNotNull() {
        return zipUseNotNull;
    }
    public void setZipUseNotNull(boolean newValue) {
        boolean old = this.zipUseNotNull;
        this.zipUseNotNull = newValue;
        firePropertyChange(P_ZipUseNotNull, old, this.zipUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public Order getShipToOrders() {
        if (shipToOrders == null) {
            shipToOrders = (Order) getObject(P_ShipToOrders);
        }
        return shipToOrders;
    }
    public void setShipToOrders(Order newValue) {
        Order old = this.shipToOrders;
        this.shipToOrders = newValue;
        firePropertyChange(P_ShipToOrders, old, this.shipToOrders);
    }
    public boolean getUseShipToOrdersSearch() {
        return useShipToOrdersSearch;
    }
    public void setUseShipToOrdersSearch(boolean newValue) {
        boolean old = this.useShipToOrdersSearch;
        this.useShipToOrdersSearch = newValue;
        firePropertyChange(P_UseShipToOrdersSearch, old, this.useShipToOrdersSearch);
    }
    public OrderSearch getShipToOrdersSearch() {
        return this.searchShipToOrders;
    }
    public void setShipToOrdersSearch(OrderSearch newValue) {
        this.searchShipToOrders = newValue;
    }

    @OAOne
    public SalesCustomer getShipToSalesCustomers() {
        if (shipToSalesCustomers == null) {
            shipToSalesCustomers = (SalesCustomer) getObject(P_ShipToSalesCustomers);
        }
        return shipToSalesCustomers;
    }
    public void setShipToSalesCustomers(SalesCustomer newValue) {
        SalesCustomer old = this.shipToSalesCustomers;
        this.shipToSalesCustomers = newValue;
        firePropertyChange(P_ShipToSalesCustomers, old, this.shipToSalesCustomers);
    }
    public boolean getUseShipToSalesCustomersSearch() {
        return useShipToSalesCustomersSearch;
    }
    public void setUseShipToSalesCustomersSearch(boolean newValue) {
        boolean old = this.useShipToSalesCustomersSearch;
        this.useShipToSalesCustomersSearch = newValue;
        firePropertyChange(P_UseShipToSalesCustomersSearch, old, this.useShipToSalesCustomersSearch);
    }
    public SalesCustomerSearch getShipToSalesCustomersSearch() {
        return this.searchShipToSalesCustomers;
    }
    public void setShipToSalesCustomersSearch(SalesCustomerSearch newValue) {
        this.searchShipToSalesCustomers = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setName2(null);
        setName2UseNull(false);
        setName2UseNotNull(false);
        setAddress(null);
        setAddressUseNull(false);
        setAddressUseNotNull(false);
        setAddress2(null);
        setAddress2UseNull(false);
        setAddress2UseNotNull(false);
        setAddress3(null);
        setAddress3UseNull(false);
        setAddress3UseNotNull(false);
        setCity(null);
        setCityUseNull(false);
        setCityUseNotNull(false);
        setState(null);
        setStateUseNull(false);
        setStateUseNotNull(false);
        setZip(null);
        setZipUseNull(false);
        setZipUseNotNull(false);
        setShipToOrders(null);
        setUseShipToOrdersSearch(false);
        setShipToSalesCustomers(null);
        setUseShipToSalesCustomersSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (getName2() != null) return true;
        if (getName2UseNull()) return true;if (getName2UseNotNull()) return true;
        if (getName2UseNull()) return true;
        if (getName2UseNotNull()) return true;
        if (getAddress() != null) return true;
        if (getAddressUseNull()) return true;if (getAddressUseNotNull()) return true;
        if (getAddressUseNull()) return true;
        if (getAddressUseNotNull()) return true;
        if (getAddress2() != null) return true;
        if (getAddress2UseNull()) return true;if (getAddress2UseNotNull()) return true;
        if (getAddress2UseNull()) return true;
        if (getAddress2UseNotNull()) return true;
        if (getAddress3() != null) return true;
        if (getAddress3UseNull()) return true;if (getAddress3UseNotNull()) return true;
        if (getAddress3UseNull()) return true;
        if (getAddress3UseNotNull()) return true;
        if (getCity() != null) return true;
        if (getCityUseNull()) return true;if (getCityUseNotNull()) return true;
        if (getCityUseNull()) return true;
        if (getCityUseNotNull()) return true;
        if (getState() != null) return true;
        if (getStateUseNull()) return true;if (getStateUseNotNull()) return true;
        if (getStateUseNull()) return true;
        if (getStateUseNotNull()) return true;
        if (getZip() != null) return true;
        if (getZipUseNull()) return true;if (getZipUseNotNull()) return true;
        if (getZipUseNull()) return true;
        if (getZipUseNotNull()) return true;
        if (getShipToOrders() != null) return true;
        if (getUseShipToOrdersSearch()) return true;
        if (getShipToSalesCustomers() != null) return true;
        if (getUseShipToSalesCustomersSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<ShipTo> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<ShipTo> f = new OAQueryFilter<ShipTo>(ShipTo.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<ShipTo> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<ShipTo> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<ShipTo> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_state: sortOrder = ShipTo.P_State; break;
            case SORTBYTYPE_country: sortOrder = ShipTo.P_Country; break;
            case SORTBYTYPE_name: sortOrder = ShipTo.P_Name; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Name + " = null OR " + ShipTo.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Name + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (name2UseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Name2 + " = null OR " + ShipTo.P_Name2 + " == '')";
        }
        else if (name2UseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Name2 + " != null";
        }
        else if (!OAString.isEmpty(this.name2)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name2.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Name2 + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Name2 + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (addressUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Address + " = null OR " + ShipTo.P_Address + " == '')";
        }
        else if (addressUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Address + " != null";
        }
        else if (!OAString.isEmpty(this.address)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.address.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Address + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Address + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (address2UseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Address2 + " = null OR " + ShipTo.P_Address2 + " == '')";
        }
        else if (address2UseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Address2 + " != null";
        }
        else if (!OAString.isEmpty(this.address2)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.address2.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Address2 + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Address2 + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (address3UseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Address3 + " = null OR " + ShipTo.P_Address3 + " == '')";
        }
        else if (address3UseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Address3 + " != null";
        }
        else if (!OAString.isEmpty(this.address3)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.address3.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Address3 + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Address3 + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (cityUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_City + " = null OR " + ShipTo.P_City + " == '')";
        }
        else if (cityUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_City + " != null";
        }
        else if (!OAString.isEmpty(this.city)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.city.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_City + " LIKE ?";
            }
            else {
                sql += ShipTo.P_City + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (stateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_State + " = null OR " + ShipTo.P_State + " == '')";
        }
        else if (stateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_State + " != null";
        }
        else if (!OAString.isEmpty(this.state)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.state.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_State + " LIKE ?";
            }
            else {
                sql += ShipTo.P_State + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (zipUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Zip + " = null OR " + ShipTo.P_Zip + " == '')";
        }
        else if (zipUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Zip + " != null";
        }
        else if (!OAString.isEmpty(this.zip)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.zip.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Zip + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Zip + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useShipToOrdersSearch && getShipToOrders() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipToPP.orders().pp + " = ?";
            args = OAArray.add(Object.class, args, getShipToOrders());
            finder = new OAFinder<Order, ShipTo>(getShipToOrders(), Order.P_ShipTo);
        }
        if (!useShipToSalesCustomersSearch && getShipToSalesCustomers() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipToPP.salesCustomers().pp + " = ?";
            args = OAArray.add(Object.class, args, getShipToSalesCustomers());
            finder = new OAFinder<SalesCustomer, ShipTo>(getShipToSalesCustomers(), SalesCustomer.P_ShipTo);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<ShipTo> select = new OASelect<ShipTo>(ShipTo.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useShipToOrdersSearch && getShipToOrdersSearch() != null) {
            getShipToOrdersSearch().appendSelect(ShipToPP.orders().pp, select);
        }
        if (useShipToSalesCustomersSearch && getShipToSalesCustomersSearch() != null) {
            getShipToSalesCustomersSearch().appendSelect(ShipToPP.salesCustomers().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Name + " = null OR " + ShipTo.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Name + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (name2UseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Name2 + " = null OR " + ShipTo.P_Name2 + " == '')";
        }
        else if (name2UseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Name2 + " != null";
        }
        else if (!OAString.isEmpty(this.name2)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name2.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Name2 + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Name2 + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (addressUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Address + " = null OR " + ShipTo.P_Address + " == '')";
        }
        else if (addressUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Address + " != null";
        }
        else if (!OAString.isEmpty(this.address)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.address.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Address + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Address + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (address2UseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Address2 + " = null OR " + ShipTo.P_Address2 + " == '')";
        }
        else if (address2UseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Address2 + " != null";
        }
        else if (!OAString.isEmpty(this.address2)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.address2.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Address2 + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Address2 + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (address3UseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Address3 + " = null OR " + ShipTo.P_Address3 + " == '')";
        }
        else if (address3UseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Address3 + " != null";
        }
        else if (!OAString.isEmpty(this.address3)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.address3.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Address3 + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Address3 + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (cityUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_City + " = null OR " + ShipTo.P_City + " == '')";
        }
        else if (cityUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_City + " != null";
        }
        else if (!OAString.isEmpty(this.city)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.city.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_City + " LIKE ?";
            }
            else {
                sql += ShipTo.P_City + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (stateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_State + " = null OR " + ShipTo.P_State + " == '')";
        }
        else if (stateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_State + " != null";
        }
        else if (!OAString.isEmpty(this.state)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.state.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_State + " LIKE ?";
            }
            else {
                sql += ShipTo.P_State + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (zipUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + ShipTo.P_Zip + " = null OR " + ShipTo.P_Zip + " == '')";
        }
        else if (zipUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ShipTo.P_Zip + " != null";
        }
        else if (!OAString.isEmpty(this.zip)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.zip.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += ShipTo.P_Zip + " LIKE ?";
            }
            else {
                sql += ShipTo.P_Zip + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useShipToOrdersSearch && getShipToOrders() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + ShipToPP.orders().pp + " = ?";
            args = OAArray.add(Object.class, args, getShipToOrders());
        }
        if (useShipToOrdersSearch && getShipToOrdersSearch() != null) {
            getShipToOrdersSearch().appendSelect(prefix + ShipToPP.orders().pp, select);
        }
        if (!useShipToSalesCustomersSearch && getShipToSalesCustomers() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + ShipToPP.salesCustomers().pp + " = ?";
            args = OAArray.add(Object.class, args, getShipToSalesCustomers());
        }
        if (useShipToSalesCustomersSearch && getShipToSalesCustomersSearch() != null) {
            getShipToSalesCustomersSearch().appendSelect(prefix + ShipToPP.salesCustomers().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<ShipTo> filterDataSourceFilter;
    public OAFilter<ShipTo> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<ShipTo>() {
            @Override
            public boolean isUsed(ShipTo shipTo) {
                return ShipToSearch.this.isUsedForDataSourceFilter(shipTo);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<ShipTo> filterCustomFilter;
    public OAFilter<ShipTo> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<ShipTo>() {
            @Override
            public boolean isUsed(ShipTo shipTo) {
                boolean b = ShipToSearch.this.isUsedForCustomFilter(shipTo);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(shipTo);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(ShipTo searchShipTo) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchShipTo.getId(), id)) return false;
        }
        if (shipToOrders != null) {
            if (!OACompare.isIn(shipToOrders, searchShipTo.getOrders())) return false;
        }
        if (shipToSalesCustomers != null) {
            if (!OACompare.isIn(shipToSalesCustomers, searchShipTo.getSalesCustomers())) return false;
        }
        if (nameUseNull) {
            if (OACompare.isNotEmpty(searchShipTo.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(searchShipTo.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchShipTo.getName(), s)) return false;
        }
        if (name2UseNull) {
            if (OACompare.isNotEmpty(searchShipTo.getName2())) return false;
        }
        else if (name2UseNotNull) {
            if (OACompare.isEmpty(searchShipTo.getName2())) return false;
        }
        else if (name2 != null) {
            String s = getName2();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchShipTo.getName2(), s)) return false;
        }
        if (addressUseNull) {
            if (OACompare.isNotEmpty(searchShipTo.getAddress())) return false;
        }
        else if (addressUseNotNull) {
            if (OACompare.isEmpty(searchShipTo.getAddress())) return false;
        }
        else if (address != null) {
            String s = getAddress();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchShipTo.getAddress(), s)) return false;
        }
        if (address2UseNull) {
            if (OACompare.isNotEmpty(searchShipTo.getAddress2())) return false;
        }
        else if (address2UseNotNull) {
            if (OACompare.isEmpty(searchShipTo.getAddress2())) return false;
        }
        else if (address2 != null) {
            String s = getAddress2();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchShipTo.getAddress2(), s)) return false;
        }
        if (address3UseNull) {
            if (OACompare.isNotEmpty(searchShipTo.getAddress3())) return false;
        }
        else if (address3UseNotNull) {
            if (OACompare.isEmpty(searchShipTo.getAddress3())) return false;
        }
        else if (address3 != null) {
            String s = getAddress3();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchShipTo.getAddress3(), s)) return false;
        }
        if (cityUseNull) {
            if (OACompare.isNotEmpty(searchShipTo.getCity())) return false;
        }
        else if (cityUseNotNull) {
            if (OACompare.isEmpty(searchShipTo.getCity())) return false;
        }
        else if (city != null) {
            String s = getCity();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchShipTo.getCity(), s)) return false;
        }
        if (stateUseNull) {
            if (OACompare.isNotEmpty(searchShipTo.getState())) return false;
        }
        else if (stateUseNotNull) {
            if (OACompare.isEmpty(searchShipTo.getState())) return false;
        }
        else if (state != null) {
            String s = getState();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchShipTo.getState(), s)) return false;
        }
        if (zipUseNull) {
            if (OACompare.isNotEmpty(searchShipTo.getZip())) return false;
        }
        else if (zipUseNotNull) {
            if (OACompare.isEmpty(searchShipTo.getZip())) return false;
        }
        else if (zip != null) {
            String s = getZip();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchShipTo.getZip(), s)) return false;
        }
        if (useShipToOrdersSearch && getShipToOrdersSearch() != null) {
            Order order = (Order) searchShipTo.getProperty(ShipToPP.orders().pp);
            if (order == null) return false;
            if (!getShipToOrdersSearch().isUsedForDataSourceFilter(order)) return false;
        }
        if (useShipToSalesCustomersSearch && getShipToSalesCustomersSearch() != null) {
            SalesCustomer salesCustomer = (SalesCustomer) searchShipTo.getProperty(ShipToPP.salesCustomers().pp);
            if (salesCustomer == null) return false;
            if (!getShipToSalesCustomersSearch().isUsedForDataSourceFilter(salesCustomer)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(ShipTo searchShipTo) {
        return true;
    }
}
