// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.OAQueryFilter;


@OAClass(useDataSource=false, localOnly=true)
public class TruckSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(TruckSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Carrier = "Carrier";
    public static final String P_CarrierUseNull = "CarrierUseNull";
    public static final String P_CarrierUseNotNull = "CarrierUseNotNull";
    public static final String P_Contact = "Contact";
    public static final String P_ContactUseNull = "ContactUseNull";
    public static final String P_ContactUseNotNull = "ContactUseNotNull";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected String carrier;
    protected boolean carrierUseNull;
    protected boolean carrierUseNotNull;
    protected String contact;
    protected boolean contactUseNull;
    protected boolean contactUseNotNull;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_carrier = 1;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Carrier");
    }

    public TruckSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getCarrier() {
        return carrier;
    }
    public void setCarrier(String newValue) {
        String old = carrier;
        fireBeforePropertyChange(P_Carrier, old, newValue);
        this.carrier = newValue;
        firePropertyChange(P_Carrier, old, this.carrier);
    }
      
    public boolean getCarrierUseNull() {
        return carrierUseNull;
    }
    public void setCarrierUseNull(boolean newValue) {
        boolean old = this.carrierUseNull;
        this.carrierUseNull = newValue;
        firePropertyChange(P_CarrierUseNull, old, this.carrierUseNull);
    }
    public boolean getCarrierUseNotNull() {
        return carrierUseNotNull;
    }
    public void setCarrierUseNotNull(boolean newValue) {
        boolean old = this.carrierUseNotNull;
        this.carrierUseNotNull = newValue;
        firePropertyChange(P_CarrierUseNotNull, old, this.carrierUseNotNull);
    }

    public String getContact() {
        return contact;
    }
    public void setContact(String newValue) {
        String old = contact;
        fireBeforePropertyChange(P_Contact, old, newValue);
        this.contact = newValue;
        firePropertyChange(P_Contact, old, this.contact);
    }
      
    public boolean getContactUseNull() {
        return contactUseNull;
    }
    public void setContactUseNull(boolean newValue) {
        boolean old = this.contactUseNull;
        this.contactUseNull = newValue;
        firePropertyChange(P_ContactUseNull, old, this.contactUseNull);
    }
    public boolean getContactUseNotNull() {
        return contactUseNotNull;
    }
    public void setContactUseNotNull(boolean newValue) {
        boolean old = this.contactUseNotNull;
        this.contactUseNotNull = newValue;
        firePropertyChange(P_ContactUseNotNull, old, this.contactUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setCarrier(null);
        setCarrierUseNull(false);
        setCarrierUseNotNull(false);
        setContact(null);
        setContactUseNull(false);
        setContactUseNotNull(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getCarrier() != null) return true;
        if (getCarrierUseNull()) return true;if (getCarrierUseNotNull()) return true;
        if (getCarrierUseNull()) return true;
        if (getCarrierUseNotNull()) return true;
        if (getContact() != null) return true;
        if (getContactUseNull()) return true;if (getContactUseNotNull()) return true;
        if (getContactUseNull()) return true;
        if (getContactUseNotNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Truck> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Truck> f = new OAQueryFilter<Truck>(Truck.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Truck> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Truck> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Truck> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_carrier: sortOrder = Truck.P_Carrier; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Truck.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (carrierUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Truck.P_Carrier + " = null OR " + Truck.P_Carrier + " == '')";
        }
        else if (carrierUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Truck.P_Carrier + " != null";
        }
        else if (!OAString.isEmpty(this.carrier)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.carrier.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Truck.P_Carrier + " LIKE ?";
            }
            else {
                sql += Truck.P_Carrier + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (contactUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Truck.P_Contact + " = null OR " + Truck.P_Contact + " == '')";
        }
        else if (contactUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Truck.P_Contact + " != null";
        }
        else if (!OAString.isEmpty(this.contact)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.contact.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Truck.P_Contact + " LIKE ?";
            }
            else {
                sql += Truck.P_Contact + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Truck> select = new OASelect<Truck>(Truck.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Truck.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (carrierUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Truck.P_Carrier + " = null OR " + Truck.P_Carrier + " == '')";
        }
        else if (carrierUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Truck.P_Carrier + " != null";
        }
        else if (!OAString.isEmpty(this.carrier)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.carrier.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Truck.P_Carrier + " LIKE ?";
            }
            else {
                sql += Truck.P_Carrier + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (contactUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Truck.P_Contact + " = null OR " + Truck.P_Contact + " == '')";
        }
        else if (contactUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Truck.P_Contact + " != null";
        }
        else if (!OAString.isEmpty(this.contact)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.contact.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Truck.P_Contact + " LIKE ?";
            }
            else {
                sql += Truck.P_Contact + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        select.add(sql, args);
    }

    private OAFilter<Truck> filterDataSourceFilter;
    public OAFilter<Truck> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Truck>() {
            @Override
            public boolean isUsed(Truck truck) {
                return TruckSearch.this.isUsedForDataSourceFilter(truck);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Truck> filterCustomFilter;
    public OAFilter<Truck> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Truck>() {
            @Override
            public boolean isUsed(Truck truck) {
                boolean b = TruckSearch.this.isUsedForCustomFilter(truck);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(truck);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Truck searchTruck) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchTruck.getId(), id)) return false;
        }
        if (carrierUseNull) {
            if (OACompare.isNotEmpty(searchTruck.getCarrier())) return false;
        }
        else if (carrierUseNotNull) {
            if (OACompare.isEmpty(searchTruck.getCarrier())) return false;
        }
        else if (carrier != null) {
            String s = getCarrier();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchTruck.getCarrier(), s)) return false;
        }
        if (contactUseNull) {
            if (OACompare.isNotEmpty(searchTruck.getContact())) return false;
        }
        else if (contactUseNotNull) {
            if (OACompare.isEmpty(searchTruck.getContact())) return false;
        }
        else if (contact != null) {
            String s = getContact();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchTruck.getContact(), s)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Truck searchTruck) {
        return true;
    }
}
