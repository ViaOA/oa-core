// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;


@OAClass(useDataSource=false, localOnly=true)
public class UserSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(UserSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_LastName = "LastName";
    public static final String P_LastNameUseNull = "LastNameUseNull";
    public static final String P_LastNameUseNotNull = "LastNameUseNotNull";
    public static final String P_FirstName = "FirstName";
    public static final String P_FirstNameUseNull = "FirstNameUseNull";
    public static final String P_FirstNameUseNotNull = "FirstNameUseNotNull";
    public static final String P_Initials = "Initials";
    public static final String P_InitialsUseNull = "InitialsUseNull";
    public static final String P_InitialsUseNotNull = "InitialsUseNotNull";
    public static final String P_Code = "Code";
    public static final String P_CodeUseNull = "CodeUseNull";
    public static final String P_CodeUseNotNull = "CodeUseNotNull";
    public static final String P_LoginId = "LoginId";
    public static final String P_LoginIdUseNull = "LoginIdUseNull";
    public static final String P_LoginIdUseNotNull = "LoginIdUseNotNull";
    public static final String P_Email = "Email";
    public static final String P_EmailUseNull = "EmailUseNull";
    public static final String P_EmailUseNotNull = "EmailUseNotNull";
    public static final String P_PhoneCell = "PhoneCell";
    public static final String P_PhoneCellUseNull = "PhoneCellUseNull";
    public static final String P_PhoneCellUseNotNull = "PhoneCellUseNotNull";
    public static final String P_AdminAccess = "AdminAccess";
    public static final String P_SalesAccess = "SalesAccess";
    public static final String P_ProductionAccess = "ProductionAccess";
    public static final String P_MaxResults = "MaxResults";

    protected int id;
    protected String lastName;
    protected boolean lastNameUseNull;
    protected boolean lastNameUseNotNull;
    protected String firstName;
    protected boolean firstNameUseNull;
    protected boolean firstNameUseNotNull;
    protected String initials;
    protected boolean initialsUseNull;
    protected boolean initialsUseNotNull;
    protected String code;
    protected boolean codeUseNull;
    protected boolean codeUseNotNull;
    protected String loginId;
    protected boolean loginIdUseNull;
    protected boolean loginIdUseNotNull;
    protected String email;
    protected boolean emailUseNull;
    protected boolean emailUseNotNull;
    protected String phoneCell;
    protected boolean phoneCellUseNull;
    protected boolean phoneCellUseNotNull;
    protected boolean adminAccess;
    protected int salesAccess;
    protected int productionAccess;
    protected int maxResults;

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public String getLastName() {
        return lastName;
    }
    public void setLastName(String newValue) {
        String old = lastName;
        fireBeforePropertyChange(P_LastName, old, newValue);
        this.lastName = newValue;
        firePropertyChange(P_LastName, old, this.lastName);
    }
      
    public boolean getLastNameUseNull() {
        return lastNameUseNull;
    }
    public void setLastNameUseNull(boolean newValue) {
        boolean old = this.lastNameUseNull;
        this.lastNameUseNull = newValue;
        firePropertyChange(P_LastNameUseNull, old, this.lastNameUseNull);
    }
    public boolean getLastNameUseNotNull() {
        return lastNameUseNotNull;
    }
    public void setLastNameUseNotNull(boolean newValue) {
        boolean old = this.lastNameUseNotNull;
        this.lastNameUseNotNull = newValue;
        firePropertyChange(P_LastNameUseNotNull, old, this.lastNameUseNotNull);
    }

    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String newValue) {
        String old = firstName;
        fireBeforePropertyChange(P_FirstName, old, newValue);
        this.firstName = newValue;
        firePropertyChange(P_FirstName, old, this.firstName);
    }
      
    public boolean getFirstNameUseNull() {
        return firstNameUseNull;
    }
    public void setFirstNameUseNull(boolean newValue) {
        boolean old = this.firstNameUseNull;
        this.firstNameUseNull = newValue;
        firePropertyChange(P_FirstNameUseNull, old, this.firstNameUseNull);
    }
    public boolean getFirstNameUseNotNull() {
        return firstNameUseNotNull;
    }
    public void setFirstNameUseNotNull(boolean newValue) {
        boolean old = this.firstNameUseNotNull;
        this.firstNameUseNotNull = newValue;
        firePropertyChange(P_FirstNameUseNotNull, old, this.firstNameUseNotNull);
    }

    public String getInitials() {
        return initials;
    }
    public void setInitials(String newValue) {
        String old = initials;
        fireBeforePropertyChange(P_Initials, old, newValue);
        this.initials = newValue;
        firePropertyChange(P_Initials, old, this.initials);
    }
      
    public boolean getInitialsUseNull() {
        return initialsUseNull;
    }
    public void setInitialsUseNull(boolean newValue) {
        boolean old = this.initialsUseNull;
        this.initialsUseNull = newValue;
        firePropertyChange(P_InitialsUseNull, old, this.initialsUseNull);
    }
    public boolean getInitialsUseNotNull() {
        return initialsUseNotNull;
    }
    public void setInitialsUseNotNull(boolean newValue) {
        boolean old = this.initialsUseNotNull;
        this.initialsUseNotNull = newValue;
        firePropertyChange(P_InitialsUseNotNull, old, this.initialsUseNotNull);
    }

    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
      
    public boolean getCodeUseNull() {
        return codeUseNull;
    }
    public void setCodeUseNull(boolean newValue) {
        boolean old = this.codeUseNull;
        this.codeUseNull = newValue;
        firePropertyChange(P_CodeUseNull, old, this.codeUseNull);
    }
    public boolean getCodeUseNotNull() {
        return codeUseNotNull;
    }
    public void setCodeUseNotNull(boolean newValue) {
        boolean old = this.codeUseNotNull;
        this.codeUseNotNull = newValue;
        firePropertyChange(P_CodeUseNotNull, old, this.codeUseNotNull);
    }

    public String getLoginId() {
        return loginId;
    }
    public void setLoginId(String newValue) {
        String old = loginId;
        fireBeforePropertyChange(P_LoginId, old, newValue);
        this.loginId = newValue;
        firePropertyChange(P_LoginId, old, this.loginId);
    }
      
    public boolean getLoginIdUseNull() {
        return loginIdUseNull;
    }
    public void setLoginIdUseNull(boolean newValue) {
        boolean old = this.loginIdUseNull;
        this.loginIdUseNull = newValue;
        firePropertyChange(P_LoginIdUseNull, old, this.loginIdUseNull);
    }
    public boolean getLoginIdUseNotNull() {
        return loginIdUseNotNull;
    }
    public void setLoginIdUseNotNull(boolean newValue) {
        boolean old = this.loginIdUseNotNull;
        this.loginIdUseNotNull = newValue;
        firePropertyChange(P_LoginIdUseNotNull, old, this.loginIdUseNotNull);
    }

    public String getEmail() {
        return email;
    }
    public void setEmail(String newValue) {
        String old = email;
        fireBeforePropertyChange(P_Email, old, newValue);
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
      
    public boolean getEmailUseNull() {
        return emailUseNull;
    }
    public void setEmailUseNull(boolean newValue) {
        boolean old = this.emailUseNull;
        this.emailUseNull = newValue;
        firePropertyChange(P_EmailUseNull, old, this.emailUseNull);
    }
    public boolean getEmailUseNotNull() {
        return emailUseNotNull;
    }
    public void setEmailUseNotNull(boolean newValue) {
        boolean old = this.emailUseNotNull;
        this.emailUseNotNull = newValue;
        firePropertyChange(P_EmailUseNotNull, old, this.emailUseNotNull);
    }

    public String getPhoneCell() {
        return phoneCell;
    }
    public void setPhoneCell(String newValue) {
        String old = phoneCell;
        fireBeforePropertyChange(P_PhoneCell, old, newValue);
        this.phoneCell = newValue;
        firePropertyChange(P_PhoneCell, old, this.phoneCell);
    }
      
    public boolean getPhoneCellUseNull() {
        return phoneCellUseNull;
    }
    public void setPhoneCellUseNull(boolean newValue) {
        boolean old = this.phoneCellUseNull;
        this.phoneCellUseNull = newValue;
        firePropertyChange(P_PhoneCellUseNull, old, this.phoneCellUseNull);
    }
    public boolean getPhoneCellUseNotNull() {
        return phoneCellUseNotNull;
    }
    public void setPhoneCellUseNotNull(boolean newValue) {
        boolean old = this.phoneCellUseNotNull;
        this.phoneCellUseNotNull = newValue;
        firePropertyChange(P_PhoneCellUseNotNull, old, this.phoneCellUseNotNull);
    }

    public boolean getAdminAccess() {
        return adminAccess;
    }
    public void setAdminAccess(boolean newValue) {
        boolean old = adminAccess;
        fireBeforePropertyChange(P_AdminAccess, old, newValue);
        this.adminAccess = newValue;
        firePropertyChange(P_AdminAccess, old, this.adminAccess);
    }
      

    public int getSalesAccess() {
        return salesAccess;
    }
    public void setSalesAccess(int newValue) {
        int old = salesAccess;
        fireBeforePropertyChange(P_SalesAccess, old, newValue);
        this.salesAccess = newValue;
        firePropertyChange(P_SalesAccess, old, this.salesAccess);
    }
      

    public int getProductionAccess() {
        return productionAccess;
    }
    public void setProductionAccess(int newValue) {
        int old = productionAccess;
        fireBeforePropertyChange(P_ProductionAccess, old, newValue);
        this.productionAccess = newValue;
        firePropertyChange(P_ProductionAccess, old, this.productionAccess);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setLastName(null);
        setLastNameUseNull(false);
        setLastNameUseNotNull(false);
        setFirstName(null);
        setFirstNameUseNull(false);
        setFirstNameUseNotNull(false);
        setInitials(null);
        setInitialsUseNull(false);
        setInitialsUseNotNull(false);
        setCode(null);
        setCodeUseNull(false);
        setCodeUseNotNull(false);
        setLoginId(null);
        setLoginIdUseNull(false);
        setLoginIdUseNotNull(false);
        setEmail(null);
        setEmailUseNull(false);
        setEmailUseNotNull(false);
        setPhoneCell(null);
        setPhoneCellUseNull(false);
        setPhoneCellUseNotNull(false);
        setAdminAccess(false);
        setNull(P_AdminAccess);
        setSalesAccess(0);
        setNull(P_SalesAccess);
        setProductionAccess(0);
        setNull(P_ProductionAccess);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getLastName() != null) return true;
        if (getLastNameUseNull()) return true;if (getLastNameUseNotNull()) return true;
        if (getLastNameUseNull()) return true;
        if (getLastNameUseNotNull()) return true;
        if (getFirstName() != null) return true;
        if (getFirstNameUseNull()) return true;if (getFirstNameUseNotNull()) return true;
        if (getFirstNameUseNull()) return true;
        if (getFirstNameUseNotNull()) return true;
        if (getInitials() != null) return true;
        if (getInitialsUseNull()) return true;if (getInitialsUseNotNull()) return true;
        if (getInitialsUseNull()) return true;
        if (getInitialsUseNotNull()) return true;
        if (getCode() != null) return true;
        if (getCodeUseNull()) return true;if (getCodeUseNotNull()) return true;
        if (getCodeUseNull()) return true;
        if (getCodeUseNotNull()) return true;
        if (getLoginId() != null) return true;
        if (getLoginIdUseNull()) return true;if (getLoginIdUseNotNull()) return true;
        if (getLoginIdUseNull()) return true;
        if (getLoginIdUseNotNull()) return true;
        if (getEmail() != null) return true;
        if (getEmailUseNull()) return true;if (getEmailUseNotNull()) return true;
        if (getEmailUseNull()) return true;
        if (getEmailUseNotNull()) return true;
        if (getPhoneCell() != null) return true;
        if (getPhoneCellUseNull()) return true;if (getPhoneCellUseNotNull()) return true;
        if (getPhoneCellUseNull()) return true;
        if (getPhoneCellUseNotNull()) return true;
        if (!isNull(P_AdminAccess)) return true;
        if (!isNull(P_SalesAccess)) return true;
        if (!isNull(P_ProductionAccess)) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<User> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<User> f = new OAQueryFilter<User>(User.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<User> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<User> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<User> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (lastNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_LastName + " = null OR " + User.P_LastName + " == '')";
        }
        else if (lastNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_LastName + " != null";
        }
        else if (!OAString.isEmpty(this.lastName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.lastName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_LastName + " LIKE ?";
            }
            else {
                sql += User.P_LastName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (firstNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_FirstName + " = null OR " + User.P_FirstName + " == '')";
        }
        else if (firstNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_FirstName + " != null";
        }
        else if (!OAString.isEmpty(this.firstName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.firstName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_FirstName + " LIKE ?";
            }
            else {
                sql += User.P_FirstName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (initialsUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_Initials + " = null OR " + User.P_Initials + " == '')";
        }
        else if (initialsUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_Initials + " != null";
        }
        else if (!OAString.isEmpty(this.initials)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.initials.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_Initials + " LIKE ?";
            }
            else {
                sql += User.P_Initials + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (codeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_Code + " = null OR " + User.P_Code + " == '')";
        }
        else if (codeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_Code + " != null";
        }
        else if (!OAString.isEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.code.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_Code + " LIKE ?";
            }
            else {
                sql += User.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (loginIdUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_LoginId + " = null OR " + User.P_LoginId + " == '')";
        }
        else if (loginIdUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_LoginId + " != null";
        }
        else if (!OAString.isEmpty(this.loginId)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.loginId.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_LoginId + " LIKE ?";
            }
            else {
                sql += User.P_LoginId + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (emailUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_Email + " = null OR " + User.P_Email + " == '')";
        }
        else if (emailUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_Email + " != null";
        }
        else if (!OAString.isEmpty(this.email)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.email.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_Email + " LIKE ?";
            }
            else {
                sql += User.P_Email + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (phoneCellUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_PhoneCell + " = null OR " + User.P_PhoneCell + " == '')";
        }
        else if (phoneCellUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_PhoneCell + " != null";
        }
        else if (!OAString.isEmpty(this.phoneCell)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.phoneCell.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_PhoneCell + " LIKE ?";
            }
            else {
                sql += User.P_PhoneCell + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_AdminAccess)) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_AdminAccess + " = ?";
            args = OAArray.add(Object.class, args, this.adminAccess);
        }
        if (!isNull(P_SalesAccess)) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_SalesAccess + " = ?";
            args = OAArray.add(Object.class, args, this.salesAccess);
        }
        if (!isNull(P_ProductionAccess)) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_ProductionAccess + " = ?";
            args = OAArray.add(Object.class, args, this.productionAccess);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<User> select = new OASelect<User>(User.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (lastNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_LastName + " = null OR " + User.P_LastName + " == '')";
        }
        else if (lastNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_LastName + " != null";
        }
        else if (!OAString.isEmpty(this.lastName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.lastName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_LastName + " LIKE ?";
            }
            else {
                sql += User.P_LastName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (firstNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_FirstName + " = null OR " + User.P_FirstName + " == '')";
        }
        else if (firstNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_FirstName + " != null";
        }
        else if (!OAString.isEmpty(this.firstName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.firstName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_FirstName + " LIKE ?";
            }
            else {
                sql += User.P_FirstName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (initialsUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_Initials + " = null OR " + User.P_Initials + " == '')";
        }
        else if (initialsUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_Initials + " != null";
        }
        else if (!OAString.isEmpty(this.initials)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.initials.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_Initials + " LIKE ?";
            }
            else {
                sql += User.P_Initials + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (codeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_Code + " = null OR " + User.P_Code + " == '')";
        }
        else if (codeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_Code + " != null";
        }
        else if (!OAString.isEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.code.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_Code + " LIKE ?";
            }
            else {
                sql += User.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (loginIdUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_LoginId + " = null OR " + User.P_LoginId + " == '')";
        }
        else if (loginIdUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_LoginId + " != null";
        }
        else if (!OAString.isEmpty(this.loginId)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.loginId.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_LoginId + " LIKE ?";
            }
            else {
                sql += User.P_LoginId + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (emailUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_Email + " = null OR " + User.P_Email + " == '')";
        }
        else if (emailUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_Email + " != null";
        }
        else if (!OAString.isEmpty(this.email)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.email.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_Email + " LIKE ?";
            }
            else {
                sql += User.P_Email + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (phoneCellUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + User.P_PhoneCell + " = null OR " + User.P_PhoneCell + " == '')";
        }
        else if (phoneCellUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_PhoneCell + " != null";
        }
        else if (!OAString.isEmpty(this.phoneCell)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.phoneCell.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += User.P_PhoneCell + " LIKE ?";
            }
            else {
                sql += User.P_PhoneCell + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_AdminAccess)) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_AdminAccess + " = ?";
            args = OAArray.add(Object.class, args, this.adminAccess);
        }
        if (!isNull(P_SalesAccess)) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_SalesAccess + " = ?";
            args = OAArray.add(Object.class, args, this.salesAccess);
        }
        if (!isNull(P_ProductionAccess)) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_ProductionAccess + " = ?";
            args = OAArray.add(Object.class, args, this.productionAccess);
        }
        select.add(sql, args);
    }

    private OAFilter<User> filterDataSourceFilter;
    public OAFilter<User> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<User>() {
            @Override
            public boolean isUsed(User user) {
                return UserSearch.this.isUsedForDataSourceFilter(user);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<User> filterCustomFilter;
    public OAFilter<User> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<User>() {
            @Override
            public boolean isUsed(User user) {
                boolean b = UserSearch.this.isUsedForCustomFilter(user);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(user);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(User searchUser) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchUser.getId(), id)) return false;
        }
        if (lastNameUseNull) {
            if (OACompare.isNotEmpty(searchUser.getLastName())) return false;
        }
        else if (lastNameUseNotNull) {
            if (OACompare.isEmpty(searchUser.getLastName())) return false;
        }
        else if (lastName != null) {
            String s = getLastName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchUser.getLastName(), s)) return false;
        }
        if (firstNameUseNull) {
            if (OACompare.isNotEmpty(searchUser.getFirstName())) return false;
        }
        else if (firstNameUseNotNull) {
            if (OACompare.isEmpty(searchUser.getFirstName())) return false;
        }
        else if (firstName != null) {
            String s = getFirstName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchUser.getFirstName(), s)) return false;
        }
        if (initialsUseNull) {
            if (OACompare.isNotEmpty(searchUser.getInitials())) return false;
        }
        else if (initialsUseNotNull) {
            if (OACompare.isEmpty(searchUser.getInitials())) return false;
        }
        else if (initials != null) {
            String s = getInitials();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchUser.getInitials(), s)) return false;
        }
        if (codeUseNull) {
            if (OACompare.isNotEmpty(searchUser.getCode())) return false;
        }
        else if (codeUseNotNull) {
            if (OACompare.isEmpty(searchUser.getCode())) return false;
        }
        else if (code != null) {
            String s = getCode();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchUser.getCode(), s)) return false;
        }
        if (loginIdUseNull) {
            if (OACompare.isNotEmpty(searchUser.getLoginId())) return false;
        }
        else if (loginIdUseNotNull) {
            if (OACompare.isEmpty(searchUser.getLoginId())) return false;
        }
        else if (loginId != null) {
            String s = getLoginId();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchUser.getLoginId(), s)) return false;
        }
        if (emailUseNull) {
            if (OACompare.isNotEmpty(searchUser.getEmail())) return false;
        }
        else if (emailUseNotNull) {
            if (OACompare.isEmpty(searchUser.getEmail())) return false;
        }
        else if (email != null) {
            String s = getEmail();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchUser.getEmail(), s)) return false;
        }
        if (phoneCellUseNull) {
            if (OACompare.isNotEmpty(searchUser.getPhoneCell())) return false;
        }
        else if (phoneCellUseNotNull) {
            if (OACompare.isEmpty(searchUser.getPhoneCell())) return false;
        }
        else if (phoneCell != null) {
            String s = getPhoneCell();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchUser.getPhoneCell(), s)) return false;
        }
        if (!isNull(P_AdminAccess)) {
            if (!OACompare.isEqual(searchUser.getAdminAccess(), adminAccess)) return false;
        }
        if (!isNull(P_SalesAccess)) {
            if (!OACompare.isEqual(searchUser.getSalesAccess(), salesAccess)) return false;
        }
        if (!isNull(P_ProductionAccess)) {
            if (!OACompare.isEqual(searchUser.getProductionAccess(), productionAccess)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(User searchUser) {
        return true;
    }
}
