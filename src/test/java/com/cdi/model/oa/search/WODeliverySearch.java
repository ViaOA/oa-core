// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class WODeliverySearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WODeliverySearch.class.getName());
    public static final String P_MaxResults = "MaxResults";

    protected int maxResults;

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<WODelivery> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<WODelivery> f = new OAQueryFilter<WODelivery>(WODelivery.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<WODelivery> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<WODelivery> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<WODelivery> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<WODelivery> select = new OASelect<WODelivery>(WODelivery.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        select.add(sql, args);
    }

    private OAFilter<WODelivery> filterDataSourceFilter;
    public OAFilter<WODelivery> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<WODelivery>() {
            @Override
            public boolean isUsed(WODelivery woDelivery) {
                return WODeliverySearch.this.isUsedForDataSourceFilter(woDelivery);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<WODelivery> filterCustomFilter;
    public OAFilter<WODelivery> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<WODelivery>() {
            @Override
            public boolean isUsed(WODelivery woDelivery) {
                boolean b = WODeliverySearch.this.isUsedForCustomFilter(woDelivery);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(woDelivery);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(WODelivery searchWODelivery) {
        return true;
    }
    public boolean isUsedForCustomFilter(WODelivery searchWODelivery) {
        return true;
    }
}
