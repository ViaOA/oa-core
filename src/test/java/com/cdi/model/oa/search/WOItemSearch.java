// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;


@OAClass(useDataSource=false, localOnly=true)
public class WOItemSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WOItemSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_OrderItemItem = "OrderItemItem";
    public static final String P_UseOrderItemItemSearch = "UseOrderItemItemSearch";
    public static final String P_WOItemWorkOrder = "WOItemWorkOrder";
    public static final String P_UseWOItemWorkOrderSearch = "UseWOItemWorkOrderSearch";
    public static final String P_MaxResults = "MaxResults";

    protected int id;
    protected Item orderItemItem;
    protected boolean useOrderItemItemSearch;
    protected ItemSearch searchOrderItemItem;
    protected WorkOrder woItemWorkOrder;
    protected boolean useWOItemWorkOrderSearch;
    protected WorkOrderSearch searchWOItemWorkOrder;
    protected int maxResults;

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Item getOrderItemItem() {
        if (orderItemItem == null) {
            orderItemItem = (Item) getObject(P_OrderItemItem);
        }
        return orderItemItem;
    }
    public void setOrderItemItem(Item newValue) {
        Item old = this.orderItemItem;
        this.orderItemItem = newValue;
        firePropertyChange(P_OrderItemItem, old, this.orderItemItem);
    }
    public boolean getUseOrderItemItemSearch() {
        return useOrderItemItemSearch;
    }
    public void setUseOrderItemItemSearch(boolean newValue) {
        boolean old = this.useOrderItemItemSearch;
        this.useOrderItemItemSearch = newValue;
        firePropertyChange(P_UseOrderItemItemSearch, old, this.useOrderItemItemSearch);
    }
    public ItemSearch getOrderItemItemSearch() {
        return this.searchOrderItemItem;
    }
    public void setOrderItemItemSearch(ItemSearch newValue) {
        this.searchOrderItemItem = newValue;
    }

    @OAOne
    public WorkOrder getWOItemWorkOrder() {
        if (woItemWorkOrder == null) {
            woItemWorkOrder = (WorkOrder) getObject(P_WOItemWorkOrder);
        }
        return woItemWorkOrder;
    }
    public void setWOItemWorkOrder(WorkOrder newValue) {
        WorkOrder old = this.woItemWorkOrder;
        this.woItemWorkOrder = newValue;
        firePropertyChange(P_WOItemWorkOrder, old, this.woItemWorkOrder);
    }
    public boolean getUseWOItemWorkOrderSearch() {
        return useWOItemWorkOrderSearch;
    }
    public void setUseWOItemWorkOrderSearch(boolean newValue) {
        boolean old = this.useWOItemWorkOrderSearch;
        this.useWOItemWorkOrderSearch = newValue;
        firePropertyChange(P_UseWOItemWorkOrderSearch, old, this.useWOItemWorkOrderSearch);
    }
    public WorkOrderSearch getWOItemWorkOrderSearch() {
        return this.searchWOItemWorkOrder;
    }
    public void setWOItemWorkOrderSearch(WorkOrderSearch newValue) {
        this.searchWOItemWorkOrder = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setOrderItemItem(null);
        setUseOrderItemItemSearch(false);
        setWOItemWorkOrder(null);
        setUseWOItemWorkOrderSearch(false);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getOrderItemItem() != null) return true;
        if (getUseOrderItemItemSearch()) return true;
        if (getWOItemWorkOrder() != null) return true;
        if (getUseWOItemWorkOrderSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<WOItem> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<WOItem> f = new OAQueryFilter<WOItem>(WOItem.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<WOItem> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<WOItem> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<WOItem> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += WOItem.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!useOrderItemItemSearch && getOrderItemItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WOItemPP.orderItem().item().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemItem());
        }
        if (!useWOItemWorkOrderSearch && getWOItemWorkOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WOItemPP.workOrder().pp + " = ?";
            args = OAArray.add(Object.class, args, getWOItemWorkOrder());
            finder = new OAFinder<WorkOrder, WOItem>(getWOItemWorkOrder(), WorkOrder.P_WOItems);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<WOItem> select = new OASelect<WOItem>(WOItem.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            getOrderItemItemSearch().appendSelect(WOItemPP.orderItem().item().pp, select);
        }
        if (useWOItemWorkOrderSearch && getWOItemWorkOrderSearch() != null) {
            getWOItemWorkOrderSearch().appendSelect(WOItemPP.workOrder().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += WOItem.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!useOrderItemItemSearch && getOrderItemItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + WOItemPP.orderItem().item().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemItem());
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            getOrderItemItemSearch().appendSelect(prefix + WOItemPP.orderItem().item().pp, select);
        }
        if (!useWOItemWorkOrderSearch && getWOItemWorkOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + WOItemPP.workOrder().pp + " = ?";
            args = OAArray.add(Object.class, args, getWOItemWorkOrder());
        }
        if (useWOItemWorkOrderSearch && getWOItemWorkOrderSearch() != null) {
            getWOItemWorkOrderSearch().appendSelect(prefix + WOItemPP.workOrder().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<WOItem> filterDataSourceFilter;
    public OAFilter<WOItem> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<WOItem>() {
            @Override
            public boolean isUsed(WOItem woItem) {
                return WOItemSearch.this.isUsedForDataSourceFilter(woItem);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<WOItem> filterCustomFilter;
    public OAFilter<WOItem> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<WOItem>() {
            @Override
            public boolean isUsed(WOItem woItem) {
                boolean b = WOItemSearch.this.isUsedForCustomFilter(woItem);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(woItem);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(WOItem searchWOItem) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchWOItem.getId(), id)) return false;
        }
        if (!useOrderItemItemSearch && orderItemItem != null) {
            if (!OACompare.isEqual(searchWOItem.getProperty(WOItemPP.orderItem().item().pp), orderItemItem)) return false;
        }
        if (woItemWorkOrder != null) {
            if (!OACompare.isEqual(searchWOItem.getWorkOrder(), woItemWorkOrder)) return false;
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            Item item = (Item) searchWOItem.getProperty(WOItemPP.orderItem().item().pp);
            if (item == null) return false;
            if (!getOrderItemItemSearch().isUsedForDataSourceFilter(item)) return false;
        }
        if (useWOItemWorkOrderSearch && getWOItemWorkOrderSearch() != null) {
            WorkOrder workOrder = (WorkOrder) searchWOItem.getProperty(WOItemPP.workOrder().pp);
            if (workOrder == null) return false;
            if (!getWOItemWorkOrderSearch().isUsedForDataSourceFilter(workOrder)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(WOItem searchWOItem) {
        return true;
    }
}
