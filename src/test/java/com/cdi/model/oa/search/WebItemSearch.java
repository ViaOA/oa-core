// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class WebItemSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WebItemSearch.class.getName());
    public static final String P_Created = "Created";
    public static final String P_LastChanged = "LastChanged";
    public static final String P_Item = "Item";
    public static final String P_UseItemSearch = "UseItemSearch";
    public static final String P_MaxResults = "MaxResults";

    protected OADate created;
    protected OADateTime lastChanged;
    protected Item item;
    protected boolean useItemSearch;
    protected ItemSearch searchItem;
    protected int maxResults;

    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        OADate old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      

    public OADateTime getLastChanged() {
        return lastChanged;
    }
    public void setLastChanged(OADateTime newValue) {
        OADateTime old = lastChanged;
        fireBeforePropertyChange(P_LastChanged, old, newValue);
        this.lastChanged = newValue;
        firePropertyChange(P_LastChanged, old, this.lastChanged);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Item getItem() {
        if (item == null) {
            item = (Item) getObject(P_Item);
        }
        return item;
    }
    public void setItem(Item newValue) {
        Item old = this.item;
        this.item = newValue;
        firePropertyChange(P_Item, old, this.item);
    }
    public boolean getUseItemSearch() {
        return useItemSearch;
    }
    public void setUseItemSearch(boolean newValue) {
        boolean old = this.useItemSearch;
        this.useItemSearch = newValue;
        firePropertyChange(P_UseItemSearch, old, this.useItemSearch);
    }
    public ItemSearch getItemSearch() {
        return this.searchItem;
    }
    public void setItemSearch(ItemSearch newValue) {
        this.searchItem = newValue;
    }

    public void reset() {
        setCreated(null);
        setLastChanged(null);
        setItem(null);
        setUseItemSearch(false);
    }

    public boolean isDataEntered() {
        if (getCreated() != null) return true;
        if (getLastChanged() != null) return true;
        if (getItem() != null) return true;
        if (getUseItemSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<WebItem> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<WebItem> f = new OAQueryFilter<WebItem>(WebItem.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<WebItem> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<WebItem> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<WebItem> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WebItem.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (lastChanged != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WebItem.P_LastChanged + " = ?";
            args = OAArray.add(Object.class, args, this.lastChanged);
        }
        if (!useItemSearch && getItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WebItemPP.item().pp + " = ?";
            args = OAArray.add(Object.class, args, getItem());
            finder = new OAFinder<Item, WebItem>(getItem(), Item.P_WebItems);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<WebItem> select = new OASelect<WebItem>(WebItem.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useItemSearch && getItemSearch() != null) {
            getItemSearch().appendSelect(WebItemPP.item().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WebItem.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (lastChanged != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WebItem.P_LastChanged + " = ?";
            args = OAArray.add(Object.class, args, this.lastChanged);
        }
        if (!useItemSearch && getItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + WebItemPP.item().pp + " = ?";
            args = OAArray.add(Object.class, args, getItem());
        }
        if (useItemSearch && getItemSearch() != null) {
            getItemSearch().appendSelect(prefix + WebItemPP.item().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<WebItem> filterDataSourceFilter;
    public OAFilter<WebItem> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<WebItem>() {
            @Override
            public boolean isUsed(WebItem webItem) {
                return WebItemSearch.this.isUsedForDataSourceFilter(webItem);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<WebItem> filterCustomFilter;
    public OAFilter<WebItem> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<WebItem>() {
            @Override
            public boolean isUsed(WebItem webItem) {
                boolean b = WebItemSearch.this.isUsedForCustomFilter(webItem);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(webItem);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(WebItem searchWebItem) {
        if (created != null) {
            if (!OACompare.isEqual(searchWebItem.getCreated(), created)) return false;
        }
        if (lastChanged != null) {
            if (!OACompare.isEqual(searchWebItem.getLastChanged(), lastChanged)) return false;
        }
        if (item != null) {
            if (!OACompare.isEqual(searchWebItem.getItem(), item)) return false;
        }
        if (useItemSearch && getItemSearch() != null) {
            Item item = (Item) searchWebItem.getProperty(WebItemPP.item().pp);
            if (item == null) return false;
            if (!getItemSearch().isUsedForDataSourceFilter(item)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(WebItem searchWebItem) {
        return true;
    }
}
