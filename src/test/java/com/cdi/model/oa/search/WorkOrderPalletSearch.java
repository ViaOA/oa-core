// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class WorkOrderPalletSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WorkOrderPalletSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_WorkOrderPalletWorkOrder = "WorkOrderPalletWorkOrder";
    public static final String P_UseWorkOrderPalletWorkOrderSearch = "UseWorkOrderPalletWorkOrderSearch";
    public static final String P_WorkOrderOrder = "WorkOrderOrder";
    public static final String P_UseWorkOrderOrderSearch = "UseWorkOrderOrderSearch";
    public static final String P_WorkOrderPalletPallet = "WorkOrderPalletPallet";
    public static final String P_UseWorkOrderPalletPalletSearch = "UseWorkOrderPalletPalletSearch";
    public static final String P_MaxResults = "MaxResults";

    protected int id;
    protected WorkOrder workOrderPalletWorkOrder;
    protected boolean useWorkOrderPalletWorkOrderSearch;
    protected WorkOrderSearch searchWorkOrderPalletWorkOrder;
    protected Order workOrderOrder;
    protected boolean useWorkOrderOrderSearch;
    protected OrderSearch searchWorkOrderOrder;
    protected Pallet workOrderPalletPallet;
    protected boolean useWorkOrderPalletPalletSearch;
    protected PalletSearch searchWorkOrderPalletPallet;
    protected int maxResults;

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public WorkOrder getWorkOrderPalletWorkOrder() {
        if (workOrderPalletWorkOrder == null) {
            workOrderPalletWorkOrder = (WorkOrder) getObject(P_WorkOrderPalletWorkOrder);
        }
        return workOrderPalletWorkOrder;
    }
    public void setWorkOrderPalletWorkOrder(WorkOrder newValue) {
        WorkOrder old = this.workOrderPalletWorkOrder;
        this.workOrderPalletWorkOrder = newValue;
        firePropertyChange(P_WorkOrderPalletWorkOrder, old, this.workOrderPalletWorkOrder);
    }
    public boolean getUseWorkOrderPalletWorkOrderSearch() {
        return useWorkOrderPalletWorkOrderSearch;
    }
    public void setUseWorkOrderPalletWorkOrderSearch(boolean newValue) {
        boolean old = this.useWorkOrderPalletWorkOrderSearch;
        this.useWorkOrderPalletWorkOrderSearch = newValue;
        firePropertyChange(P_UseWorkOrderPalletWorkOrderSearch, old, this.useWorkOrderPalletWorkOrderSearch);
    }
    public WorkOrderSearch getWorkOrderPalletWorkOrderSearch() {
        return this.searchWorkOrderPalletWorkOrder;
    }
    public void setWorkOrderPalletWorkOrderSearch(WorkOrderSearch newValue) {
        this.searchWorkOrderPalletWorkOrder = newValue;
    }

    @OAOne
    public Order getWorkOrderOrder() {
        if (workOrderOrder == null) {
            workOrderOrder = (Order) getObject(P_WorkOrderOrder);
        }
        return workOrderOrder;
    }
    public void setWorkOrderOrder(Order newValue) {
        Order old = this.workOrderOrder;
        this.workOrderOrder = newValue;
        firePropertyChange(P_WorkOrderOrder, old, this.workOrderOrder);
    }
    public boolean getUseWorkOrderOrderSearch() {
        return useWorkOrderOrderSearch;
    }
    public void setUseWorkOrderOrderSearch(boolean newValue) {
        boolean old = this.useWorkOrderOrderSearch;
        this.useWorkOrderOrderSearch = newValue;
        firePropertyChange(P_UseWorkOrderOrderSearch, old, this.useWorkOrderOrderSearch);
    }
    public OrderSearch getWorkOrderOrderSearch() {
        return this.searchWorkOrderOrder;
    }
    public void setWorkOrderOrderSearch(OrderSearch newValue) {
        this.searchWorkOrderOrder = newValue;
    }

    @OAOne
    public Pallet getWorkOrderPalletPallet() {
        if (workOrderPalletPallet == null) {
            workOrderPalletPallet = (Pallet) getObject(P_WorkOrderPalletPallet);
        }
        return workOrderPalletPallet;
    }
    public void setWorkOrderPalletPallet(Pallet newValue) {
        Pallet old = this.workOrderPalletPallet;
        this.workOrderPalletPallet = newValue;
        firePropertyChange(P_WorkOrderPalletPallet, old, this.workOrderPalletPallet);
    }
    public boolean getUseWorkOrderPalletPalletSearch() {
        return useWorkOrderPalletPalletSearch;
    }
    public void setUseWorkOrderPalletPalletSearch(boolean newValue) {
        boolean old = this.useWorkOrderPalletPalletSearch;
        this.useWorkOrderPalletPalletSearch = newValue;
        firePropertyChange(P_UseWorkOrderPalletPalletSearch, old, this.useWorkOrderPalletPalletSearch);
    }
    public PalletSearch getWorkOrderPalletPalletSearch() {
        return this.searchWorkOrderPalletPallet;
    }
    public void setWorkOrderPalletPalletSearch(PalletSearch newValue) {
        this.searchWorkOrderPalletPallet = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setWorkOrderPalletWorkOrder(null);
        setUseWorkOrderPalletWorkOrderSearch(false);
        setWorkOrderOrder(null);
        setUseWorkOrderOrderSearch(false);
        setWorkOrderPalletPallet(null);
        setUseWorkOrderPalletPalletSearch(false);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getWorkOrderPalletWorkOrder() != null) return true;
        if (getUseWorkOrderPalletWorkOrderSearch()) return true;
        if (getWorkOrderOrder() != null) return true;
        if (getUseWorkOrderOrderSearch()) return true;
        if (getWorkOrderPalletPallet() != null) return true;
        if (getUseWorkOrderPalletPalletSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<WorkOrderPallet> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<WorkOrderPallet> f = new OAQueryFilter<WorkOrderPallet>(WorkOrderPallet.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<WorkOrderPallet> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<WorkOrderPallet> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<WorkOrderPallet> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrderPallet.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!useWorkOrderPalletWorkOrderSearch && getWorkOrderPalletWorkOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrderPalletPP.workOrder().pp + " = ?";
            args = OAArray.add(Object.class, args, getWorkOrderPalletWorkOrder());
            finder = new OAFinder<WorkOrder, WorkOrderPallet>(getWorkOrderPalletWorkOrder(), WorkOrder.P_WorkOrderPallets);
        }
        if (!useWorkOrderOrderSearch && getWorkOrderOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrderPalletPP.workOrder().order().pp + " = ?";
            args = OAArray.add(Object.class, args, getWorkOrderOrder());
            String pp = OrderPP.workOrders().workOrderPallets().pp;
            finder = new OAFinder<Order, WorkOrderPallet>(getWorkOrderOrder(), pp);
        }
        if (!useWorkOrderPalletPalletSearch && getWorkOrderPalletPallet() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrderPalletPP.pallet().pp + " = ?";
            args = OAArray.add(Object.class, args, getWorkOrderPalletPallet());
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<WorkOrderPallet> select = new OASelect<WorkOrderPallet>(WorkOrderPallet.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useWorkOrderPalletWorkOrderSearch && getWorkOrderPalletWorkOrderSearch() != null) {
            getWorkOrderPalletWorkOrderSearch().appendSelect(WorkOrderPalletPP.workOrder().pp, select);
        }
        if (useWorkOrderOrderSearch && getWorkOrderOrderSearch() != null) {
            getWorkOrderOrderSearch().appendSelect(WorkOrderPalletPP.workOrder().order().pp, select);
        }
        if (useWorkOrderPalletPalletSearch && getWorkOrderPalletPalletSearch() != null) {
            getWorkOrderPalletPalletSearch().appendSelect(WorkOrderPalletPP.pallet().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrderPallet.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (!useWorkOrderPalletWorkOrderSearch && getWorkOrderPalletWorkOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + WorkOrderPalletPP.workOrder().pp + " = ?";
            args = OAArray.add(Object.class, args, getWorkOrderPalletWorkOrder());
        }
        if (useWorkOrderPalletWorkOrderSearch && getWorkOrderPalletWorkOrderSearch() != null) {
            getWorkOrderPalletWorkOrderSearch().appendSelect(prefix + WorkOrderPalletPP.workOrder().pp, select);
        }
        if (!useWorkOrderOrderSearch && getWorkOrderOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + WorkOrderPalletPP.workOrder().order().pp + " = ?";
            args = OAArray.add(Object.class, args, getWorkOrderOrder());
        }
        if (useWorkOrderOrderSearch && getWorkOrderOrderSearch() != null) {
            getWorkOrderOrderSearch().appendSelect(prefix + WorkOrderPalletPP.workOrder().order().pp, select);
        }
        if (!useWorkOrderPalletPalletSearch && getWorkOrderPalletPallet() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + WorkOrderPalletPP.pallet().pp + " = ?";
            args = OAArray.add(Object.class, args, getWorkOrderPalletPallet());
        }
        if (useWorkOrderPalletPalletSearch && getWorkOrderPalletPalletSearch() != null) {
            getWorkOrderPalletPalletSearch().appendSelect(prefix + WorkOrderPalletPP.pallet().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<WorkOrderPallet> filterDataSourceFilter;
    public OAFilter<WorkOrderPallet> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<WorkOrderPallet>() {
            @Override
            public boolean isUsed(WorkOrderPallet workOrderPallet) {
                return WorkOrderPalletSearch.this.isUsedForDataSourceFilter(workOrderPallet);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<WorkOrderPallet> filterCustomFilter;
    public OAFilter<WorkOrderPallet> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<WorkOrderPallet>() {
            @Override
            public boolean isUsed(WorkOrderPallet workOrderPallet) {
                boolean b = WorkOrderPalletSearch.this.isUsedForCustomFilter(workOrderPallet);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(workOrderPallet);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(WorkOrderPallet searchWorkOrderPallet) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchWorkOrderPallet.getId(), id)) return false;
        }
        if (workOrderPalletWorkOrder != null) {
            if (!OACompare.isEqual(searchWorkOrderPallet.getWorkOrder(), workOrderPalletWorkOrder)) return false;
        }
        if (!useWorkOrderOrderSearch && workOrderOrder != null) {
            if (!OACompare.isEqual(searchWorkOrderPallet.getProperty(WorkOrderPalletPP.workOrder().order().pp), workOrderOrder)) return false;
        }
        if (workOrderPalletPallet != null) {
            if (!OACompare.isEqual(searchWorkOrderPallet.getPallet(), workOrderPalletPallet)) return false;
        }
        if (useWorkOrderPalletWorkOrderSearch && getWorkOrderPalletWorkOrderSearch() != null) {
            WorkOrder workOrder = (WorkOrder) searchWorkOrderPallet.getProperty(WorkOrderPalletPP.workOrder().pp);
            if (workOrder == null) return false;
            if (!getWorkOrderPalletWorkOrderSearch().isUsedForDataSourceFilter(workOrder)) return false;
        }
        if (useWorkOrderOrderSearch && getWorkOrderOrderSearch() != null) {
            Order order = (Order) searchWorkOrderPallet.getProperty(WorkOrderPalletPP.workOrder().order().pp);
            if (order == null) return false;
            if (!getWorkOrderOrderSearch().isUsedForDataSourceFilter(order)) return false;
        }
        if (useWorkOrderPalletPalletSearch && getWorkOrderPalletPalletSearch() != null) {
            Pallet pallet = (Pallet) searchWorkOrderPallet.getProperty(WorkOrderPalletPP.pallet().pp);
            if (pallet == null) return false;
            if (!getWorkOrderPalletPalletSearch().isUsedForDataSourceFilter(pallet)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(WorkOrderPallet searchWorkOrderPallet) {
        return true;
    }
}
