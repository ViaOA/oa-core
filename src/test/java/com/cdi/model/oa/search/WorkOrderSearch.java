// Generated by OABuilder
package com.cdi.model.oa.search;

import java.util.logging.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;
import java.util.Calendar;

@OAClass(useDataSource=false, localOnly=true)
public class WorkOrderSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(WorkOrderSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_DateCreated = "DateCreated";
    public static final String P_DateCreated2 = "DateCreated2";
    public static final String P_DateCreatedUseNull = "DateCreatedUseNull";
    public static final String P_DateCreatedUseNotNull = "DateCreatedUseNotNull";
    public static final String P_OrderSalesOrderNumber = "OrderSalesOrderNumber";
    public static final String P_OrderSalesOrderNumberUseNull = "OrderSalesOrderNumberUseNull";
    public static final String P_OrderSalesOrderNumberUseNotNull = "OrderSalesOrderNumberUseNotNull";
    public static final String P_WorkOrderOrder = "WorkOrderOrder";
    public static final String P_UseWorkOrderOrderSearch = "UseWorkOrderOrderSearch";
    public static final String P_OrderItemItem = "OrderItemItem";
    public static final String P_UseOrderItemItemSearch = "UseOrderItemItemSearch";
    public static final String P_MaxResults = "MaxResults";
    public static final String P_SortByType = "SortByType";
    public static final String P_SortByDesc = "SortByDesc";

    protected int id;
    protected OADate dateCreated;
    protected OADate dateCreated2;
    protected boolean dateCreatedUseNull;
    protected boolean dateCreatedUseNotNull;
    protected String orderSalesOrderNumber;
    protected boolean orderSalesOrderNumberUseNull;
    protected boolean orderSalesOrderNumberUseNotNull;
    protected Order workOrderOrder;
    protected boolean useWorkOrderOrderSearch;
    protected OrderSearch searchWorkOrderOrder;
    protected Item orderItemItem;
    protected boolean useOrderItemItemSearch;
    protected ItemSearch searchOrderItemItem;
    protected int maxResults;
    protected int sortByType;
    protected boolean sortByDesc;

    public static final int SORTBYTYPE_None = 0;
    public static final int SORTBYTYPE_dateCreated = 1;
    public static final int SORTBYTYPE_salesOrderNumber = 2;
    public static final int SORTBYTYPE_id = 3;
    public static final int SORTBYTYPE_id1 = 4;
    public static final Hub<String> hubSortByType;
    static {
        hubSortByType = new Hub<String>(String.class);
        hubSortByType.add("None");
        hubSortByType.add("Date Created");
        hubSortByType.add("Sales Order Number");
        hubSortByType.add("Id");
        hubSortByType.add("Id1");
    }

    public WorkOrderSearch() {
        reset();
    }

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
      

    /**
      date created
    */
    public OADate getDateCreated() {
        return dateCreated;
    }
    public void setDateCreated(OADate newValue) {
        OADate old = dateCreated;
        fireBeforePropertyChange(P_DateCreated, old, newValue);
        this.dateCreated = newValue;
        firePropertyChange(P_DateCreated, old, this.dateCreated);
        if (isLoading()) return;
        if (dateCreated != null) {
            if (dateCreated2 == null) setDateCreated2(this.dateCreated);
            else if (dateCreated.compareTo(dateCreated2) > 0) setDateCreated2(this.dateCreated);
        }
    } 
    /**
      date created
    */
    public OADate getDateCreated2() {
        return dateCreated2;
    }
    public void setDateCreated2(OADate newValue) {
        OADate old = dateCreated2;
        fireBeforePropertyChange(P_DateCreated2, old, newValue);
        this.dateCreated2 = newValue;
        firePropertyChange(P_DateCreated2, old, this.dateCreated2);
        if (dateCreated != null && dateCreated2 != null) {
            if (dateCreated.compareTo(dateCreated2) > 0) setDateCreated(this.dateCreated2);
        }
    }
    public boolean getDateCreatedUseNull() {
        return dateCreatedUseNull;
    }
    public void setDateCreatedUseNull(boolean newValue) {
        boolean old = this.dateCreatedUseNull;
        this.dateCreatedUseNull = newValue;
        firePropertyChange(P_DateCreatedUseNull, old, this.dateCreatedUseNull);
    }
    public boolean getDateCreatedUseNotNull() {
        return dateCreatedUseNotNull;
    }
    public void setDateCreatedUseNotNull(boolean newValue) {
        boolean old = this.dateCreatedUseNotNull;
        this.dateCreatedUseNotNull = newValue;
        firePropertyChange(P_DateCreatedUseNotNull, old, this.dateCreatedUseNotNull);
    }

    public String getOrderSalesOrderNumber() {
        return orderSalesOrderNumber;
    }
    public void setOrderSalesOrderNumber(String newValue) {
        String old = orderSalesOrderNumber;
        fireBeforePropertyChange(P_OrderSalesOrderNumber, old, newValue);
        this.orderSalesOrderNumber = newValue;
        firePropertyChange(P_OrderSalesOrderNumber, old, this.orderSalesOrderNumber);
    }
      
    public boolean getOrderSalesOrderNumberUseNull() {
        return orderSalesOrderNumberUseNull;
    }
    public void setOrderSalesOrderNumberUseNull(boolean newValue) {
        boolean old = this.orderSalesOrderNumberUseNull;
        this.orderSalesOrderNumberUseNull = newValue;
        firePropertyChange(P_OrderSalesOrderNumberUseNull, old, this.orderSalesOrderNumberUseNull);
    }
    public boolean getOrderSalesOrderNumberUseNotNull() {
        return orderSalesOrderNumberUseNotNull;
    }
    public void setOrderSalesOrderNumberUseNotNull(boolean newValue) {
        boolean old = this.orderSalesOrderNumberUseNotNull;
        this.orderSalesOrderNumberUseNotNull = newValue;
        firePropertyChange(P_OrderSalesOrderNumberUseNotNull, old, this.orderSalesOrderNumberUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public int getSortByType() {
        return this.sortByType;
    }
    public void setSortByType(int newValue) {
        fireBeforePropertyChange(P_SortByType, this.sortByType, newValue);
        int old = this.sortByType;
        this.sortByType = newValue;
        firePropertyChange(P_SortByType, old, this.sortByType);
    }

    public boolean getSortByDesc() {
        return this.sortByDesc;
    }
    public void setSortByDesc(boolean newValue) {
        fireBeforePropertyChange(P_SortByDesc, this.sortByDesc, newValue);
        boolean old = this.sortByDesc;
        this.sortByDesc = newValue;
        firePropertyChange(P_SortByDesc, old, this.sortByDesc);
    }

    @OAOne
    public Order getWorkOrderOrder() {
        if (workOrderOrder == null) {
            workOrderOrder = (Order) getObject(P_WorkOrderOrder);
        }
        return workOrderOrder;
    }
    public void setWorkOrderOrder(Order newValue) {
        Order old = this.workOrderOrder;
        this.workOrderOrder = newValue;
        firePropertyChange(P_WorkOrderOrder, old, this.workOrderOrder);
    }
    public boolean getUseWorkOrderOrderSearch() {
        return useWorkOrderOrderSearch;
    }
    public void setUseWorkOrderOrderSearch(boolean newValue) {
        boolean old = this.useWorkOrderOrderSearch;
        this.useWorkOrderOrderSearch = newValue;
        firePropertyChange(P_UseWorkOrderOrderSearch, old, this.useWorkOrderOrderSearch);
    }
    public OrderSearch getWorkOrderOrderSearch() {
        return this.searchWorkOrderOrder;
    }
    public void setWorkOrderOrderSearch(OrderSearch newValue) {
        this.searchWorkOrderOrder = newValue;
    }

    @OAOne
    public Item getOrderItemItem() {
        if (orderItemItem == null) {
            orderItemItem = (Item) getObject(P_OrderItemItem);
        }
        return orderItemItem;
    }
    public void setOrderItemItem(Item newValue) {
        Item old = this.orderItemItem;
        this.orderItemItem = newValue;
        firePropertyChange(P_OrderItemItem, old, this.orderItemItem);
    }
    public boolean getUseOrderItemItemSearch() {
        return useOrderItemItemSearch;
    }
    public void setUseOrderItemItemSearch(boolean newValue) {
        boolean old = this.useOrderItemItemSearch;
        this.useOrderItemItemSearch = newValue;
        firePropertyChange(P_UseOrderItemItemSearch, old, this.useOrderItemItemSearch);
    }
    public ItemSearch getOrderItemItemSearch() {
        return this.searchOrderItemItem;
    }
    public void setOrderItemItemSearch(ItemSearch newValue) {
        this.searchOrderItemItem = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setDateCreated(null);
        setDateCreated2(null);
        setDateCreatedUseNull(false);
        setDateCreatedUseNotNull(false);
        setOrderSalesOrderNumber(null);
        setOrderSalesOrderNumberUseNull(false);
        setOrderSalesOrderNumberUseNotNull(false);
        setWorkOrderOrder(null);
        setUseWorkOrderOrderSearch(false);
        setOrderItemItem(null);
        setUseOrderItemItemSearch(false);
        setSortByType(SORTBYTYPE_None);
        setNull(P_SortByType);
        setSortByDesc(false);
        setNull(P_SortByDesc);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getDateCreated() != null) return true;
        if (getDateCreatedUseNull()) return true;
        if (getDateCreatedUseNull()) return true;
        if (getDateCreatedUseNull()) return true;
        if (getDateCreatedUseNotNull()) return true;
        if (getOrderSalesOrderNumber() != null) return true;
        if (getOrderSalesOrderNumberUseNull()) return true;if (getOrderSalesOrderNumberUseNotNull()) return true;
        if (getOrderSalesOrderNumberUseNull()) return true;
        if (getOrderSalesOrderNumberUseNotNull()) return true;
        if (getWorkOrderOrder() != null) return true;
        if (getUseWorkOrderOrderSearch()) return true;
        if (getOrderItemItem() != null) return true;
        if (getUseOrderItemItemSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<WorkOrder> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<WorkOrder> f = new OAQueryFilter<WorkOrder>(WorkOrder.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<WorkOrder> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<WorkOrder> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<WorkOrder> getSelect() {
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];

        switch (getSortByType()) {
            case SORTBYTYPE_None: break;
            case SORTBYTYPE_dateCreated: sortOrder = WorkOrder.P_DateCreated; break;
            case SORTBYTYPE_salesOrderNumber: sortOrder = WorkOrderPP.order().salesOrderNumber(); break;
            case SORTBYTYPE_id: sortOrder = WorkOrderPP.order().id(); break;
            case SORTBYTYPE_id1: sortOrder = WorkOrder.P_Id; break;
        }
        if (OAString.isNotEmpty(sortOrder) && getSortByDesc()) sortOrder += " DESC";

        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrder.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (dateCreatedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrder.P_DateCreated + " = null";
        }
        else if (dateCreatedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrder.P_DateCreated + " != null";
        }
        else if (dateCreated != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateCreated2 != null && !dateCreated.equals(dateCreated2)) {
                sql += WorkOrder.P_DateCreated + " >= ?";
                args = OAArray.add(Object.class, args, this.dateCreated);
                sql += " AND " + WorkOrder.P_DateCreated + " <= ?";
                args = OAArray.add(Object.class, args, this.dateCreated2);
            }
            else {
                sql += WorkOrder.P_DateCreated + " = ?";
                args = OAArray.add(Object.class, args, this.dateCreated);
            }
        }
        if (orderSalesOrderNumberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + WorkOrderPP.order().salesOrderNumber() + " = null OR " + WorkOrderPP.order().salesOrderNumber() + " == '')";
        }
        else if (orderSalesOrderNumberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrderPP.order().salesOrderNumber() + " != null";
        }
        else if (!OAString.isEmpty(this.orderSalesOrderNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.orderSalesOrderNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += WorkOrderPP.order().salesOrderNumber() + " LIKE ?";
            }
            else {
                sql += WorkOrderPP.order().salesOrderNumber() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useWorkOrderOrderSearch && getWorkOrderOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrderPP.order().pp + " = ?";
            args = OAArray.add(Object.class, args, getWorkOrderOrder());
            finder = new OAFinder<Order, WorkOrder>(getWorkOrderOrder(), Order.P_WorkOrders);
        }
        if (!useOrderItemItemSearch && getOrderItemItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrderPP.woItems().orderItem().item().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemItem());
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<WorkOrder> select = new OASelect<WorkOrder>(WorkOrder.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useWorkOrderOrderSearch && getWorkOrderOrderSearch() != null) {
            getWorkOrderOrderSearch().appendSelect(WorkOrderPP.order().pp, select);
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            getOrderItemItemSearch().appendSelect(WorkOrderPP.woItems().orderItem().item().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrder.P_Id + " = ?";
            args = OAArray.add(Object.class, args, this.id);
        }
        if (dateCreatedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrder.P_DateCreated + " = null";
        }
        else if (dateCreatedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrder.P_DateCreated + " != null";
        }
        else if (dateCreated != null) {
            if (sql.length() > 0) sql += " AND ";
            if (dateCreated2 != null && !dateCreated.equals(dateCreated2)) {
                sql += WorkOrder.P_DateCreated + " >= ?";
                args = OAArray.add(Object.class, args, this.dateCreated);
                sql += " AND " + WorkOrder.P_DateCreated + " <= ?";
                args = OAArray.add(Object.class, args, this.dateCreated2);
            }
            else {
                sql += WorkOrder.P_DateCreated + " = ?";
                args = OAArray.add(Object.class, args, this.dateCreated);
            }
        }
        if (orderSalesOrderNumberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + WorkOrderPP.order().salesOrderNumber() + " = null OR " + WorkOrderPP.order().salesOrderNumber() + " == '')";
        }
        else if (orderSalesOrderNumberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += WorkOrderPP.order().salesOrderNumber() + " != null";
        }
        else if (!OAString.isEmpty(this.orderSalesOrderNumber)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.orderSalesOrderNumber.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += WorkOrderPP.order().salesOrderNumber() + " LIKE ?";
            }
            else {
                sql += WorkOrderPP.order().salesOrderNumber() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useWorkOrderOrderSearch && getWorkOrderOrder() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + WorkOrderPP.order().pp + " = ?";
            args = OAArray.add(Object.class, args, getWorkOrderOrder());
        }
        if (useWorkOrderOrderSearch && getWorkOrderOrderSearch() != null) {
            getWorkOrderOrderSearch().appendSelect(prefix + WorkOrderPP.order().pp, select);
        }
        if (!useOrderItemItemSearch && getOrderItemItem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + WorkOrderPP.woItems().orderItem().item().pp + " = ?";
            args = OAArray.add(Object.class, args, getOrderItemItem());
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            getOrderItemItemSearch().appendSelect(prefix + WorkOrderPP.woItems().orderItem().item().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<WorkOrder> filterDataSourceFilter;
    public OAFilter<WorkOrder> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<WorkOrder>() {
            @Override
            public boolean isUsed(WorkOrder workOrder) {
                return WorkOrderSearch.this.isUsedForDataSourceFilter(workOrder);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<WorkOrder> filterCustomFilter;
    public OAFilter<WorkOrder> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<WorkOrder>() {
            @Override
            public boolean isUsed(WorkOrder workOrder) {
                boolean b = WorkOrderSearch.this.isUsedForCustomFilter(workOrder);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(workOrder);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(WorkOrder searchWorkOrder) {
        if (!isNull(P_Id)) {
            if (!OACompare.isEqual(searchWorkOrder.getId(), id)) return false;
        }
        if (dateCreatedUseNull) {
            if (OACompare.isNotEmpty(searchWorkOrder.getDateCreated())) return false;
        }
        else if (dateCreatedUseNotNull) {
            if (OACompare.isEmpty(searchWorkOrder.getDateCreated())) return false;
        }
        else if (dateCreated2 != null) {
            if (!OACompare.isEqualOrBetween(searchWorkOrder.getDateCreated(), dateCreated, dateCreated2)) return false;
        }
        if (workOrderOrder != null) {
            if (!OACompare.isEqual(searchWorkOrder.getOrder(), workOrderOrder)) return false;
        }
        if (orderSalesOrderNumberUseNull) {
            if (OACompare.isNotEmpty(searchWorkOrder.getProperty(WorkOrderPP.order().salesOrderNumber()))) return false;
        }
        else if (orderSalesOrderNumberUseNotNull) {
            if (OACompare.isEmpty(searchWorkOrder.getProperty(WorkOrderPP.order().salesOrderNumber()))) return false;
        }
        else if (orderSalesOrderNumber != null) {
            String s = getOrderSalesOrderNumber();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchWorkOrder.getProperty(WorkOrderPP.order().salesOrderNumber()), s)) return false;
        }
        if (this.orderItemItem != null) {
            OAFinder<WorkOrder, OrderItem> finder = new OAFinder<WorkOrder, OrderItem>(WorkOrderPP.woItems().orderItem().pp);
             if (orderItemItem != null) {
                finder.addEqualFilter(OrderItemPP.item().pp, getOrderItemItem());
            }
            if (finder.findFirst(searchWorkOrder) == null) return false;
        }
        if (useWorkOrderOrderSearch && getWorkOrderOrderSearch() != null) {
            Order order = (Order) searchWorkOrder.getProperty(WorkOrderPP.order().pp);
            if (order == null) return false;
            if (!getWorkOrderOrderSearch().isUsedForDataSourceFilter(order)) return false;
        }
        if (useOrderItemItemSearch && getOrderItemItemSearch() != null) {
            OAFinder<WorkOrder, Item> finder = new OAFinder<WorkOrder, Item>(WorkOrderPP.woItems().orderItem().item().pp) {
                @Override
                protected boolean isUsed(Item item) {
                    return getOrderItemItemSearch().isUsedForDataSourceFilter(item);
                }
            };
            if (finder.findFirst(searchWorkOrder) == null) return false;;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(WorkOrder searchWorkOrder) {
        return true;
    }
}
