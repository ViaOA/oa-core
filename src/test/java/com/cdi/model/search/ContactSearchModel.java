// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class ContactSearchModel {
    private static Logger LOG = Logger.getLogger(ContactSearchModel.class.getName());
    
    protected Hub<Contact> hub;  // search results
    protected Hub<Contact> hubMultiSelect;
    protected Hub<Contact> hubSearchFrom;  // hub (optional) to search from
    protected Hub<ContactSearch> hubContactSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Customer> hubContactCustomer;
    protected Hub<Phone> hubContactPhones;
    
    // finder used to find objects in a path
    protected OAFinder<?, Contact> finder;
    
    // ObjectModels
    protected CustomerModel modelContactCustomer;
    protected PhoneModel modelContactPhones;
    
    // SearchModels
    protected CustomerSearchModel modelContactCustomerSearch;
    protected PhoneSearchModel modelContactPhonesSearch;
    
    // object used for search data
    protected ContactSearch searchContact;
    
    public ContactSearchModel() {
    }
    
    public ContactSearchModel(Hub<Contact> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Contact> getHub() {
        if (hub == null) {
            hub = new Hub<Contact>(Contact.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Contact> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Contact> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    ContactSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Contact> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Contact.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Contact> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Contact> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public ContactSearch getContactSearch() {
        if (searchContact != null) return searchContact;
        searchContact = new ContactSearch();
        return searchContact;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<ContactSearch> getContactSearchHub() {
        if (hubContactSearch == null) {
            hubContactSearch = new Hub<ContactSearch>(ContactSearch.class);
            hubContactSearch.add(getContactSearch());
            hubContactSearch.setPos(0);
        }
        return hubContactSearch;
    }
    public Hub<Customer> getContactCustomerHub() {
        if (hubContactCustomer != null) return hubContactCustomer;
        hubContactCustomer = getContactSearchHub().getDetailHub(ContactSearch.P_ContactCustomer);
        return hubContactCustomer;
    }
    public Hub<Phone> getContactPhonesHub() {
        if (hubContactPhones != null) return hubContactPhones;
        hubContactPhones = getContactSearchHub().getDetailHub(ContactSearch.P_ContactPhones);
        return hubContactPhones;
    }
    
    public CustomerModel getContactCustomerModel() {
        if (modelContactCustomer != null) return modelContactCustomer;
        modelContactCustomer = new CustomerModel(getContactCustomerHub());
        modelContactCustomer.setDisplayName("Customer");
        modelContactCustomer.setPluralDisplayName("Customers");
        modelContactCustomer.setAllowNew(false);
        modelContactCustomer.setAllowSave(true);
        modelContactCustomer.setAllowAdd(false);
        modelContactCustomer.setAllowRemove(false);
        modelContactCustomer.setAllowClear(true);
        modelContactCustomer.setAllowDelete(false);
        modelContactCustomer.setAllowSearch(true);
        modelContactCustomer.setAllowHubSearch(false);
        modelContactCustomer.setAllowGotoEdit(true);
        return modelContactCustomer;
    }
    public PhoneModel getContactPhonesModel() {
        if (modelContactPhones != null) return modelContactPhones;
        modelContactPhones = new PhoneModel(getContactPhonesHub());
        modelContactPhones.setDisplayName("Phones");
        modelContactPhones.setPluralDisplayName("Phones");
        modelContactPhones.setAllowNew(false);
        modelContactPhones.setAllowSave(true);
        modelContactPhones.setAllowAdd(false);
        modelContactPhones.setAllowRemove(false);
        modelContactPhones.setAllowClear(true);
        modelContactPhones.setAllowDelete(false);
        modelContactPhones.setAllowSearch(true);
        modelContactPhones.setAllowHubSearch(false);
        modelContactPhones.setAllowGotoEdit(true);
        return modelContactPhones;
    }
    
    public CustomerSearchModel getContactCustomerSearchModel() {
        if (modelContactCustomerSearch == null) {
            modelContactCustomerSearch = new CustomerSearchModel();
            searchContact.setContactCustomerSearch(modelContactCustomerSearch.getCustomerSearch());
        }
        return modelContactCustomerSearch;
    }
    public PhoneSearchModel getContactPhonesSearchModel() {
        if (modelContactPhonesSearch == null) {
            modelContactPhonesSearch = new PhoneSearchModel();
            searchContact.setContactPhonesSearch(modelContactPhonesSearch.getPhoneSearch());
        }
        return modelContactPhonesSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses ContactSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Contact> sel = getContactSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Contact contact, Hub<Contact> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Contact> hub) {
    }
}

