// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class CustomerSearchModel {
    private static Logger LOG = Logger.getLogger(CustomerSearchModel.class.getName());
    
    protected Hub<Customer> hub;  // search results
    protected Hub<Customer> hubMultiSelect;
    protected Hub<Customer> hubSearchFrom;  // hub (optional) to search from
    protected Hub<CustomerSearch> hubCustomerSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Contact> hubCustomerContacts;
    protected Hub<Order> hubCustomerOrders;
    
    // finder used to find objects in a path
    protected OAFinder<?, Customer> finder;
    
    // ObjectModels
    protected ContactModel modelCustomerContacts;
    protected OrderModel modelCustomerOrders;
    
    // SearchModels
    protected ContactSearchModel modelCustomerContactsSearch;
    protected OrderSearchModel modelCustomerOrdersSearch;
    
    // object used for search data
    protected CustomerSearch searchCustomer;
    
    public CustomerSearchModel() {
    }
    
    public CustomerSearchModel(Hub<Customer> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Customer> getHub() {
        if (hub == null) {
            hub = new Hub<Customer>(Customer.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Customer> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Customer> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    CustomerSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Customer> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Customer.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Customer> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Customer> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public CustomerSearch getCustomerSearch() {
        if (searchCustomer != null) return searchCustomer;
        searchCustomer = new CustomerSearch();
        return searchCustomer;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<CustomerSearch> getCustomerSearchHub() {
        if (hubCustomerSearch == null) {
            hubCustomerSearch = new Hub<CustomerSearch>(CustomerSearch.class);
            hubCustomerSearch.add(getCustomerSearch());
            hubCustomerSearch.setPos(0);
        }
        return hubCustomerSearch;
    }
    public Hub<Contact> getCustomerContactsHub() {
        if (hubCustomerContacts != null) return hubCustomerContacts;
        hubCustomerContacts = getCustomerSearchHub().getDetailHub(CustomerSearch.P_CustomerContacts);
        return hubCustomerContacts;
    }
    public Hub<Order> getCustomerOrdersHub() {
        if (hubCustomerOrders != null) return hubCustomerOrders;
        hubCustomerOrders = getCustomerSearchHub().getDetailHub(CustomerSearch.P_CustomerOrders);
        return hubCustomerOrders;
    }
    
    public ContactModel getCustomerContactsModel() {
        if (modelCustomerContacts != null) return modelCustomerContacts;
        modelCustomerContacts = new ContactModel(getCustomerContactsHub());
        modelCustomerContacts.setDisplayName("Contacts");
        modelCustomerContacts.setPluralDisplayName("Contacts");
        modelCustomerContacts.setAllowNew(false);
        modelCustomerContacts.setAllowSave(true);
        modelCustomerContacts.setAllowAdd(false);
        modelCustomerContacts.setAllowRemove(false);
        modelCustomerContacts.setAllowClear(true);
        modelCustomerContacts.setAllowDelete(false);
        modelCustomerContacts.setAllowSearch(true);
        modelCustomerContacts.setAllowHubSearch(false);
        modelCustomerContacts.setAllowGotoEdit(true);
        return modelCustomerContacts;
    }
    public OrderModel getCustomerOrdersModel() {
        if (modelCustomerOrders != null) return modelCustomerOrders;
        modelCustomerOrders = new OrderModel(getCustomerOrdersHub());
        modelCustomerOrders.setDisplayName("Orders");
        modelCustomerOrders.setPluralDisplayName("Orders");
        modelCustomerOrders.setAllowNew(false);
        modelCustomerOrders.setAllowSave(true);
        modelCustomerOrders.setAllowAdd(false);
        modelCustomerOrders.setAllowRemove(false);
        modelCustomerOrders.setAllowClear(true);
        modelCustomerOrders.setAllowDelete(false);
        modelCustomerOrders.setAllowSearch(true);
        modelCustomerOrders.setAllowHubSearch(false);
        modelCustomerOrders.setAllowGotoEdit(true);
        modelCustomerOrders.setViewOnly(true);
        return modelCustomerOrders;
    }
    
    public ContactSearchModel getCustomerContactsSearchModel() {
        if (modelCustomerContactsSearch == null) {
            modelCustomerContactsSearch = new ContactSearchModel();
            searchCustomer.setCustomerContactsSearch(modelCustomerContactsSearch.getContactSearch());
        }
        return modelCustomerContactsSearch;
    }
    public OrderSearchModel getCustomerOrdersSearchModel() {
        if (modelCustomerOrdersSearch == null) {
            modelCustomerOrdersSearch = new OrderSearchModel();
            searchCustomer.setCustomerOrdersSearch(modelCustomerOrdersSearch.getOrderSearch());
        }
        return modelCustomerOrdersSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses CustomerSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Customer> sel = getCustomerSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Customer customer, Hub<Customer> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Customer> hub) {
    }
}

