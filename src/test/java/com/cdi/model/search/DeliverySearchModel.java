// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class DeliverySearchModel {
    private static Logger LOG = Logger.getLogger(DeliverySearchModel.class.getName());
    
    protected Hub<Delivery> hub;  // search results
    protected Hub<Delivery> hubMultiSelect;
    protected Hub<Delivery> hubSearchFrom;  // hub (optional) to search from
    protected Hub<DeliverySearch> hubDeliverySearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Truck> hubTruck;
    protected Hub<Order> hubOrder;
    
    // finder used to find objects in a path
    protected OAFinder<?, Delivery> finder;
    
    // ObjectModels
    protected TruckModel modelTruck;
    protected OrderModel modelOrder;
    
    // SearchModels
    protected TruckSearchModel modelTruckSearch;
    protected OrderSearchModel modelOrderSearch;
    
    // object used for search data
    protected DeliverySearch searchDelivery;
    
    public DeliverySearchModel() {
    }
    
    public DeliverySearchModel(Hub<Delivery> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Delivery> getHub() {
        if (hub == null) {
            hub = new Hub<Delivery>(Delivery.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Delivery> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Delivery> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    DeliverySearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Delivery> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Delivery.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Delivery> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Delivery> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public DeliverySearch getDeliverySearch() {
        if (searchDelivery != null) return searchDelivery;
        searchDelivery = new DeliverySearch();
        return searchDelivery;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<DeliverySearch> getDeliverySearchHub() {
        if (hubDeliverySearch == null) {
            hubDeliverySearch = new Hub<DeliverySearch>(DeliverySearch.class);
            hubDeliverySearch.add(getDeliverySearch());
            hubDeliverySearch.setPos(0);
        }
        return hubDeliverySearch;
    }
    public Hub<Truck> getTruckHub() {
        if (hubTruck != null) return hubTruck;
        hubTruck = getDeliverySearchHub().getDetailHub(DeliverySearch.P_Truck);
        return hubTruck;
    }
    public Hub<Order> getOrderHub() {
        if (hubOrder != null) return hubOrder;
        hubOrder = getDeliverySearchHub().getDetailHub(DeliverySearch.P_Order);
        return hubOrder;
    }
    
    public TruckModel getTruckModel() {
        if (modelTruck != null) return modelTruck;
        modelTruck = new TruckModel(getTruckHub());
        modelTruck.setDisplayName("Truck");
        modelTruck.setPluralDisplayName("Trucks");
        modelTruck.setAllowNew(false);
        modelTruck.setAllowSave(true);
        modelTruck.setAllowAdd(false);
        modelTruck.setAllowRemove(false);
        modelTruck.setAllowClear(true);
        modelTruck.setAllowDelete(false);
        modelTruck.setAllowSearch(true);
        modelTruck.setAllowHubSearch(false);
        modelTruck.setAllowGotoEdit(true);
        return modelTruck;
    }
    public OrderModel getOrderModel() {
        if (modelOrder != null) return modelOrder;
        modelOrder = new OrderModel(getOrderHub());
        modelOrder.setDisplayName("Order");
        modelOrder.setPluralDisplayName("Orders");
        modelOrder.setAllowNew(false);
        modelOrder.setAllowSave(true);
        modelOrder.setAllowAdd(false);
        modelOrder.setAllowRemove(false);
        modelOrder.setAllowClear(true);
        modelOrder.setAllowDelete(false);
        modelOrder.setAllowSearch(true);
        modelOrder.setAllowHubSearch(false);
        modelOrder.setAllowGotoEdit(true);
        return modelOrder;
    }
    
    public TruckSearchModel getTruckSearchModel() {
        if (modelTruckSearch == null) {
            modelTruckSearch = new TruckSearchModel();
            searchDelivery.setTruckSearch(modelTruckSearch.getTruckSearch());
        }
        return modelTruckSearch;
    }
    public OrderSearchModel getOrderSearchModel() {
        if (modelOrderSearch == null) {
            modelOrderSearch = new OrderSearchModel();
            searchDelivery.setOrderSearch(modelOrderSearch.getOrderSearch());
        }
        return modelOrderSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses DeliverySearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Delivery> sel = getDeliverySearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Delivery delivery, Hub<Delivery> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Delivery> hub) {
    }
}

