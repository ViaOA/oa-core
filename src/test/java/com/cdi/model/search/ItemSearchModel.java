// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class ItemSearchModel {
    private static Logger LOG = Logger.getLogger(ItemSearchModel.class.getName());
    
    protected Hub<Item> hub;  // search results
    protected Hub<Item> hubMultiSelect;
    protected Hub<Item> hubSearchFrom;  // hub (optional) to search from
    protected Hub<ItemSearch> hubItemSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Mold> hubMold;
    protected Hub<ItemCategory> hubItemCategory;
    
    // finder used to find objects in a path
    protected OAFinder<?, Item> finder;
    
    // ObjectModels
    protected MoldModel modelMold;
    protected ItemCategoryModel modelItemCategory;
    
    // SearchModels
    protected MoldSearchModel modelMoldSearch;
    protected ItemCategorySearchModel modelItemCategorySearch;
    
    // object used for search data
    protected ItemSearch searchItem;
    
    public ItemSearchModel() {
    }
    
    public ItemSearchModel(Hub<Item> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Item> getHub() {
        if (hub == null) {
            hub = new Hub<Item>(Item.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Item> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Item> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    ItemSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Item> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Item.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Item> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Item> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public ItemSearch getItemSearch() {
        if (searchItem != null) return searchItem;
        searchItem = new ItemSearch();
        return searchItem;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<ItemSearch> getItemSearchHub() {
        if (hubItemSearch == null) {
            hubItemSearch = new Hub<ItemSearch>(ItemSearch.class);
            hubItemSearch.add(getItemSearch());
            hubItemSearch.setPos(0);
        }
        return hubItemSearch;
    }
    public Hub<Mold> getMoldHub() {
        if (hubMold != null) return hubMold;
        hubMold = getItemSearchHub().getDetailHub(ItemSearch.P_Mold);
        return hubMold;
    }
    protected Hub<ItemCategory>hubRootItemCategory;
    public Hub<ItemCategory> getRootItemCategoryHub() {
        if (hubRootItemCategory != null) return hubRootItemCategory;
        hubRootItemCategory = ModelDelegate.getItemCategories().createSharedHub();
        return hubRootItemCategory;
    }
    public Hub<ItemCategory> getItemCategoryHub() {
        if (hubItemCategory != null) return hubItemCategory;
        hubItemCategory = new Hub<>(ItemCategory.class);
        hubItemCategory.setSharedHub(getRootItemCategoryHub());
        hubItemCategory.setLinkHub(getItemSearchHub(), ItemSearch.P_ItemCategory); 
        return hubItemCategory;
    }
    
    public MoldModel getMoldModel() {
        if (modelMold != null) return modelMold;
        modelMold = new MoldModel(getMoldHub());
        modelMold.setDisplayName("Mold");
        modelMold.setPluralDisplayName("Molds");
        modelMold.setAllowNew(false);
        modelMold.setAllowSave(true);
        modelMold.setAllowAdd(false);
        modelMold.setAllowRemove(false);
        modelMold.setAllowClear(true);
        modelMold.setAllowDelete(false);
        modelMold.setAllowSearch(true);
        modelMold.setAllowHubSearch(false);
        modelMold.setAllowGotoEdit(true);
        return modelMold;
    }
    public ItemCategoryModel getItemCategoryModel() {
        if (modelItemCategory != null) return modelItemCategory;
        modelItemCategory = new ItemCategoryModel(getRootItemCategoryHub(), getItemCategoryHub());
        modelItemCategory.setDisplayName("Item Category");
        modelItemCategory.setPluralDisplayName("Item Categories");
        modelItemCategory.setAllowNew(false);
        modelItemCategory.setAllowSave(true);
        modelItemCategory.setAllowAdd(false);
        modelItemCategory.setAllowRemove(false);
        modelItemCategory.setAllowClear(true);
        modelItemCategory.setAllowDelete(false);
        modelItemCategory.setAllowSearch(true);
        modelItemCategory.setAllowHubSearch(false);
        modelItemCategory.setAllowGotoEdit(true);
        modelItemCategory.setViewOnly(true);
        return modelItemCategory;
    }
    
    public MoldSearchModel getMoldSearchModel() {
        if (modelMoldSearch == null) {
            modelMoldSearch = new MoldSearchModel();
            searchItem.setMoldSearch(modelMoldSearch.getMoldSearch());
        }
        return modelMoldSearch;
    }
    public ItemCategorySearchModel getItemCategorySearchModel() {
        if (modelItemCategorySearch == null) {
            modelItemCategorySearch = new ItemCategorySearchModel();
            searchItem.setItemCategorySearch(modelItemCategorySearch.getItemCategorySearch());
        }
        return modelItemCategorySearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses ItemSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Item> sel = getItemSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Item item, Hub<Item> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Item> hub) {
    }
}

