// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class MoldSearchModel {
    private static Logger LOG = Logger.getLogger(MoldSearchModel.class.getName());
    
    protected Hub<Mold> hub;  // search results
    protected Hub<Mold> hubMultiSelect;
    protected Hub<Mold> hubSearchFrom;  // hub (optional) to search from
    protected Hub<MoldSearch> hubMoldSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Item> hubMoldItems;
    
    // finder used to find objects in a path
    protected OAFinder<?, Mold> finder;
    
    // ObjectModels
    protected ItemModel modelMoldItems;
    
    // SearchModels
    protected ItemSearchModel modelMoldItemsSearch;
    
    // object used for search data
    protected MoldSearch searchMold;
    
    public MoldSearchModel() {
    }
    
    public MoldSearchModel(Hub<Mold> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Mold> getHub() {
        if (hub == null) {
            hub = new Hub<Mold>(Mold.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Mold> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Mold> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    MoldSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Mold> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Mold.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Mold> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Mold> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public MoldSearch getMoldSearch() {
        if (searchMold != null) return searchMold;
        searchMold = new MoldSearch();
        return searchMold;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<MoldSearch> getMoldSearchHub() {
        if (hubMoldSearch == null) {
            hubMoldSearch = new Hub<MoldSearch>(MoldSearch.class);
            hubMoldSearch.add(getMoldSearch());
            hubMoldSearch.setPos(0);
        }
        return hubMoldSearch;
    }
    public Hub<Item> getMoldItemsHub() {
        if (hubMoldItems != null) return hubMoldItems;
        hubMoldItems = getMoldSearchHub().getDetailHub(MoldSearch.P_MoldItems);
        return hubMoldItems;
    }
    
    public ItemModel getMoldItemsModel() {
        if (modelMoldItems != null) return modelMoldItems;
        modelMoldItems = new ItemModel(getMoldItemsHub());
        modelMoldItems.setDisplayName("Items");
        modelMoldItems.setPluralDisplayName("Items");
        modelMoldItems.setAllowNew(false);
        modelMoldItems.setAllowSave(true);
        modelMoldItems.setAllowAdd(false);
        modelMoldItems.setAllowRemove(false);
        modelMoldItems.setAllowClear(true);
        modelMoldItems.setAllowDelete(false);
        modelMoldItems.setAllowSearch(true);
        modelMoldItems.setAllowHubSearch(false);
        modelMoldItems.setAllowGotoEdit(true);
        return modelMoldItems;
    }
    
    public ItemSearchModel getMoldItemsSearchModel() {
        if (modelMoldItemsSearch == null) {
            modelMoldItemsSearch = new ItemSearchModel();
            searchMold.setMoldItemsSearch(modelMoldItemsSearch.getItemSearch());
        }
        return modelMoldItemsSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses MoldSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Mold> sel = getMoldSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Mold mold, Hub<Mold> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Mold> hub) {
    }
}

