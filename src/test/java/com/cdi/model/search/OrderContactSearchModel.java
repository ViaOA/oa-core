// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class OrderContactSearchModel {
    private static Logger LOG = Logger.getLogger(OrderContactSearchModel.class.getName());
    
    protected Hub<OrderContact> hub;  // search results
    protected Hub<OrderContact> hubMultiSelect;
    protected Hub<OrderContact> hubSearchFrom;  // hub (optional) to search from
    protected Hub<OrderContactSearch> hubOrderContactSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Order> hubOrderContactOrder;
    protected Hub<Contact> hubContact;
    
    // finder used to find objects in a path
    protected OAFinder<?, OrderContact> finder;
    
    // ObjectModels
    protected OrderModel modelOrderContactOrder;
    protected ContactModel modelContact;
    
    // SearchModels
    protected OrderSearchModel modelOrderContactOrderSearch;
    protected ContactSearchModel modelContactSearch;
    
    // object used for search data
    protected OrderContactSearch searchOrderContact;
    
    public OrderContactSearchModel() {
    }
    
    public OrderContactSearchModel(Hub<OrderContact> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<OrderContact> getHub() {
        if (hub == null) {
            hub = new Hub<OrderContact>(OrderContact.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<OrderContact> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<OrderContact> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    OrderContactSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<OrderContact> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(OrderContact.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, OrderContact> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, OrderContact> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public OrderContactSearch getOrderContactSearch() {
        if (searchOrderContact != null) return searchOrderContact;
        searchOrderContact = new OrderContactSearch();
        return searchOrderContact;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<OrderContactSearch> getOrderContactSearchHub() {
        if (hubOrderContactSearch == null) {
            hubOrderContactSearch = new Hub<OrderContactSearch>(OrderContactSearch.class);
            hubOrderContactSearch.add(getOrderContactSearch());
            hubOrderContactSearch.setPos(0);
        }
        return hubOrderContactSearch;
    }
    public Hub<Order> getOrderContactOrderHub() {
        if (hubOrderContactOrder != null) return hubOrderContactOrder;
        hubOrderContactOrder = getOrderContactSearchHub().getDetailHub(OrderContactSearch.P_OrderContactOrder);
        return hubOrderContactOrder;
    }
    public Hub<Contact> getContactHub() {
        if (hubContact != null) return hubContact;
        hubContact = getOrderContactSearchHub().getDetailHub(OrderContactSearch.P_Contact);
        return hubContact;
    }
    
    public OrderModel getOrderContactOrderModel() {
        if (modelOrderContactOrder != null) return modelOrderContactOrder;
        modelOrderContactOrder = new OrderModel(getOrderContactOrderHub());
        modelOrderContactOrder.setDisplayName("Order");
        modelOrderContactOrder.setPluralDisplayName("Orders");
        modelOrderContactOrder.setAllowNew(false);
        modelOrderContactOrder.setAllowSave(true);
        modelOrderContactOrder.setAllowAdd(false);
        modelOrderContactOrder.setAllowRemove(false);
        modelOrderContactOrder.setAllowClear(true);
        modelOrderContactOrder.setAllowDelete(false);
        modelOrderContactOrder.setAllowSearch(true);
        modelOrderContactOrder.setAllowHubSearch(false);
        modelOrderContactOrder.setAllowGotoEdit(true);
        return modelOrderContactOrder;
    }
    public ContactModel getContactModel() {
        if (modelContact != null) return modelContact;
        modelContact = new ContactModel(getContactHub());
        modelContact.setDisplayName("Contact");
        modelContact.setPluralDisplayName("Contacts");
        modelContact.setAllowNew(false);
        modelContact.setAllowSave(true);
        modelContact.setAllowAdd(false);
        modelContact.setAllowRemove(false);
        modelContact.setAllowClear(true);
        modelContact.setAllowDelete(false);
        modelContact.setAllowSearch(true);
        modelContact.setAllowHubSearch(false);
        modelContact.setAllowGotoEdit(true);
        return modelContact;
    }
    
    public OrderSearchModel getOrderContactOrderSearchModel() {
        if (modelOrderContactOrderSearch == null) {
            modelOrderContactOrderSearch = new OrderSearchModel();
            searchOrderContact.setOrderContactOrderSearch(modelOrderContactOrderSearch.getOrderSearch());
        }
        return modelOrderContactOrderSearch;
    }
    public ContactSearchModel getContactSearchModel() {
        if (modelContactSearch == null) {
            modelContactSearch = new ContactSearchModel();
            searchOrderContact.setContactSearch(modelContactSearch.getContactSearch());
        }
        return modelContactSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses OrderContactSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<OrderContact> sel = getOrderContactSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(OrderContact orderContact, Hub<OrderContact> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<OrderContact> hub) {
    }
}

