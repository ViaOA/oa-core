// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class OrderItemCommentSearchModel {
    private static Logger LOG = Logger.getLogger(OrderItemCommentSearchModel.class.getName());
    
    protected Hub<OrderItemComment> hub;  // search results
    protected Hub<OrderItemComment> hubMultiSelect;
    protected Hub<OrderItemComment> hubSearchFrom;  // hub (optional) to search from
    protected Hub<OrderItemCommentSearch> hubOrderItemCommentSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Order> hubOrderItemOrder;
    protected Hub<Item> hubOrderItemItem;
    
    // finder used to find objects in a path
    protected OAFinder<?, OrderItemComment> finder;
    
    // ObjectModels
    protected OrderModel modelOrderItemOrder;
    protected ItemModel modelOrderItemItem;
    
    // SearchModels
    protected OrderSearchModel modelOrderItemOrderSearch;
    protected ItemSearchModel modelOrderItemItemSearch;
    
    // object used for search data
    protected OrderItemCommentSearch searchOrderItemComment;
    
    public OrderItemCommentSearchModel() {
    }
    
    public OrderItemCommentSearchModel(Hub<OrderItemComment> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<OrderItemComment> getHub() {
        if (hub == null) {
            hub = new Hub<OrderItemComment>(OrderItemComment.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<OrderItemComment> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<OrderItemComment> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    OrderItemCommentSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<OrderItemComment> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(OrderItemComment.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, OrderItemComment> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, OrderItemComment> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public OrderItemCommentSearch getOrderItemCommentSearch() {
        if (searchOrderItemComment != null) return searchOrderItemComment;
        searchOrderItemComment = new OrderItemCommentSearch();
        return searchOrderItemComment;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<OrderItemCommentSearch> getOrderItemCommentSearchHub() {
        if (hubOrderItemCommentSearch == null) {
            hubOrderItemCommentSearch = new Hub<OrderItemCommentSearch>(OrderItemCommentSearch.class);
            hubOrderItemCommentSearch.add(getOrderItemCommentSearch());
            hubOrderItemCommentSearch.setPos(0);
        }
        return hubOrderItemCommentSearch;
    }
    public Hub<Order> getOrderItemOrderHub() {
        if (hubOrderItemOrder != null) return hubOrderItemOrder;
        hubOrderItemOrder = getOrderItemCommentSearchHub().getDetailHub(OrderItemCommentSearch.P_OrderItemOrder);
        return hubOrderItemOrder;
    }
    public Hub<Item> getOrderItemItemHub() {
        if (hubOrderItemItem != null) return hubOrderItemItem;
        hubOrderItemItem = getOrderItemCommentSearchHub().getDetailHub(OrderItemCommentSearch.P_OrderItemItem);
        return hubOrderItemItem;
    }
    
    public OrderModel getOrderItemOrderModel() {
        if (modelOrderItemOrder != null) return modelOrderItemOrder;
        modelOrderItemOrder = new OrderModel(getOrderItemOrderHub());
        modelOrderItemOrder.setDisplayName("Order");
        modelOrderItemOrder.setPluralDisplayName("Orders");
        modelOrderItemOrder.setAllowNew(false);
        modelOrderItemOrder.setAllowSave(true);
        modelOrderItemOrder.setAllowAdd(false);
        modelOrderItemOrder.setAllowRemove(false);
        modelOrderItemOrder.setAllowClear(true);
        modelOrderItemOrder.setAllowDelete(false);
        modelOrderItemOrder.setAllowSearch(true);
        modelOrderItemOrder.setAllowHubSearch(false);
        modelOrderItemOrder.setAllowGotoEdit(true);
        return modelOrderItemOrder;
    }
    public ItemModel getOrderItemItemModel() {
        if (modelOrderItemItem != null) return modelOrderItemItem;
        modelOrderItemItem = new ItemModel(getOrderItemItemHub());
        modelOrderItemItem.setDisplayName("Item");
        modelOrderItemItem.setPluralDisplayName("Items");
        modelOrderItemItem.setAllowNew(false);
        modelOrderItemItem.setAllowSave(true);
        modelOrderItemItem.setAllowAdd(false);
        modelOrderItemItem.setAllowRemove(false);
        modelOrderItemItem.setAllowClear(true);
        modelOrderItemItem.setAllowDelete(false);
        modelOrderItemItem.setAllowSearch(true);
        modelOrderItemItem.setAllowHubSearch(false);
        modelOrderItemItem.setAllowGotoEdit(true);
        modelOrderItemItem.setViewOnly(true);
        return modelOrderItemItem;
    }
    
    public OrderSearchModel getOrderItemOrderSearchModel() {
        if (modelOrderItemOrderSearch == null) {
            modelOrderItemOrderSearch = new OrderSearchModel();
            searchOrderItemComment.setOrderItemOrderSearch(modelOrderItemOrderSearch.getOrderSearch());
        }
        return modelOrderItemOrderSearch;
    }
    public ItemSearchModel getOrderItemItemSearchModel() {
        if (modelOrderItemItemSearch == null) {
            modelOrderItemItemSearch = new ItemSearchModel();
            searchOrderItemComment.setOrderItemItemSearch(modelOrderItemItemSearch.getItemSearch());
        }
        return modelOrderItemItemSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses OrderItemCommentSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<OrderItemComment> sel = getOrderItemCommentSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(OrderItemComment orderItemComment, Hub<OrderItemComment> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<OrderItemComment> hub) {
    }
}

