// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class OrderNoteSearchModel {
    private static Logger LOG = Logger.getLogger(OrderNoteSearchModel.class.getName());
    
    protected Hub<OrderNote> hub;  // search results
    protected Hub<OrderNote> hubMultiSelect;
    protected Hub<OrderNote> hubSearchFrom;  // hub (optional) to search from
    protected Hub<OrderNoteSearch> hubOrderNoteSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Order> hubOrderNoteOrder;
    protected Hub<User> hubOrderNoteUser;
    
    // finder used to find objects in a path
    protected OAFinder<?, OrderNote> finder;
    
    // ObjectModels
    protected OrderModel modelOrderNoteOrder;
    protected UserModel modelOrderNoteUser;
    
    // SearchModels
    protected OrderSearchModel modelOrderNoteOrderSearch;
    protected UserSearchModel modelOrderNoteUserSearch;
    
    // object used for search data
    protected OrderNoteSearch searchOrderNote;
    
    public OrderNoteSearchModel() {
    }
    
    public OrderNoteSearchModel(Hub<OrderNote> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<OrderNote> getHub() {
        if (hub == null) {
            hub = new Hub<OrderNote>(OrderNote.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<OrderNote> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<OrderNote> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    OrderNoteSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<OrderNote> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(OrderNote.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, OrderNote> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, OrderNote> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public OrderNoteSearch getOrderNoteSearch() {
        if (searchOrderNote != null) return searchOrderNote;
        searchOrderNote = new OrderNoteSearch();
        return searchOrderNote;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<OrderNoteSearch> getOrderNoteSearchHub() {
        if (hubOrderNoteSearch == null) {
            hubOrderNoteSearch = new Hub<OrderNoteSearch>(OrderNoteSearch.class);
            hubOrderNoteSearch.add(getOrderNoteSearch());
            hubOrderNoteSearch.setPos(0);
        }
        return hubOrderNoteSearch;
    }
    public Hub<Order> getOrderNoteOrderHub() {
        if (hubOrderNoteOrder != null) return hubOrderNoteOrder;
        hubOrderNoteOrder = getOrderNoteSearchHub().getDetailHub(OrderNoteSearch.P_OrderNoteOrder);
        return hubOrderNoteOrder;
    }
    public Hub<User> getOrderNoteUserHub() {
        if (hubOrderNoteUser != null) return hubOrderNoteUser;
        hubOrderNoteUser = new Hub<>(User.class);
        Hub<User> hub = ModelDelegate.getUsers();
        HubCopy<User> hc = new HubCopy<>(hub, hubOrderNoteUser, false);
        hubOrderNoteUser.setLinkHub(getOrderNoteSearchHub(), OrderNoteSearch.P_OrderNoteUser); 
        return hubOrderNoteUser;
    }
    
    public OrderModel getOrderNoteOrderModel() {
        if (modelOrderNoteOrder != null) return modelOrderNoteOrder;
        modelOrderNoteOrder = new OrderModel(getOrderNoteOrderHub());
        modelOrderNoteOrder.setDisplayName("Order");
        modelOrderNoteOrder.setPluralDisplayName("Orders");
        modelOrderNoteOrder.setAllowNew(false);
        modelOrderNoteOrder.setAllowSave(true);
        modelOrderNoteOrder.setAllowAdd(false);
        modelOrderNoteOrder.setAllowRemove(false);
        modelOrderNoteOrder.setAllowClear(true);
        modelOrderNoteOrder.setAllowDelete(false);
        modelOrderNoteOrder.setAllowSearch(true);
        modelOrderNoteOrder.setAllowHubSearch(false);
        modelOrderNoteOrder.setAllowGotoEdit(true);
        return modelOrderNoteOrder;
    }
    public UserModel getOrderNoteUserModel() {
        if (modelOrderNoteUser != null) return modelOrderNoteUser;
        modelOrderNoteUser = new UserModel(getOrderNoteUserHub());
        modelOrderNoteUser.setDisplayName("User");
        modelOrderNoteUser.setPluralDisplayName("Users");
        modelOrderNoteUser.setAllowNew(false);
        modelOrderNoteUser.setAllowSave(true);
        modelOrderNoteUser.setAllowAdd(false);
        modelOrderNoteUser.setAllowRemove(false);
        modelOrderNoteUser.setAllowClear(true);
        modelOrderNoteUser.setAllowDelete(false);
        modelOrderNoteUser.setAllowSearch(true);
        modelOrderNoteUser.setAllowHubSearch(false);
        modelOrderNoteUser.setAllowGotoEdit(true);
        modelOrderNoteUser.setViewOnly(true);
        return modelOrderNoteUser;
    }
    
    public OrderSearchModel getOrderNoteOrderSearchModel() {
        if (modelOrderNoteOrderSearch == null) {
            modelOrderNoteOrderSearch = new OrderSearchModel();
            searchOrderNote.setOrderNoteOrderSearch(modelOrderNoteOrderSearch.getOrderSearch());
        }
        return modelOrderNoteOrderSearch;
    }
    public UserSearchModel getOrderNoteUserSearchModel() {
        if (modelOrderNoteUserSearch == null) {
            modelOrderNoteUserSearch = new UserSearchModel();
            searchOrderNote.setOrderNoteUserSearch(modelOrderNoteUserSearch.getUserSearch());
        }
        return modelOrderNoteUserSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses OrderNoteSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<OrderNote> sel = getOrderNoteSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(OrderNote orderNote, Hub<OrderNote> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<OrderNote> hub) {
    }
}

