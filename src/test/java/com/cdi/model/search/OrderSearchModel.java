// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class OrderSearchModel {
    private static Logger LOG = Logger.getLogger(OrderSearchModel.class.getName());
    
    protected Hub<Order> hub;  // search results
    protected Hub<Order> hubMultiSelect;
    protected Hub<Order> hubSearchFrom;  // hub (optional) to search from
    protected Hub<OrderSearch> hubOrderSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<User> hubSalesOrderSalesPersonUser;
    protected Hub<Item> hubOrderItemItem;
    protected Hub<Customer> hubOrderCustomer;
    protected Hub<OrderContact> hubOrderOrderContacts;
    
    // finder used to find objects in a path
    protected OAFinder<?, Order> finder;
    
    // ObjectModels
    protected UserModel modelSalesOrderSalesPersonUser;
    protected ItemModel modelOrderItemItem;
    protected CustomerModel modelOrderCustomer;
    protected OrderContactModel modelOrderOrderContacts;
    
    // SearchModels
    protected UserSearchModel modelSalesOrderSalesPersonUserSearch;
    protected ItemSearchModel modelOrderItemItemSearch;
    protected CustomerSearchModel modelOrderCustomerSearch;
    protected OrderContactSearchModel modelOrderOrderContactsSearch;
    
    // object used for search data
    protected OrderSearch searchOrder;
    
    public OrderSearchModel() {
    }
    
    public OrderSearchModel(Hub<Order> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Order> getHub() {
        if (hub == null) {
            hub = new Hub<Order>(Order.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Order> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Order> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    OrderSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Order> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Order.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Order> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Order> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public OrderSearch getOrderSearch() {
        if (searchOrder != null) return searchOrder;
        searchOrder = new OrderSearch();
        return searchOrder;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<OrderSearch> getOrderSearchHub() {
        if (hubOrderSearch == null) {
            hubOrderSearch = new Hub<OrderSearch>(OrderSearch.class);
            hubOrderSearch.add(getOrderSearch());
            hubOrderSearch.setPos(0);
        }
        return hubOrderSearch;
    }
    public Hub<User> getSalesOrderSalesPersonUserHub() {
        if (hubSalesOrderSalesPersonUser != null) return hubSalesOrderSalesPersonUser;
        Hub<User> hub = new Hub<>(User.class);
        UserSalesPersonFilter filter = new UserSalesPersonFilter(ModelDelegate.getUsers(), hub);
        hubSalesOrderSalesPersonUser = new Hub<>(User.class);
        HubCopy<User> hc = new HubCopy<>(hub, hubSalesOrderSalesPersonUser, false);
        hubSalesOrderSalesPersonUser.setLinkHub(getOrderSearchHub(), OrderSearch.P_SalesOrderSalesPersonUser); 
        return hubSalesOrderSalesPersonUser;
    }
    public Hub<Item> getOrderItemItemHub() {
        if (hubOrderItemItem != null) return hubOrderItemItem;
        hubOrderItemItem = getOrderSearchHub().getDetailHub(OrderSearch.P_OrderItemItem);
        return hubOrderItemItem;
    }
    public Hub<Customer> getOrderCustomerHub() {
        if (hubOrderCustomer != null) return hubOrderCustomer;
        hubOrderCustomer = getOrderSearchHub().getDetailHub(OrderSearch.P_OrderCustomer);
        return hubOrderCustomer;
    }
    public Hub<OrderContact> getOrderOrderContactsHub() {
        if (hubOrderOrderContacts != null) return hubOrderOrderContacts;
        hubOrderOrderContacts = getOrderSearchHub().getDetailHub(OrderSearch.P_OrderOrderContacts);
        return hubOrderOrderContacts;
    }
    
    public UserModel getSalesOrderSalesPersonUserModel() {
        if (modelSalesOrderSalesPersonUser != null) return modelSalesOrderSalesPersonUser;
        modelSalesOrderSalesPersonUser = new UserModel(getSalesOrderSalesPersonUserHub());
        modelSalesOrderSalesPersonUser.setDisplayName("Sales Person");
        modelSalesOrderSalesPersonUser.setPluralDisplayName("Users");
        modelSalesOrderSalesPersonUser.setAllowNew(false);
        modelSalesOrderSalesPersonUser.setAllowSave(true);
        modelSalesOrderSalesPersonUser.setAllowAdd(false);
        modelSalesOrderSalesPersonUser.setAllowRemove(false);
        modelSalesOrderSalesPersonUser.setAllowClear(true);
        modelSalesOrderSalesPersonUser.setAllowDelete(false);
        modelSalesOrderSalesPersonUser.setAllowSearch(true);
        modelSalesOrderSalesPersonUser.setAllowHubSearch(false);
        modelSalesOrderSalesPersonUser.setAllowGotoEdit(true);
        modelSalesOrderSalesPersonUser.setViewOnly(true);
        return modelSalesOrderSalesPersonUser;
    }
    public ItemModel getOrderItemItemModel() {
        if (modelOrderItemItem != null) return modelOrderItemItem;
        modelOrderItemItem = new ItemModel(getOrderItemItemHub());
        modelOrderItemItem.setDisplayName("Item");
        modelOrderItemItem.setPluralDisplayName("Items");
        modelOrderItemItem.setAllowNew(false);
        modelOrderItemItem.setAllowSave(true);
        modelOrderItemItem.setAllowAdd(false);
        modelOrderItemItem.setAllowRemove(false);
        modelOrderItemItem.setAllowClear(true);
        modelOrderItemItem.setAllowDelete(false);
        modelOrderItemItem.setAllowSearch(true);
        modelOrderItemItem.setAllowHubSearch(false);
        modelOrderItemItem.setAllowGotoEdit(true);
        modelOrderItemItem.setViewOnly(true);
        return modelOrderItemItem;
    }
    public CustomerModel getOrderCustomerModel() {
        if (modelOrderCustomer != null) return modelOrderCustomer;
        modelOrderCustomer = new CustomerModel(getOrderCustomerHub());
        modelOrderCustomer.setDisplayName("Customer");
        modelOrderCustomer.setPluralDisplayName("Customers");
        modelOrderCustomer.setAllowNew(false);
        modelOrderCustomer.setAllowSave(true);
        modelOrderCustomer.setAllowAdd(false);
        modelOrderCustomer.setAllowRemove(false);
        modelOrderCustomer.setAllowClear(true);
        modelOrderCustomer.setAllowDelete(false);
        modelOrderCustomer.setAllowSearch(true);
        modelOrderCustomer.setAllowHubSearch(false);
        modelOrderCustomer.setAllowGotoEdit(true);
        modelOrderCustomer.setViewOnly(true);
        return modelOrderCustomer;
    }
    public OrderContactModel getOrderOrderContactsModel() {
        if (modelOrderOrderContacts != null) return modelOrderOrderContacts;
        modelOrderOrderContacts = new OrderContactModel(getOrderOrderContactsHub());
        modelOrderOrderContacts.setDisplayName("Order Contacts");
        modelOrderOrderContacts.setPluralDisplayName("Order Contacts");
        modelOrderOrderContacts.setAllowNew(false);
        modelOrderOrderContacts.setAllowSave(true);
        modelOrderOrderContacts.setAllowAdd(false);
        modelOrderOrderContacts.setAllowRemove(false);
        modelOrderOrderContacts.setAllowClear(true);
        modelOrderOrderContacts.setAllowDelete(false);
        modelOrderOrderContacts.setAllowSearch(true);
        modelOrderOrderContacts.setAllowHubSearch(false);
        modelOrderOrderContacts.setAllowGotoEdit(true);
        return modelOrderOrderContacts;
    }
    
    public UserSearchModel getSalesOrderSalesPersonUserSearchModel() {
        if (modelSalesOrderSalesPersonUserSearch == null) {
            modelSalesOrderSalesPersonUserSearch = new UserSearchModel();
            searchOrder.setSalesOrderSalesPersonUserSearch(modelSalesOrderSalesPersonUserSearch.getUserSearch());
        }
        return modelSalesOrderSalesPersonUserSearch;
    }
    public ItemSearchModel getOrderItemItemSearchModel() {
        if (modelOrderItemItemSearch == null) {
            modelOrderItemItemSearch = new ItemSearchModel();
            searchOrder.setOrderItemItemSearch(modelOrderItemItemSearch.getItemSearch());
        }
        return modelOrderItemItemSearch;
    }
    public CustomerSearchModel getOrderCustomerSearchModel() {
        if (modelOrderCustomerSearch == null) {
            modelOrderCustomerSearch = new CustomerSearchModel();
            searchOrder.setOrderCustomerSearch(modelOrderCustomerSearch.getCustomerSearch());
        }
        return modelOrderCustomerSearch;
    }
    public OrderContactSearchModel getOrderOrderContactsSearchModel() {
        if (modelOrderOrderContactsSearch == null) {
            modelOrderOrderContactsSearch = new OrderContactSearchModel();
            searchOrder.setOrderOrderContactsSearch(modelOrderOrderContactsSearch.getOrderContactSearch());
        }
        return modelOrderOrderContactsSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses OrderSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Order> sel = getOrderSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Order order, Hub<Order> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Order> hub) {
    }
}

