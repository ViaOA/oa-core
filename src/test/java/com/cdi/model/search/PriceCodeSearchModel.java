// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class PriceCodeSearchModel {
    private static Logger LOG = Logger.getLogger(PriceCodeSearchModel.class.getName());
    
    protected Hub<PriceCode> hub;  // search results
    protected Hub<PriceCode> hubMultiSelect;
    protected Hub<PriceCode> hubSearchFrom;  // hub (optional) to search from
    protected Hub<PriceCodeSearch> hubPriceCodeSearch;  // search data, size=1, AO
    
    // finder used to find objects in a path
    protected OAFinder<?, PriceCode> finder;
    
    // object used for search data
    protected PriceCodeSearch searchPriceCode;
    
    public PriceCodeSearchModel() {
    }
    
    public PriceCodeSearchModel(Hub<PriceCode> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<PriceCode> getHub() {
        if (hub == null) {
            hub = new Hub<PriceCode>(PriceCode.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<PriceCode> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<PriceCode> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    PriceCodeSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<PriceCode> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(PriceCode.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, PriceCode> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, PriceCode> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public PriceCodeSearch getPriceCodeSearch() {
        if (searchPriceCode != null) return searchPriceCode;
        searchPriceCode = new PriceCodeSearch();
        return searchPriceCode;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<PriceCodeSearch> getPriceCodeSearchHub() {
        if (hubPriceCodeSearch == null) {
            hubPriceCodeSearch = new Hub<PriceCodeSearch>(PriceCodeSearch.class);
            hubPriceCodeSearch.add(getPriceCodeSearch());
            hubPriceCodeSearch.setPos(0);
        }
        return hubPriceCodeSearch;
    }
    
    
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses PriceCodeSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<PriceCode> sel = getPriceCodeSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(PriceCode priceCode, Hub<PriceCode> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<PriceCode> hub) {
    }
}

