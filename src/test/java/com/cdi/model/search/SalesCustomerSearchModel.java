// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class SalesCustomerSearchModel {
    private static Logger LOG = Logger.getLogger(SalesCustomerSearchModel.class.getName());
    
    protected Hub<SalesCustomer> hub;  // search results
    protected Hub<SalesCustomer> hubMultiSelect;
    protected Hub<SalesCustomer> hubSearchFrom;  // hub (optional) to search from
    protected Hub<SalesCustomerSearch> hubSalesCustomerSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<SalesOrder> hubSalesCustomerSalesOrder;
    
    // finder used to find objects in a path
    protected OAFinder<?, SalesCustomer> finder;
    
    // ObjectModels
    protected SalesOrderModel modelSalesCustomerSalesOrder;
    
    // SearchModels
    protected SalesOrderSearchModel modelSalesCustomerSalesOrderSearch;
    
    // object used for search data
    protected SalesCustomerSearch searchSalesCustomer;
    
    public SalesCustomerSearchModel() {
    }
    
    public SalesCustomerSearchModel(Hub<SalesCustomer> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<SalesCustomer> getHub() {
        if (hub == null) {
            hub = new Hub<SalesCustomer>(SalesCustomer.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<SalesCustomer> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<SalesCustomer> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    SalesCustomerSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<SalesCustomer> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(SalesCustomer.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, SalesCustomer> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, SalesCustomer> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public SalesCustomerSearch getSalesCustomerSearch() {
        if (searchSalesCustomer != null) return searchSalesCustomer;
        searchSalesCustomer = new SalesCustomerSearch();
        return searchSalesCustomer;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<SalesCustomerSearch> getSalesCustomerSearchHub() {
        if (hubSalesCustomerSearch == null) {
            hubSalesCustomerSearch = new Hub<SalesCustomerSearch>(SalesCustomerSearch.class);
            hubSalesCustomerSearch.add(getSalesCustomerSearch());
            hubSalesCustomerSearch.setPos(0);
        }
        return hubSalesCustomerSearch;
    }
    public Hub<SalesOrder> getSalesCustomerSalesOrderHub() {
        if (hubSalesCustomerSalesOrder != null) return hubSalesCustomerSalesOrder;
        hubSalesCustomerSalesOrder = getSalesCustomerSearchHub().getDetailHub(SalesCustomerSearch.P_SalesCustomerSalesOrder);
        return hubSalesCustomerSalesOrder;
    }
    
    public SalesOrderModel getSalesCustomerSalesOrderModel() {
        if (modelSalesCustomerSalesOrder != null) return modelSalesCustomerSalesOrder;
        modelSalesCustomerSalesOrder = new SalesOrderModel(getSalesCustomerSalesOrderHub());
        modelSalesCustomerSalesOrder.setDisplayName("Sales Order");
        modelSalesCustomerSalesOrder.setPluralDisplayName("Sales Orders");
        modelSalesCustomerSalesOrder.setAllowNew(false);
        modelSalesCustomerSalesOrder.setAllowSave(true);
        modelSalesCustomerSalesOrder.setAllowAdd(false);
        modelSalesCustomerSalesOrder.setAllowRemove(false);
        modelSalesCustomerSalesOrder.setAllowClear(true);
        modelSalesCustomerSalesOrder.setAllowDelete(false);
        modelSalesCustomerSalesOrder.setAllowSearch(true);
        modelSalesCustomerSalesOrder.setAllowHubSearch(false);
        modelSalesCustomerSalesOrder.setAllowGotoEdit(true);
        return modelSalesCustomerSalesOrder;
    }
    
    public SalesOrderSearchModel getSalesCustomerSalesOrderSearchModel() {
        if (modelSalesCustomerSalesOrderSearch == null) {
            modelSalesCustomerSalesOrderSearch = new SalesOrderSearchModel();
            searchSalesCustomer.setSalesCustomerSalesOrderSearch(modelSalesCustomerSalesOrderSearch.getSalesOrderSearch());
        }
        return modelSalesCustomerSalesOrderSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses SalesCustomerSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<SalesCustomer> sel = getSalesCustomerSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(SalesCustomer salesCustomer, Hub<SalesCustomer> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<SalesCustomer> hub) {
    }
}

