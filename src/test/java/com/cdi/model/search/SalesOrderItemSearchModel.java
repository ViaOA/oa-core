// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class SalesOrderItemSearchModel {
    private static Logger LOG = Logger.getLogger(SalesOrderItemSearchModel.class.getName());
    
    protected Hub<SalesOrderItem> hub;  // search results
    protected Hub<SalesOrderItem> hubMultiSelect;
    protected Hub<SalesOrderItem> hubSearchFrom;  // hub (optional) to search from
    protected Hub<SalesOrderItemSearch> hubSalesOrderItemSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<SalesOrder> hubSalesOrderItemSalesOrder;
    protected Hub<ServiceCode> hubSalesOrderItemServiceCode;
    protected Hub<Item> hubSalesOrderItemItem;
    
    // finder used to find objects in a path
    protected OAFinder<?, SalesOrderItem> finder;
    
    // ObjectModels
    protected SalesOrderModel modelSalesOrderItemSalesOrder;
    protected ServiceCodeModel modelSalesOrderItemServiceCode;
    protected ItemModel modelSalesOrderItemItem;
    
    // SearchModels
    protected SalesOrderSearchModel modelSalesOrderItemSalesOrderSearch;
    protected ServiceCodeSearchModel modelSalesOrderItemServiceCodeSearch;
    protected ItemSearchModel modelSalesOrderItemItemSearch;
    
    // object used for search data
    protected SalesOrderItemSearch searchSalesOrderItem;
    
    public SalesOrderItemSearchModel() {
    }
    
    public SalesOrderItemSearchModel(Hub<SalesOrderItem> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<SalesOrderItem> getHub() {
        if (hub == null) {
            hub = new Hub<SalesOrderItem>(SalesOrderItem.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<SalesOrderItem> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<SalesOrderItem> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    SalesOrderItemSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<SalesOrderItem> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(SalesOrderItem.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, SalesOrderItem> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, SalesOrderItem> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public SalesOrderItemSearch getSalesOrderItemSearch() {
        if (searchSalesOrderItem != null) return searchSalesOrderItem;
        searchSalesOrderItem = new SalesOrderItemSearch();
        return searchSalesOrderItem;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<SalesOrderItemSearch> getSalesOrderItemSearchHub() {
        if (hubSalesOrderItemSearch == null) {
            hubSalesOrderItemSearch = new Hub<SalesOrderItemSearch>(SalesOrderItemSearch.class);
            hubSalesOrderItemSearch.add(getSalesOrderItemSearch());
            hubSalesOrderItemSearch.setPos(0);
        }
        return hubSalesOrderItemSearch;
    }
    public Hub<SalesOrder> getSalesOrderItemSalesOrderHub() {
        if (hubSalesOrderItemSalesOrder != null) return hubSalesOrderItemSalesOrder;
        hubSalesOrderItemSalesOrder = getSalesOrderItemSearchHub().getDetailHub(SalesOrderItemSearch.P_SalesOrderItemSalesOrder);
        return hubSalesOrderItemSalesOrder;
    }
    public Hub<ServiceCode> getSalesOrderItemServiceCodeHub() {
        if (hubSalesOrderItemServiceCode != null) return hubSalesOrderItemServiceCode;
        hubSalesOrderItemServiceCode = new Hub<>(ServiceCode.class);
        Hub<ServiceCode> hub = ModelDelegate.getServiceCodes();
        HubCopy<ServiceCode> hc = new HubCopy<>(hub, hubSalesOrderItemServiceCode, false);
        hubSalesOrderItemServiceCode.setLinkHub(getSalesOrderItemSearchHub(), SalesOrderItemSearch.P_SalesOrderItemServiceCode); 
        return hubSalesOrderItemServiceCode;
    }
    public Hub<Item> getSalesOrderItemItemHub() {
        if (hubSalesOrderItemItem != null) return hubSalesOrderItemItem;
        hubSalesOrderItemItem = new Hub<>(Item.class);
        Hub<Item> hub = ModelDelegate.getActiveItems();
        HubCopy<Item> hc = new HubCopy<>(hub, hubSalesOrderItemItem, false);
        hubSalesOrderItemItem.setLinkHub(getSalesOrderItemSearchHub(), SalesOrderItemSearch.P_SalesOrderItemItem); 
        return hubSalesOrderItemItem;
    }
    
    public SalesOrderModel getSalesOrderItemSalesOrderModel() {
        if (modelSalesOrderItemSalesOrder != null) return modelSalesOrderItemSalesOrder;
        modelSalesOrderItemSalesOrder = new SalesOrderModel(getSalesOrderItemSalesOrderHub());
        modelSalesOrderItemSalesOrder.setDisplayName("Sales Order");
        modelSalesOrderItemSalesOrder.setPluralDisplayName("Sales Orders");
        modelSalesOrderItemSalesOrder.setAllowNew(false);
        modelSalesOrderItemSalesOrder.setAllowSave(true);
        modelSalesOrderItemSalesOrder.setAllowAdd(false);
        modelSalesOrderItemSalesOrder.setAllowRemove(false);
        modelSalesOrderItemSalesOrder.setAllowClear(true);
        modelSalesOrderItemSalesOrder.setAllowDelete(false);
        modelSalesOrderItemSalesOrder.setAllowSearch(true);
        modelSalesOrderItemSalesOrder.setAllowHubSearch(false);
        modelSalesOrderItemSalesOrder.setAllowGotoEdit(true);
        return modelSalesOrderItemSalesOrder;
    }
    public ServiceCodeModel getSalesOrderItemServiceCodeModel() {
        if (modelSalesOrderItemServiceCode != null) return modelSalesOrderItemServiceCode;
        modelSalesOrderItemServiceCode = new ServiceCodeModel(getSalesOrderItemServiceCodeHub());
        modelSalesOrderItemServiceCode.setDisplayName("Service Code");
        modelSalesOrderItemServiceCode.setPluralDisplayName("Service Codes");
        modelSalesOrderItemServiceCode.setAllowNew(false);
        modelSalesOrderItemServiceCode.setAllowSave(true);
        modelSalesOrderItemServiceCode.setAllowAdd(false);
        modelSalesOrderItemServiceCode.setAllowRemove(false);
        modelSalesOrderItemServiceCode.setAllowClear(true);
        modelSalesOrderItemServiceCode.setAllowDelete(false);
        modelSalesOrderItemServiceCode.setAllowSearch(true);
        modelSalesOrderItemServiceCode.setAllowHubSearch(false);
        modelSalesOrderItemServiceCode.setAllowGotoEdit(true);
        modelSalesOrderItemServiceCode.setViewOnly(true);
        return modelSalesOrderItemServiceCode;
    }
    public ItemModel getSalesOrderItemItemModel() {
        if (modelSalesOrderItemItem != null) return modelSalesOrderItemItem;
        modelSalesOrderItemItem = new ItemModel(getSalesOrderItemItemHub());
        modelSalesOrderItemItem.setDisplayName("Item");
        modelSalesOrderItemItem.setPluralDisplayName("Items");
        modelSalesOrderItemItem.setAllowNew(false);
        modelSalesOrderItemItem.setAllowSave(true);
        modelSalesOrderItemItem.setAllowAdd(false);
        modelSalesOrderItemItem.setAllowRemove(false);
        modelSalesOrderItemItem.setAllowClear(true);
        modelSalesOrderItemItem.setAllowDelete(false);
        modelSalesOrderItemItem.setAllowSearch(true);
        modelSalesOrderItemItem.setAllowHubSearch(false);
        modelSalesOrderItemItem.setAllowGotoEdit(true);
        modelSalesOrderItemItem.setViewOnly(true);
        return modelSalesOrderItemItem;
    }
    
    public SalesOrderSearchModel getSalesOrderItemSalesOrderSearchModel() {
        if (modelSalesOrderItemSalesOrderSearch == null) {
            modelSalesOrderItemSalesOrderSearch = new SalesOrderSearchModel();
            searchSalesOrderItem.setSalesOrderItemSalesOrderSearch(modelSalesOrderItemSalesOrderSearch.getSalesOrderSearch());
        }
        return modelSalesOrderItemSalesOrderSearch;
    }
    public ServiceCodeSearchModel getSalesOrderItemServiceCodeSearchModel() {
        if (modelSalesOrderItemServiceCodeSearch == null) {
            modelSalesOrderItemServiceCodeSearch = new ServiceCodeSearchModel();
            searchSalesOrderItem.setSalesOrderItemServiceCodeSearch(modelSalesOrderItemServiceCodeSearch.getServiceCodeSearch());
        }
        return modelSalesOrderItemServiceCodeSearch;
    }
    public ItemSearchModel getSalesOrderItemItemSearchModel() {
        if (modelSalesOrderItemItemSearch == null) {
            modelSalesOrderItemItemSearch = new ItemSearchModel();
            searchSalesOrderItem.setSalesOrderItemItemSearch(modelSalesOrderItemItemSearch.getItemSearch());
        }
        return modelSalesOrderItemItemSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses SalesOrderItemSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<SalesOrderItem> sel = getSalesOrderItemSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(SalesOrderItem salesOrderItem, Hub<SalesOrderItem> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<SalesOrderItem> hub) {
    }
}

