// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class SalesOrderNoteSearchModel {
    private static Logger LOG = Logger.getLogger(SalesOrderNoteSearchModel.class.getName());
    
    protected Hub<SalesOrderNote> hub;  // search results
    protected Hub<SalesOrderNote> hubMultiSelect;
    protected Hub<SalesOrderNote> hubSearchFrom;  // hub (optional) to search from
    protected Hub<SalesOrderNoteSearch> hubSalesOrderNoteSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<User> hubSalesOrderNoteUser;
    protected Hub<SalesOrder> hubSalesOrderNoteSalesOrder;
    
    // finder used to find objects in a path
    protected OAFinder<?, SalesOrderNote> finder;
    
    // ObjectModels
    protected UserModel modelSalesOrderNoteUser;
    protected SalesOrderModel modelSalesOrderNoteSalesOrder;
    
    // SearchModels
    protected UserSearchModel modelSalesOrderNoteUserSearch;
    protected SalesOrderSearchModel modelSalesOrderNoteSalesOrderSearch;
    
    // object used for search data
    protected SalesOrderNoteSearch searchSalesOrderNote;
    
    public SalesOrderNoteSearchModel() {
    }
    
    public SalesOrderNoteSearchModel(Hub<SalesOrderNote> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<SalesOrderNote> getHub() {
        if (hub == null) {
            hub = new Hub<SalesOrderNote>(SalesOrderNote.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<SalesOrderNote> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<SalesOrderNote> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    SalesOrderNoteSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<SalesOrderNote> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(SalesOrderNote.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, SalesOrderNote> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, SalesOrderNote> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public SalesOrderNoteSearch getSalesOrderNoteSearch() {
        if (searchSalesOrderNote != null) return searchSalesOrderNote;
        searchSalesOrderNote = new SalesOrderNoteSearch();
        return searchSalesOrderNote;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<SalesOrderNoteSearch> getSalesOrderNoteSearchHub() {
        if (hubSalesOrderNoteSearch == null) {
            hubSalesOrderNoteSearch = new Hub<SalesOrderNoteSearch>(SalesOrderNoteSearch.class);
            hubSalesOrderNoteSearch.add(getSalesOrderNoteSearch());
            hubSalesOrderNoteSearch.setPos(0);
        }
        return hubSalesOrderNoteSearch;
    }
    public Hub<User> getSalesOrderNoteUserHub() {
        if (hubSalesOrderNoteUser != null) return hubSalesOrderNoteUser;
        hubSalesOrderNoteUser = new Hub<>(User.class);
        Hub<User> hub = ModelDelegate.getUsers();
        HubCopy<User> hc = new HubCopy<>(hub, hubSalesOrderNoteUser, false);
        hubSalesOrderNoteUser.setLinkHub(getSalesOrderNoteSearchHub(), SalesOrderNoteSearch.P_SalesOrderNoteUser); 
        return hubSalesOrderNoteUser;
    }
    public Hub<SalesOrder> getSalesOrderNoteSalesOrderHub() {
        if (hubSalesOrderNoteSalesOrder != null) return hubSalesOrderNoteSalesOrder;
        hubSalesOrderNoteSalesOrder = getSalesOrderNoteSearchHub().getDetailHub(SalesOrderNoteSearch.P_SalesOrderNoteSalesOrder);
        return hubSalesOrderNoteSalesOrder;
    }
    
    public UserModel getSalesOrderNoteUserModel() {
        if (modelSalesOrderNoteUser != null) return modelSalesOrderNoteUser;
        modelSalesOrderNoteUser = new UserModel(getSalesOrderNoteUserHub());
        modelSalesOrderNoteUser.setDisplayName("User");
        modelSalesOrderNoteUser.setPluralDisplayName("Users");
        modelSalesOrderNoteUser.setAllowNew(false);
        modelSalesOrderNoteUser.setAllowSave(true);
        modelSalesOrderNoteUser.setAllowAdd(false);
        modelSalesOrderNoteUser.setAllowRemove(false);
        modelSalesOrderNoteUser.setAllowClear(true);
        modelSalesOrderNoteUser.setAllowDelete(false);
        modelSalesOrderNoteUser.setAllowSearch(true);
        modelSalesOrderNoteUser.setAllowHubSearch(false);
        modelSalesOrderNoteUser.setAllowGotoEdit(true);
        modelSalesOrderNoteUser.setViewOnly(true);
        return modelSalesOrderNoteUser;
    }
    public SalesOrderModel getSalesOrderNoteSalesOrderModel() {
        if (modelSalesOrderNoteSalesOrder != null) return modelSalesOrderNoteSalesOrder;
        modelSalesOrderNoteSalesOrder = new SalesOrderModel(getSalesOrderNoteSalesOrderHub());
        modelSalesOrderNoteSalesOrder.setDisplayName("Sales Order");
        modelSalesOrderNoteSalesOrder.setPluralDisplayName("Sales Orders");
        modelSalesOrderNoteSalesOrder.setAllowNew(false);
        modelSalesOrderNoteSalesOrder.setAllowSave(true);
        modelSalesOrderNoteSalesOrder.setAllowAdd(false);
        modelSalesOrderNoteSalesOrder.setAllowRemove(false);
        modelSalesOrderNoteSalesOrder.setAllowClear(true);
        modelSalesOrderNoteSalesOrder.setAllowDelete(false);
        modelSalesOrderNoteSalesOrder.setAllowSearch(true);
        modelSalesOrderNoteSalesOrder.setAllowHubSearch(false);
        modelSalesOrderNoteSalesOrder.setAllowGotoEdit(true);
        return modelSalesOrderNoteSalesOrder;
    }
    
    public UserSearchModel getSalesOrderNoteUserSearchModel() {
        if (modelSalesOrderNoteUserSearch == null) {
            modelSalesOrderNoteUserSearch = new UserSearchModel();
            searchSalesOrderNote.setSalesOrderNoteUserSearch(modelSalesOrderNoteUserSearch.getUserSearch());
        }
        return modelSalesOrderNoteUserSearch;
    }
    public SalesOrderSearchModel getSalesOrderNoteSalesOrderSearchModel() {
        if (modelSalesOrderNoteSalesOrderSearch == null) {
            modelSalesOrderNoteSalesOrderSearch = new SalesOrderSearchModel();
            searchSalesOrderNote.setSalesOrderNoteSalesOrderSearch(modelSalesOrderNoteSalesOrderSearch.getSalesOrderSearch());
        }
        return modelSalesOrderNoteSalesOrderSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses SalesOrderNoteSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<SalesOrderNote> sel = getSalesOrderNoteSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(SalesOrderNote salesOrderNote, Hub<SalesOrderNote> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<SalesOrderNote> hub) {
    }
}

