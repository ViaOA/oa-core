// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class SalesOrderSearchModel {
    private static Logger LOG = Logger.getLogger(SalesOrderSearchModel.class.getName());
    
    protected Hub<SalesOrder> hub;  // search results
    protected Hub<SalesOrder> hubMultiSelect;
    protected Hub<SalesOrder> hubSearchFrom;  // hub (optional) to search from
    protected Hub<SalesOrderSearch> hubSalesOrderSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<User> hubSalesOrderSalesPersonUser;
    protected Hub<SalesCustomer> hubSalesCustomer;
    protected Hub<Customer> hubSalesCustomerCustomer;
    protected Hub<Item> hubSalesOrderItemsItem;
    
    // finder used to find objects in a path
    protected OAFinder<?, SalesOrder> finder;
    
    // ObjectModels
    protected UserModel modelSalesOrderSalesPersonUser;
    protected SalesCustomerModel modelSalesCustomer;
    protected CustomerModel modelSalesCustomerCustomer;
    protected ItemModel modelSalesOrderItemsItem;
    
    // SearchModels
    protected UserSearchModel modelSalesOrderSalesPersonUserSearch;
    protected SalesCustomerSearchModel modelSalesCustomerSearch;
    protected CustomerSearchModel modelSalesCustomerCustomerSearch;
    protected ItemSearchModel modelSalesOrderItemsItemSearch;
    
    // object used for search data
    protected SalesOrderSearch searchSalesOrder;
    
    public SalesOrderSearchModel() {
    }
    
    public SalesOrderSearchModel(Hub<SalesOrder> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<SalesOrder> getHub() {
        if (hub == null) {
            hub = new Hub<SalesOrder>(SalesOrder.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<SalesOrder> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<SalesOrder> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    SalesOrderSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<SalesOrder> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(SalesOrder.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, SalesOrder> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, SalesOrder> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public SalesOrderSearch getSalesOrderSearch() {
        if (searchSalesOrder != null) return searchSalesOrder;
        searchSalesOrder = new SalesOrderSearch();
        return searchSalesOrder;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<SalesOrderSearch> getSalesOrderSearchHub() {
        if (hubSalesOrderSearch == null) {
            hubSalesOrderSearch = new Hub<SalesOrderSearch>(SalesOrderSearch.class);
            hubSalesOrderSearch.add(getSalesOrderSearch());
            hubSalesOrderSearch.setPos(0);
        }
        return hubSalesOrderSearch;
    }
    public Hub<User> getSalesOrderSalesPersonUserHub() {
        if (hubSalesOrderSalesPersonUser != null) return hubSalesOrderSalesPersonUser;
        Hub<User> hub = new Hub<>(User.class);
        UserSalesPersonFilter filter = new UserSalesPersonFilter(ModelDelegate.getUsers(), hub);
        hubSalesOrderSalesPersonUser = new Hub<>(User.class);
        HubCopy<User> hc = new HubCopy<>(hub, hubSalesOrderSalesPersonUser, false);
        hubSalesOrderSalesPersonUser.setLinkHub(getSalesOrderSearchHub(), SalesOrderSearch.P_SalesOrderSalesPersonUser); 
        return hubSalesOrderSalesPersonUser;
    }
    public Hub<SalesCustomer> getSalesCustomerHub() {
        if (hubSalesCustomer != null) return hubSalesCustomer;
        hubSalesCustomer = getSalesOrderSearchHub().getDetailHub(SalesOrderSearch.P_SalesCustomer);
        return hubSalesCustomer;
    }
    public Hub<Customer> getSalesCustomerCustomerHub() {
        if (hubSalesCustomerCustomer != null) return hubSalesCustomerCustomer;
        hubSalesCustomerCustomer = new Hub<>(Customer.class);
        Hub<Customer> hub = ModelDelegate.getActiveCustomers();
        HubCopy<Customer> hc = new HubCopy<>(hub, hubSalesCustomerCustomer, false);
        hubSalesCustomerCustomer.setLinkHub(getSalesOrderSearchHub(), SalesOrderSearch.P_SalesCustomerCustomer); 
        return hubSalesCustomerCustomer;
    }
    public Hub<Item> getSalesOrderItemsItemHub() {
        if (hubSalesOrderItemsItem != null) return hubSalesOrderItemsItem;
        hubSalesOrderItemsItem = new Hub<>(Item.class);
        Hub<Item> hub = ModelDelegate.getActiveItems();
        HubCopy<Item> hc = new HubCopy<>(hub, hubSalesOrderItemsItem, false);
        hubSalesOrderItemsItem.setLinkHub(getSalesOrderSearchHub(), SalesOrderSearch.P_SalesOrderItemsItem); 
        return hubSalesOrderItemsItem;
    }
    
    public UserModel getSalesOrderSalesPersonUserModel() {
        if (modelSalesOrderSalesPersonUser != null) return modelSalesOrderSalesPersonUser;
        modelSalesOrderSalesPersonUser = new UserModel(getSalesOrderSalesPersonUserHub());
        modelSalesOrderSalesPersonUser.setDisplayName("Sales Person");
        modelSalesOrderSalesPersonUser.setPluralDisplayName("Users");
        modelSalesOrderSalesPersonUser.setAllowNew(false);
        modelSalesOrderSalesPersonUser.setAllowSave(true);
        modelSalesOrderSalesPersonUser.setAllowAdd(false);
        modelSalesOrderSalesPersonUser.setAllowRemove(false);
        modelSalesOrderSalesPersonUser.setAllowClear(true);
        modelSalesOrderSalesPersonUser.setAllowDelete(false);
        modelSalesOrderSalesPersonUser.setAllowSearch(true);
        modelSalesOrderSalesPersonUser.setAllowHubSearch(false);
        modelSalesOrderSalesPersonUser.setAllowGotoEdit(true);
        modelSalesOrderSalesPersonUser.setViewOnly(true);
        return modelSalesOrderSalesPersonUser;
    }
    public SalesCustomerModel getSalesCustomerModel() {
        if (modelSalesCustomer != null) return modelSalesCustomer;
        modelSalesCustomer = new SalesCustomerModel(getSalesCustomerHub());
        modelSalesCustomer.setDisplayName("Sales Customer");
        modelSalesCustomer.setPluralDisplayName("Sales Customers");
        modelSalesCustomer.setAllowNew(false);
        modelSalesCustomer.setAllowSave(true);
        modelSalesCustomer.setAllowAdd(false);
        modelSalesCustomer.setAllowRemove(false);
        modelSalesCustomer.setAllowClear(true);
        modelSalesCustomer.setAllowDelete(false);
        modelSalesCustomer.setAllowSearch(true);
        modelSalesCustomer.setAllowHubSearch(false);
        modelSalesCustomer.setAllowGotoEdit(true);
        return modelSalesCustomer;
    }
    public CustomerModel getSalesCustomerCustomerModel() {
        if (modelSalesCustomerCustomer != null) return modelSalesCustomerCustomer;
        modelSalesCustomerCustomer = new CustomerModel(getSalesCustomerCustomerHub());
        modelSalesCustomerCustomer.setDisplayName("Customer");
        modelSalesCustomerCustomer.setPluralDisplayName("Customers");
        modelSalesCustomerCustomer.setAllowNew(false);
        modelSalesCustomerCustomer.setAllowSave(true);
        modelSalesCustomerCustomer.setAllowAdd(false);
        modelSalesCustomerCustomer.setAllowRemove(false);
        modelSalesCustomerCustomer.setAllowClear(true);
        modelSalesCustomerCustomer.setAllowDelete(false);
        modelSalesCustomerCustomer.setAllowSearch(true);
        modelSalesCustomerCustomer.setAllowHubSearch(false);
        modelSalesCustomerCustomer.setAllowGotoEdit(true);
        modelSalesCustomerCustomer.setViewOnly(true);
        return modelSalesCustomerCustomer;
    }
    public ItemModel getSalesOrderItemsItemModel() {
        if (modelSalesOrderItemsItem != null) return modelSalesOrderItemsItem;
        modelSalesOrderItemsItem = new ItemModel(getSalesOrderItemsItemHub());
        modelSalesOrderItemsItem.setDisplayName("Item");
        modelSalesOrderItemsItem.setPluralDisplayName("Items");
        modelSalesOrderItemsItem.setAllowNew(false);
        modelSalesOrderItemsItem.setAllowSave(true);
        modelSalesOrderItemsItem.setAllowAdd(false);
        modelSalesOrderItemsItem.setAllowRemove(false);
        modelSalesOrderItemsItem.setAllowClear(true);
        modelSalesOrderItemsItem.setAllowDelete(false);
        modelSalesOrderItemsItem.setAllowSearch(true);
        modelSalesOrderItemsItem.setAllowHubSearch(false);
        modelSalesOrderItemsItem.setAllowGotoEdit(true);
        modelSalesOrderItemsItem.setViewOnly(true);
        return modelSalesOrderItemsItem;
    }
    
    public UserSearchModel getSalesOrderSalesPersonUserSearchModel() {
        if (modelSalesOrderSalesPersonUserSearch == null) {
            modelSalesOrderSalesPersonUserSearch = new UserSearchModel();
            searchSalesOrder.setSalesOrderSalesPersonUserSearch(modelSalesOrderSalesPersonUserSearch.getUserSearch());
        }
        return modelSalesOrderSalesPersonUserSearch;
    }
    public SalesCustomerSearchModel getSalesCustomerSearchModel() {
        if (modelSalesCustomerSearch == null) {
            modelSalesCustomerSearch = new SalesCustomerSearchModel();
            searchSalesOrder.setSalesCustomerSearch(modelSalesCustomerSearch.getSalesCustomerSearch());
        }
        return modelSalesCustomerSearch;
    }
    public CustomerSearchModel getSalesCustomerCustomerSearchModel() {
        if (modelSalesCustomerCustomerSearch == null) {
            modelSalesCustomerCustomerSearch = new CustomerSearchModel();
            searchSalesOrder.setSalesCustomerCustomerSearch(modelSalesCustomerCustomerSearch.getCustomerSearch());
        }
        return modelSalesCustomerCustomerSearch;
    }
    public ItemSearchModel getSalesOrderItemsItemSearchModel() {
        if (modelSalesOrderItemsItemSearch == null) {
            modelSalesOrderItemsItemSearch = new ItemSearchModel();
            searchSalesOrder.setSalesOrderItemsItemSearch(modelSalesOrderItemsItemSearch.getItemSearch());
        }
        return modelSalesOrderItemsItemSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses SalesOrderSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<SalesOrder> sel = getSalesOrderSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(SalesOrder salesOrder, Hub<SalesOrder> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<SalesOrder> hub) {
    }
}

