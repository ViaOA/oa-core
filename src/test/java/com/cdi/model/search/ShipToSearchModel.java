// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class ShipToSearchModel {
    private static Logger LOG = Logger.getLogger(ShipToSearchModel.class.getName());
    
    protected Hub<ShipTo> hub;  // search results
    protected Hub<ShipTo> hubMultiSelect;
    protected Hub<ShipTo> hubSearchFrom;  // hub (optional) to search from
    protected Hub<ShipToSearch> hubShipToSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Order> hubShipToOrders;
    protected Hub<SalesCustomer> hubShipToSalesCustomers;
    
    // finder used to find objects in a path
    protected OAFinder<?, ShipTo> finder;
    
    // ObjectModels
    protected OrderModel modelShipToOrders;
    protected SalesCustomerModel modelShipToSalesCustomers;
    
    // SearchModels
    protected OrderSearchModel modelShipToOrdersSearch;
    protected SalesCustomerSearchModel modelShipToSalesCustomersSearch;
    
    // object used for search data
    protected ShipToSearch searchShipTo;
    
    public ShipToSearchModel() {
    }
    
    public ShipToSearchModel(Hub<ShipTo> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<ShipTo> getHub() {
        if (hub == null) {
            hub = new Hub<ShipTo>(ShipTo.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<ShipTo> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<ShipTo> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    ShipToSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<ShipTo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(ShipTo.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, ShipTo> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, ShipTo> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public ShipToSearch getShipToSearch() {
        if (searchShipTo != null) return searchShipTo;
        searchShipTo = new ShipToSearch();
        return searchShipTo;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<ShipToSearch> getShipToSearchHub() {
        if (hubShipToSearch == null) {
            hubShipToSearch = new Hub<ShipToSearch>(ShipToSearch.class);
            hubShipToSearch.add(getShipToSearch());
            hubShipToSearch.setPos(0);
        }
        return hubShipToSearch;
    }
    public Hub<Order> getShipToOrdersHub() {
        if (hubShipToOrders != null) return hubShipToOrders;
        hubShipToOrders = getShipToSearchHub().getDetailHub(ShipToSearch.P_ShipToOrders);
        return hubShipToOrders;
    }
    public Hub<SalesCustomer> getShipToSalesCustomersHub() {
        if (hubShipToSalesCustomers != null) return hubShipToSalesCustomers;
        hubShipToSalesCustomers = getShipToSearchHub().getDetailHub(ShipToSearch.P_ShipToSalesCustomers);
        return hubShipToSalesCustomers;
    }
    
    public OrderModel getShipToOrdersModel() {
        if (modelShipToOrders != null) return modelShipToOrders;
        modelShipToOrders = new OrderModel(getShipToOrdersHub());
        modelShipToOrders.setDisplayName("Orders");
        modelShipToOrders.setPluralDisplayName("Orders");
        modelShipToOrders.setAllowNew(false);
        modelShipToOrders.setAllowSave(true);
        modelShipToOrders.setAllowAdd(false);
        modelShipToOrders.setAllowRemove(false);
        modelShipToOrders.setAllowClear(true);
        modelShipToOrders.setAllowDelete(false);
        modelShipToOrders.setAllowSearch(true);
        modelShipToOrders.setAllowHubSearch(false);
        modelShipToOrders.setAllowGotoEdit(true);
        modelShipToOrders.setViewOnly(true);
        return modelShipToOrders;
    }
    public SalesCustomerModel getShipToSalesCustomersModel() {
        if (modelShipToSalesCustomers != null) return modelShipToSalesCustomers;
        modelShipToSalesCustomers = new SalesCustomerModel(getShipToSalesCustomersHub());
        modelShipToSalesCustomers.setDisplayName("Sales Customers");
        modelShipToSalesCustomers.setPluralDisplayName("Sales Customers");
        modelShipToSalesCustomers.setAllowNew(false);
        modelShipToSalesCustomers.setAllowSave(true);
        modelShipToSalesCustomers.setAllowAdd(false);
        modelShipToSalesCustomers.setAllowRemove(false);
        modelShipToSalesCustomers.setAllowClear(true);
        modelShipToSalesCustomers.setAllowDelete(false);
        modelShipToSalesCustomers.setAllowSearch(true);
        modelShipToSalesCustomers.setAllowHubSearch(false);
        modelShipToSalesCustomers.setAllowGotoEdit(true);
        modelShipToSalesCustomers.setViewOnly(true);
        return modelShipToSalesCustomers;
    }
    
    public OrderSearchModel getShipToOrdersSearchModel() {
        if (modelShipToOrdersSearch == null) {
            modelShipToOrdersSearch = new OrderSearchModel();
            searchShipTo.setShipToOrdersSearch(modelShipToOrdersSearch.getOrderSearch());
        }
        return modelShipToOrdersSearch;
    }
    public SalesCustomerSearchModel getShipToSalesCustomersSearchModel() {
        if (modelShipToSalesCustomersSearch == null) {
            modelShipToSalesCustomersSearch = new SalesCustomerSearchModel();
            searchShipTo.setShipToSalesCustomersSearch(modelShipToSalesCustomersSearch.getSalesCustomerSearch());
        }
        return modelShipToSalesCustomersSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses ShipToSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<ShipTo> sel = getShipToSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(ShipTo shipTo, Hub<ShipTo> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<ShipTo> hub) {
    }
}

