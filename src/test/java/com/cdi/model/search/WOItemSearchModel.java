// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class WOItemSearchModel {
    private static Logger LOG = Logger.getLogger(WOItemSearchModel.class.getName());
    
    protected Hub<WOItem> hub;  // search results
    protected Hub<WOItem> hubMultiSelect;
    protected Hub<WOItem> hubSearchFrom;  // hub (optional) to search from
    protected Hub<WOItemSearch> hubWOItemSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Item> hubOrderItemItem;
    protected Hub<WorkOrder> hubWOItemWorkOrder;
    
    // finder used to find objects in a path
    protected OAFinder<?, WOItem> finder;
    
    // ObjectModels
    protected ItemModel modelOrderItemItem;
    protected WorkOrderModel modelWOItemWorkOrder;
    
    // SearchModels
    protected ItemSearchModel modelOrderItemItemSearch;
    protected WorkOrderSearchModel modelWOItemWorkOrderSearch;
    
    // object used for search data
    protected WOItemSearch searchWOItem;
    
    public WOItemSearchModel() {
    }
    
    public WOItemSearchModel(Hub<WOItem> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<WOItem> getHub() {
        if (hub == null) {
            hub = new Hub<WOItem>(WOItem.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<WOItem> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<WOItem> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    WOItemSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<WOItem> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(WOItem.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, WOItem> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, WOItem> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public WOItemSearch getWOItemSearch() {
        if (searchWOItem != null) return searchWOItem;
        searchWOItem = new WOItemSearch();
        return searchWOItem;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<WOItemSearch> getWOItemSearchHub() {
        if (hubWOItemSearch == null) {
            hubWOItemSearch = new Hub<WOItemSearch>(WOItemSearch.class);
            hubWOItemSearch.add(getWOItemSearch());
            hubWOItemSearch.setPos(0);
        }
        return hubWOItemSearch;
    }
    public Hub<Item> getOrderItemItemHub() {
        if (hubOrderItemItem != null) return hubOrderItemItem;
        hubOrderItemItem = getWOItemSearchHub().getDetailHub(WOItemSearch.P_OrderItemItem);
        return hubOrderItemItem;
    }
    public Hub<WorkOrder> getWOItemWorkOrderHub() {
        if (hubWOItemWorkOrder != null) return hubWOItemWorkOrder;
        hubWOItemWorkOrder = getWOItemSearchHub().getDetailHub(WOItemSearch.P_WOItemWorkOrder);
        return hubWOItemWorkOrder;
    }
    
    public ItemModel getOrderItemItemModel() {
        if (modelOrderItemItem != null) return modelOrderItemItem;
        modelOrderItemItem = new ItemModel(getOrderItemItemHub());
        modelOrderItemItem.setDisplayName("Item");
        modelOrderItemItem.setPluralDisplayName("Items");
        modelOrderItemItem.setAllowNew(false);
        modelOrderItemItem.setAllowSave(true);
        modelOrderItemItem.setAllowAdd(false);
        modelOrderItemItem.setAllowRemove(false);
        modelOrderItemItem.setAllowClear(true);
        modelOrderItemItem.setAllowDelete(false);
        modelOrderItemItem.setAllowSearch(true);
        modelOrderItemItem.setAllowHubSearch(false);
        modelOrderItemItem.setAllowGotoEdit(true);
        modelOrderItemItem.setViewOnly(true);
        return modelOrderItemItem;
    }
    public WorkOrderModel getWOItemWorkOrderModel() {
        if (modelWOItemWorkOrder != null) return modelWOItemWorkOrder;
        modelWOItemWorkOrder = new WorkOrderModel(getWOItemWorkOrderHub());
        modelWOItemWorkOrder.setDisplayName("Work Order");
        modelWOItemWorkOrder.setPluralDisplayName("Work Orders");
        modelWOItemWorkOrder.setAllowNew(false);
        modelWOItemWorkOrder.setAllowSave(true);
        modelWOItemWorkOrder.setAllowAdd(false);
        modelWOItemWorkOrder.setAllowRemove(false);
        modelWOItemWorkOrder.setAllowClear(true);
        modelWOItemWorkOrder.setAllowDelete(false);
        modelWOItemWorkOrder.setAllowSearch(true);
        modelWOItemWorkOrder.setAllowHubSearch(false);
        modelWOItemWorkOrder.setAllowGotoEdit(true);
        return modelWOItemWorkOrder;
    }
    
    public ItemSearchModel getOrderItemItemSearchModel() {
        if (modelOrderItemItemSearch == null) {
            modelOrderItemItemSearch = new ItemSearchModel();
            searchWOItem.setOrderItemItemSearch(modelOrderItemItemSearch.getItemSearch());
        }
        return modelOrderItemItemSearch;
    }
    public WorkOrderSearchModel getWOItemWorkOrderSearchModel() {
        if (modelWOItemWorkOrderSearch == null) {
            modelWOItemWorkOrderSearch = new WorkOrderSearchModel();
            searchWOItem.setWOItemWorkOrderSearch(modelWOItemWorkOrderSearch.getWorkOrderSearch());
        }
        return modelWOItemWorkOrderSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses WOItemSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<WOItem> sel = getWOItemSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(WOItem woItem, Hub<WOItem> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<WOItem> hub) {
    }
}

