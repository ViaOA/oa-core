// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class WebItemSearchModel {
    private static Logger LOG = Logger.getLogger(WebItemSearchModel.class.getName());
    
    protected Hub<WebItem> hub;  // search results
    protected Hub<WebItem> hubMultiSelect;
    protected Hub<WebItem> hubSearchFrom;  // hub (optional) to search from
    protected Hub<WebItemSearch> hubWebItemSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Item> hubItem;
    
    // finder used to find objects in a path
    protected OAFinder<?, WebItem> finder;
    
    // ObjectModels
    protected ItemModel modelItem;
    
    // SearchModels
    protected ItemSearchModel modelItemSearch;
    
    // object used for search data
    protected WebItemSearch searchWebItem;
    
    public WebItemSearchModel() {
    }
    
    public WebItemSearchModel(Hub<WebItem> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<WebItem> getHub() {
        if (hub == null) {
            hub = new Hub<WebItem>(WebItem.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<WebItem> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<WebItem> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    WebItemSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<WebItem> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(WebItem.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, WebItem> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, WebItem> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public WebItemSearch getWebItemSearch() {
        if (searchWebItem != null) return searchWebItem;
        searchWebItem = new WebItemSearch();
        return searchWebItem;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<WebItemSearch> getWebItemSearchHub() {
        if (hubWebItemSearch == null) {
            hubWebItemSearch = new Hub<WebItemSearch>(WebItemSearch.class);
            hubWebItemSearch.add(getWebItemSearch());
            hubWebItemSearch.setPos(0);
        }
        return hubWebItemSearch;
    }
    public Hub<Item> getItemHub() {
        if (hubItem != null) return hubItem;
        hubItem = getWebItemSearchHub().getDetailHub(WebItemSearch.P_Item);
        return hubItem;
    }
    
    public ItemModel getItemModel() {
        if (modelItem != null) return modelItem;
        modelItem = new ItemModel(getItemHub());
        modelItem.setDisplayName("Item");
        modelItem.setPluralDisplayName("Items");
        modelItem.setAllowNew(false);
        modelItem.setAllowSave(true);
        modelItem.setAllowAdd(false);
        modelItem.setAllowRemove(false);
        modelItem.setAllowClear(true);
        modelItem.setAllowDelete(false);
        modelItem.setAllowSearch(true);
        modelItem.setAllowHubSearch(false);
        modelItem.setAllowGotoEdit(true);
        return modelItem;
    }
    
    public ItemSearchModel getItemSearchModel() {
        if (modelItemSearch == null) {
            modelItemSearch = new ItemSearchModel();
            searchWebItem.setItemSearch(modelItemSearch.getItemSearch());
        }
        return modelItemSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses WebItemSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<WebItem> sel = getWebItemSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(WebItem webItem, Hub<WebItem> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<WebItem> hub) {
    }
}

