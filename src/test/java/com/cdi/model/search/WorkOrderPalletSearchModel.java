// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class WorkOrderPalletSearchModel {
    private static Logger LOG = Logger.getLogger(WorkOrderPalletSearchModel.class.getName());
    
    protected Hub<WorkOrderPallet> hub;  // search results
    protected Hub<WorkOrderPallet> hubMultiSelect;
    protected Hub<WorkOrderPallet> hubSearchFrom;  // hub (optional) to search from
    protected Hub<WorkOrderPalletSearch> hubWorkOrderPalletSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<WorkOrder> hubWorkOrderPalletWorkOrder;
    protected Hub<Order> hubWorkOrderOrder;
    protected Hub<Pallet> hubWorkOrderPalletPallet;
    
    // finder used to find objects in a path
    protected OAFinder<?, WorkOrderPallet> finder;
    
    // ObjectModels
    protected WorkOrderModel modelWorkOrderPalletWorkOrder;
    protected OrderModel modelWorkOrderOrder;
    protected PalletModel modelWorkOrderPalletPallet;
    
    // SearchModels
    protected WorkOrderSearchModel modelWorkOrderPalletWorkOrderSearch;
    protected OrderSearchModel modelWorkOrderOrderSearch;
    protected PalletSearchModel modelWorkOrderPalletPalletSearch;
    
    // object used for search data
    protected WorkOrderPalletSearch searchWorkOrderPallet;
    
    public WorkOrderPalletSearchModel() {
    }
    
    public WorkOrderPalletSearchModel(Hub<WorkOrderPallet> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<WorkOrderPallet> getHub() {
        if (hub == null) {
            hub = new Hub<WorkOrderPallet>(WorkOrderPallet.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<WorkOrderPallet> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<WorkOrderPallet> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    WorkOrderPalletSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<WorkOrderPallet> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(WorkOrderPallet.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, WorkOrderPallet> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, WorkOrderPallet> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public WorkOrderPalletSearch getWorkOrderPalletSearch() {
        if (searchWorkOrderPallet != null) return searchWorkOrderPallet;
        searchWorkOrderPallet = new WorkOrderPalletSearch();
        return searchWorkOrderPallet;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<WorkOrderPalletSearch> getWorkOrderPalletSearchHub() {
        if (hubWorkOrderPalletSearch == null) {
            hubWorkOrderPalletSearch = new Hub<WorkOrderPalletSearch>(WorkOrderPalletSearch.class);
            hubWorkOrderPalletSearch.add(getWorkOrderPalletSearch());
            hubWorkOrderPalletSearch.setPos(0);
        }
        return hubWorkOrderPalletSearch;
    }
    public Hub<WorkOrder> getWorkOrderPalletWorkOrderHub() {
        if (hubWorkOrderPalletWorkOrder != null) return hubWorkOrderPalletWorkOrder;
        hubWorkOrderPalletWorkOrder = getWorkOrderPalletSearchHub().getDetailHub(WorkOrderPalletSearch.P_WorkOrderPalletWorkOrder);
        return hubWorkOrderPalletWorkOrder;
    }
    public Hub<Order> getWorkOrderOrderHub() {
        if (hubWorkOrderOrder != null) return hubWorkOrderOrder;
        hubWorkOrderOrder = getWorkOrderPalletSearchHub().getDetailHub(WorkOrderPalletSearch.P_WorkOrderOrder);
        return hubWorkOrderOrder;
    }
    public Hub<Pallet> getWorkOrderPalletPalletHub() {
        if (hubWorkOrderPalletPallet != null) return hubWorkOrderPalletPallet;
        hubWorkOrderPalletPallet = new Hub<>(Pallet.class);
        Hub<Pallet> hub = ModelDelegate.getPallets();
        HubCopy<Pallet> hc = new HubCopy<>(hub, hubWorkOrderPalletPallet, false);
        hubWorkOrderPalletPallet.setLinkHub(getWorkOrderPalletSearchHub(), WorkOrderPalletSearch.P_WorkOrderPalletPallet); 
        return hubWorkOrderPalletPallet;
    }
    
    public WorkOrderModel getWorkOrderPalletWorkOrderModel() {
        if (modelWorkOrderPalletWorkOrder != null) return modelWorkOrderPalletWorkOrder;
        modelWorkOrderPalletWorkOrder = new WorkOrderModel(getWorkOrderPalletWorkOrderHub());
        modelWorkOrderPalletWorkOrder.setDisplayName("Work Order");
        modelWorkOrderPalletWorkOrder.setPluralDisplayName("Work Orders");
        modelWorkOrderPalletWorkOrder.setAllowNew(false);
        modelWorkOrderPalletWorkOrder.setAllowSave(true);
        modelWorkOrderPalletWorkOrder.setAllowAdd(false);
        modelWorkOrderPalletWorkOrder.setAllowRemove(false);
        modelWorkOrderPalletWorkOrder.setAllowClear(true);
        modelWorkOrderPalletWorkOrder.setAllowDelete(false);
        modelWorkOrderPalletWorkOrder.setAllowSearch(true);
        modelWorkOrderPalletWorkOrder.setAllowHubSearch(false);
        modelWorkOrderPalletWorkOrder.setAllowGotoEdit(true);
        return modelWorkOrderPalletWorkOrder;
    }
    public OrderModel getWorkOrderOrderModel() {
        if (modelWorkOrderOrder != null) return modelWorkOrderOrder;
        modelWorkOrderOrder = new OrderModel(getWorkOrderOrderHub());
        modelWorkOrderOrder.setDisplayName("Order");
        modelWorkOrderOrder.setPluralDisplayName("Orders");
        modelWorkOrderOrder.setAllowNew(false);
        modelWorkOrderOrder.setAllowSave(true);
        modelWorkOrderOrder.setAllowAdd(false);
        modelWorkOrderOrder.setAllowRemove(false);
        modelWorkOrderOrder.setAllowClear(true);
        modelWorkOrderOrder.setAllowDelete(false);
        modelWorkOrderOrder.setAllowSearch(true);
        modelWorkOrderOrder.setAllowHubSearch(false);
        modelWorkOrderOrder.setAllowGotoEdit(true);
        return modelWorkOrderOrder;
    }
    public PalletModel getWorkOrderPalletPalletModel() {
        if (modelWorkOrderPalletPallet != null) return modelWorkOrderPalletPallet;
        modelWorkOrderPalletPallet = new PalletModel(getWorkOrderPalletPalletHub());
        modelWorkOrderPalletPallet.setDisplayName("Pallet");
        modelWorkOrderPalletPallet.setPluralDisplayName("Pallets");
        modelWorkOrderPalletPallet.setAllowNew(false);
        modelWorkOrderPalletPallet.setAllowSave(true);
        modelWorkOrderPalletPallet.setAllowAdd(false);
        modelWorkOrderPalletPallet.setAllowRemove(false);
        modelWorkOrderPalletPallet.setAllowClear(true);
        modelWorkOrderPalletPallet.setAllowDelete(false);
        modelWorkOrderPalletPallet.setAllowSearch(true);
        modelWorkOrderPalletPallet.setAllowHubSearch(false);
        modelWorkOrderPalletPallet.setAllowGotoEdit(true);
        return modelWorkOrderPalletPallet;
    }
    
    public WorkOrderSearchModel getWorkOrderPalletWorkOrderSearchModel() {
        if (modelWorkOrderPalletWorkOrderSearch == null) {
            modelWorkOrderPalletWorkOrderSearch = new WorkOrderSearchModel();
            searchWorkOrderPallet.setWorkOrderPalletWorkOrderSearch(modelWorkOrderPalletWorkOrderSearch.getWorkOrderSearch());
        }
        return modelWorkOrderPalletWorkOrderSearch;
    }
    public OrderSearchModel getWorkOrderOrderSearchModel() {
        if (modelWorkOrderOrderSearch == null) {
            modelWorkOrderOrderSearch = new OrderSearchModel();
            searchWorkOrderPallet.setWorkOrderOrderSearch(modelWorkOrderOrderSearch.getOrderSearch());
        }
        return modelWorkOrderOrderSearch;
    }
    public PalletSearchModel getWorkOrderPalletPalletSearchModel() {
        if (modelWorkOrderPalletPalletSearch == null) {
            modelWorkOrderPalletPalletSearch = new PalletSearchModel();
            searchWorkOrderPallet.setWorkOrderPalletPalletSearch(modelWorkOrderPalletPalletSearch.getPalletSearch());
        }
        return modelWorkOrderPalletPalletSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses WorkOrderPalletSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<WorkOrderPallet> sel = getWorkOrderPalletSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(WorkOrderPallet workOrderPallet, Hub<WorkOrderPallet> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<WorkOrderPallet> hub) {
    }
}

