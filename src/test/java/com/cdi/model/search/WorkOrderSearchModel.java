// Generated by OABuilder
package com.cdi.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.*;
import com.viaoa.ds.*;

import com.cdi.model.*;
import com.cdi.model.oa.*;
import com.cdi.model.oa.propertypath.*;
import com.cdi.model.oa.search.*;
import com.cdi.model.oa.filter.*;
import com.cdi.delegate.ModelDelegate;
import com.cdi.resource.Resource;

public class WorkOrderSearchModel {
    private static Logger LOG = Logger.getLogger(WorkOrderSearchModel.class.getName());
    
    protected Hub<WorkOrder> hub;  // search results
    protected Hub<WorkOrder> hubMultiSelect;
    protected Hub<WorkOrder> hubSearchFrom;  // hub (optional) to search from
    protected Hub<WorkOrderSearch> hubWorkOrderSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Order> hubWorkOrderOrder;
    protected Hub<Item> hubOrderItemItem;
    
    // finder used to find objects in a path
    protected OAFinder<?, WorkOrder> finder;
    
    // ObjectModels
    protected OrderModel modelWorkOrderOrder;
    protected ItemModel modelOrderItemItem;
    
    // SearchModels
    protected OrderSearchModel modelWorkOrderOrderSearch;
    protected ItemSearchModel modelOrderItemItemSearch;
    
    // object used for search data
    protected WorkOrderSearch searchWorkOrder;
    
    public WorkOrderSearchModel() {
    }
    
    public WorkOrderSearchModel(Hub<WorkOrder> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<WorkOrder> getHub() {
        if (hub == null) {
            hub = new Hub<WorkOrder>(WorkOrder.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<WorkOrder> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<WorkOrder> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    WorkOrderSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<WorkOrder> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(WorkOrder.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, WorkOrder> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, WorkOrder> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public WorkOrderSearch getWorkOrderSearch() {
        if (searchWorkOrder != null) return searchWorkOrder;
        searchWorkOrder = new WorkOrderSearch();
        return searchWorkOrder;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<WorkOrderSearch> getWorkOrderSearchHub() {
        if (hubWorkOrderSearch == null) {
            hubWorkOrderSearch = new Hub<WorkOrderSearch>(WorkOrderSearch.class);
            hubWorkOrderSearch.add(getWorkOrderSearch());
            hubWorkOrderSearch.setPos(0);
        }
        return hubWorkOrderSearch;
    }
    public Hub<Order> getWorkOrderOrderHub() {
        if (hubWorkOrderOrder != null) return hubWorkOrderOrder;
        hubWorkOrderOrder = getWorkOrderSearchHub().getDetailHub(WorkOrderSearch.P_WorkOrderOrder);
        return hubWorkOrderOrder;
    }
    public Hub<Item> getOrderItemItemHub() {
        if (hubOrderItemItem != null) return hubOrderItemItem;
        hubOrderItemItem = getWorkOrderSearchHub().getDetailHub(WorkOrderSearch.P_OrderItemItem);
        return hubOrderItemItem;
    }
    
    public OrderModel getWorkOrderOrderModel() {
        if (modelWorkOrderOrder != null) return modelWorkOrderOrder;
        modelWorkOrderOrder = new OrderModel(getWorkOrderOrderHub());
        modelWorkOrderOrder.setDisplayName("Order");
        modelWorkOrderOrder.setPluralDisplayName("Orders");
        modelWorkOrderOrder.setAllowNew(false);
        modelWorkOrderOrder.setAllowSave(true);
        modelWorkOrderOrder.setAllowAdd(false);
        modelWorkOrderOrder.setAllowRemove(false);
        modelWorkOrderOrder.setAllowClear(true);
        modelWorkOrderOrder.setAllowDelete(false);
        modelWorkOrderOrder.setAllowSearch(true);
        modelWorkOrderOrder.setAllowHubSearch(false);
        modelWorkOrderOrder.setAllowGotoEdit(true);
        return modelWorkOrderOrder;
    }
    public ItemModel getOrderItemItemModel() {
        if (modelOrderItemItem != null) return modelOrderItemItem;
        modelOrderItemItem = new ItemModel(getOrderItemItemHub());
        modelOrderItemItem.setDisplayName("Item");
        modelOrderItemItem.setPluralDisplayName("Items");
        modelOrderItemItem.setAllowNew(false);
        modelOrderItemItem.setAllowSave(true);
        modelOrderItemItem.setAllowAdd(false);
        modelOrderItemItem.setAllowRemove(false);
        modelOrderItemItem.setAllowClear(true);
        modelOrderItemItem.setAllowDelete(false);
        modelOrderItemItem.setAllowSearch(true);
        modelOrderItemItem.setAllowHubSearch(false);
        modelOrderItemItem.setAllowGotoEdit(true);
        modelOrderItemItem.setViewOnly(true);
        return modelOrderItemItem;
    }
    
    public OrderSearchModel getWorkOrderOrderSearchModel() {
        if (modelWorkOrderOrderSearch == null) {
            modelWorkOrderOrderSearch = new OrderSearchModel();
            searchWorkOrder.setWorkOrderOrderSearch(modelWorkOrderOrderSearch.getOrderSearch());
        }
        return modelWorkOrderOrderSearch;
    }
    public ItemSearchModel getOrderItemItemSearchModel() {
        if (modelOrderItemItemSearch == null) {
            modelOrderItemItemSearch = new ItemSearchModel();
            searchWorkOrder.setOrderItemItemSearch(modelOrderItemItemSearch.getItemSearch());
        }
        return modelOrderItemItemSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses WorkOrderSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<WorkOrder> sel = getWorkOrderSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(WorkOrder workOrder, Hub<WorkOrder> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<WorkOrder> hub) {
    }
}

