// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.BatchModel;
import com.corptostore.model.ReceiveModel;
import com.corptostore.model.SendModel;
import com.corptostore.model.StoreBatchModel;
import com.corptostore.model.StoreModel;
import com.corptostore.model.filter.BatchOpenTestFilterModel;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Receive;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.search.ReceiveSearchModel;
import com.corptostore.model.search.SendSearchModel;
import com.corptostore.model.search.StoreBatchSearchModel;
import com.corptostore.model.search.StoreSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class BatchModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(BatchModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      openTestFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<Batch> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<Batch> hubUnfiltered;
    protected Hub<Batch> hubOpenTestFilteredHub;
    // main hub that points to hubUnfiltered, hubOpenTestFilteredHub
    protected Hub<Batch> hub;
    // selected batches
    protected Hub<Batch> hubMultiSelect;
    // detail hubs
    protected Hub<Send> hubBeginAllStoreSend;
    protected Hub<Send> hubEndAllStoreSend;
    protected Hub<Store> hubFromStore;
    protected Hub<StoreBatch> hubStoreBatch;
    protected Hub<Store> hubToStore;
    protected Hub<Receive> hubReceives;
    protected Hub<Send> hubSends;
    
    // ObjectModels
    protected SendModel modelBeginAllStoreSend;
    protected SendModel modelEndAllStoreSend;
    protected StoreModel modelFromStore;
    protected StoreBatchModel modelStoreBatch;
    protected StoreModel modelToStore;
    protected ReceiveModel modelReceives;
    protected SendModel modelSends;
    
    // SearchModels used for references
    protected SendSearchModel modelBeginAllStoreSendSearch;
    protected SendSearchModel modelEndAllStoreSendSearch;
    protected StoreSearchModel modelFromStoreSearch;
    protected StoreBatchSearchModel modelStoreBatchSearch;
    protected StoreSearchModel modelToStoreSearch;
    protected ReceiveSearchModel modelReceivesSearch;
    protected SendSearchModel modelSendsSearch;
    
    // FilterModels
    protected BatchOpenTestFilterModel modelBatchOpenTestFilter;
    
    public BatchModel() {
        setDisplayName("Batch");
        setPluralDisplayName("Batches");
    }
    
    public BatchModel(Hub<Batch> hubBatch) {
        this();
        if (hubBatch != null) HubDelegate.setObjectClass(hubBatch, Batch.class);
        this.hubOriginal = hubBatch;
    }
    public BatchModel(Batch batch) {
        this();
        getHub().add(batch);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useOpenTestFilteredHub() {
        getHub().setSharedHub(getOpenTestFilteredHub(), true);
    }
    
    public Hub<Batch> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<Batch>(Batch.class);
        }
        return hubOriginal;
    }
    
    public Hub<Send> getBeginAllStoreSendHub() {
        if (hubBeginAllStoreSend != null) return hubBeginAllStoreSend;
        hubBeginAllStoreSend = getHub().getDetailHub(Batch.P_BeginAllStoreSend);
        return hubBeginAllStoreSend;
    }
    public Hub<Send> getEndAllStoreSendHub() {
        if (hubEndAllStoreSend != null) return hubEndAllStoreSend;
        hubEndAllStoreSend = getHub().getDetailHub(Batch.P_EndAllStoreSend);
        return hubEndAllStoreSend;
    }
    public Hub<Store> getFromStoreHub() {
        if (hubFromStore != null) return hubFromStore;
        hubFromStore = getHub().getDetailHub(Batch.P_FromStore);
        return hubFromStore;
    }
    public Hub<StoreBatch> getStoreBatchHub() {
        if (hubStoreBatch != null) return hubStoreBatch;
        hubStoreBatch = getHub().getDetailHub(Batch.P_StoreBatch);
        return hubStoreBatch;
    }
    public Hub<Store> getToStoreHub() {
        if (hubToStore != null) return hubToStore;
        hubToStore = getHub().getDetailHub(Batch.P_ToStore);
        return hubToStore;
    }
    public Hub<Receive> getReceives() {
        if (hubReceives == null) {
            hubReceives = getHub().getDetailHub(Batch.P_Receives);
        }
        return hubReceives;
    }
    public Hub<Send> getSends() {
        if (hubSends != null) return hubSends;
        if (getForJfc()) {
            hubSends = new Hub<Send>(Send.class);
            new HubJfcDetail(getHub(), hubSends, Batch.P_Sends);
        }
        else {
            hubSends = getHub().getDetailHub(Batch.P_Sends);
        }
        return hubSends;
    }
    public Hub<Batch> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<Batch>(Batch.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<Batch> getOpenTestFilteredHub() {
        if (hubOpenTestFilteredHub == null) {
            hubOpenTestFilteredHub = new Hub<Batch>(Batch.class);
        }
        return hubOpenTestFilteredHub;
    }
    
    public Batch getBatch() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<Batch> getHub() {
        if (hub == null) {
            hub = new Hub<Batch>(Batch.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<Batch> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Batch>(Batch.class);
        }
        return hubMultiSelect;
    }
    
    public SendModel getBeginAllStoreSendModel() {
        if (modelBeginAllStoreSend != null) return modelBeginAllStoreSend;
        modelBeginAllStoreSend = new SendModel(getBeginAllStoreSendHub());
        modelBeginAllStoreSend.setDisplayName("Begin All Store Send");
        modelBeginAllStoreSend.setPluralDisplayName("Sends");
        modelBeginAllStoreSend.setForJfc(getForJfc());
        modelBeginAllStoreSend.setAllowNew(false);
        modelBeginAllStoreSend.setAllowSave(true);
        modelBeginAllStoreSend.setAllowAdd(false);
        modelBeginAllStoreSend.setAllowRemove(true);
        modelBeginAllStoreSend.setAllowClear(true);
        modelBeginAllStoreSend.setAllowDelete(false);
        modelBeginAllStoreSend.setAllowSearch(true);
        modelBeginAllStoreSend.setAllowHubSearch(true);
        modelBeginAllStoreSend.setAllowGotoEdit(true);
        modelBeginAllStoreSend.setViewOnly(true);
        // call Batch.beginAllStoreSendModelCallback(SendModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Batch.class, Batch.P_BeginAllStoreSend, modelBeginAllStoreSend);
    
        return modelBeginAllStoreSend;
    }
    public SendModel getEndAllStoreSendModel() {
        if (modelEndAllStoreSend != null) return modelEndAllStoreSend;
        modelEndAllStoreSend = new SendModel(getEndAllStoreSendHub());
        modelEndAllStoreSend.setDisplayName("End All Store Send");
        modelEndAllStoreSend.setPluralDisplayName("Sends");
        modelEndAllStoreSend.setForJfc(getForJfc());
        modelEndAllStoreSend.setAllowNew(false);
        modelEndAllStoreSend.setAllowSave(true);
        modelEndAllStoreSend.setAllowAdd(false);
        modelEndAllStoreSend.setAllowRemove(true);
        modelEndAllStoreSend.setAllowClear(true);
        modelEndAllStoreSend.setAllowDelete(false);
        modelEndAllStoreSend.setAllowSearch(true);
        modelEndAllStoreSend.setAllowHubSearch(true);
        modelEndAllStoreSend.setAllowGotoEdit(true);
        modelEndAllStoreSend.setViewOnly(true);
        // call Batch.endAllStoreSendModelCallback(SendModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Batch.class, Batch.P_EndAllStoreSend, modelEndAllStoreSend);
    
        return modelEndAllStoreSend;
    }
    public StoreModel getFromStoreModel() {
        if (modelFromStore != null) return modelFromStore;
        modelFromStore = new StoreModel(getFromStoreHub());
        modelFromStore.setDisplayName("From Store");
        modelFromStore.setPluralDisplayName("Stores");
        modelFromStore.setForJfc(getForJfc());
        modelFromStore.setAllowNew(false);
        modelFromStore.setAllowSave(true);
        modelFromStore.setAllowAdd(false);
        modelFromStore.setAllowRemove(true);
        modelFromStore.setAllowClear(true);
        modelFromStore.setAllowDelete(false);
        modelFromStore.setAllowSearch(true);
        modelFromStore.setAllowHubSearch(true);
        modelFromStore.setAllowGotoEdit(true);
        modelFromStore.setViewOnly(true);
        // call Batch.fromStoreModelCallback(StoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Batch.class, Batch.P_FromStore, modelFromStore);
    
        return modelFromStore;
    }
    public StoreBatchModel getStoreBatchModel() {
        if (modelStoreBatch != null) return modelStoreBatch;
        modelStoreBatch = new StoreBatchModel(getStoreBatchHub());
        modelStoreBatch.setDisplayName("Store Batch");
        modelStoreBatch.setPluralDisplayName("Store Batches");
        modelStoreBatch.setForJfc(getForJfc());
        modelStoreBatch.setAllowNew(false);
        modelStoreBatch.setAllowSave(true);
        modelStoreBatch.setAllowAdd(false);
        modelStoreBatch.setAllowRemove(true);
        modelStoreBatch.setAllowClear(true);
        modelStoreBatch.setAllowDelete(false);
        modelStoreBatch.setAllowSearch(true);
        modelStoreBatch.setAllowHubSearch(true);
        modelStoreBatch.setAllowGotoEdit(true);
        modelStoreBatch.setViewOnly(true);
        // call Batch.storeBatchModelCallback(StoreBatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Batch.class, Batch.P_StoreBatch, modelStoreBatch);
    
        return modelStoreBatch;
    }
    public StoreModel getToStoreModel() {
        if (modelToStore != null) return modelToStore;
        modelToStore = new StoreModel(getToStoreHub());
        modelToStore.setDisplayName("To Store");
        modelToStore.setPluralDisplayName("Stores");
        modelToStore.setForJfc(getForJfc());
        modelToStore.setAllowNew(false);
        modelToStore.setAllowSave(true);
        modelToStore.setAllowAdd(false);
        modelToStore.setAllowRemove(true);
        modelToStore.setAllowClear(true);
        modelToStore.setAllowDelete(false);
        modelToStore.setAllowSearch(true);
        modelToStore.setAllowHubSearch(true);
        modelToStore.setAllowGotoEdit(true);
        modelToStore.setViewOnly(true);
        // call Batch.toStoreModelCallback(StoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Batch.class, Batch.P_ToStore, modelToStore);
    
        return modelToStore;
    }
    public ReceiveModel getReceivesModel() {
        if (modelReceives != null) return modelReceives;
        modelReceives = new ReceiveModel(getReceives());
        modelReceives.setDisplayName("Receive");
        modelReceives.setPluralDisplayName("Receives");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getReceives())) {
            modelReceives.setCreateUI(false);
        }
        modelReceives.setForJfc(getForJfc());
        modelReceives.setAllowNew(true);
        modelReceives.setAllowSave(true);
        modelReceives.setAllowAdd(true);
        modelReceives.setAllowMove(false);
        modelReceives.setAllowRemove(true);
        modelReceives.setAllowDelete(false);
        modelReceives.setAllowRefresh(true);
        modelReceives.setAllowSearch(false);
        modelReceives.setAllowHubSearch(true);
        modelReceives.setAllowGotoEdit(true);
        modelReceives.setViewOnly(getViewOnly());
        modelReceives.setAllowNew(true);
        modelReceives.setAllowTableFilter(true);
        modelReceives.setAllowTableSorting(true);
        modelReceives.setAllowMultiSelect(false);
        modelReceives.setAllowCopy(false);
        modelReceives.setAllowCut(false);
        modelReceives.setAllowPaste(false);
        // call Batch.receivesModelCallback(ReceiveModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Batch.class, Batch.P_Receives, modelReceives);
    
        return modelReceives;
    }
    public SendModel getSendsModel() {
        if (modelSends != null) return modelSends;
        modelSends = new SendModel(getSends());
        modelSends.setDisplayName("Send");
        modelSends.setPluralDisplayName("Sends");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getSends())) {
            modelSends.setCreateUI(false);
        }
        modelSends.setForJfc(getForJfc());
        modelSends.setAllowNew(false);
        modelSends.setAllowSave(true);
        modelSends.setAllowAdd(false);
        modelSends.setAllowMove(false);
        modelSends.setAllowRemove(false);
        modelSends.setAllowDelete(true);
        modelSends.setAllowRefresh(true);
        modelSends.setAllowSearch(false);
        modelSends.setAllowHubSearch(true);
        modelSends.setAllowGotoEdit(true);
        modelSends.setViewOnly(getViewOnly());
        modelSends.setAllowNew(false);
        modelSends.setAllowTableFilter(true);
        modelSends.setAllowTableSorting(true);
        modelSends.setAllowMultiSelect(false);
        modelSends.setAllowCopy(false);
        modelSends.setAllowCut(false);
        modelSends.setAllowPaste(false);
        // call Batch.sendsModelCallback(SendModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Batch.class, Batch.P_Sends, modelSends);
    
        return modelSends;
    }
    
    public SendSearchModel getBeginAllStoreSendSearchModel() {
        if (modelBeginAllStoreSendSearch != null) return modelBeginAllStoreSendSearch;
        modelBeginAllStoreSendSearch = new SendSearchModel();
        HubSelectDelegate.adoptWhereHub(modelBeginAllStoreSendSearch.getHub(), Batch.P_BeginAllStoreSend, getHub());
        return modelBeginAllStoreSendSearch;
    }
    public SendSearchModel getEndAllStoreSendSearchModel() {
        if (modelEndAllStoreSendSearch != null) return modelEndAllStoreSendSearch;
        modelEndAllStoreSendSearch = new SendSearchModel();
        HubSelectDelegate.adoptWhereHub(modelEndAllStoreSendSearch.getHub(), Batch.P_EndAllStoreSend, getHub());
        return modelEndAllStoreSendSearch;
    }
    public StoreSearchModel getFromStoreSearchModel() {
        if (modelFromStoreSearch != null) return modelFromStoreSearch;
        modelFromStoreSearch = new StoreSearchModel();
        HubSelectDelegate.adoptWhereHub(modelFromStoreSearch.getHub(), Batch.P_FromStore, getHub());
        return modelFromStoreSearch;
    }
    public StoreBatchSearchModel getStoreBatchSearchModel() {
        if (modelStoreBatchSearch != null) return modelStoreBatchSearch;
        modelStoreBatchSearch = new StoreBatchSearchModel();
        HubSelectDelegate.adoptWhereHub(modelStoreBatchSearch.getHub(), Batch.P_StoreBatch, getHub());
        return modelStoreBatchSearch;
    }
    public StoreSearchModel getToStoreSearchModel() {
        if (modelToStoreSearch != null) return modelToStoreSearch;
        modelToStoreSearch = new StoreSearchModel();
        HubSelectDelegate.adoptWhereHub(modelToStoreSearch.getHub(), Batch.P_ToStore, getHub());
        return modelToStoreSearch;
    }
    public ReceiveSearchModel getReceivesSearchModel() {
        if (modelReceivesSearch != null) return modelReceivesSearch;
        modelReceivesSearch = new ReceiveSearchModel();
        return modelReceivesSearch;
    }
    public SendSearchModel getSendsSearchModel() {
        if (modelSendsSearch != null) return modelSendsSearch;
        modelSendsSearch = new SendSearchModel();
        return modelSendsSearch;
    }
    
    public BatchOpenTestFilterModel getBatchOpenTestFilterModel() {
        if (modelBatchOpenTestFilter == null) {
            modelBatchOpenTestFilter = new BatchOpenTestFilterModel(getUnfilteredHub(), getOpenTestFilteredHub());
            new HubShareAO(getUnfilteredHub(), getOpenTestFilteredHub());
        }
        return modelBatchOpenTestFilter;
    }
    
    public HubCopy<Batch> createHubCopy() {
        Hub<Batch> hubBatchx = new Hub<>(Batch.class);
        HubCopy<Batch> hc = new HubCopy<>(getHub(), hubBatchx, true);
        return hc;
    }
    public BatchModel createCopy() {
        BatchModel mod = new BatchModel(createHubCopy().getHub());
        return mod;
    }
}

