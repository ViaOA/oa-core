// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.CorpToStoreModel;
import com.corptostore.model.EnvironmentModel;
import com.corptostore.model.PurgeWindowModel;
import com.corptostore.model.StatusInfoModel;
import com.corptostore.model.StoreInfoModel;
import com.corptostore.model.StoreLockServiceInfoModel;
import com.corptostore.model.ThreadInfoModel;
import com.corptostore.model.TransmitBatchServiceInfoModel;
import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.Environment;
import com.corptostore.model.oa.PurgeWindow;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.StoreInfo;
import com.corptostore.model.oa.StoreLockServiceInfo;
import com.corptostore.model.oa.ThreadInfo;
import com.corptostore.model.oa.TransmitBatchServiceInfo;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class CorpToStoreModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(CorpToStoreModel.class.getName());
    
    // Hubs
    protected Hub<CorpToStore> hub;
    // selected corpToStores
    protected Hub<CorpToStore> hubMultiSelect;
    // detail hubs
    protected Hub<StoreLockServiceInfo> hubStoreLockServiceInfo;
    protected Hub<TransmitBatchServiceInfo> hubTransmitBatchServiceInfo;
    protected Hub<Environment> hubEnvironment;
    protected Hub<StatusInfo> hubStatusInfo;
    protected Hub<PurgeWindow> hubPurgeWindows;
    protected Hub<StoreInfo> hubStoreInfos;
    protected Hub<ThreadInfo> hubThreadInfos;
    
    // AddHubs used for references
    protected Hub<Environment> hubEnvironmentSelectFrom;
    
    // ObjectModels
    protected StoreLockServiceInfoModel modelStoreLockServiceInfo;
    protected TransmitBatchServiceInfoModel modelTransmitBatchServiceInfo;
    protected EnvironmentModel modelEnvironment;
    protected StatusInfoModel modelStatusInfo;
    protected PurgeWindowModel modelPurgeWindows;
    protected StoreInfoModel modelStoreInfos;
    protected ThreadInfoModel modelThreadInfos;
    
    // selectFrom
    protected EnvironmentModel modelEnvironmentSelectFrom;
    
    public CorpToStoreModel() {
        setDisplayName("Corp To Store");
        setPluralDisplayName("Corp To Stores");
    }
    
    public CorpToStoreModel(Hub<CorpToStore> hubCorpToStore) {
        this();
        if (hubCorpToStore != null) HubDelegate.setObjectClass(hubCorpToStore, CorpToStore.class);
        this.hub = hubCorpToStore;
    }
    public CorpToStoreModel(CorpToStore corpToStore) {
        this();
        getHub().add(corpToStore);
        getHub().setPos(0);
    }
    
    public Hub<CorpToStore> getOriginalHub() {
        return getHub();
    }
    
    public Hub<StoreLockServiceInfo> getStoreLockServiceInfo() {
        if (hubStoreLockServiceInfo == null) {
            hubStoreLockServiceInfo = getHub().getDetailHub(CorpToStore.P_StoreLockServiceInfo);
        }
        return hubStoreLockServiceInfo;
    }
    public Hub<TransmitBatchServiceInfo> getTransmitBatchServiceInfo() {
        if (hubTransmitBatchServiceInfo == null) {
            hubTransmitBatchServiceInfo = getHub().getDetailHub(CorpToStore.P_TransmitBatchServiceInfo);
        }
        return hubTransmitBatchServiceInfo;
    }
    public Hub<Environment> getEnvironmentHub() {
        if (hubEnvironment != null) return hubEnvironment;
        // this is the owner, use detailHub
        hubEnvironment = getHub().getDetailHub(CorpToStore.P_Environment);
        return hubEnvironment;
    }
    public Hub<StatusInfo> getStatusInfoHub() {
        if (hubStatusInfo != null) return hubStatusInfo;
        hubStatusInfo = getHub().getDetailHub(CorpToStore.P_StatusInfo);
        return hubStatusInfo;
    }
    public Hub<PurgeWindow> getPurgeWindows() {
        if (hubPurgeWindows == null) {
            hubPurgeWindows = getHub().getDetailHub(CorpToStore.P_PurgeWindows);
        }
        return hubPurgeWindows;
    }
    public Hub<StoreInfo> getStoreInfos() {
        if (hubStoreInfos == null) {
            hubStoreInfos = getHub().getDetailHub(CorpToStore.P_StoreInfos);
        }
        return hubStoreInfos;
    }
    public Hub<ThreadInfo> getThreadInfos() {
        if (hubThreadInfos == null) {
            hubThreadInfos = getHub().getDetailHub(CorpToStore.P_ThreadInfos);
        }
        return hubThreadInfos;
    }
    public Hub<Environment> getEnvironmentSelectFromHub() {
        if (hubEnvironmentSelectFrom != null) return hubEnvironmentSelectFrom;
        hubEnvironmentSelectFrom = new Hub<Environment>(Environment.class);
        Hub<Environment> hubEnvironmentSelectFrom1 = ModelDelegate.getEnvironments().createSharedHub();
        HubCombined<Environment> hubCombined = new HubCombined(hubEnvironmentSelectFrom, hubEnvironmentSelectFrom1, getEnvironmentHub());
        hubEnvironmentSelectFrom.setLinkHub(getHub(), CorpToStore.P_Environment); 
        return hubEnvironmentSelectFrom;
    }
    public CorpToStore getCorpToStore() {
        return getHub().getAO();
    }
    
    public Hub<CorpToStore> getHub() {
        if (hub == null) {
            hub = new Hub<CorpToStore>(CorpToStore.class);
        }
        return hub;
    }
    
    public Hub<CorpToStore> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<CorpToStore>(CorpToStore.class);
        }
        return hubMultiSelect;
    }
    
    public StoreLockServiceInfoModel getStoreLockServiceInfoModel() {
        if (modelStoreLockServiceInfo != null) return modelStoreLockServiceInfo;
        modelStoreLockServiceInfo = new StoreLockServiceInfoModel(getStoreLockServiceInfo());
        modelStoreLockServiceInfo.setDisplayName("Store Lock Service Info");
        modelStoreLockServiceInfo.setPluralDisplayName("StoreLockServiceInfos");
        modelStoreLockServiceInfo.setAllowNew(false);
        modelStoreLockServiceInfo.setAllowAdd(false);
        modelStoreLockServiceInfo.setAllowRemove(false);
        modelStoreLockServiceInfo.setAllowDelete(false);
        modelStoreLockServiceInfo.setAllowCut(false);
        modelStoreLockServiceInfo.setAllowCopy(false);
        modelStoreLockServiceInfo.setAllowPaste(false);
        modelStoreLockServiceInfo.setAllowSearch(false);
        modelStoreLockServiceInfo.setAllowHubSearch(false);
        modelStoreLockServiceInfo.setViewOnly(getViewOnly());
        return modelStoreLockServiceInfo;
    }
    public TransmitBatchServiceInfoModel getTransmitBatchServiceInfoModel() {
        if (modelTransmitBatchServiceInfo != null) return modelTransmitBatchServiceInfo;
        modelTransmitBatchServiceInfo = new TransmitBatchServiceInfoModel(getTransmitBatchServiceInfo());
        modelTransmitBatchServiceInfo.setDisplayName("Transmit Batch Service Info");
        modelTransmitBatchServiceInfo.setPluralDisplayName("TransmitBatchServiceInfos");
        modelTransmitBatchServiceInfo.setAllowNew(false);
        modelTransmitBatchServiceInfo.setAllowAdd(false);
        modelTransmitBatchServiceInfo.setAllowRemove(false);
        modelTransmitBatchServiceInfo.setAllowDelete(false);
        modelTransmitBatchServiceInfo.setAllowCut(false);
        modelTransmitBatchServiceInfo.setAllowCopy(false);
        modelTransmitBatchServiceInfo.setAllowPaste(false);
        modelTransmitBatchServiceInfo.setAllowSearch(false);
        modelTransmitBatchServiceInfo.setAllowHubSearch(false);
        modelTransmitBatchServiceInfo.setViewOnly(getViewOnly());
        return modelTransmitBatchServiceInfo;
    }
    public EnvironmentModel getEnvironmentModel() {
        if (modelEnvironment != null) return modelEnvironment;
        modelEnvironment = new EnvironmentModel(getEnvironmentHub());
        modelEnvironment.setDisplayName("Environment");
        modelEnvironment.setPluralDisplayName("Environments");
        modelEnvironment.setForJfc(getForJfc());
        modelEnvironment.setAllowNew(false);
        modelEnvironment.setAllowSave(true);
        modelEnvironment.setAllowAdd(false);
        modelEnvironment.setAllowRemove(false);
        modelEnvironment.setAllowClear(false);
        modelEnvironment.setAllowDelete(false);
        modelEnvironment.setAllowSearch(false);
        modelEnvironment.setAllowHubSearch(false);
        modelEnvironment.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelEnvironment.setCreateUI(li == null || !CorpToStore.P_Environment.equalsIgnoreCase(li.getName()) );
        modelEnvironment.setViewOnly(getViewOnly());
        // call CorpToStore.environmentModelCallback(EnvironmentModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(CorpToStore.class, CorpToStore.P_Environment, modelEnvironment);
    
        return modelEnvironment;
    }
    public StatusInfoModel getStatusInfoModel() {
        if (modelStatusInfo != null) return modelStatusInfo;
        modelStatusInfo = new StatusInfoModel(getStatusInfoHub());
        modelStatusInfo.setDisplayName("Status Info");
        modelStatusInfo.setPluralDisplayName("Status Infos");
        modelStatusInfo.setForJfc(getForJfc());
        modelStatusInfo.setAllowNew(false);
        modelStatusInfo.setAllowSave(true);
        modelStatusInfo.setAllowAdd(false);
        modelStatusInfo.setAllowRemove(false);
        modelStatusInfo.setAllowClear(false);
        modelStatusInfo.setAllowDelete(false);
        modelStatusInfo.setAllowSearch(false);
        modelStatusInfo.setAllowHubSearch(false);
        modelStatusInfo.setAllowGotoEdit(true);
        modelStatusInfo.setViewOnly(getViewOnly());
        // call CorpToStore.statusInfoModelCallback(StatusInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(CorpToStore.class, CorpToStore.P_StatusInfo, modelStatusInfo);
    
        return modelStatusInfo;
    }
    public PurgeWindowModel getPurgeWindowsModel() {
        if (modelPurgeWindows != null) return modelPurgeWindows;
        modelPurgeWindows = new PurgeWindowModel(getPurgeWindows());
        modelPurgeWindows.setDisplayName("Purge Window");
        modelPurgeWindows.setPluralDisplayName("Purge Windows");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getPurgeWindows())) {
            modelPurgeWindows.setCreateUI(false);
        }
        modelPurgeWindows.setForJfc(getForJfc());
        modelPurgeWindows.setAllowNew(true);
        modelPurgeWindows.setAllowSave(true);
        modelPurgeWindows.setAllowAdd(false);
        modelPurgeWindows.setAllowMove(false);
        modelPurgeWindows.setAllowRemove(false);
        modelPurgeWindows.setAllowDelete(true);
        modelPurgeWindows.setAllowRefresh(false);
        modelPurgeWindows.setAllowSearch(false);
        modelPurgeWindows.setAllowHubSearch(false);
        modelPurgeWindows.setAllowGotoEdit(true);
        modelPurgeWindows.setViewOnly(getViewOnly());
        modelPurgeWindows.setAllowNew(true);
        modelPurgeWindows.setAllowTableFilter(true);
        modelPurgeWindows.setAllowTableSorting(true);
        modelPurgeWindows.setAllowMultiSelect(false);
        modelPurgeWindows.setAllowCopy(false);
        modelPurgeWindows.setAllowCut(false);
        modelPurgeWindows.setAllowPaste(false);
        // call CorpToStore.purgeWindowsModelCallback(PurgeWindowModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(CorpToStore.class, CorpToStore.P_PurgeWindows, modelPurgeWindows);
    
        return modelPurgeWindows;
    }
    public StoreInfoModel getStoreInfosModel() {
        if (modelStoreInfos != null) return modelStoreInfos;
        modelStoreInfos = new StoreInfoModel(getStoreInfos());
        modelStoreInfos.setDisplayName("Store Info");
        modelStoreInfos.setPluralDisplayName("Store Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getStoreInfos())) {
            modelStoreInfos.setCreateUI(false);
        }
        modelStoreInfos.setForJfc(getForJfc());
        modelStoreInfos.setAllowNew(true);
        modelStoreInfos.setAllowSave(true);
        modelStoreInfos.setAllowAdd(false);
        modelStoreInfos.setAllowMove(false);
        modelStoreInfos.setAllowRemove(false);
        modelStoreInfos.setAllowDelete(true);
        modelStoreInfos.setAllowRefresh(false);
        modelStoreInfos.setAllowSearch(false);
        modelStoreInfos.setAllowHubSearch(false);
        modelStoreInfos.setAllowGotoEdit(true);
        modelStoreInfos.setViewOnly(getViewOnly());
        modelStoreInfos.setAllowNew(true);
        modelStoreInfos.setAllowTableFilter(true);
        modelStoreInfos.setAllowTableSorting(true);
        modelStoreInfos.setAllowMultiSelect(false);
        modelStoreInfos.setAllowCopy(false);
        modelStoreInfos.setAllowCut(false);
        modelStoreInfos.setAllowPaste(false);
        // call CorpToStore.storeInfosModelCallback(StoreInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(CorpToStore.class, CorpToStore.P_StoreInfos, modelStoreInfos);
    
        return modelStoreInfos;
    }
    public ThreadInfoModel getThreadInfosModel() {
        if (modelThreadInfos != null) return modelThreadInfos;
        modelThreadInfos = new ThreadInfoModel(getThreadInfos());
        modelThreadInfos.setDisplayName("Thread Info");
        modelThreadInfos.setPluralDisplayName("Thread Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getThreadInfos())) {
            modelThreadInfos.setCreateUI(false);
        }
        modelThreadInfos.setForJfc(getForJfc());
        modelThreadInfos.setAllowNew(true);
        modelThreadInfos.setAllowSave(true);
        modelThreadInfos.setAllowAdd(false);
        modelThreadInfos.setAllowMove(false);
        modelThreadInfos.setAllowRemove(false);
        modelThreadInfos.setAllowDelete(true);
        modelThreadInfos.setAllowRefresh(false);
        modelThreadInfos.setAllowSearch(false);
        modelThreadInfos.setAllowHubSearch(false);
        modelThreadInfos.setAllowGotoEdit(true);
        modelThreadInfos.setViewOnly(getViewOnly());
        modelThreadInfos.setAllowNew(true);
        modelThreadInfos.setAllowTableFilter(true);
        modelThreadInfos.setAllowTableSorting(true);
        modelThreadInfos.setAllowMultiSelect(false);
        modelThreadInfos.setAllowCopy(false);
        modelThreadInfos.setAllowCut(false);
        modelThreadInfos.setAllowPaste(false);
        // call CorpToStore.threadInfosModelCallback(ThreadInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(CorpToStore.class, CorpToStore.P_ThreadInfos, modelThreadInfos);
    
        return modelThreadInfos;
    }
    
    public EnvironmentModel getEnvironmentSelectFromModel() {
        if (modelEnvironmentSelectFrom != null) return modelEnvironmentSelectFrom;
        modelEnvironmentSelectFrom = new EnvironmentModel(getEnvironmentSelectFromHub());
        modelEnvironmentSelectFrom.setDisplayName("Environment");
        modelEnvironmentSelectFrom.setPluralDisplayName("Environments");
        modelEnvironmentSelectFrom.setForJfc(getForJfc());
        modelEnvironmentSelectFrom.setAllowNew(false);
        modelEnvironmentSelectFrom.setAllowSave(true);
        modelEnvironmentSelectFrom.setAllowAdd(false);
        modelEnvironmentSelectFrom.setAllowMove(false);
        modelEnvironmentSelectFrom.setAllowRemove(false);
        modelEnvironmentSelectFrom.setAllowDelete(false);
        modelEnvironmentSelectFrom.setAllowSearch(false);
        modelEnvironmentSelectFrom.setAllowHubSearch(true);
        modelEnvironmentSelectFrom.setAllowGotoEdit(true);
        modelEnvironmentSelectFrom.setViewOnly(getViewOnly());
        modelEnvironmentSelectFrom.setAllowNew(false);
        modelEnvironmentSelectFrom.setAllowTableFilter(true);
        modelEnvironmentSelectFrom.setAllowTableSorting(true);
        modelEnvironmentSelectFrom.setAllowCut(false);
        modelEnvironmentSelectFrom.setAllowCopy(false);
        modelEnvironmentSelectFrom.setAllowPaste(false);
        modelEnvironmentSelectFrom.setAllowMultiSelect(false);
        return modelEnvironmentSelectFrom;
    }
    
    public HubCopy<CorpToStore> createHubCopy() {
        Hub<CorpToStore> hubCorpToStorex = new Hub<>(CorpToStore.class);
        HubCopy<CorpToStore> hc = new HubCopy<>(getHub(), hubCorpToStorex, true);
        return hc;
    }
    public CorpToStoreModel createCopy() {
        CorpToStoreModel mod = new CorpToStoreModel(createHubCopy().getHub());
        return mod;
    }
}

