// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.DashboardLineModel;
import com.corptostore.model.DashboardModel;
import com.corptostore.model.EnvironmentModel;
import com.corptostore.model.oa.Dashboard;
import com.corptostore.model.oa.DashboardLine;
import com.corptostore.model.oa.Environment;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class DashboardLineModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(DashboardLineModel.class.getName());
    
    // Hubs
    protected Hub<DashboardLine> hub;
    // selected dashboardLines
    protected Hub<DashboardLine> hubMultiSelect;
    // detail hubs
    protected Hub<Dashboard> hubDashboard;
    protected Hub<Environment> hubEnvironment;
    
    // AddHubs used for references
    protected Hub<Environment> hubEnvironmentSelectFrom;
    
    // ObjectModels
    protected DashboardModel modelDashboard;
    protected EnvironmentModel modelEnvironment;
    
    // selectFrom
    protected EnvironmentModel modelEnvironmentSelectFrom;
    
    public DashboardLineModel() {
        setDisplayName("Dashboard Line");
        setPluralDisplayName("Dashboard Lines");
    }
    
    public DashboardLineModel(Hub<DashboardLine> hubDashboardLine) {
        this();
        if (hubDashboardLine != null) HubDelegate.setObjectClass(hubDashboardLine, DashboardLine.class);
        this.hub = hubDashboardLine;
    }
    public DashboardLineModel(DashboardLine dashboardLine) {
        this();
        getHub().add(dashboardLine);
        getHub().setPos(0);
    }
    
    public Hub<DashboardLine> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Dashboard> getDashboardHub() {
        if (hubDashboard != null) return hubDashboard;
        // this is the owner, use detailHub
        hubDashboard = getHub().getDetailHub(DashboardLine.P_Dashboard);
        return hubDashboard;
    }
    public Hub<Environment> getEnvironmentHub() {
        if (hubEnvironment != null) return hubEnvironment;
        hubEnvironment = getHub().getDetailHub(DashboardLine.P_Environment);
        return hubEnvironment;
    }
    public Hub<Environment> getEnvironmentSelectFromHub() {
        if (hubEnvironmentSelectFrom != null) return hubEnvironmentSelectFrom;
        hubEnvironmentSelectFrom = new Hub<Environment>(Environment.class);
        Hub<Environment> hubEnvironmentSelectFrom1 = ModelDelegate.getEnvironments().createSharedHub();
        HubCombined<Environment> hubCombined = new HubCombined(hubEnvironmentSelectFrom, hubEnvironmentSelectFrom1, getEnvironmentHub());
        hubEnvironmentSelectFrom.setLinkHub(getHub(), DashboardLine.P_Environment); 
        return hubEnvironmentSelectFrom;
    }
    public DashboardLine getDashboardLine() {
        return getHub().getAO();
    }
    
    public Hub<DashboardLine> getHub() {
        if (hub == null) {
            hub = new Hub<DashboardLine>(DashboardLine.class);
        }
        return hub;
    }
    
    public Hub<DashboardLine> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<DashboardLine>(DashboardLine.class);
        }
        return hubMultiSelect;
    }
    
    public DashboardModel getDashboardModel() {
        if (modelDashboard != null) return modelDashboard;
        modelDashboard = new DashboardModel(getDashboardHub());
        modelDashboard.setDisplayName("Dashboard");
        modelDashboard.setPluralDisplayName("Dashboards");
        modelDashboard.setForJfc(getForJfc());
        modelDashboard.setAllowNew(false);
        modelDashboard.setAllowSave(true);
        modelDashboard.setAllowAdd(false);
        modelDashboard.setAllowRemove(false);
        modelDashboard.setAllowClear(false);
        modelDashboard.setAllowDelete(false);
        modelDashboard.setAllowSearch(false);
        modelDashboard.setAllowHubSearch(false);
        modelDashboard.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelDashboard.setCreateUI(li == null || !DashboardLine.P_Dashboard.equalsIgnoreCase(li.getName()) );
        modelDashboard.setViewOnly(getViewOnly());
        // call DashboardLine.dashboardModelCallback(DashboardModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(DashboardLine.class, DashboardLine.P_Dashboard, modelDashboard);
    
        return modelDashboard;
    }
    public EnvironmentModel getEnvironmentModel() {
        if (modelEnvironment != null) return modelEnvironment;
        modelEnvironment = new EnvironmentModel(getEnvironmentHub());
        modelEnvironment.setDisplayName("Environment");
        modelEnvironment.setPluralDisplayName("Environments");
        modelEnvironment.setForJfc(getForJfc());
        modelEnvironment.setAllowNew(false);
        modelEnvironment.setAllowSave(true);
        modelEnvironment.setAllowAdd(false);
        modelEnvironment.setAllowRemove(false);
        modelEnvironment.setAllowClear(false);
        modelEnvironment.setAllowDelete(false);
        modelEnvironment.setAllowSearch(false);
        modelEnvironment.setAllowHubSearch(false);
        modelEnvironment.setAllowGotoEdit(true);
        modelEnvironment.setViewOnly(true);
        // call DashboardLine.environmentModelCallback(EnvironmentModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(DashboardLine.class, DashboardLine.P_Environment, modelEnvironment);
    
        return modelEnvironment;
    }
    
    public EnvironmentModel getEnvironmentSelectFromModel() {
        if (modelEnvironmentSelectFrom != null) return modelEnvironmentSelectFrom;
        modelEnvironmentSelectFrom = new EnvironmentModel(getEnvironmentSelectFromHub());
        modelEnvironmentSelectFrom.setDisplayName("Environment");
        modelEnvironmentSelectFrom.setPluralDisplayName("Environments");
        modelEnvironmentSelectFrom.setForJfc(getForJfc());
        modelEnvironmentSelectFrom.setAllowNew(false);
        modelEnvironmentSelectFrom.setAllowSave(true);
        modelEnvironmentSelectFrom.setAllowAdd(false);
        modelEnvironmentSelectFrom.setAllowMove(false);
        modelEnvironmentSelectFrom.setAllowRemove(false);
        modelEnvironmentSelectFrom.setAllowDelete(false);
        modelEnvironmentSelectFrom.setAllowSearch(false);
        modelEnvironmentSelectFrom.setAllowHubSearch(true);
        modelEnvironmentSelectFrom.setAllowGotoEdit(true);
        modelEnvironmentSelectFrom.setViewOnly(getViewOnly());
        modelEnvironmentSelectFrom.setAllowNew(false);
        modelEnvironmentSelectFrom.setAllowTableFilter(true);
        modelEnvironmentSelectFrom.setAllowTableSorting(true);
        modelEnvironmentSelectFrom.setAllowCut(false);
        modelEnvironmentSelectFrom.setAllowCopy(false);
        modelEnvironmentSelectFrom.setAllowPaste(false);
        modelEnvironmentSelectFrom.setAllowMultiSelect(false);
        return modelEnvironmentSelectFrom;
    }
    
    public HubCopy<DashboardLine> createHubCopy() {
        Hub<DashboardLine> hubDashboardLinex = new Hub<>(DashboardLine.class);
        HubCopy<DashboardLine> hc = new HubCopy<>(getHub(), hubDashboardLinex, true);
        return hc;
    }
    public DashboardLineModel createCopy() {
        DashboardLineModel mod = new DashboardLineModel(createHubCopy().getHub());
        return mod;
    }
}

