// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.DashboardLineModel;
import com.corptostore.model.DashboardModel;
import com.corptostore.model.oa.Dashboard;
import com.corptostore.model.oa.DashboardLine;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class DashboardModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(DashboardModel.class.getName());
    
    // Hubs
    protected Hub<Dashboard> hub;
    // selected dashboards
    protected Hub<Dashboard> hubMultiSelect;
    // detail hubs
    protected Hub<DashboardLine> hubDashboardLines;
    
    // ObjectModels
    protected DashboardLineModel modelDashboardLines;
    
    public DashboardModel() {
        setDisplayName("Dashboard");
        setPluralDisplayName("Dashboards");
    }
    
    public DashboardModel(Hub<Dashboard> hubDashboard) {
        this();
        if (hubDashboard != null) HubDelegate.setObjectClass(hubDashboard, Dashboard.class);
        this.hub = hubDashboard;
    }
    public DashboardModel(Dashboard dashboard) {
        this();
        getHub().add(dashboard);
        getHub().setPos(0);
    }
    
    public Hub<Dashboard> getOriginalHub() {
        return getHub();
    }
    
    public Hub<DashboardLine> getDashboardLines() {
        if (hubDashboardLines == null) {
            hubDashboardLines = getHub().getDetailHub(Dashboard.P_DashboardLines);
        }
        return hubDashboardLines;
    }
    public Dashboard getDashboard() {
        return getHub().getAO();
    }
    
    public Hub<Dashboard> getHub() {
        if (hub == null) {
            hub = new Hub<Dashboard>(Dashboard.class);
        }
        return hub;
    }
    
    public Hub<Dashboard> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Dashboard>(Dashboard.class);
        }
        return hubMultiSelect;
    }
    
    public DashboardLineModel getDashboardLinesModel() {
        if (modelDashboardLines != null) return modelDashboardLines;
        modelDashboardLines = new DashboardLineModel(getDashboardLines());
        modelDashboardLines.setDisplayName("Dashboard Line");
        modelDashboardLines.setPluralDisplayName("Dashboard Lines");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getDashboardLines())) {
            modelDashboardLines.setCreateUI(false);
        }
        modelDashboardLines.setForJfc(getForJfc());
        modelDashboardLines.setAllowNew(false);
        modelDashboardLines.setAllowSave(true);
        modelDashboardLines.setAllowAdd(false);
        modelDashboardLines.setAllowMove(false);
        modelDashboardLines.setAllowRemove(false);
        modelDashboardLines.setAllowDelete(true);
        modelDashboardLines.setAllowRefresh(false);
        modelDashboardLines.setAllowSearch(false);
        modelDashboardLines.setAllowHubSearch(false);
        modelDashboardLines.setAllowGotoEdit(true);
        modelDashboardLines.setViewOnly(getViewOnly());
        modelDashboardLines.setAllowNew(false);
        modelDashboardLines.setAllowTableFilter(true);
        modelDashboardLines.setAllowTableSorting(true);
        modelDashboardLines.setAllowMultiSelect(false);
        modelDashboardLines.setAllowCopy(false);
        modelDashboardLines.setAllowCut(false);
        modelDashboardLines.setAllowPaste(false);
        // call Dashboard.dashboardLinesModelCallback(DashboardLineModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Dashboard.class, Dashboard.P_DashboardLines, modelDashboardLines);
    
        return modelDashboardLines;
    }
    
    public HubCopy<Dashboard> createHubCopy() {
        Hub<Dashboard> hubDashboardx = new Hub<>(Dashboard.class);
        HubCopy<Dashboard> hc = new HubCopy<>(getHub(), hubDashboardx, true);
        return hc;
    }
    public DashboardModel createCopy() {
        DashboardModel mod = new DashboardModel(createHubCopy().getHub());
        return mod;
    }
}

