// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.CorpToStoreModel;
import com.corptostore.model.DashboardLineModel;
import com.corptostore.model.EnvironmentModel;
import com.corptostore.model.TesterModel;
import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.DashboardLine;
import com.corptostore.model.oa.Environment;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.search.TesterSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class EnvironmentModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(EnvironmentModel.class.getName());
    
    // Hubs
    protected Hub<Environment> hub;
    // selected environments
    protected Hub<Environment> hubMultiSelect;
    // detail hubs
    protected Hub<CorpToStore> hubCorpToStores;
    protected Hub<DashboardLine> hubDashboardLines;
    protected Hub<Tester> hubTesters;
    
    // ObjectModels
    protected CorpToStoreModel modelCorpToStores;
    protected DashboardLineModel modelDashboardLines;
    protected TesterModel modelTesters;
    
    // SearchModels used for references
    protected TesterSearchModel modelTestersSearch;
    
    public EnvironmentModel() {
        setDisplayName("Environment");
        setPluralDisplayName("Environments");
    }
    
    public EnvironmentModel(Hub<Environment> hubEnvironment) {
        this();
        if (hubEnvironment != null) HubDelegate.setObjectClass(hubEnvironment, Environment.class);
        this.hub = hubEnvironment;
    }
    public EnvironmentModel(Environment environment) {
        this();
        getHub().add(environment);
        getHub().setPos(0);
    }
    
    public Hub<Environment> getOriginalHub() {
        return getHub();
    }
    
    public Hub<CorpToStore> getCorpToStores() {
        if (hubCorpToStores == null) {
            hubCorpToStores = getHub().getDetailHub(Environment.P_CorpToStores);
        }
        return hubCorpToStores;
    }
    public Hub<DashboardLine> getDashboardLines() {
        if (hubDashboardLines == null) {
            hubDashboardLines = getHub().getDetailHub(Environment.P_DashboardLines);
        }
        return hubDashboardLines;
    }
    public Hub<Tester> getTesters() {
        if (hubTesters == null) {
            hubTesters = getHub().getDetailHub(Environment.P_Testers);
        }
        return hubTesters;
    }
    public Environment getEnvironment() {
        return getHub().getAO();
    }
    
    public Hub<Environment> getHub() {
        if (hub == null) {
            hub = new Hub<Environment>(Environment.class);
        }
        return hub;
    }
    
    public Hub<Environment> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Environment>(Environment.class);
        }
        return hubMultiSelect;
    }
    
    public CorpToStoreModel getCorpToStoresModel() {
        if (modelCorpToStores != null) return modelCorpToStores;
        modelCorpToStores = new CorpToStoreModel(getCorpToStores());
        modelCorpToStores.setDisplayName("Corp To Store");
        modelCorpToStores.setPluralDisplayName("Corp To Stores");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getCorpToStores())) {
            modelCorpToStores.setCreateUI(false);
        }
        modelCorpToStores.setForJfc(getForJfc());
        modelCorpToStores.setAllowNew(true);
        modelCorpToStores.setAllowSave(true);
        modelCorpToStores.setAllowAdd(false);
        modelCorpToStores.setAllowMove(false);
        modelCorpToStores.setAllowRemove(false);
        modelCorpToStores.setAllowDelete(true);
        modelCorpToStores.setAllowRefresh(false);
        modelCorpToStores.setAllowSearch(false);
        modelCorpToStores.setAllowHubSearch(false);
        modelCorpToStores.setAllowGotoEdit(true);
        modelCorpToStores.setViewOnly(getViewOnly());
        modelCorpToStores.setAllowNew(true);
        modelCorpToStores.setAllowTableFilter(true);
        modelCorpToStores.setAllowTableSorting(true);
        modelCorpToStores.setAllowMultiSelect(false);
        modelCorpToStores.setAllowCopy(false);
        modelCorpToStores.setAllowCut(false);
        modelCorpToStores.setAllowPaste(false);
        // call Environment.corpToStoresModelCallback(CorpToStoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Environment.class, Environment.P_CorpToStores, modelCorpToStores);
    
        return modelCorpToStores;
    }
    public DashboardLineModel getDashboardLinesModel() {
        if (modelDashboardLines != null) return modelDashboardLines;
        modelDashboardLines = new DashboardLineModel(getDashboardLines());
        modelDashboardLines.setDisplayName("Dashboard Line");
        modelDashboardLines.setPluralDisplayName("Dashboard Lines");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getDashboardLines())) {
            modelDashboardLines.setCreateUI(false);
        }
        modelDashboardLines.setForJfc(getForJfc());
        modelDashboardLines.setAllowNew(false);
        modelDashboardLines.setAllowSave(true);
        modelDashboardLines.setAllowAdd(false);
        modelDashboardLines.setAllowMove(false);
        modelDashboardLines.setAllowRemove(false);
        modelDashboardLines.setAllowDelete(true);
        modelDashboardLines.setAllowRefresh(false);
        modelDashboardLines.setAllowSearch(false);
        modelDashboardLines.setAllowHubSearch(false);
        modelDashboardLines.setAllowGotoEdit(true);
        modelDashboardLines.setViewOnly(getViewOnly());
        modelDashboardLines.setAllowNew(false);
        modelDashboardLines.setAllowTableFilter(true);
        modelDashboardLines.setAllowTableSorting(true);
        modelDashboardLines.setAllowMultiSelect(false);
        modelDashboardLines.setAllowCopy(false);
        modelDashboardLines.setAllowCut(false);
        modelDashboardLines.setAllowPaste(false);
        // call Environment.dashboardLinesModelCallback(DashboardLineModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Environment.class, Environment.P_DashboardLines, modelDashboardLines);
    
        return modelDashboardLines;
    }
    public TesterModel getTestersModel() {
        if (modelTesters != null) return modelTesters;
        modelTesters = new TesterModel(getTesters());
        modelTesters.setDisplayName("Tester");
        modelTesters.setPluralDisplayName("Testers");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getTesters())) {
            modelTesters.setCreateUI(false);
        }
        modelTesters.setForJfc(getForJfc());
        modelTesters.setAllowNew(true);
        modelTesters.setAllowSave(true);
        modelTesters.setAllowAdd(true);
        modelTesters.setAllowMove(false);
        modelTesters.setAllowRemove(true);
        modelTesters.setAllowDelete(false);
        modelTesters.setAllowRefresh(false);
        modelTesters.setAllowSearch(false);
        modelTesters.setAllowHubSearch(true);
        modelTesters.setAllowGotoEdit(true);
        modelTesters.setViewOnly(getViewOnly());
        modelTesters.setAllowNew(true);
        modelTesters.setAllowTableFilter(true);
        modelTesters.setAllowTableSorting(true);
        modelTesters.setAllowMultiSelect(false);
        modelTesters.setAllowCopy(false);
        modelTesters.setAllowCut(false);
        modelTesters.setAllowPaste(false);
        // call Environment.testersModelCallback(TesterModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Environment.class, Environment.P_Testers, modelTesters);
    
        return modelTesters;
    }
    
    public TesterSearchModel getTestersSearchModel() {
        if (modelTestersSearch != null) return modelTestersSearch;
        modelTestersSearch = new TesterSearchModel();
        return modelTestersSearch;
    }
    
    public HubCopy<Environment> createHubCopy() {
        Hub<Environment> hubEnvironmentx = new Hub<>(Environment.class);
        HubCopy<Environment> hc = new HubCopy<>(getHub(), hubEnvironmentx, true);
        return hc;
    }
    public EnvironmentModel createCopy() {
        EnvironmentModel mod = new EnvironmentModel(createHubCopy().getHub());
        return mod;
    }
}

