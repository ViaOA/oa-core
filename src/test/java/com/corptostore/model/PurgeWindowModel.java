// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.CorpToStoreModel;
import com.corptostore.model.PurgeWindowModel;
import com.corptostore.model.StatusInfoModel;
import com.corptostore.model.StorePurgeInfoModel;
import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.PurgeWindow;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.StorePurgeInfo;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class PurgeWindowModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(PurgeWindowModel.class.getName());
    
    // Hubs
    protected Hub<PurgeWindow> hub;
    // selected purgeWindows
    protected Hub<PurgeWindow> hubMultiSelect;
    // detail hubs
    protected Hub<CorpToStore> hubCorpToStore;
    protected Hub<StatusInfo> hubStatusInfo;
    protected Hub<StorePurgeInfo> hubStorePurgeInfos;
    
    // ObjectModels
    protected CorpToStoreModel modelCorpToStore;
    protected StatusInfoModel modelStatusInfo;
    protected StorePurgeInfoModel modelStorePurgeInfos;
    
    public PurgeWindowModel() {
        setDisplayName("Purge Window");
        setPluralDisplayName("Purge Windows");
    }
    
    public PurgeWindowModel(Hub<PurgeWindow> hubPurgeWindow) {
        this();
        if (hubPurgeWindow != null) HubDelegate.setObjectClass(hubPurgeWindow, PurgeWindow.class);
        this.hub = hubPurgeWindow;
    }
    public PurgeWindowModel(PurgeWindow purgeWindow) {
        this();
        getHub().add(purgeWindow);
        getHub().setPos(0);
    }
    
    public Hub<PurgeWindow> getOriginalHub() {
        return getHub();
    }
    
    public Hub<CorpToStore> getCorpToStoreHub() {
        if (hubCorpToStore != null) return hubCorpToStore;
        // this is the owner, use detailHub
        hubCorpToStore = getHub().getDetailHub(PurgeWindow.P_CorpToStore);
        return hubCorpToStore;
    }
    public Hub<StatusInfo> getStatusInfoHub() {
        if (hubStatusInfo != null) return hubStatusInfo;
        hubStatusInfo = getHub().getDetailHub(PurgeWindow.P_StatusInfo);
        return hubStatusInfo;
    }
    public Hub<StorePurgeInfo> getStorePurgeInfos() {
        if (hubStorePurgeInfos == null) {
            hubStorePurgeInfos = getHub().getDetailHub(PurgeWindow.P_StorePurgeInfos);
        }
        return hubStorePurgeInfos;
    }
    public PurgeWindow getPurgeWindow() {
        return getHub().getAO();
    }
    
    public Hub<PurgeWindow> getHub() {
        if (hub == null) {
            hub = new Hub<PurgeWindow>(PurgeWindow.class);
        }
        return hub;
    }
    
    public Hub<PurgeWindow> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<PurgeWindow>(PurgeWindow.class);
        }
        return hubMultiSelect;
    }
    
    public CorpToStoreModel getCorpToStoreModel() {
        if (modelCorpToStore != null) return modelCorpToStore;
        modelCorpToStore = new CorpToStoreModel(getCorpToStoreHub());
        modelCorpToStore.setDisplayName("Corp To Store");
        modelCorpToStore.setPluralDisplayName("Corp To Stores");
        modelCorpToStore.setForJfc(getForJfc());
        modelCorpToStore.setAllowNew(false);
        modelCorpToStore.setAllowSave(true);
        modelCorpToStore.setAllowAdd(false);
        modelCorpToStore.setAllowRemove(false);
        modelCorpToStore.setAllowClear(false);
        modelCorpToStore.setAllowDelete(false);
        modelCorpToStore.setAllowSearch(false);
        modelCorpToStore.setAllowHubSearch(false);
        modelCorpToStore.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelCorpToStore.setCreateUI(li == null || !PurgeWindow.P_CorpToStore.equalsIgnoreCase(li.getName()) );
        modelCorpToStore.setViewOnly(getViewOnly());
        // call PurgeWindow.corpToStoreModelCallback(CorpToStoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(PurgeWindow.class, PurgeWindow.P_CorpToStore, modelCorpToStore);
    
        return modelCorpToStore;
    }
    public StatusInfoModel getStatusInfoModel() {
        if (modelStatusInfo != null) return modelStatusInfo;
        modelStatusInfo = new StatusInfoModel(getStatusInfoHub());
        modelStatusInfo.setDisplayName("Status Info");
        modelStatusInfo.setPluralDisplayName("Status Infos");
        modelStatusInfo.setForJfc(getForJfc());
        modelStatusInfo.setAllowNew(false);
        modelStatusInfo.setAllowSave(true);
        modelStatusInfo.setAllowAdd(false);
        modelStatusInfo.setAllowRemove(false);
        modelStatusInfo.setAllowClear(false);
        modelStatusInfo.setAllowDelete(false);
        modelStatusInfo.setAllowSearch(false);
        modelStatusInfo.setAllowHubSearch(false);
        modelStatusInfo.setAllowGotoEdit(true);
        modelStatusInfo.setViewOnly(getViewOnly());
        // call PurgeWindow.statusInfoModelCallback(StatusInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(PurgeWindow.class, PurgeWindow.P_StatusInfo, modelStatusInfo);
    
        return modelStatusInfo;
    }
    public StorePurgeInfoModel getStorePurgeInfosModel() {
        if (modelStorePurgeInfos != null) return modelStorePurgeInfos;
        modelStorePurgeInfos = new StorePurgeInfoModel(getStorePurgeInfos());
        modelStorePurgeInfos.setDisplayName("Store Purge Info");
        modelStorePurgeInfos.setPluralDisplayName("Store Purge Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getStorePurgeInfos())) {
            modelStorePurgeInfos.setCreateUI(false);
        }
        modelStorePurgeInfos.setForJfc(getForJfc());
        modelStorePurgeInfos.setAllowNew(true);
        modelStorePurgeInfos.setAllowSave(true);
        modelStorePurgeInfos.setAllowAdd(false);
        modelStorePurgeInfos.setAllowMove(false);
        modelStorePurgeInfos.setAllowRemove(false);
        modelStorePurgeInfos.setAllowDelete(true);
        modelStorePurgeInfos.setAllowRefresh(false);
        modelStorePurgeInfos.setAllowSearch(false);
        modelStorePurgeInfos.setAllowHubSearch(false);
        modelStorePurgeInfos.setAllowGotoEdit(true);
        modelStorePurgeInfos.setViewOnly(getViewOnly());
        modelStorePurgeInfos.setAllowNew(true);
        modelStorePurgeInfos.setAllowTableFilter(true);
        modelStorePurgeInfos.setAllowTableSorting(true);
        modelStorePurgeInfos.setAllowMultiSelect(false);
        modelStorePurgeInfos.setAllowCopy(false);
        modelStorePurgeInfos.setAllowCut(false);
        modelStorePurgeInfos.setAllowPaste(false);
        // call PurgeWindow.storePurgeInfosModelCallback(StorePurgeInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(PurgeWindow.class, PurgeWindow.P_StorePurgeInfos, modelStorePurgeInfos);
    
        return modelStorePurgeInfos;
    }
    
    public HubCopy<PurgeWindow> createHubCopy() {
        Hub<PurgeWindow> hubPurgeWindowx = new Hub<>(PurgeWindow.class);
        HubCopy<PurgeWindow> hc = new HubCopy<>(getHub(), hubPurgeWindowx, true);
        return hc;
    }
    public PurgeWindowModel createCopy() {
        PurgeWindowModel mod = new PurgeWindowModel(createHubCopy().getHub());
        return mod;
    }
}

