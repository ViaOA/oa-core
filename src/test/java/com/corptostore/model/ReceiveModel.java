// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.BatchModel;
import com.corptostore.model.ReceiveModel;
import com.corptostore.model.StoreModel;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Receive;
import com.corptostore.model.oa.Store;
import com.corptostore.model.search.BatchSearchModel;
import com.corptostore.model.search.StoreSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class ReceiveModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ReceiveModel.class.getName());
    
    // Hubs
    protected Hub<Receive> hub;
    // selected receives
    protected Hub<Receive> hubMultiSelect;
    // detail hubs
    protected Hub<Batch> hubBatch;
    protected Hub<Store> hubStore;
    
    // ObjectModels
    protected BatchModel modelBatch;
    protected StoreModel modelStore;
    
    // SearchModels used for references
    protected BatchSearchModel modelBatchSearch;
    protected StoreSearchModel modelStoreSearch;
    
    public ReceiveModel() {
        setDisplayName("Receive");
        setPluralDisplayName("Receives");
    }
    
    public ReceiveModel(Hub<Receive> hubReceive) {
        this();
        if (hubReceive != null) HubDelegate.setObjectClass(hubReceive, Receive.class);
        this.hub = hubReceive;
    }
    public ReceiveModel(Receive receive) {
        this();
        getHub().add(receive);
        getHub().setPos(0);
    }
    
    public Hub<Receive> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Batch> getBatchHub() {
        if (hubBatch != null) return hubBatch;
        hubBatch = getHub().getDetailHub(Receive.P_Batch);
        return hubBatch;
    }
    public Hub<Store> getStoreHub() {
        if (hubStore != null) return hubStore;
        hubStore = getHub().getDetailHub(Receive.P_Store);
        return hubStore;
    }
    public Receive getReceive() {
        return getHub().getAO();
    }
    
    public Hub<Receive> getHub() {
        if (hub == null) {
            hub = new Hub<Receive>(Receive.class);
        }
        return hub;
    }
    
    public Hub<Receive> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Receive>(Receive.class);
        }
        return hubMultiSelect;
    }
    
    public BatchModel getBatchModel() {
        if (modelBatch != null) return modelBatch;
        modelBatch = new BatchModel(getBatchHub());
        modelBatch.setDisplayName("Batch");
        modelBatch.setPluralDisplayName("Batches");
        modelBatch.setForJfc(getForJfc());
        modelBatch.setAllowNew(false);
        modelBatch.setAllowSave(true);
        modelBatch.setAllowAdd(false);
        modelBatch.setAllowRemove(true);
        modelBatch.setAllowClear(true);
        modelBatch.setAllowDelete(false);
        modelBatch.setAllowSearch(true);
        modelBatch.setAllowHubSearch(true);
        modelBatch.setAllowGotoEdit(true);
        modelBatch.setViewOnly(true);
        // call Receive.batchModelCallback(BatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Receive.class, Receive.P_Batch, modelBatch);
    
        return modelBatch;
    }
    public StoreModel getStoreModel() {
        if (modelStore != null) return modelStore;
        modelStore = new StoreModel(getStoreHub());
        modelStore.setDisplayName("Store");
        modelStore.setPluralDisplayName("Stores");
        modelStore.setForJfc(getForJfc());
        modelStore.setAllowNew(false);
        modelStore.setAllowSave(true);
        modelStore.setAllowAdd(false);
        modelStore.setAllowRemove(true);
        modelStore.setAllowClear(true);
        modelStore.setAllowDelete(false);
        modelStore.setAllowSearch(true);
        modelStore.setAllowHubSearch(true);
        modelStore.setAllowGotoEdit(true);
        modelStore.setViewOnly(true);
        // call Receive.storeModelCallback(StoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Receive.class, Receive.P_Store, modelStore);
    
        return modelStore;
    }
    
    public BatchSearchModel getBatchSearchModel() {
        if (modelBatchSearch != null) return modelBatchSearch;
        modelBatchSearch = new BatchSearchModel();
        HubSelectDelegate.adoptWhereHub(modelBatchSearch.getHub(), Receive.P_Batch, getHub());
        return modelBatchSearch;
    }
    public StoreSearchModel getStoreSearchModel() {
        if (modelStoreSearch != null) return modelStoreSearch;
        modelStoreSearch = new StoreSearchModel();
        HubSelectDelegate.adoptWhereHub(modelStoreSearch.getHub(), Receive.P_Store, getHub());
        return modelStoreSearch;
    }
    
    public HubCopy<Receive> createHubCopy() {
        Hub<Receive> hubReceivex = new Hub<>(Receive.class);
        HubCopy<Receive> hc = new HubCopy<>(getHub(), hubReceivex, true);
        return hc;
    }
    public ReceiveModel createCopy() {
        ReceiveModel mod = new ReceiveModel(createHubCopy().getHub());
        return mod;
    }
}

