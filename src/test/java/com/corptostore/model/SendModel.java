// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.BatchModel;
import com.corptostore.model.SendModel;
import com.corptostore.model.StoreModel;
import com.corptostore.model.TransmitModel;
import com.corptostore.model.filter.SendClosedFilterModel;
import com.corptostore.model.filter.SendOpenFilterModel;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.search.BatchSearchModel;
import com.corptostore.model.search.StoreSearchModel;
import com.corptostore.model.search.TransmitSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class SendModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(SendModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      openFilteredHub;
      closedFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<Send> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<Send> hubUnfiltered;
    protected Hub<Send> hubOpenFilteredHub;
    protected Hub<Send> hubClosedFilteredHub;
    // main hub that points to hubUnfiltered, hubOpenFilteredHub, hubClosedFilteredHub
    protected Hub<Send> hub;
    // selected sends
    protected Hub<Send> hubMultiSelect;
    // detail hubs
    protected Hub<Batch> hubBatch;
    protected Hub<Transmit> hubBeginTransmit;
    protected Hub<Store> hubStore;
    
    // ObjectModels
    protected BatchModel modelBatch;
    protected TransmitModel modelBeginTransmit;
    protected StoreModel modelStore;
    
    // SearchModels used for references
    protected BatchSearchModel modelBatchSearch;
    protected TransmitSearchModel modelBeginTransmitSearch;
    protected StoreSearchModel modelStoreSearch;
    
    // FilterModels
    protected SendOpenFilterModel modelSendOpenFilter;
    protected SendClosedFilterModel modelSendClosedFilter;
    
    public SendModel() {
        setDisplayName("Send");
        setPluralDisplayName("Sends");
    }
    
    public SendModel(Hub<Send> hubSend) {
        this();
        if (hubSend != null) HubDelegate.setObjectClass(hubSend, Send.class);
        this.hubOriginal = hubSend;
    }
    public SendModel(Send send) {
        this();
        getHub().add(send);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useOpenFilteredHub() {
        getHub().setSharedHub(getOpenFilteredHub(), true);
    }
    public void useClosedFilteredHub() {
        getHub().setSharedHub(getClosedFilteredHub(), true);
    }
    
    public Hub<Send> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<Send>(Send.class);
        }
        return hubOriginal;
    }
    
    public Hub<Batch> getBatchHub() {
        if (hubBatch != null) return hubBatch;
        hubBatch = getHub().getDetailHub(Send.P_Batch);
        return hubBatch;
    }
    public Hub<Transmit> getBeginTransmitHub() {
        if (hubBeginTransmit != null) return hubBeginTransmit;
        hubBeginTransmit = getHub().getDetailHub(Send.P_BeginTransmit);
        return hubBeginTransmit;
    }
    public Hub<Store> getStoreHub() {
        if (hubStore != null) return hubStore;
        hubStore = getHub().getDetailHub(Send.P_Store);
        return hubStore;
    }
    public Hub<Send> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<Send>(Send.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<Send> getOpenFilteredHub() {
        if (hubOpenFilteredHub == null) {
            hubOpenFilteredHub = new Hub<Send>(Send.class);
        }
        return hubOpenFilteredHub;
    }
    public Hub<Send> getClosedFilteredHub() {
        if (hubClosedFilteredHub == null) {
            hubClosedFilteredHub = new Hub<Send>(Send.class);
        }
        return hubClosedFilteredHub;
    }
    
    public Send getSend() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<Send> getHub() {
        if (hub == null) {
            hub = new Hub<Send>(Send.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<Send> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Send>(Send.class);
        }
        return hubMultiSelect;
    }
    
    public BatchModel getBatchModel() {
        if (modelBatch != null) return modelBatch;
        modelBatch = new BatchModel(getBatchHub());
        modelBatch.setDisplayName("Batch");
        modelBatch.setPluralDisplayName("Batches");
        modelBatch.setForJfc(getForJfc());
        modelBatch.setAllowNew(false);
        modelBatch.setAllowSave(true);
        modelBatch.setAllowAdd(false);
        modelBatch.setAllowRemove(false);
        modelBatch.setAllowClear(false);
        modelBatch.setAllowDelete(false);
        modelBatch.setAllowSearch(false);
        modelBatch.setAllowHubSearch(true);
        modelBatch.setAllowGotoEdit(true);
        modelBatch.setViewOnly(true);
        // call Send.batchModelCallback(BatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Send.class, Send.P_Batch, modelBatch);
    
        return modelBatch;
    }
    public TransmitModel getBeginTransmitModel() {
        if (modelBeginTransmit != null) return modelBeginTransmit;
        modelBeginTransmit = new TransmitModel(getBeginTransmitHub());
        modelBeginTransmit.setDisplayName("Begin Transmit");
        modelBeginTransmit.setPluralDisplayName("Transmits");
        modelBeginTransmit.setForJfc(getForJfc());
        modelBeginTransmit.setAllowNew(false);
        modelBeginTransmit.setAllowSave(true);
        modelBeginTransmit.setAllowAdd(false);
        modelBeginTransmit.setAllowRemove(true);
        modelBeginTransmit.setAllowClear(true);
        modelBeginTransmit.setAllowDelete(false);
        modelBeginTransmit.setAllowSearch(true);
        modelBeginTransmit.setAllowHubSearch(true);
        modelBeginTransmit.setAllowGotoEdit(true);
        modelBeginTransmit.setViewOnly(true);
        // call Send.beginTransmitModelCallback(TransmitModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Send.class, Send.P_BeginTransmit, modelBeginTransmit);
    
        return modelBeginTransmit;
    }
    public StoreModel getStoreModel() {
        if (modelStore != null) return modelStore;
        modelStore = new StoreModel(getStoreHub());
        modelStore.setDisplayName("Store");
        modelStore.setPluralDisplayName("Stores");
        modelStore.setForJfc(getForJfc());
        modelStore.setAllowNew(false);
        modelStore.setAllowSave(true);
        modelStore.setAllowAdd(false);
        modelStore.setAllowRemove(true);
        modelStore.setAllowClear(true);
        modelStore.setAllowDelete(false);
        modelStore.setAllowSearch(true);
        modelStore.setAllowHubSearch(true);
        modelStore.setAllowGotoEdit(true);
        modelStore.setViewOnly(true);
        // call Send.storeModelCallback(StoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Send.class, Send.P_Store, modelStore);
    
        return modelStore;
    }
    
    public BatchSearchModel getBatchSearchModel() {
        if (modelBatchSearch != null) return modelBatchSearch;
        modelBatchSearch = new BatchSearchModel();
        return modelBatchSearch;
    }
    public TransmitSearchModel getBeginTransmitSearchModel() {
        if (modelBeginTransmitSearch != null) return modelBeginTransmitSearch;
        modelBeginTransmitSearch = new TransmitSearchModel();
        HubSelectDelegate.adoptWhereHub(modelBeginTransmitSearch.getHub(), Send.P_BeginTransmit, getHub());
        return modelBeginTransmitSearch;
    }
    public StoreSearchModel getStoreSearchModel() {
        if (modelStoreSearch != null) return modelStoreSearch;
        modelStoreSearch = new StoreSearchModel();
        HubSelectDelegate.adoptWhereHub(modelStoreSearch.getHub(), Send.P_Store, getHub());
        return modelStoreSearch;
    }
    
    public SendOpenFilterModel getSendOpenFilterModel() {
        if (modelSendOpenFilter == null) {
            modelSendOpenFilter = new SendOpenFilterModel(getUnfilteredHub(), getOpenFilteredHub());
            new HubShareAO(getUnfilteredHub(), getOpenFilteredHub());
        }
        return modelSendOpenFilter;
    }
    public SendClosedFilterModel getSendClosedFilterModel() {
        if (modelSendClosedFilter == null) {
            modelSendClosedFilter = new SendClosedFilterModel(getUnfilteredHub(), getClosedFilteredHub());
            new HubShareAO(getUnfilteredHub(), getClosedFilteredHub());
        }
        return modelSendClosedFilter;
    }
    
    public HubCopy<Send> createHubCopy() {
        Hub<Send> hubSendx = new Hub<>(Send.class);
        HubCopy<Send> hc = new HubCopy<>(getHub(), hubSendx, true);
        return hc;
    }
    public SendModel createCopy() {
        SendModel mod = new SendModel(createHubCopy().getHub());
        return mod;
    }
}

