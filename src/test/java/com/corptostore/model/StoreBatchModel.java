// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.BatchModel;
import com.corptostore.model.StoreBatchModel;
import com.corptostore.model.StoreTransmitBatchModel;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.search.BatchSearchModel;
import com.corptostore.model.search.StoreTransmitBatchSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class StoreBatchModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(StoreBatchModel.class.getName());
    
    // Hubs
    protected Hub<StoreBatch> hub;
    // selected storeBatches
    protected Hub<StoreBatch> hubMultiSelect;
    // detail hubs
    protected Hub<Batch> hubBatch;
    protected Hub<StoreTransmitBatch> hubStoreTransmitBatch;
    
    // ObjectModels
    protected BatchModel modelBatch;
    protected StoreTransmitBatchModel modelStoreTransmitBatch;
    
    // SearchModels used for references
    protected BatchSearchModel modelBatchSearch;
    protected StoreTransmitBatchSearchModel modelStoreTransmitBatchSearch;
    
    public StoreBatchModel() {
        setDisplayName("Store Batch");
        setPluralDisplayName("Store Batches");
    }
    
    public StoreBatchModel(Hub<StoreBatch> hubStoreBatch) {
        this();
        if (hubStoreBatch != null) HubDelegate.setObjectClass(hubStoreBatch, StoreBatch.class);
        this.hub = hubStoreBatch;
    }
    public StoreBatchModel(StoreBatch storeBatch) {
        this();
        getHub().add(storeBatch);
        getHub().setPos(0);
    }
    
    public Hub<StoreBatch> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Batch> getBatchHub() {
        if (hubBatch != null) return hubBatch;
        hubBatch = getHub().getDetailHub(StoreBatch.P_Batch);
        return hubBatch;
    }
    public Hub<StoreTransmitBatch> getStoreTransmitBatchHub() {
        if (hubStoreTransmitBatch != null) return hubStoreTransmitBatch;
        // this is the owner, use detailHub
        hubStoreTransmitBatch = getHub().getDetailHub(StoreBatch.P_StoreTransmitBatch);
        return hubStoreTransmitBatch;
    }
    public StoreBatch getStoreBatch() {
        return getHub().getAO();
    }
    
    public Hub<StoreBatch> getHub() {
        if (hub == null) {
            hub = new Hub<StoreBatch>(StoreBatch.class);
        }
        return hub;
    }
    
    public Hub<StoreBatch> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<StoreBatch>(StoreBatch.class);
        }
        return hubMultiSelect;
    }
    
    public BatchModel getBatchModel() {
        if (modelBatch != null) return modelBatch;
        modelBatch = new BatchModel(getBatchHub());
        modelBatch.setDisplayName("Batch");
        modelBatch.setPluralDisplayName("Batches");
        modelBatch.setForJfc(getForJfc());
        modelBatch.setAllowNew(true);
        modelBatch.setAllowSave(true);
        modelBatch.setAllowAdd(false);
        modelBatch.setAllowRemove(true);
        modelBatch.setAllowClear(true);
        modelBatch.setAllowDelete(false);
        modelBatch.setAllowSearch(true);
        modelBatch.setAllowHubSearch(true);
        modelBatch.setAllowGotoEdit(true);
        modelBatch.setViewOnly(getViewOnly());
        // call StoreBatch.batchModelCallback(BatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreBatch.class, StoreBatch.P_Batch, modelBatch);
    
        return modelBatch;
    }
    public StoreTransmitBatchModel getStoreTransmitBatchModel() {
        if (modelStoreTransmitBatch != null) return modelStoreTransmitBatch;
        modelStoreTransmitBatch = new StoreTransmitBatchModel(getStoreTransmitBatchHub());
        modelStoreTransmitBatch.setDisplayName("Store Transmit Batch");
        modelStoreTransmitBatch.setPluralDisplayName("Store Transmit Batches");
        modelStoreTransmitBatch.setForJfc(getForJfc());
        modelStoreTransmitBatch.setAllowNew(false);
        modelStoreTransmitBatch.setAllowSave(true);
        modelStoreTransmitBatch.setAllowAdd(false);
        modelStoreTransmitBatch.setAllowRemove(false);
        modelStoreTransmitBatch.setAllowClear(false);
        modelStoreTransmitBatch.setAllowDelete(false);
        modelStoreTransmitBatch.setAllowSearch(false);
        modelStoreTransmitBatch.setAllowHubSearch(true);
        modelStoreTransmitBatch.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelStoreTransmitBatch.setCreateUI(li == null || !StoreBatch.P_StoreTransmitBatch.equalsIgnoreCase(li.getName()) );
        modelStoreTransmitBatch.setViewOnly(getViewOnly());
        // call StoreBatch.storeTransmitBatchModelCallback(StoreTransmitBatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreBatch.class, StoreBatch.P_StoreTransmitBatch, modelStoreTransmitBatch);
    
        return modelStoreTransmitBatch;
    }
    
    public BatchSearchModel getBatchSearchModel() {
        if (modelBatchSearch != null) return modelBatchSearch;
        modelBatchSearch = new BatchSearchModel();
        HubSelectDelegate.adoptWhereHub(modelBatchSearch.getHub(), StoreBatch.P_Batch, getHub());
        return modelBatchSearch;
    }
    public StoreTransmitBatchSearchModel getStoreTransmitBatchSearchModel() {
        if (modelStoreTransmitBatchSearch != null) return modelStoreTransmitBatchSearch;
        modelStoreTransmitBatchSearch = new StoreTransmitBatchSearchModel();
        HubSelectDelegate.adoptWhereHub(modelStoreTransmitBatchSearch.getHub(), StoreBatch.P_StoreTransmitBatch, getHub());
        return modelStoreTransmitBatchSearch;
    }
    
    public HubCopy<StoreBatch> createHubCopy() {
        Hub<StoreBatch> hubStoreBatchx = new Hub<>(StoreBatch.class);
        HubCopy<StoreBatch> hc = new HubCopy<>(getHub(), hubStoreBatchx, true);
        return hc;
    }
    public StoreBatchModel createCopy() {
        StoreBatchModel mod = new StoreBatchModel(createHubCopy().getHub());
        return mod;
    }
}

