// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.CorpToStoreModel;
import com.corptostore.model.ResendBatchRequestModel;
import com.corptostore.model.StatusInfoModel;
import com.corptostore.model.StoreInfoModel;
import com.corptostore.model.StoreLockInfoModel;
import com.corptostore.model.StoreModel;
import com.corptostore.model.StorePurgeInfoModel;
import com.corptostore.model.StoreTransmitInfoModel;
import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.ResendBatchRequest;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreInfo;
import com.corptostore.model.oa.StoreLockInfo;
import com.corptostore.model.oa.StorePurgeInfo;
import com.corptostore.model.oa.StoreTransmitInfo;
import com.corptostore.model.search.StoreSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class StoreInfoModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(StoreInfoModel.class.getName());
    
    // Hubs
    protected Hub<StoreInfo> hub;
    // selected storeInfos
    protected Hub<StoreInfo> hubMultiSelect;
    // detail hubs
    protected Hub<CorpToStore> hubCorpToStore;
    protected Hub<StatusInfo> hubStatusInfo;
    protected Hub<Store> hubStore;
    protected Hub<StoreLockInfo> hubStoreLockInfo;
    protected Hub<ResendBatchRequest> hubResendBatchRequests;
    protected Hub<StorePurgeInfo> hubStorePurgeInfos;
    protected Hub<StoreTransmitInfo> hubStoreTransmitInfos;
    
    // ObjectModels
    protected CorpToStoreModel modelCorpToStore;
    protected StatusInfoModel modelStatusInfo;
    protected StoreModel modelStore;
    protected StoreLockInfoModel modelStoreLockInfo;
    protected ResendBatchRequestModel modelResendBatchRequests;
    protected StorePurgeInfoModel modelStorePurgeInfos;
    protected StoreTransmitInfoModel modelStoreTransmitInfos;
    
    // SearchModels used for references
    protected StoreSearchModel modelStoreSearch;
    
    public StoreInfoModel() {
        setDisplayName("Store Info");
        setPluralDisplayName("Store Infos");
    }
    
    public StoreInfoModel(Hub<StoreInfo> hubStoreInfo) {
        this();
        if (hubStoreInfo != null) HubDelegate.setObjectClass(hubStoreInfo, StoreInfo.class);
        this.hub = hubStoreInfo;
    }
    public StoreInfoModel(StoreInfo storeInfo) {
        this();
        getHub().add(storeInfo);
        getHub().setPos(0);
    }
    
    public Hub<StoreInfo> getOriginalHub() {
        return getHub();
    }
    
    public Hub<CorpToStore> getCorpToStoreHub() {
        if (hubCorpToStore != null) return hubCorpToStore;
        // this is the owner, use detailHub
        hubCorpToStore = getHub().getDetailHub(StoreInfo.P_CorpToStore);
        return hubCorpToStore;
    }
    public Hub<StatusInfo> getStatusInfoHub() {
        if (hubStatusInfo != null) return hubStatusInfo;
        hubStatusInfo = getHub().getDetailHub(StoreInfo.P_StatusInfo);
        return hubStatusInfo;
    }
    public Hub<Store> getStoreHub() {
        if (hubStore != null) return hubStore;
        hubStore = getHub().getDetailHub(StoreInfo.P_Store);
        return hubStore;
    }
    public Hub<StoreLockInfo> getStoreLockInfoHub() {
        if (hubStoreLockInfo != null) return hubStoreLockInfo;
        hubStoreLockInfo = getHub().getDetailHub(StoreInfo.P_StoreLockInfo);
        return hubStoreLockInfo;
    }
    public Hub<ResendBatchRequest> getResendBatchRequests() {
        if (hubResendBatchRequests == null) {
            hubResendBatchRequests = getHub().getDetailHub(StoreInfo.P_ResendBatchRequests);
        }
        return hubResendBatchRequests;
    }
    public Hub<StorePurgeInfo> getStorePurgeInfos() {
        if (hubStorePurgeInfos == null) {
            hubStorePurgeInfos = getHub().getDetailHub(StoreInfo.P_StorePurgeInfos);
        }
        return hubStorePurgeInfos;
    }
    public Hub<StoreTransmitInfo> getStoreTransmitInfos() {
        if (hubStoreTransmitInfos == null) {
            hubStoreTransmitInfos = getHub().getDetailHub(StoreInfo.P_StoreTransmitInfos);
        }
        return hubStoreTransmitInfos;
    }
    public StoreInfo getStoreInfo() {
        return getHub().getAO();
    }
    
    public Hub<StoreInfo> getHub() {
        if (hub == null) {
            hub = new Hub<StoreInfo>(StoreInfo.class);
        }
        return hub;
    }
    
    public Hub<StoreInfo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<StoreInfo>(StoreInfo.class);
        }
        return hubMultiSelect;
    }
    
    public CorpToStoreModel getCorpToStoreModel() {
        if (modelCorpToStore != null) return modelCorpToStore;
        modelCorpToStore = new CorpToStoreModel(getCorpToStoreHub());
        modelCorpToStore.setDisplayName("Corp To Store");
        modelCorpToStore.setPluralDisplayName("Corp To Stores");
        modelCorpToStore.setForJfc(getForJfc());
        modelCorpToStore.setAllowNew(false);
        modelCorpToStore.setAllowSave(true);
        modelCorpToStore.setAllowAdd(false);
        modelCorpToStore.setAllowRemove(false);
        modelCorpToStore.setAllowClear(false);
        modelCorpToStore.setAllowDelete(false);
        modelCorpToStore.setAllowSearch(false);
        modelCorpToStore.setAllowHubSearch(false);
        modelCorpToStore.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelCorpToStore.setCreateUI(li == null || !StoreInfo.P_CorpToStore.equalsIgnoreCase(li.getName()) );
        modelCorpToStore.setViewOnly(getViewOnly());
        // call StoreInfo.corpToStoreModelCallback(CorpToStoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreInfo.class, StoreInfo.P_CorpToStore, modelCorpToStore);
    
        return modelCorpToStore;
    }
    public StatusInfoModel getStatusInfoModel() {
        if (modelStatusInfo != null) return modelStatusInfo;
        modelStatusInfo = new StatusInfoModel(getStatusInfoHub());
        modelStatusInfo.setDisplayName("Status Info");
        modelStatusInfo.setPluralDisplayName("Status Infos");
        modelStatusInfo.setForJfc(getForJfc());
        modelStatusInfo.setAllowNew(false);
        modelStatusInfo.setAllowSave(true);
        modelStatusInfo.setAllowAdd(false);
        modelStatusInfo.setAllowRemove(false);
        modelStatusInfo.setAllowClear(false);
        modelStatusInfo.setAllowDelete(false);
        modelStatusInfo.setAllowSearch(false);
        modelStatusInfo.setAllowHubSearch(false);
        modelStatusInfo.setAllowGotoEdit(true);
        modelStatusInfo.setViewOnly(getViewOnly());
        // call StoreInfo.statusInfoModelCallback(StatusInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreInfo.class, StoreInfo.P_StatusInfo, modelStatusInfo);
    
        return modelStatusInfo;
    }
    public StoreModel getStoreModel() {
        if (modelStore != null) return modelStore;
        modelStore = new StoreModel(getStoreHub());
        modelStore.setDisplayName("Store");
        modelStore.setPluralDisplayName("Stores");
        modelStore.setForJfc(getForJfc());
        modelStore.setAllowNew(false);
        modelStore.setAllowSave(true);
        modelStore.setAllowAdd(false);
        modelStore.setAllowRemove(false);
        modelStore.setAllowClear(false);
        modelStore.setAllowDelete(false);
        modelStore.setAllowSearch(false);
        modelStore.setAllowHubSearch(true);
        modelStore.setAllowGotoEdit(true);
        modelStore.setViewOnly(true);
        // call StoreInfo.storeModelCallback(StoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreInfo.class, StoreInfo.P_Store, modelStore);
    
        return modelStore;
    }
    public StoreLockInfoModel getStoreLockInfoModel() {
        if (modelStoreLockInfo != null) return modelStoreLockInfo;
        modelStoreLockInfo = new StoreLockInfoModel(getStoreLockInfoHub());
        modelStoreLockInfo.setDisplayName("Store Lock Info");
        modelStoreLockInfo.setPluralDisplayName("Store Lock Infos");
        modelStoreLockInfo.setForJfc(getForJfc());
        modelStoreLockInfo.setAllowNew(false);
        modelStoreLockInfo.setAllowSave(true);
        modelStoreLockInfo.setAllowAdd(false);
        modelStoreLockInfo.setAllowRemove(false);
        modelStoreLockInfo.setAllowClear(false);
        modelStoreLockInfo.setAllowDelete(false);
        modelStoreLockInfo.setAllowSearch(false);
        modelStoreLockInfo.setAllowHubSearch(false);
        modelStoreLockInfo.setAllowGotoEdit(true);
        modelStoreLockInfo.setViewOnly(true);
        // call StoreInfo.storeLockInfoModelCallback(StoreLockInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreInfo.class, StoreInfo.P_StoreLockInfo, modelStoreLockInfo);
    
        return modelStoreLockInfo;
    }
    public ResendBatchRequestModel getResendBatchRequestsModel() {
        if (modelResendBatchRequests != null) return modelResendBatchRequests;
        modelResendBatchRequests = new ResendBatchRequestModel(getResendBatchRequests());
        modelResendBatchRequests.setDisplayName("Resend Batch Request");
        modelResendBatchRequests.setPluralDisplayName("Resend Batch Requests");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getResendBatchRequests())) {
            modelResendBatchRequests.setCreateUI(false);
        }
        modelResendBatchRequests.setForJfc(getForJfc());
        modelResendBatchRequests.setAllowNew(true);
        modelResendBatchRequests.setAllowSave(true);
        modelResendBatchRequests.setAllowAdd(false);
        modelResendBatchRequests.setAllowMove(false);
        modelResendBatchRequests.setAllowRemove(false);
        modelResendBatchRequests.setAllowDelete(true);
        modelResendBatchRequests.setAllowRefresh(false);
        modelResendBatchRequests.setAllowSearch(false);
        modelResendBatchRequests.setAllowHubSearch(false);
        modelResendBatchRequests.setAllowGotoEdit(true);
        modelResendBatchRequests.setViewOnly(getViewOnly());
        modelResendBatchRequests.setAllowNew(true);
        modelResendBatchRequests.setAllowTableFilter(true);
        modelResendBatchRequests.setAllowTableSorting(true);
        modelResendBatchRequests.setAllowMultiSelect(false);
        modelResendBatchRequests.setAllowCopy(false);
        modelResendBatchRequests.setAllowCut(false);
        modelResendBatchRequests.setAllowPaste(false);
        // call StoreInfo.resendBatchRequestsModelCallback(ResendBatchRequestModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreInfo.class, StoreInfo.P_ResendBatchRequests, modelResendBatchRequests);
    
        return modelResendBatchRequests;
    }
    public StorePurgeInfoModel getStorePurgeInfosModel() {
        if (modelStorePurgeInfos != null) return modelStorePurgeInfos;
        modelStorePurgeInfos = new StorePurgeInfoModel(getStorePurgeInfos());
        modelStorePurgeInfos.setDisplayName("Store Purge Info");
        modelStorePurgeInfos.setPluralDisplayName("Store Purge Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getStorePurgeInfos())) {
            modelStorePurgeInfos.setCreateUI(false);
        }
        modelStorePurgeInfos.setForJfc(getForJfc());
        modelStorePurgeInfos.setAllowNew(true);
        modelStorePurgeInfos.setAllowSave(true);
        modelStorePurgeInfos.setAllowAdd(false);
        modelStorePurgeInfos.setAllowMove(false);
        modelStorePurgeInfos.setAllowRemove(false);
        modelStorePurgeInfos.setAllowDelete(true);
        modelStorePurgeInfos.setAllowRefresh(false);
        modelStorePurgeInfos.setAllowSearch(false);
        modelStorePurgeInfos.setAllowHubSearch(false);
        modelStorePurgeInfos.setAllowGotoEdit(true);
        modelStorePurgeInfos.setViewOnly(getViewOnly());
        modelStorePurgeInfos.setAllowNew(true);
        modelStorePurgeInfos.setAllowTableFilter(true);
        modelStorePurgeInfos.setAllowTableSorting(true);
        modelStorePurgeInfos.setAllowMultiSelect(false);
        modelStorePurgeInfos.setAllowCopy(false);
        modelStorePurgeInfos.setAllowCut(false);
        modelStorePurgeInfos.setAllowPaste(false);
        // call StoreInfo.storePurgeInfosModelCallback(StorePurgeInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreInfo.class, StoreInfo.P_StorePurgeInfos, modelStorePurgeInfos);
    
        return modelStorePurgeInfos;
    }
    public StoreTransmitInfoModel getStoreTransmitInfosModel() {
        if (modelStoreTransmitInfos != null) return modelStoreTransmitInfos;
        modelStoreTransmitInfos = new StoreTransmitInfoModel(getStoreTransmitInfos());
        modelStoreTransmitInfos.setDisplayName("Store Transmit Info");
        modelStoreTransmitInfos.setPluralDisplayName("Store Transmit Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getStoreTransmitInfos())) {
            modelStoreTransmitInfos.setCreateUI(false);
        }
        modelStoreTransmitInfos.setForJfc(getForJfc());
        modelStoreTransmitInfos.setAllowNew(true);
        modelStoreTransmitInfos.setAllowSave(true);
        modelStoreTransmitInfos.setAllowAdd(false);
        modelStoreTransmitInfos.setAllowMove(false);
        modelStoreTransmitInfos.setAllowRemove(false);
        modelStoreTransmitInfos.setAllowDelete(true);
        modelStoreTransmitInfos.setAllowRefresh(false);
        modelStoreTransmitInfos.setAllowSearch(false);
        modelStoreTransmitInfos.setAllowHubSearch(false);
        modelStoreTransmitInfos.setAllowGotoEdit(true);
        modelStoreTransmitInfos.setViewOnly(getViewOnly());
        modelStoreTransmitInfos.setAllowNew(true);
        modelStoreTransmitInfos.setAllowTableFilter(true);
        modelStoreTransmitInfos.setAllowTableSorting(true);
        modelStoreTransmitInfos.setAllowMultiSelect(false);
        modelStoreTransmitInfos.setAllowCopy(false);
        modelStoreTransmitInfos.setAllowCut(false);
        modelStoreTransmitInfos.setAllowPaste(false);
        // call StoreInfo.storeTransmitInfosModelCallback(StoreTransmitInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreInfo.class, StoreInfo.P_StoreTransmitInfos, modelStoreTransmitInfos);
    
        return modelStoreTransmitInfos;
    }
    
    public StoreSearchModel getStoreSearchModel() {
        if (modelStoreSearch != null) return modelStoreSearch;
        modelStoreSearch = new StoreSearchModel();
        HubSelectDelegate.adoptWhereHub(modelStoreSearch.getHub(), StoreInfo.P_Store, getHub());
        return modelStoreSearch;
    }
    
    public HubCopy<StoreInfo> createHubCopy() {
        Hub<StoreInfo> hubStoreInfox = new Hub<>(StoreInfo.class);
        HubCopy<StoreInfo> hc = new HubCopy<>(getHub(), hubStoreInfox, true);
        return hc;
    }
    public StoreInfoModel createCopy() {
        StoreInfoModel mod = new StoreInfoModel(createHubCopy().getHub());
        return mod;
    }
}

