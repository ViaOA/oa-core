// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.BatchModel;
import com.corptostore.model.ReceiveModel;
import com.corptostore.model.SendModel;
import com.corptostore.model.StoreInfoModel;
import com.corptostore.model.StoreModel;
import com.corptostore.model.StoreTransmitBatchModel;
import com.corptostore.model.TransmitBatchModel;
import com.corptostore.model.TransmitModel;
import com.corptostore.model.filter.StoreTestFilterFilterModel;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Receive;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreInfo;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.TransmitBatch;
import com.corptostore.model.search.BatchSearchModel;
import com.corptostore.model.search.ReceiveSearchModel;
import com.corptostore.model.search.SendSearchModel;
import com.corptostore.model.search.StoreTransmitBatchSearchModel;
import com.corptostore.model.search.TransmitBatchSearchModel;
import com.corptostore.model.search.TransmitSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class StoreModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(StoreModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      testFilterFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<Store> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<Store> hubUnfiltered;
    protected Hub<Store> hubTestFilterFilteredHub;
    // main hub that points to hubUnfiltered, hubTestFilterFilteredHub
    protected Hub<Store> hub;
    // selected stores
    protected Hub<Store> hubMultiSelect;
    // detail hubs
    protected Hub<Batch> hubFromBatches;
    protected Hub<Receive> hubReceives;
    protected Hub<Send> hubSends;
    protected Hub<StoreInfo> hubStoreInfos;
    protected Hub<StoreTransmitBatch> hubStoreTransmitBatches;
    protected Hub<Batch> hubToBatches;
    protected Hub<Transmit> hubTransmits;
    
    // pickFrom
    protected Hub<TransmitBatch> hubStoreTransmitBatchesPickFromTransmitBatch;
    
    // ObjectModels
    protected BatchModel modelFromBatches;
    protected ReceiveModel modelReceives;
    protected SendModel modelSends;
    protected StoreInfoModel modelStoreInfos;
    protected StoreTransmitBatchModel modelStoreTransmitBatches;
    protected BatchModel modelToBatches;
    protected TransmitModel modelTransmits;
    
    // pickFrom
    protected TransmitBatchModel modelStoreTransmitBatchesPickFromTransmitBatch;
    protected TransmitBatchSearchModel modelStoreTransmitBatchesPickFromTransmitBatchSearch;
    
    // SearchModels used for references
    protected BatchSearchModel modelFromBatchesSearch;
    protected ReceiveSearchModel modelReceivesSearch;
    protected SendSearchModel modelSendsSearch;
    protected StoreTransmitBatchSearchModel modelStoreTransmitBatchesSearch;
    protected BatchSearchModel modelToBatchesSearch;
    protected TransmitSearchModel modelTransmitsSearch;
    
    // FilterModels
    protected StoreTestFilterFilterModel modelStoreTestFilterFilter;
    
    public StoreModel() {
        setDisplayName("Store");
        setPluralDisplayName("Stores");
    }
    
    public StoreModel(Hub<Store> hubStore) {
        this();
        if (hubStore != null) HubDelegate.setObjectClass(hubStore, Store.class);
        this.hubOriginal = hubStore;
    }
    public StoreModel(Store store) {
        this();
        getHub().add(store);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useTestFilterFilteredHub() {
        getHub().setSharedHub(getTestFilterFilteredHub(), true);
    }
    
    public Hub<Store> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<Store>(Store.class);
        }
        return hubOriginal;
    }
    
    public Hub<Batch> getFromBatches() {
        // createMethod=false, used by getFromBatchesSearchModel() for searches
        if (hubFromBatches != null) return hubFromBatches;
        hubFromBatches = new Hub<Batch>(Batch.class);
        hubFromBatches.setSelectWhereHub(getHub(), Store.P_FromBatches);
        getHub().onChangeAO(hubEvent -> hubFromBatches.clear());
        return hubFromBatches;
    }
    public Hub<Receive> getReceives() {
        // createMethod=false, used by getReceivesSearchModel() for searches
        if (hubReceives != null) return hubReceives;
        hubReceives = new Hub<Receive>(Receive.class);
        hubReceives.setSelectWhereHub(getHub(), Store.P_Receives);
        getHub().onChangeAO(hubEvent -> hubReceives.clear());
        return hubReceives;
    }
    public Hub<Send> getSends() {
        // createMethod=false, used by getSendsSearchModel() for searches
        if (hubSends != null) return hubSends;
        hubSends = new Hub<Send>(Send.class);
        hubSends.setSelectWhereHub(getHub(), Store.P_Sends);
        getHub().onChangeAO(hubEvent -> hubSends.clear());
        return hubSends;
    }
    public Hub<StoreInfo> getStoreInfos() {
        if (hubStoreInfos == null) {
            hubStoreInfos = getHub().getDetailHub(Store.P_StoreInfos);
        }
        return hubStoreInfos;
    }
    public Hub<StoreTransmitBatch> getStoreTransmitBatches() {
        if (hubStoreTransmitBatches == null) {
            hubStoreTransmitBatches = getHub().getDetailHub(Store.P_StoreTransmitBatches);
        }
        return hubStoreTransmitBatches;
    }
    public Hub<Batch> getToBatches() {
        // createMethod=false, used by getToBatchesSearchModel() for searches
        if (hubToBatches != null) return hubToBatches;
        hubToBatches = new Hub<Batch>(Batch.class);
        hubToBatches.setSelectWhereHub(getHub(), Store.P_ToBatches);
        getHub().onChangeAO(hubEvent -> hubToBatches.clear());
        return hubToBatches;
    }
    public Hub<Transmit> getTransmits() {
        // createMethod=false, used by getTransmitsSearchModel() for searches
        if (hubTransmits != null) return hubTransmits;
        hubTransmits = new Hub<Transmit>(Transmit.class);
        hubTransmits.setSelectWhereHub(getHub(), Store.P_Transmits);
        getHub().onChangeAO(hubEvent -> hubTransmits.clear());
        return hubTransmits;
    }
    public Hub<TransmitBatch> getStoreTransmitBatchesPickFromTransmitBatchHub() {
        if (hubStoreTransmitBatchesPickFromTransmitBatch != null) return hubStoreTransmitBatchesPickFromTransmitBatch;
        hubStoreTransmitBatchesPickFromTransmitBatch = new Hub<TransmitBatch>(TransmitBatch.class);
        return hubStoreTransmitBatchesPickFromTransmitBatch;
    }
    public Hub<Store> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<Store>(Store.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<Store> getTestFilterFilteredHub() {
        if (hubTestFilterFilteredHub == null) {
            hubTestFilterFilteredHub = new Hub<Store>(Store.class);
        }
        return hubTestFilterFilteredHub;
    }
    
    public Store getStore() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<Store> getHub() {
        if (hub == null) {
            hub = new Hub<Store>(Store.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<Store> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Store>(Store.class);
        }
        return hubMultiSelect;
    }
    
    public BatchModel getFromBatchesModel() {
        if (modelFromBatches != null) return modelFromBatches;
        modelFromBatches = new BatchModel(getFromBatches());
        modelFromBatches.setDisplayName("Batch");
        modelFromBatches.setPluralDisplayName("Batches");
        modelFromBatches.setForJfc(getForJfc());
        modelFromBatches.setAllowNew(false);
        modelFromBatches.setAllowSave(true);
        modelFromBatches.setAllowAdd(false);
        modelFromBatches.setAllowMove(false);
        modelFromBatches.setAllowRemove(false);
        modelFromBatches.setAllowDelete(true);
        modelFromBatches.setAllowRefresh(true);
        modelFromBatches.setAllowSearch(true);
        modelFromBatches.setAllowHubSearch(false);
        modelFromBatches.setAllowGotoEdit(true);
        modelFromBatches.setViewOnly(getViewOnly());
        modelFromBatches.setAllowNew(false);
        modelFromBatches.setAllowTableFilter(true);
        modelFromBatches.setAllowTableSorting(true);
        modelFromBatches.setAllowMultiSelect(false);
        modelFromBatches.setAllowCopy(false);
        modelFromBatches.setAllowCut(false);
        modelFromBatches.setAllowPaste(false);
        // call Store.fromBatchesModelCallback(BatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Store.class, Store.P_FromBatches, modelFromBatches);
    
        return modelFromBatches;
    }
    public ReceiveModel getReceivesModel() {
        if (modelReceives != null) return modelReceives;
        modelReceives = new ReceiveModel(getReceives());
        modelReceives.setDisplayName("Receive");
        modelReceives.setPluralDisplayName("Receives");
        modelReceives.setForJfc(getForJfc());
        modelReceives.setAllowNew(false);
        modelReceives.setAllowSave(true);
        modelReceives.setAllowAdd(false);
        modelReceives.setAllowMove(false);
        modelReceives.setAllowRemove(false);
        modelReceives.setAllowDelete(true);
        modelReceives.setAllowRefresh(true);
        modelReceives.setAllowSearch(true);
        modelReceives.setAllowHubSearch(false);
        modelReceives.setAllowGotoEdit(true);
        modelReceives.setViewOnly(getViewOnly());
        modelReceives.setAllowNew(false);
        modelReceives.setAllowTableFilter(true);
        modelReceives.setAllowTableSorting(true);
        modelReceives.setAllowMultiSelect(false);
        modelReceives.setAllowCopy(false);
        modelReceives.setAllowCut(false);
        modelReceives.setAllowPaste(false);
        // call Store.receivesModelCallback(ReceiveModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Store.class, Store.P_Receives, modelReceives);
    
        return modelReceives;
    }
    public SendModel getSendsModel() {
        if (modelSends != null) return modelSends;
        modelSends = new SendModel(getSends());
        modelSends.setDisplayName("Send");
        modelSends.setPluralDisplayName("Sends");
        modelSends.setForJfc(getForJfc());
        modelSends.setAllowNew(false);
        modelSends.setAllowSave(true);
        modelSends.setAllowAdd(false);
        modelSends.setAllowMove(false);
        modelSends.setAllowRemove(false);
        modelSends.setAllowDelete(true);
        modelSends.setAllowRefresh(true);
        modelSends.setAllowSearch(true);
        modelSends.setAllowHubSearch(false);
        modelSends.setAllowGotoEdit(true);
        modelSends.setViewOnly(getViewOnly());
        modelSends.setAllowNew(false);
        modelSends.setAllowTableFilter(true);
        modelSends.setAllowTableSorting(true);
        modelSends.setAllowMultiSelect(false);
        modelSends.setAllowCopy(false);
        modelSends.setAllowCut(false);
        modelSends.setAllowPaste(false);
        // call Store.sendsModelCallback(SendModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Store.class, Store.P_Sends, modelSends);
    
        return modelSends;
    }
    public StoreInfoModel getStoreInfosModel() {
        if (modelStoreInfos != null) return modelStoreInfos;
        modelStoreInfos = new StoreInfoModel(getStoreInfos());
        modelStoreInfos.setDisplayName("Store Info");
        modelStoreInfos.setPluralDisplayName("Store Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getStoreInfos())) {
            modelStoreInfos.setCreateUI(false);
        }
        modelStoreInfos.setForJfc(getForJfc());
        modelStoreInfos.setAllowNew(false);
        modelStoreInfos.setAllowSave(true);
        modelStoreInfos.setAllowAdd(false);
        modelStoreInfos.setAllowMove(false);
        modelStoreInfos.setAllowRemove(false);
        modelStoreInfos.setAllowDelete(true);
        modelStoreInfos.setAllowRefresh(false);
        modelStoreInfos.setAllowSearch(false);
        modelStoreInfos.setAllowHubSearch(false);
        modelStoreInfos.setAllowGotoEdit(true);
        modelStoreInfos.setViewOnly(getViewOnly());
        modelStoreInfos.setAllowNew(false);
        modelStoreInfos.setAllowTableFilter(true);
        modelStoreInfos.setAllowTableSorting(true);
        modelStoreInfos.setAllowMultiSelect(false);
        modelStoreInfos.setAllowCopy(false);
        modelStoreInfos.setAllowCut(false);
        modelStoreInfos.setAllowPaste(false);
        // call Store.storeInfosModelCallback(StoreInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Store.class, Store.P_StoreInfos, modelStoreInfos);
    
        return modelStoreInfos;
    }
    public StoreTransmitBatchModel getStoreTransmitBatchesModel() {
        if (modelStoreTransmitBatches != null) return modelStoreTransmitBatches;
        modelStoreTransmitBatches = new StoreTransmitBatchModel(getStoreTransmitBatches());
        modelStoreTransmitBatches.setDisplayName("Store Transmit Batch");
        modelStoreTransmitBatches.setPluralDisplayName("Store Transmit Batches");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getStoreTransmitBatches())) {
            modelStoreTransmitBatches.setCreateUI(false);
        }
        modelStoreTransmitBatches.setForJfc(getForJfc());
        modelStoreTransmitBatches.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick TransmitBatch
        modelStoreTransmitBatches.setAllowSave(true);
        modelStoreTransmitBatches.setAllowAdd(true); // Add is overwritten to create new StoreTransmitBatch by first selecting TransmitBatch
        modelStoreTransmitBatches.setAllowMove(false);
        modelStoreTransmitBatches.setAllowRemove(false);
        modelStoreTransmitBatches.setAllowDelete(true);
        modelStoreTransmitBatches.setAllowRefresh(true);
        modelStoreTransmitBatches.setAllowSearch(false);
        modelStoreTransmitBatches.setAllowHubSearch(true);
        modelStoreTransmitBatches.setAllowGotoEdit(true);
        modelStoreTransmitBatches.setViewOnly(getViewOnly());
        modelStoreTransmitBatches.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick TransmitBatch
        modelStoreTransmitBatches.setAllowTableFilter(true);
        modelStoreTransmitBatches.setAllowTableSorting(true);
        modelStoreTransmitBatches.setAllowMultiSelect(false);
        modelStoreTransmitBatches.setAllowCopy(false);
        modelStoreTransmitBatches.setAllowCut(false);
        modelStoreTransmitBatches.setAllowPaste(false);
        // call Store.storeTransmitBatchesModelCallback(StoreTransmitBatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Store.class, Store.P_StoreTransmitBatches, modelStoreTransmitBatches);
    
        return modelStoreTransmitBatches;
    }
    public BatchModel getToBatchesModel() {
        if (modelToBatches != null) return modelToBatches;
        modelToBatches = new BatchModel(getToBatches());
        modelToBatches.setDisplayName("Batch");
        modelToBatches.setPluralDisplayName("Batches");
        modelToBatches.setForJfc(getForJfc());
        modelToBatches.setAllowNew(false);
        modelToBatches.setAllowSave(true);
        modelToBatches.setAllowAdd(false);
        modelToBatches.setAllowMove(false);
        modelToBatches.setAllowRemove(false);
        modelToBatches.setAllowDelete(true);
        modelToBatches.setAllowRefresh(true);
        modelToBatches.setAllowSearch(true);
        modelToBatches.setAllowHubSearch(false);
        modelToBatches.setAllowGotoEdit(true);
        modelToBatches.setViewOnly(getViewOnly());
        modelToBatches.setAllowNew(false);
        modelToBatches.setAllowTableFilter(true);
        modelToBatches.setAllowTableSorting(true);
        modelToBatches.setAllowMultiSelect(false);
        modelToBatches.setAllowCopy(false);
        modelToBatches.setAllowCut(false);
        modelToBatches.setAllowPaste(false);
        // call Store.toBatchesModelCallback(BatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Store.class, Store.P_ToBatches, modelToBatches);
    
        return modelToBatches;
    }
    public TransmitModel getTransmitsModel() {
        if (modelTransmits != null) return modelTransmits;
        modelTransmits = new TransmitModel(getTransmits());
        modelTransmits.setDisplayName("Transmit");
        modelTransmits.setPluralDisplayName("Transmits");
        modelTransmits.setForJfc(getForJfc());
        modelTransmits.setAllowNew(false);
        modelTransmits.setAllowSave(true);
        modelTransmits.setAllowAdd(false);
        modelTransmits.setAllowMove(false);
        modelTransmits.setAllowRemove(false);
        modelTransmits.setAllowDelete(true);
        modelTransmits.setAllowRefresh(true);
        modelTransmits.setAllowSearch(true);
        modelTransmits.setAllowHubSearch(false);
        modelTransmits.setAllowGotoEdit(true);
        modelTransmits.setViewOnly(getViewOnly());
        modelTransmits.setAllowNew(false);
        modelTransmits.setAllowTableFilter(true);
        modelTransmits.setAllowTableSorting(true);
        modelTransmits.setAllowMultiSelect(false);
        modelTransmits.setAllowCopy(false);
        modelTransmits.setAllowCut(false);
        modelTransmits.setAllowPaste(false);
        // call Store.transmitsModelCallback(TransmitModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Store.class, Store.P_Transmits, modelTransmits);
    
        return modelTransmits;
    }
    
    public TransmitBatchModel getStoreTransmitBatchesPickFromTransmitBatchModel() {
        if (modelStoreTransmitBatchesPickFromTransmitBatch != null) return modelStoreTransmitBatchesPickFromTransmitBatch;
        modelStoreTransmitBatchesPickFromTransmitBatch = new TransmitBatchModel(getStoreTransmitBatchesPickFromTransmitBatchHub());
        modelStoreTransmitBatchesPickFromTransmitBatch.setDisplayName("Store Transmit Batch");
        modelStoreTransmitBatchesPickFromTransmitBatch.setPluralDisplayName("Store Transmit Batches");
        modelStoreTransmitBatchesPickFromTransmitBatch.setForJfc(getForJfc());
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowNew(false);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowSave(true);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowAdd(false);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowMove(false);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowRemove(false);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowDelete(false);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowRefresh(true);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowSearch(true);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowHubSearch(true);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowGotoEdit(true);
        modelStoreTransmitBatchesPickFromTransmitBatch.setViewOnly(getViewOnly());
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowNew(false);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowTableFilter(true);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowTableSorting(true);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowCut(false);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowCopy(false);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowPaste(false);
        modelStoreTransmitBatchesPickFromTransmitBatch.setAllowMultiSelect(true);
        new HubMerger<StoreTransmitBatch, TransmitBatch>(getStoreTransmitBatches(), modelStoreTransmitBatchesPickFromTransmitBatch.getMultiSelectHub(), StoreTransmitBatch.P_TransmitBatch);
        return modelStoreTransmitBatchesPickFromTransmitBatch;
    }
    public TransmitBatchSearchModel getStoreTransmitBatchesPickFromTransmitBatchSearchModel() {
        if (modelStoreTransmitBatchesPickFromTransmitBatchSearch != null) return modelStoreTransmitBatchesPickFromTransmitBatchSearch;
        return modelStoreTransmitBatchesPickFromTransmitBatchSearch;
    }
    public BatchSearchModel getFromBatchesSearchModel() {
        if (modelFromBatchesSearch != null) return modelFromBatchesSearch;
        modelFromBatchesSearch = new BatchSearchModel(getFromBatches()); // createMethod=false, directly uses hub
        return modelFromBatchesSearch;
    }
    public ReceiveSearchModel getReceivesSearchModel() {
        if (modelReceivesSearch != null) return modelReceivesSearch;
        modelReceivesSearch = new ReceiveSearchModel(getReceives()); // createMethod=false, directly uses hub
        return modelReceivesSearch;
    }
    public SendSearchModel getSendsSearchModel() {
        if (modelSendsSearch != null) return modelSendsSearch;
        modelSendsSearch = new SendSearchModel(getSends()); // createMethod=false, directly uses hub
        return modelSendsSearch;
    }
    public StoreTransmitBatchSearchModel getStoreTransmitBatchesSearchModel() {
        if (modelStoreTransmitBatchesSearch != null) return modelStoreTransmitBatchesSearch;
        modelStoreTransmitBatchesSearch = new StoreTransmitBatchSearchModel();
        return modelStoreTransmitBatchesSearch;
    }
    public BatchSearchModel getToBatchesSearchModel() {
        if (modelToBatchesSearch != null) return modelToBatchesSearch;
        modelToBatchesSearch = new BatchSearchModel(getToBatches()); // createMethod=false, directly uses hub
        return modelToBatchesSearch;
    }
    public TransmitSearchModel getTransmitsSearchModel() {
        if (modelTransmitsSearch != null) return modelTransmitsSearch;
        modelTransmitsSearch = new TransmitSearchModel(getTransmits()); // createMethod=false, directly uses hub
        return modelTransmitsSearch;
    }
    
    public StoreTestFilterFilterModel getStoreTestFilterFilterModel() {
        if (modelStoreTestFilterFilter == null) {
            modelStoreTestFilterFilter = new StoreTestFilterFilterModel(getUnfilteredHub(), getTestFilterFilteredHub());
            new HubShareAO(getUnfilteredHub(), getTestFilterFilteredHub());
        }
        return modelStoreTestFilterFilter;
    }
    
    public HubCopy<Store> createHubCopy() {
        Hub<Store> hubStorex = new Hub<>(Store.class);
        HubCopy<Store> hc = new HubCopy<>(getHub(), hubStorex, true);
        return hc;
    }
    public StoreModel createCopy() {
        StoreModel mod = new StoreModel(createHubCopy().getHub());
        return mod;
    }
}

