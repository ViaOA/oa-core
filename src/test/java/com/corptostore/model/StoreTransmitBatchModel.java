// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.BatchModel;
import com.corptostore.model.StoreBatchModel;
import com.corptostore.model.StoreModel;
import com.corptostore.model.StoreTransmitBatchModel;
import com.corptostore.model.TransmitBatchModel;
import com.corptostore.model.TransmitModel;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.TransmitBatch;
import com.corptostore.model.oa.propertypath.StoreTransmitBatchPP;
import com.corptostore.model.oa.propertypath.TransmitPP;
import com.corptostore.model.search.BatchSearchModel;
import com.corptostore.model.search.StoreBatchSearchModel;
import com.corptostore.model.search.StoreSearchModel;
import com.corptostore.model.search.TransmitBatchSearchModel;
import com.corptostore.model.search.TransmitSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class StoreTransmitBatchModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(StoreTransmitBatchModel.class.getName());
    
    // Hubs
    protected Hub<StoreTransmitBatch> hub;
    // selected storeTransmitBatches
    protected Hub<StoreTransmitBatch> hubMultiSelect;
    // detail hubs
    protected Hub<Store> hubStore;
    protected Hub<TransmitBatch> hubTransmitBatch;
    protected Hub<Transmit> hubSearchTransmits;
    protected Hub<StoreBatch> hubStoreBatches;
    
    // pickFrom
    protected Hub<Batch> hubStoreBatchesPickFromBatch;
    
    // ObjectModels
    protected StoreModel modelStore;
    protected TransmitBatchModel modelTransmitBatch;
    protected TransmitModel modelSearchTransmits;
    protected StoreBatchModel modelStoreBatches;
    
    // pickFrom
    protected BatchModel modelStoreBatchesPickFromBatch;
    protected BatchSearchModel modelStoreBatchesPickFromBatchSearch;
    
    // SearchModels used for references
    protected StoreSearchModel modelStoreSearch;
    protected TransmitBatchSearchModel modelTransmitBatchSearch;
    protected TransmitSearchModel modelSearchTransmitsSearch;
    protected StoreBatchSearchModel modelStoreBatchesSearch;
    
    public StoreTransmitBatchModel() {
        setDisplayName("Store Transmit Batch");
        setPluralDisplayName("Store Transmit Batches");
    }
    
    public StoreTransmitBatchModel(Hub<StoreTransmitBatch> hubStoreTransmitBatch) {
        this();
        if (hubStoreTransmitBatch != null) HubDelegate.setObjectClass(hubStoreTransmitBatch, StoreTransmitBatch.class);
        this.hub = hubStoreTransmitBatch;
    }
    public StoreTransmitBatchModel(StoreTransmitBatch storeTransmitBatch) {
        this();
        getHub().add(storeTransmitBatch);
        getHub().setPos(0);
    }
    
    public Hub<StoreTransmitBatch> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Store> getStoreHub() {
        if (hubStore != null) return hubStore;
        // this is the owner, use detailHub
        hubStore = getHub().getDetailHub(StoreTransmitBatch.P_Store);
        return hubStore;
    }
    public Hub<TransmitBatch> getTransmitBatchHub() {
        if (hubTransmitBatch != null) return hubTransmitBatch;
        hubTransmitBatch = getHub().getDetailHub(StoreTransmitBatch.P_TransmitBatch);
        return hubTransmitBatch;
    }
    public Hub<Transmit> getSearchTransmits() {
        // used by getSearchTransmitsSearchModel() for searches
        if (hubSearchTransmits != null) return hubSearchTransmits;
        hubSearchTransmits = new Hub<Transmit>(Transmit.class);
        return hubSearchTransmits;
    }
    public Hub<StoreBatch> getStoreBatches() {
        if (hubStoreBatches == null) {
            hubStoreBatches = getHub().getDetailHub(StoreTransmitBatch.P_StoreBatches);
        }
        return hubStoreBatches;
    }
    public Hub<Batch> getStoreBatchesPickFromBatchHub() {
        if (hubStoreBatchesPickFromBatch != null) return hubStoreBatchesPickFromBatch;
        hubStoreBatchesPickFromBatch = new Hub<Batch>(Batch.class);
        return hubStoreBatchesPickFromBatch;
    }
    public StoreTransmitBatch getStoreTransmitBatch() {
        return getHub().getAO();
    }
    
    public Hub<StoreTransmitBatch> getHub() {
        if (hub == null) {
            hub = new Hub<StoreTransmitBatch>(StoreTransmitBatch.class);
        }
        return hub;
    }
    
    public Hub<StoreTransmitBatch> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<StoreTransmitBatch>(StoreTransmitBatch.class);
        }
        return hubMultiSelect;
    }
    
    public StoreModel getStoreModel() {
        if (modelStore != null) return modelStore;
        modelStore = new StoreModel(getStoreHub());
        modelStore.setDisplayName("Store");
        modelStore.setPluralDisplayName("Stores");
        modelStore.setForJfc(getForJfc());
        modelStore.setAllowNew(false);
        modelStore.setAllowSave(true);
        modelStore.setAllowAdd(false);
        modelStore.setAllowRemove(false);
        modelStore.setAllowClear(false);
        modelStore.setAllowDelete(false);
        modelStore.setAllowSearch(false);
        modelStore.setAllowHubSearch(true);
        modelStore.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelStore.setCreateUI(li == null || !StoreTransmitBatch.P_Store.equalsIgnoreCase(li.getName()) );
        modelStore.setViewOnly(getViewOnly());
        // call StoreTransmitBatch.storeModelCallback(StoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreTransmitBatch.class, StoreTransmitBatch.P_Store, modelStore);
    
        return modelStore;
    }
    public TransmitBatchModel getTransmitBatchModel() {
        if (modelTransmitBatch != null) return modelTransmitBatch;
        modelTransmitBatch = new TransmitBatchModel(getTransmitBatchHub());
        modelTransmitBatch.setDisplayName("Transmit Batch");
        modelTransmitBatch.setPluralDisplayName("Transmit Batches");
        modelTransmitBatch.setForJfc(getForJfc());
        modelTransmitBatch.setAllowNew(false);
        modelTransmitBatch.setAllowSave(true);
        modelTransmitBatch.setAllowAdd(false);
        modelTransmitBatch.setAllowRemove(false);
        modelTransmitBatch.setAllowClear(false);
        modelTransmitBatch.setAllowDelete(false);
        modelTransmitBatch.setAllowSearch(false);
        modelTransmitBatch.setAllowHubSearch(true);
        modelTransmitBatch.setAllowGotoEdit(true);
        modelTransmitBatch.setViewOnly(getViewOnly());
        // call StoreTransmitBatch.transmitBatchModelCallback(TransmitBatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreTransmitBatch.class, StoreTransmitBatch.P_TransmitBatch, modelTransmitBatch);
    
        return modelTransmitBatch;
    }
    public TransmitModel getSearchTransmitsModel() {
        if (modelSearchTransmits != null) return modelSearchTransmits;
        modelSearchTransmits = new TransmitModel(getSearchTransmits());
        modelSearchTransmits.setDisplayName("Transmit");
        modelSearchTransmits.setPluralDisplayName("Transmits");
        modelSearchTransmits.setForJfc(getForJfc());
        modelSearchTransmits.setAllowNew(false);
        modelSearchTransmits.setAllowSave(true);
        modelSearchTransmits.setAllowAdd(false);
        modelSearchTransmits.setAllowMove(false);
        modelSearchTransmits.setAllowRemove(false);
        modelSearchTransmits.setAllowDelete(true);
        modelSearchTransmits.setAllowRefresh(true);
        modelSearchTransmits.setAllowSearch(true);
        modelSearchTransmits.setAllowHubSearch(false);
        modelSearchTransmits.setAllowGotoEdit(true);
        modelSearchTransmits.setViewOnly(getViewOnly());
        modelSearchTransmits.setAllowNew(false);
        modelSearchTransmits.setAllowTableFilter(true);
        modelSearchTransmits.setAllowTableSorting(true);
        modelSearchTransmits.setAllowMultiSelect(false);
        modelSearchTransmits.setAllowCopy(false);
        modelSearchTransmits.setAllowCut(false);
        modelSearchTransmits.setAllowPaste(false);
        // call StoreTransmitBatch.searchTransmitsModelCallback(TransmitModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreTransmitBatch.class, "SearchTransmits", modelSearchTransmits);
    
        return modelSearchTransmits;
    }
    public StoreBatchModel getStoreBatchesModel() {
        if (modelStoreBatches != null) return modelStoreBatches;
        modelStoreBatches = new StoreBatchModel(getStoreBatches());
        modelStoreBatches.setDisplayName("Store Batch");
        modelStoreBatches.setPluralDisplayName("Store Batches");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getStoreBatches())) {
            modelStoreBatches.setCreateUI(false);
        }
        modelStoreBatches.setForJfc(getForJfc());
        modelStoreBatches.setAllowNew(true);
        modelStoreBatches.setAllowSave(true);
        modelStoreBatches.setAllowAdd(true); // Add is overwritten to create new StoreBatch by first selecting Batch
        modelStoreBatches.setAllowMove(false);
        modelStoreBatches.setAllowRemove(false);
        modelStoreBatches.setAllowDelete(true);
        modelStoreBatches.setAllowRefresh(true);
        modelStoreBatches.setAllowSearch(false);
        modelStoreBatches.setAllowHubSearch(true);
        modelStoreBatches.setAllowGotoEdit(true);
        modelStoreBatches.setViewOnly(getViewOnly());
        modelStoreBatches.setAllowNew(true);
        modelStoreBatches.setAllowTableFilter(true);
        modelStoreBatches.setAllowTableSorting(true);
        modelStoreBatches.setAllowMultiSelect(false);
        modelStoreBatches.setAllowCopy(false);
        modelStoreBatches.setAllowCut(false);
        modelStoreBatches.setAllowPaste(false);
        // call StoreTransmitBatch.storeBatchesModelCallback(StoreBatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreTransmitBatch.class, StoreTransmitBatch.P_StoreBatches, modelStoreBatches);
    
        return modelStoreBatches;
    }
    
    public BatchModel getStoreBatchesPickFromBatchModel() {
        if (modelStoreBatchesPickFromBatch != null) return modelStoreBatchesPickFromBatch;
        modelStoreBatchesPickFromBatch = new BatchModel(getStoreBatchesPickFromBatchHub());
        modelStoreBatchesPickFromBatch.setDisplayName("Store Batch");
        modelStoreBatchesPickFromBatch.setPluralDisplayName("Store Batches");
        modelStoreBatchesPickFromBatch.setForJfc(getForJfc());
        modelStoreBatchesPickFromBatch.setAllowNew(false);
        modelStoreBatchesPickFromBatch.setAllowSave(true);
        modelStoreBatchesPickFromBatch.setAllowAdd(false);
        modelStoreBatchesPickFromBatch.setAllowMove(false);
        modelStoreBatchesPickFromBatch.setAllowRemove(false);
        modelStoreBatchesPickFromBatch.setAllowDelete(false);
        modelStoreBatchesPickFromBatch.setAllowRefresh(true);
        modelStoreBatchesPickFromBatch.setAllowSearch(true);
        modelStoreBatchesPickFromBatch.setAllowHubSearch(true);
        modelStoreBatchesPickFromBatch.setAllowGotoEdit(true);
        modelStoreBatchesPickFromBatch.setViewOnly(getViewOnly());
        modelStoreBatchesPickFromBatch.setAllowNew(false);
        modelStoreBatchesPickFromBatch.setAllowTableFilter(true);
        modelStoreBatchesPickFromBatch.setAllowTableSorting(true);
        modelStoreBatchesPickFromBatch.setAllowCut(false);
        modelStoreBatchesPickFromBatch.setAllowCopy(false);
        modelStoreBatchesPickFromBatch.setAllowPaste(false);
        modelStoreBatchesPickFromBatch.setAllowMultiSelect(true);
        new HubMerger<StoreBatch, Batch>(getStoreBatches(), modelStoreBatchesPickFromBatch.getMultiSelectHub(), StoreBatch.P_Batch);
        return modelStoreBatchesPickFromBatch;
    }
    public BatchSearchModel getStoreBatchesPickFromBatchSearchModel() {
        if (modelStoreBatchesPickFromBatchSearch != null) return modelStoreBatchesPickFromBatchSearch;
        return modelStoreBatchesPickFromBatchSearch;
    }
    public StoreSearchModel getStoreSearchModel() {
        if (modelStoreSearch != null) return modelStoreSearch;
        modelStoreSearch = new StoreSearchModel();
        HubSelectDelegate.adoptWhereHub(modelStoreSearch.getHub(), StoreTransmitBatch.P_Store, getHub());
        return modelStoreSearch;
    }
    public TransmitBatchSearchModel getTransmitBatchSearchModel() {
        if (modelTransmitBatchSearch != null) return modelTransmitBatchSearch;
        modelTransmitBatchSearch = new TransmitBatchSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTransmitBatchSearch.getHub(), StoreTransmitBatch.P_TransmitBatch, getHub());
        return modelTransmitBatchSearch;
    }
    public TransmitSearchModel getSearchTransmitsSearchModel() {
        if (modelSearchTransmitsSearch != null) return modelSearchTransmitsSearch;
        modelSearchTransmitsSearch = new TransmitSearchModel(getSearchTransmits()); // use hub for the search results
        OAFilter filter = new OAEqualPathFilter(StoreTransmitBatchModel.this.getHub(), TransmitPP.transmitBatch().pp, StoreTransmitBatchPP.transmitBatch().pp);
        modelSearchTransmitsSearch.getTransmitSearch().setExtraWhereFilter(filter);
        return modelSearchTransmitsSearch;
    }
    public StoreBatchSearchModel getStoreBatchesSearchModel() {
        if (modelStoreBatchesSearch != null) return modelStoreBatchesSearch;
        modelStoreBatchesSearch = new StoreBatchSearchModel();
        return modelStoreBatchesSearch;
    }
    
    public HubCopy<StoreTransmitBatch> createHubCopy() {
        Hub<StoreTransmitBatch> hubStoreTransmitBatchx = new Hub<>(StoreTransmitBatch.class);
        HubCopy<StoreTransmitBatch> hc = new HubCopy<>(getHub(), hubStoreTransmitBatchx, true);
        return hc;
    }
    public StoreTransmitBatchModel createCopy() {
        StoreTransmitBatchModel mod = new StoreTransmitBatchModel(createHubCopy().getHub());
        return mod;
    }
}

