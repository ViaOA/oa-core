// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.StoreInfoModel;
import com.corptostore.model.StoreTransmitBatchModel;
import com.corptostore.model.StoreTransmitInfoModel;
import com.corptostore.model.oa.StoreInfo;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.StoreTransmitInfo;
import com.corptostore.model.oa.propertypath.StoreTransmitBatchPP;
import com.corptostore.model.oa.propertypath.StoreTransmitInfoPP;
import com.corptostore.model.search.StoreTransmitBatchSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class StoreTransmitInfoModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(StoreTransmitInfoModel.class.getName());
    
    // Hubs
    protected Hub<StoreTransmitInfo> hub;
    // selected storeTransmitInfos
    protected Hub<StoreTransmitInfo> hubMultiSelect;
    // detail hubs
    protected Hub<StoreInfo> hubStoreInfo;
    protected Hub<StoreTransmitBatch> hubStoreTransmitBatch;
    
    // ObjectModels
    protected StoreInfoModel modelStoreInfo;
    protected StoreTransmitBatchModel modelStoreTransmitBatch;
    
    // SearchModels used for references
    protected StoreTransmitBatchSearchModel modelStoreTransmitBatchSearch;
    
    public StoreTransmitInfoModel() {
        setDisplayName("Store Transmit Info");
        setPluralDisplayName("Store Transmit Infos");
    }
    
    public StoreTransmitInfoModel(Hub<StoreTransmitInfo> hubStoreTransmitInfo) {
        this();
        if (hubStoreTransmitInfo != null) HubDelegate.setObjectClass(hubStoreTransmitInfo, StoreTransmitInfo.class);
        this.hub = hubStoreTransmitInfo;
    }
    public StoreTransmitInfoModel(StoreTransmitInfo storeTransmitInfo) {
        this();
        getHub().add(storeTransmitInfo);
        getHub().setPos(0);
    }
    
    public Hub<StoreTransmitInfo> getOriginalHub() {
        return getHub();
    }
    
    public Hub<StoreInfo> getStoreInfoHub() {
        if (hubStoreInfo != null) return hubStoreInfo;
        // this is the owner, use detailHub
        hubStoreInfo = getHub().getDetailHub(StoreTransmitInfo.P_StoreInfo);
        return hubStoreInfo;
    }
    public Hub<StoreTransmitBatch> getStoreTransmitBatchHub() {
        if (hubStoreTransmitBatch != null) return hubStoreTransmitBatch;
        hubStoreTransmitBatch = getHub().getDetailHub(StoreTransmitInfo.P_StoreTransmitBatch);
        return hubStoreTransmitBatch;
    }
    public StoreTransmitInfo getStoreTransmitInfo() {
        return getHub().getAO();
    }
    
    public Hub<StoreTransmitInfo> getHub() {
        if (hub == null) {
            hub = new Hub<StoreTransmitInfo>(StoreTransmitInfo.class);
        }
        return hub;
    }
    
    public Hub<StoreTransmitInfo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<StoreTransmitInfo>(StoreTransmitInfo.class);
        }
        return hubMultiSelect;
    }
    
    public StoreInfoModel getStoreInfoModel() {
        if (modelStoreInfo != null) return modelStoreInfo;
        modelStoreInfo = new StoreInfoModel(getStoreInfoHub());
        modelStoreInfo.setDisplayName("Store Info");
        modelStoreInfo.setPluralDisplayName("Store Infos");
        modelStoreInfo.setForJfc(getForJfc());
        modelStoreInfo.setAllowNew(false);
        modelStoreInfo.setAllowSave(true);
        modelStoreInfo.setAllowAdd(false);
        modelStoreInfo.setAllowRemove(false);
        modelStoreInfo.setAllowClear(false);
        modelStoreInfo.setAllowDelete(false);
        modelStoreInfo.setAllowSearch(false);
        modelStoreInfo.setAllowHubSearch(false);
        modelStoreInfo.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelStoreInfo.setCreateUI(li == null || !StoreTransmitInfo.P_StoreInfo.equalsIgnoreCase(li.getName()) );
        modelStoreInfo.setViewOnly(getViewOnly());
        // call StoreTransmitInfo.storeInfoModelCallback(StoreInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreTransmitInfo.class, StoreTransmitInfo.P_StoreInfo, modelStoreInfo);
    
        return modelStoreInfo;
    }
    public StoreTransmitBatchModel getStoreTransmitBatchModel() {
        if (modelStoreTransmitBatch != null) return modelStoreTransmitBatch;
        modelStoreTransmitBatch = new StoreTransmitBatchModel(getStoreTransmitBatchHub());
        modelStoreTransmitBatch.setDisplayName("Store Transmit Batch");
        modelStoreTransmitBatch.setPluralDisplayName("Store Transmit Batches");
        modelStoreTransmitBatch.setForJfc(getForJfc());
        modelStoreTransmitBatch.setAllowNew(false);
        modelStoreTransmitBatch.setAllowSave(true);
        modelStoreTransmitBatch.setAllowAdd(false);
        modelStoreTransmitBatch.setAllowRemove(true);
        modelStoreTransmitBatch.setAllowClear(true);
        modelStoreTransmitBatch.setAllowDelete(false);
        modelStoreTransmitBatch.setAllowSearch(true);
        modelStoreTransmitBatch.setAllowHubSearch(true);
        modelStoreTransmitBatch.setAllowGotoEdit(true);
        modelStoreTransmitBatch.setViewOnly(true);
        // call StoreTransmitInfo.storeTransmitBatchModelCallback(StoreTransmitBatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(StoreTransmitInfo.class, StoreTransmitInfo.P_StoreTransmitBatch, modelStoreTransmitBatch);
    
        return modelStoreTransmitBatch;
    }
    
    public StoreTransmitBatchSearchModel getStoreTransmitBatchSearchModel() {
        if (modelStoreTransmitBatchSearch != null) return modelStoreTransmitBatchSearch;
        modelStoreTransmitBatchSearch = new StoreTransmitBatchSearchModel();
        OAFilter filter = new OAEqualPathFilter(StoreTransmitInfoModel.this.getHub(), StoreTransmitInfoPP.storeInfo().store().pp, StoreTransmitBatchPP.store().pp);
        modelStoreTransmitBatchSearch.getStoreTransmitBatchSearch().setExtraWhereFilter(filter);
        return modelStoreTransmitBatchSearch;
    }
    
    public HubCopy<StoreTransmitInfo> createHubCopy() {
        Hub<StoreTransmitInfo> hubStoreTransmitInfox = new Hub<>(StoreTransmitInfo.class);
        HubCopy<StoreTransmitInfo> hc = new HubCopy<>(getHub(), hubStoreTransmitInfox, true);
        return hc;
    }
    public StoreTransmitInfoModel createCopy() {
        StoreTransmitInfoModel mod = new StoreTransmitInfoModel(createHubCopy().getHub());
        return mod;
    }
}

