// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.EnvironmentModel;
import com.corptostore.model.StoreModel;
import com.corptostore.model.TesterModel;
import com.corptostore.model.TesterResultModel;
import com.corptostore.model.TesterStepModel;
import com.corptostore.model.TesterStoreModel;
import com.corptostore.model.TransmitBatchModel;
import com.corptostore.model.filter.TesterOpenFilterModel;
import com.corptostore.model.oa.Environment;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.TesterResult;
import com.corptostore.model.oa.TesterStep;
import com.corptostore.model.oa.TesterStore;
import com.corptostore.model.oa.TransmitBatch;
import com.corptostore.model.oa.filter.EnvironmentNonProdFilter;
import com.corptostore.model.search.StoreSearchModel;
import com.corptostore.model.search.TesterResultSearchModel;
import com.corptostore.model.search.TesterStepSearchModel;
import com.corptostore.model.search.TransmitBatchSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class TesterModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TesterModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      openFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<Tester> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<Tester> hubUnfiltered;
    protected Hub<Tester> hubOpenFilteredHub;
    // main hub that points to hubUnfiltered, hubOpenFilteredHub
    protected Hub<Tester> hub;
    // selected testers
    protected Hub<Tester> hubMultiSelect;
    // detail hubs
    protected Hub<TesterStep> hubCalcNextTesterStep;
    protected Hub<Environment> hubEnvironment;
    protected Hub<TransmitBatch> hubTransmitBatch;
    protected Hub<TesterResult> hubTesterResults;
    protected Hub<TesterStep> hubTesterSteps;
    protected Hub<TesterStore> hubTesterStores;
    
    // AddHubs used for references
    protected Hub<Environment> hubEnvironmentSelectFrom;
    
    // pickFrom
    protected Hub<Store> hubTesterStoresPickFromStore;
    
    // ObjectModels
    protected TesterStepModel modelCalcNextTesterStep;
    protected EnvironmentModel modelEnvironment;
    protected TransmitBatchModel modelTransmitBatch;
    protected TesterResultModel modelTesterResults;
    protected TesterStepModel modelTesterSteps;
    protected TesterStoreModel modelTesterStores;
    
    // selectFrom
    protected EnvironmentModel modelEnvironmentSelectFrom;
    
    // pickFrom
    protected StoreModel modelTesterStoresPickFromStore;
    protected StoreSearchModel modelTesterStoresPickFromStoreSearch;
    
    // SearchModels used for references
    protected TransmitBatchSearchModel modelTransmitBatchSearch;
    protected TesterResultSearchModel modelTesterResultsSearch;
    protected TesterStepSearchModel modelTesterStepsSearch;
    
    // FilterModels
    protected TesterOpenFilterModel modelTesterOpenFilter;
    
    public TesterModel() {
        setDisplayName("Tester");
        setPluralDisplayName("Testers");
    }
    
    public TesterModel(Hub<Tester> hubTester) {
        this();
        if (hubTester != null) HubDelegate.setObjectClass(hubTester, Tester.class);
        this.hubOriginal = hubTester;
    }
    public TesterModel(Tester tester) {
        this();
        getHub().add(tester);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useOpenFilteredHub() {
        getHub().setSharedHub(getOpenFilteredHub(), true);
    }
    
    public Hub<Tester> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<Tester>(Tester.class);
        }
        return hubOriginal;
    }
    
    public Hub<TesterStep> getCalcNextTesterStepHub() {
        if (hubCalcNextTesterStep != null) return hubCalcNextTesterStep;
        // this is a calculated
        hubCalcNextTesterStep = getHub().getDetailHub(Tester.P_CalcNextTesterStep);
        return hubCalcNextTesterStep;
    }
    public Hub<Environment> getEnvironmentHub() {
        if (hubEnvironment != null) return hubEnvironment;
        hubEnvironment = getHub().getDetailHub(Tester.P_Environment);
        return hubEnvironment;
    }
    public Hub<TransmitBatch> getTransmitBatchHub() {
        if (hubTransmitBatch != null) return hubTransmitBatch;
        hubTransmitBatch = getHub().getDetailHub(Tester.P_TransmitBatch);
        return hubTransmitBatch;
    }
    public Hub<TesterResult> getTesterResults() {
        if (hubTesterResults == null) {
            hubTesterResults = getHub().getDetailHub(Tester.P_TesterResults);
        }
        return hubTesterResults;
    }
    public Hub<TesterStep> getTesterSteps() {
        if (hubTesterSteps == null) {
            hubTesterSteps = getHub().getDetailHub(Tester.P_TesterSteps);
        }
        return hubTesterSteps;
    }
    public Hub<TesterStore> getTesterStores() {
        if (hubTesterStores == null) {
            hubTesterStores = getHub().getDetailHub(Tester.P_TesterStores);
        }
        return hubTesterStores;
    }
    public Hub<Environment> getEnvironmentSelectFromHub() {
        if (hubEnvironmentSelectFrom != null) return hubEnvironmentSelectFrom;
        hubEnvironmentSelectFrom = new Hub<Environment>(Environment.class);
        Hub<Environment>  hubEnvironmentSelectFrom2 = ModelDelegate.getEnvironments().createSharedHub();
        Hub<Environment> hubEnvironmentSelectFrom1 = new Hub<>(Environment.class);
        EnvironmentNonProdFilter filter = new EnvironmentNonProdFilter(hubEnvironmentSelectFrom2, hubEnvironmentSelectFrom1);
        hubEnvironmentSelectFrom = new Hub<>(Environment.class);
        HubCombined<Environment> hubCombined = new HubCombined(hubEnvironmentSelectFrom, hubEnvironmentSelectFrom1, getEnvironmentHub());
        hubEnvironmentSelectFrom.setLinkHub(getHub(), Tester.P_Environment); 
        return hubEnvironmentSelectFrom;
    }
    public Hub<Store> getTesterStoresPickFromStoreHub() {
        if (hubTesterStoresPickFromStore != null) return hubTesterStoresPickFromStore;
        hubTesterStoresPickFromStore = new Hub<Store>(Store.class);
        return hubTesterStoresPickFromStore;
    }
    public Hub<Tester> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<Tester>(Tester.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<Tester> getOpenFilteredHub() {
        if (hubOpenFilteredHub == null) {
            hubOpenFilteredHub = new Hub<Tester>(Tester.class);
        }
        return hubOpenFilteredHub;
    }
    
    public Tester getTester() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<Tester> getHub() {
        if (hub == null) {
            hub = new Hub<Tester>(Tester.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<Tester> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Tester>(Tester.class);
        }
        return hubMultiSelect;
    }
    
    public TesterStepModel getCalcNextTesterStepModel() {
        if (modelCalcNextTesterStep != null) return modelCalcNextTesterStep;
        modelCalcNextTesterStep = new TesterStepModel(getCalcNextTesterStepHub());
        modelCalcNextTesterStep.setDisplayName("Next Step");
        modelCalcNextTesterStep.setPluralDisplayName("Tester Steps");
        modelCalcNextTesterStep.setForJfc(getForJfc());
        modelCalcNextTesterStep.setAllowNew(false);
        modelCalcNextTesterStep.setAllowSave(false);
        modelCalcNextTesterStep.setAllowAdd(false);
        modelCalcNextTesterStep.setAllowRemove(false);
        modelCalcNextTesterStep.setAllowClear(false);
        modelCalcNextTesterStep.setAllowDelete(false);
        modelCalcNextTesterStep.setAllowSearch(false);
        modelCalcNextTesterStep.setAllowHubSearch(true);
        modelCalcNextTesterStep.setAllowGotoEdit(true);
        modelCalcNextTesterStep.setViewOnly(true);
        // call Tester.calcNextTesterStepModelCallback(TesterStepModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Tester.class, Tester.P_CalcNextTesterStep, modelCalcNextTesterStep);
    
        return modelCalcNextTesterStep;
    }
    public EnvironmentModel getEnvironmentModel() {
        if (modelEnvironment != null) return modelEnvironment;
        modelEnvironment = new EnvironmentModel(getEnvironmentHub());
        modelEnvironment.setDisplayName("Environment");
        modelEnvironment.setPluralDisplayName("Environments");
        modelEnvironment.setForJfc(getForJfc());
        modelEnvironment.setAllowNew(false);
        modelEnvironment.setAllowSave(true);
        modelEnvironment.setAllowAdd(false);
        modelEnvironment.setAllowRemove(false);
        modelEnvironment.setAllowClear(false);
        modelEnvironment.setAllowDelete(false);
        modelEnvironment.setAllowSearch(false);
        modelEnvironment.setAllowHubSearch(false);
        modelEnvironment.setAllowGotoEdit(true);
        modelEnvironment.setViewOnly(true);
        // call Tester.environmentModelCallback(EnvironmentModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Tester.class, Tester.P_Environment, modelEnvironment);
    
        return modelEnvironment;
    }
    public TransmitBatchModel getTransmitBatchModel() {
        if (modelTransmitBatch != null) return modelTransmitBatch;
        modelTransmitBatch = new TransmitBatchModel(getTransmitBatchHub());
        modelTransmitBatch.setDisplayName("Transmit Batch");
        modelTransmitBatch.setPluralDisplayName("Transmit Batches");
        modelTransmitBatch.setForJfc(getForJfc());
        modelTransmitBatch.setAllowNew(false);
        modelTransmitBatch.setAllowSave(true);
        modelTransmitBatch.setAllowAdd(false);
        modelTransmitBatch.setAllowRemove(false);
        modelTransmitBatch.setAllowClear(false);
        modelTransmitBatch.setAllowDelete(false);
        modelTransmitBatch.setAllowSearch(false);
        modelTransmitBatch.setAllowHubSearch(true);
        modelTransmitBatch.setAllowGotoEdit(true);
        modelTransmitBatch.setViewOnly(true);
        // call Tester.transmitBatchModelCallback(TransmitBatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Tester.class, Tester.P_TransmitBatch, modelTransmitBatch);
    
        return modelTransmitBatch;
    }
    public TesterResultModel getTesterResultsModel() {
        if (modelTesterResults != null) return modelTesterResults;
        modelTesterResults = new TesterResultModel(getTesterResults());
        modelTesterResults.setDisplayName("Tester Result");
        modelTesterResults.setPluralDisplayName("Tester Results");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getTesterResults())) {
            modelTesterResults.setCreateUI(false);
        }
        modelTesterResults.setForJfc(getForJfc());
        modelTesterResults.setAllowNew(false);
        modelTesterResults.setAllowSave(true);
        modelTesterResults.setAllowAdd(false);
        modelTesterResults.setAllowMove(false);
        modelTesterResults.setAllowRemove(false);
        modelTesterResults.setAllowDelete(false);
        modelTesterResults.setAllowRefresh(false);
        modelTesterResults.setAllowSearch(false);
        modelTesterResults.setAllowHubSearch(true);
        modelTesterResults.setAllowGotoEdit(true);
        modelTesterResults.setViewOnly(getViewOnly());
        modelTesterResults.setAllowNew(false);
        modelTesterResults.setAllowTableFilter(true);
        modelTesterResults.setAllowTableSorting(true);
        modelTesterResults.setAllowMultiSelect(false);
        modelTesterResults.setAllowCopy(false);
        modelTesterResults.setAllowCut(false);
        modelTesterResults.setAllowPaste(false);
        // call Tester.testerResultsModelCallback(TesterResultModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Tester.class, Tester.P_TesterResults, modelTesterResults);
    
        return modelTesterResults;
    }
    public TesterStepModel getTesterStepsModel() {
        if (modelTesterSteps != null) return modelTesterSteps;
        modelTesterSteps = new TesterStepModel(getTesterSteps());
        modelTesterSteps.setDisplayName("Tester Step");
        modelTesterSteps.setPluralDisplayName("Tester Steps");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getTesterSteps())) {
            modelTesterSteps.setCreateUI(false);
        }
        modelTesterSteps.setForJfc(getForJfc());
        modelTesterSteps.setAllowNew(false);
        modelTesterSteps.setAllowSave(true);
        modelTesterSteps.setAllowAdd(false);
        modelTesterSteps.setAllowMove(false);
        modelTesterSteps.setAllowRemove(false);
        modelTesterSteps.setAllowDelete(false);
        modelTesterSteps.setAllowRefresh(false);
        modelTesterSteps.setAllowSearch(false);
        modelTesterSteps.setAllowHubSearch(true);
        modelTesterSteps.setAllowGotoEdit(true);
        modelTesterSteps.setViewOnly(getViewOnly());
        modelTesterSteps.setAllowNew(false);
        modelTesterSteps.setAllowTableFilter(true);
        modelTesterSteps.setAllowTableSorting(true);
        modelTesterSteps.setAllowMultiSelect(false);
        modelTesterSteps.setAllowCopy(false);
        modelTesterSteps.setAllowCut(false);
        modelTesterSteps.setAllowPaste(false);
        // call Tester.testerStepsModelCallback(TesterStepModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Tester.class, Tester.P_TesterSteps, modelTesterSteps);
    
        return modelTesterSteps;
    }
    public TesterStoreModel getTesterStoresModel() {
        if (modelTesterStores != null) return modelTesterStores;
        modelTesterStores = new TesterStoreModel(getTesterStores());
        modelTesterStores.setDisplayName("Tester Store");
        modelTesterStores.setPluralDisplayName("Tester Stores");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getTesterStores())) {
            modelTesterStores.setCreateUI(false);
        }
        modelTesterStores.setForJfc(getForJfc());
        modelTesterStores.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Store
        modelTesterStores.setAllowSave(true);
        modelTesterStores.setAllowAdd(true); // Add is overwritten to create new TesterStore by first selecting Store
        modelTesterStores.setAllowMove(false);
        modelTesterStores.setAllowRemove(false);
        modelTesterStores.setAllowDelete(true);
        modelTesterStores.setAllowRefresh(false);
        modelTesterStores.setAllowSearch(false);
        modelTesterStores.setAllowHubSearch(false);
        modelTesterStores.setAllowGotoEdit(true);
        modelTesterStores.setViewOnly(getViewOnly());
        modelTesterStores.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Store
        modelTesterStores.setAllowTableFilter(true);
        modelTesterStores.setAllowTableSorting(true);
        modelTesterStores.setAllowMultiSelect(false);
        modelTesterStores.setAllowCopy(false);
        modelTesterStores.setAllowCut(false);
        modelTesterStores.setAllowPaste(false);
        // call Tester.testerStoresModelCallback(TesterStoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Tester.class, Tester.P_TesterStores, modelTesterStores);
    
        return modelTesterStores;
    }
    
    public EnvironmentModel getEnvironmentSelectFromModel() {
        if (modelEnvironmentSelectFrom != null) return modelEnvironmentSelectFrom;
        modelEnvironmentSelectFrom = new EnvironmentModel(getEnvironmentSelectFromHub());
        modelEnvironmentSelectFrom.setDisplayName("Environment");
        modelEnvironmentSelectFrom.setPluralDisplayName("Environments");
        modelEnvironmentSelectFrom.setForJfc(getForJfc());
        modelEnvironmentSelectFrom.setAllowNew(false);
        modelEnvironmentSelectFrom.setAllowSave(true);
        modelEnvironmentSelectFrom.setAllowAdd(false);
        modelEnvironmentSelectFrom.setAllowMove(false);
        modelEnvironmentSelectFrom.setAllowRemove(false);
        modelEnvironmentSelectFrom.setAllowDelete(false);
        modelEnvironmentSelectFrom.setAllowSearch(false);
        modelEnvironmentSelectFrom.setAllowHubSearch(true);
        modelEnvironmentSelectFrom.setAllowGotoEdit(true);
        modelEnvironmentSelectFrom.setViewOnly(getViewOnly());
        modelEnvironmentSelectFrom.setAllowNew(false);
        modelEnvironmentSelectFrom.setAllowTableFilter(true);
        modelEnvironmentSelectFrom.setAllowTableSorting(true);
        modelEnvironmentSelectFrom.setAllowCut(false);
        modelEnvironmentSelectFrom.setAllowCopy(false);
        modelEnvironmentSelectFrom.setAllowPaste(false);
        modelEnvironmentSelectFrom.setAllowMultiSelect(false);
        return modelEnvironmentSelectFrom;
    }
    public StoreModel getTesterStoresPickFromStoreModel() {
        if (modelTesterStoresPickFromStore != null) return modelTesterStoresPickFromStore;
        modelTesterStoresPickFromStore = new StoreModel(getTesterStoresPickFromStoreHub());
        modelTesterStoresPickFromStore.setDisplayName("Tester Store");
        modelTesterStoresPickFromStore.setPluralDisplayName("Tester Stores");
        modelTesterStoresPickFromStore.setForJfc(getForJfc());
        modelTesterStoresPickFromStore.setAllowNew(false);
        modelTesterStoresPickFromStore.setAllowSave(true);
        modelTesterStoresPickFromStore.setAllowAdd(false);
        modelTesterStoresPickFromStore.setAllowMove(false);
        modelTesterStoresPickFromStore.setAllowRemove(false);
        modelTesterStoresPickFromStore.setAllowDelete(false);
        modelTesterStoresPickFromStore.setAllowRefresh(false);
        modelTesterStoresPickFromStore.setAllowSearch(true);
        modelTesterStoresPickFromStore.setAllowHubSearch(true);
        modelTesterStoresPickFromStore.setAllowGotoEdit(true);
        modelTesterStoresPickFromStore.setViewOnly(getViewOnly());
        modelTesterStoresPickFromStore.setAllowNew(false);
        modelTesterStoresPickFromStore.setAllowTableFilter(true);
        modelTesterStoresPickFromStore.setAllowTableSorting(true);
        modelTesterStoresPickFromStore.setAllowCut(false);
        modelTesterStoresPickFromStore.setAllowCopy(false);
        modelTesterStoresPickFromStore.setAllowPaste(false);
        modelTesterStoresPickFromStore.setAllowMultiSelect(true);
        new HubMerger<TesterStore, Store>(getTesterStores(), modelTesterStoresPickFromStore.getMultiSelectHub(), TesterStore.P_Store);
        return modelTesterStoresPickFromStore;
    }
    public StoreSearchModel getTesterStoresPickFromStoreSearchModel() {
        if (modelTesterStoresPickFromStoreSearch != null) return modelTesterStoresPickFromStoreSearch;
        return modelTesterStoresPickFromStoreSearch;
    }
    public TransmitBatchSearchModel getTransmitBatchSearchModel() {
        if (modelTransmitBatchSearch != null) return modelTransmitBatchSearch;
        modelTransmitBatchSearch = new TransmitBatchSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTransmitBatchSearch.getHub(), Tester.P_TransmitBatch, getHub());
        return modelTransmitBatchSearch;
    }
    public TesterResultSearchModel getTesterResultsSearchModel() {
        if (modelTesterResultsSearch != null) return modelTesterResultsSearch;
        modelTesterResultsSearch = new TesterResultSearchModel();
        return modelTesterResultsSearch;
    }
    public TesterStepSearchModel getTesterStepsSearchModel() {
        if (modelTesterStepsSearch != null) return modelTesterStepsSearch;
        modelTesterStepsSearch = new TesterStepSearchModel();
        return modelTesterStepsSearch;
    }
    
    public TesterOpenFilterModel getTesterOpenFilterModel() {
        if (modelTesterOpenFilter == null) {
            modelTesterOpenFilter = new TesterOpenFilterModel(getUnfilteredHub(), getOpenFilteredHub());
            new HubShareAO(getUnfilteredHub(), getOpenFilteredHub());
        }
        return modelTesterOpenFilter;
    }
    
    public HubCopy<Tester> createHubCopy() {
        Hub<Tester> hubTesterx = new Hub<>(Tester.class);
        HubCopy<Tester> hc = new HubCopy<>(getHub(), hubTesterx, true);
        return hc;
    }
    public TesterModel createCopy() {
        TesterModel mod = new TesterModel(createHubCopy().getHub());
        return mod;
    }
}

