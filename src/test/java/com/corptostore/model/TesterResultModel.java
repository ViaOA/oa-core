// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.TesterModel;
import com.corptostore.model.TesterResultModel;
import com.corptostore.model.TesterResultTypeModel;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.TesterResult;
import com.corptostore.model.oa.TesterResultType;
import com.corptostore.model.search.TesterResultTypeSearchModel;
import com.corptostore.model.search.TesterSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class TesterResultModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TesterResultModel.class.getName());
    
    // Hubs
    protected Hub<TesterResult> hub;
    // selected testerResults
    protected Hub<TesterResult> hubMultiSelect;
    // detail hubs
    protected Hub<Tester> hubTester;
    protected Hub<TesterResultType> hubTesterResultType;
    
    // AddHubs used for references
    protected Hub<TesterResultType> hubTesterResultTypeSelectFrom;
    
    // ObjectModels
    protected TesterModel modelTester;
    protected TesterResultTypeModel modelTesterResultType;
    
    // selectFrom
    protected TesterResultTypeModel modelTesterResultTypeSelectFrom;
    
    // SearchModels used for references
    protected TesterSearchModel modelTesterSearch;
    protected TesterResultTypeSearchModel modelTesterResultTypeSearch;
    
    public TesterResultModel() {
        setDisplayName("Tester Result");
        setPluralDisplayName("Tester Results");
    }
    
    public TesterResultModel(Hub<TesterResult> hubTesterResult) {
        this();
        if (hubTesterResult != null) HubDelegate.setObjectClass(hubTesterResult, TesterResult.class);
        this.hub = hubTesterResult;
    }
    public TesterResultModel(TesterResult testerResult) {
        this();
        getHub().add(testerResult);
        getHub().setPos(0);
    }
    
    public Hub<TesterResult> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Tester> getTesterHub() {
        if (hubTester != null) return hubTester;
        // this is the owner, use detailHub
        hubTester = getHub().getDetailHub(TesterResult.P_Tester);
        return hubTester;
    }
    public Hub<TesterResultType> getTesterResultTypeHub() {
        if (hubTesterResultType != null) return hubTesterResultType;
        hubTesterResultType = getHub().getDetailHub(TesterResult.P_TesterResultType);
        return hubTesterResultType;
    }
    public Hub<TesterResultType> getTesterResultTypeSelectFromHub() {
        if (hubTesterResultTypeSelectFrom != null) return hubTesterResultTypeSelectFrom;
        hubTesterResultTypeSelectFrom = new Hub<TesterResultType>(TesterResultType.class);
        Hub<TesterResultType> hubTesterResultTypeSelectFrom1 = ModelDelegate.getTesterResultTypes().createSharedHub();
        HubCombined<TesterResultType> hubCombined = new HubCombined(hubTesterResultTypeSelectFrom, hubTesterResultTypeSelectFrom1, getTesterResultTypeHub());
        hubTesterResultTypeSelectFrom.setLinkHub(getHub(), TesterResult.P_TesterResultType); 
        return hubTesterResultTypeSelectFrom;
    }
    public TesterResult getTesterResult() {
        return getHub().getAO();
    }
    
    public Hub<TesterResult> getHub() {
        if (hub == null) {
            hub = new Hub<TesterResult>(TesterResult.class);
        }
        return hub;
    }
    
    public Hub<TesterResult> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<TesterResult>(TesterResult.class);
        }
        return hubMultiSelect;
    }
    
    public TesterModel getTesterModel() {
        if (modelTester != null) return modelTester;
        modelTester = new TesterModel(getTesterHub());
        modelTester.setDisplayName("Tester");
        modelTester.setPluralDisplayName("Testers");
        modelTester.setForJfc(getForJfc());
        modelTester.setAllowNew(false);
        modelTester.setAllowSave(true);
        modelTester.setAllowAdd(false);
        modelTester.setAllowRemove(false);
        modelTester.setAllowClear(false);
        modelTester.setAllowDelete(false);
        modelTester.setAllowSearch(false);
        modelTester.setAllowHubSearch(true);
        modelTester.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelTester.setCreateUI(li == null || !TesterResult.P_Tester.equalsIgnoreCase(li.getName()) );
        modelTester.setViewOnly(getViewOnly());
        // call TesterResult.testerModelCallback(TesterModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TesterResult.class, TesterResult.P_Tester, modelTester);
    
        return modelTester;
    }
    public TesterResultTypeModel getTesterResultTypeModel() {
        if (modelTesterResultType != null) return modelTesterResultType;
        modelTesterResultType = new TesterResultTypeModel(getTesterResultTypeHub());
        modelTesterResultType.setDisplayName("Tester Result Type");
        modelTesterResultType.setPluralDisplayName("Tester Result Types");
        modelTesterResultType.setForJfc(getForJfc());
        modelTesterResultType.setAllowNew(false);
        modelTesterResultType.setAllowSave(true);
        modelTesterResultType.setAllowAdd(false);
        modelTesterResultType.setAllowRemove(false);
        modelTesterResultType.setAllowClear(false);
        modelTesterResultType.setAllowDelete(false);
        modelTesterResultType.setAllowSearch(false);
        modelTesterResultType.setAllowHubSearch(true);
        modelTesterResultType.setAllowGotoEdit(false);
        modelTesterResultType.setViewOnly(true);
        // call TesterResult.testerResultTypeModelCallback(TesterResultTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TesterResult.class, TesterResult.P_TesterResultType, modelTesterResultType);
    
        return modelTesterResultType;
    }
    
    public TesterResultTypeModel getTesterResultTypeSelectFromModel() {
        if (modelTesterResultTypeSelectFrom != null) return modelTesterResultTypeSelectFrom;
        modelTesterResultTypeSelectFrom = new TesterResultTypeModel(getTesterResultTypeSelectFromHub());
        modelTesterResultTypeSelectFrom.setDisplayName("Tester Result Type");
        modelTesterResultTypeSelectFrom.setPluralDisplayName("Tester Result Types");
        modelTesterResultTypeSelectFrom.setForJfc(getForJfc());
        modelTesterResultTypeSelectFrom.setAllowNew(false);
        modelTesterResultTypeSelectFrom.setAllowSave(true);
        modelTesterResultTypeSelectFrom.setAllowAdd(false);
        modelTesterResultTypeSelectFrom.setAllowMove(false);
        modelTesterResultTypeSelectFrom.setAllowRemove(false);
        modelTesterResultTypeSelectFrom.setAllowDelete(false);
        modelTesterResultTypeSelectFrom.setAllowSearch(false);
        modelTesterResultTypeSelectFrom.setAllowHubSearch(true);
        modelTesterResultTypeSelectFrom.setAllowGotoEdit(true);
        modelTesterResultTypeSelectFrom.setViewOnly(getViewOnly());
        modelTesterResultTypeSelectFrom.setAllowNew(false);
        modelTesterResultTypeSelectFrom.setAllowTableFilter(true);
        modelTesterResultTypeSelectFrom.setAllowTableSorting(true);
        modelTesterResultTypeSelectFrom.setAllowCut(false);
        modelTesterResultTypeSelectFrom.setAllowCopy(false);
        modelTesterResultTypeSelectFrom.setAllowPaste(false);
        modelTesterResultTypeSelectFrom.setAllowMultiSelect(false);
        return modelTesterResultTypeSelectFrom;
    }
    public TesterSearchModel getTesterSearchModel() {
        if (modelTesterSearch != null) return modelTesterSearch;
        modelTesterSearch = new TesterSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTesterSearch.getHub(), TesterResult.P_Tester, getHub());
        return modelTesterSearch;
    }
    public TesterResultTypeSearchModel getTesterResultTypeSearchModel() {
        if (modelTesterResultTypeSearch != null) return modelTesterResultTypeSearch;
        modelTesterResultTypeSearch = new TesterResultTypeSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTesterResultTypeSearch.getHub(), TesterResult.P_TesterResultType, getHub());
        return modelTesterResultTypeSearch;
    }
    
    public HubCopy<TesterResult> createHubCopy() {
        Hub<TesterResult> hubTesterResultx = new Hub<>(TesterResult.class);
        HubCopy<TesterResult> hc = new HubCopy<>(getHub(), hubTesterResultx, true);
        return hc;
    }
    public TesterResultModel createCopy() {
        TesterResultModel mod = new TesterResultModel(createHubCopy().getHub());
        return mod;
    }
}

