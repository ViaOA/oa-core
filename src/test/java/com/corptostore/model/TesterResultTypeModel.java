// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.TesterResultTypeModel;
import com.corptostore.model.oa.TesterResultType;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class TesterResultTypeModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TesterResultTypeModel.class.getName());
    
    // Hubs
    protected Hub<TesterResultType> hub;
    // selected testerResultTypes
    protected Hub<TesterResultType> hubMultiSelect;
    
    
    public TesterResultTypeModel() {
        setDisplayName("Tester Result Type");
        setPluralDisplayName("Tester Result Types");
    }
    
    public TesterResultTypeModel(Hub<TesterResultType> hubTesterResultType) {
        this();
        if (hubTesterResultType != null) HubDelegate.setObjectClass(hubTesterResultType, TesterResultType.class);
        this.hub = hubTesterResultType;
    }
    public TesterResultTypeModel(TesterResultType testerResultType) {
        this();
        getHub().add(testerResultType);
        getHub().setPos(0);
    }
    
    public Hub<TesterResultType> getOriginalHub() {
        return getHub();
    }
    
    public TesterResultType getTesterResultType() {
        return getHub().getAO();
    }
    
    public Hub<TesterResultType> getHub() {
        if (hub == null) {
            hub = new Hub<TesterResultType>(TesterResultType.class);
        }
        return hub;
    }
    
    public Hub<TesterResultType> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<TesterResultType>(TesterResultType.class);
        }
        return hubMultiSelect;
    }
    
    public HubCopy<TesterResultType> createHubCopy() {
        Hub<TesterResultType> hubTesterResultTypex = new Hub<>(TesterResultType.class);
        HubCopy<TesterResultType> hc = new HubCopy<>(getHub(), hubTesterResultTypex, true);
        return hc;
    }
    public TesterResultTypeModel createCopy() {
        TesterResultTypeModel mod = new TesterResultTypeModel(createHubCopy().getHub());
        return mod;
    }
}

