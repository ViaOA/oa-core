// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.TesterModel;
import com.corptostore.model.TesterStepModel;
import com.corptostore.model.TesterStepTypeModel;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.TesterStep;
import com.corptostore.model.oa.TesterStepType;
import com.corptostore.model.search.TesterSearchModel;
import com.corptostore.model.search.TesterStepTypeSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class TesterStepModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TesterStepModel.class.getName());
    
    // Hubs
    protected Hub<TesterStep> hub;
    // selected testerSteps
    protected Hub<TesterStep> hubMultiSelect;
    // detail hubs
    protected Hub<Tester> hubTester;
    protected Hub<TesterStepType> hubTesterStepType;
    
    // AddHubs used for references
    protected Hub<TesterStepType> hubTesterStepTypeSelectFrom;
    
    // ObjectModels
    protected TesterModel modelTester;
    protected TesterStepTypeModel modelTesterStepType;
    
    // selectFrom
    protected TesterStepTypeModel modelTesterStepTypeSelectFrom;
    
    // SearchModels used for references
    protected TesterSearchModel modelTesterSearch;
    protected TesterStepTypeSearchModel modelTesterStepTypeSearch;
    
    public TesterStepModel() {
        setDisplayName("Tester Step");
        setPluralDisplayName("Tester Steps");
    }
    
    public TesterStepModel(Hub<TesterStep> hubTesterStep) {
        this();
        if (hubTesterStep != null) HubDelegate.setObjectClass(hubTesterStep, TesterStep.class);
        this.hub = hubTesterStep;
    }
    public TesterStepModel(TesterStep testerStep) {
        this();
        getHub().add(testerStep);
        getHub().setPos(0);
    }
    
    public Hub<TesterStep> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Tester> getTesterHub() {
        if (hubTester != null) return hubTester;
        // this is the owner, use detailHub
        hubTester = getHub().getDetailHub(TesterStep.P_Tester);
        return hubTester;
    }
    public Hub<TesterStepType> getTesterStepTypeHub() {
        if (hubTesterStepType != null) return hubTesterStepType;
        hubTesterStepType = getHub().getDetailHub(TesterStep.P_TesterStepType);
        return hubTesterStepType;
    }
    public Hub<TesterStepType> getTesterStepTypeSelectFromHub() {
        if (hubTesterStepTypeSelectFrom != null) return hubTesterStepTypeSelectFrom;
        hubTesterStepTypeSelectFrom = new Hub<TesterStepType>(TesterStepType.class);
        Hub<TesterStepType> hubTesterStepTypeSelectFrom1 = ModelDelegate.getTesterStepTypes().createSharedHub();
        HubCombined<TesterStepType> hubCombined = new HubCombined(hubTesterStepTypeSelectFrom, hubTesterStepTypeSelectFrom1, getTesterStepTypeHub());
        hubTesterStepTypeSelectFrom.setLinkHub(getHub(), TesterStep.P_TesterStepType); 
        return hubTesterStepTypeSelectFrom;
    }
    public TesterStep getTesterStep() {
        return getHub().getAO();
    }
    
    public Hub<TesterStep> getHub() {
        if (hub == null) {
            hub = new Hub<TesterStep>(TesterStep.class);
        }
        return hub;
    }
    
    public Hub<TesterStep> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<TesterStep>(TesterStep.class);
        }
        return hubMultiSelect;
    }
    
    public TesterModel getTesterModel() {
        if (modelTester != null) return modelTester;
        modelTester = new TesterModel(getTesterHub());
        modelTester.setDisplayName("Tester");
        modelTester.setPluralDisplayName("Testers");
        modelTester.setForJfc(getForJfc());
        modelTester.setAllowNew(false);
        modelTester.setAllowSave(true);
        modelTester.setAllowAdd(false);
        modelTester.setAllowRemove(false);
        modelTester.setAllowClear(false);
        modelTester.setAllowDelete(false);
        modelTester.setAllowSearch(false);
        modelTester.setAllowHubSearch(true);
        modelTester.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelTester.setCreateUI(li == null || !TesterStep.P_Tester.equalsIgnoreCase(li.getName()) );
        modelTester.setViewOnly(getViewOnly());
        // call TesterStep.testerModelCallback(TesterModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TesterStep.class, TesterStep.P_Tester, modelTester);
    
        return modelTester;
    }
    public TesterStepTypeModel getTesterStepTypeModel() {
        if (modelTesterStepType != null) return modelTesterStepType;
        modelTesterStepType = new TesterStepTypeModel(getTesterStepTypeHub());
        modelTesterStepType.setDisplayName("Tester Step Type");
        modelTesterStepType.setPluralDisplayName("Tester Step Types");
        modelTesterStepType.setForJfc(getForJfc());
        modelTesterStepType.setAllowNew(false);
        modelTesterStepType.setAllowSave(true);
        modelTesterStepType.setAllowAdd(false);
        modelTesterStepType.setAllowRemove(false);
        modelTesterStepType.setAllowClear(false);
        modelTesterStepType.setAllowDelete(false);
        modelTesterStepType.setAllowSearch(false);
        modelTesterStepType.setAllowHubSearch(true);
        modelTesterStepType.setAllowGotoEdit(false);
        modelTesterStepType.setViewOnly(true);
        // call TesterStep.testerStepTypeModelCallback(TesterStepTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TesterStep.class, TesterStep.P_TesterStepType, modelTesterStepType);
    
        return modelTesterStepType;
    }
    
    public TesterStepTypeModel getTesterStepTypeSelectFromModel() {
        if (modelTesterStepTypeSelectFrom != null) return modelTesterStepTypeSelectFrom;
        modelTesterStepTypeSelectFrom = new TesterStepTypeModel(getTesterStepTypeSelectFromHub());
        modelTesterStepTypeSelectFrom.setDisplayName("Tester Step Type");
        modelTesterStepTypeSelectFrom.setPluralDisplayName("Tester Step Types");
        modelTesterStepTypeSelectFrom.setForJfc(getForJfc());
        modelTesterStepTypeSelectFrom.setAllowNew(false);
        modelTesterStepTypeSelectFrom.setAllowSave(true);
        modelTesterStepTypeSelectFrom.setAllowAdd(false);
        modelTesterStepTypeSelectFrom.setAllowMove(false);
        modelTesterStepTypeSelectFrom.setAllowRemove(false);
        modelTesterStepTypeSelectFrom.setAllowDelete(false);
        modelTesterStepTypeSelectFrom.setAllowSearch(false);
        modelTesterStepTypeSelectFrom.setAllowHubSearch(true);
        modelTesterStepTypeSelectFrom.setAllowGotoEdit(true);
        modelTesterStepTypeSelectFrom.setViewOnly(getViewOnly());
        modelTesterStepTypeSelectFrom.setAllowNew(false);
        modelTesterStepTypeSelectFrom.setAllowTableFilter(true);
        modelTesterStepTypeSelectFrom.setAllowTableSorting(true);
        modelTesterStepTypeSelectFrom.setAllowCut(false);
        modelTesterStepTypeSelectFrom.setAllowCopy(false);
        modelTesterStepTypeSelectFrom.setAllowPaste(false);
        modelTesterStepTypeSelectFrom.setAllowMultiSelect(false);
        return modelTesterStepTypeSelectFrom;
    }
    public TesterSearchModel getTesterSearchModel() {
        if (modelTesterSearch != null) return modelTesterSearch;
        modelTesterSearch = new TesterSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTesterSearch.getHub(), TesterStep.P_Tester, getHub());
        return modelTesterSearch;
    }
    public TesterStepTypeSearchModel getTesterStepTypeSearchModel() {
        if (modelTesterStepTypeSearch != null) return modelTesterStepTypeSearch;
        modelTesterStepTypeSearch = new TesterStepTypeSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTesterStepTypeSearch.getHub(), TesterStep.P_TesterStepType, getHub());
        return modelTesterStepTypeSearch;
    }
    
    public HubCopy<TesterStep> createHubCopy() {
        Hub<TesterStep> hubTesterStepx = new Hub<>(TesterStep.class);
        HubCopy<TesterStep> hc = new HubCopy<>(getHub(), hubTesterStepx, true);
        return hc;
    }
    public TesterStepModel createCopy() {
        TesterStepModel mod = new TesterStepModel(createHubCopy().getHub());
        return mod;
    }
}

