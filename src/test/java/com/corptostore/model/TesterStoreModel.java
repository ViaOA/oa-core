// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.StoreModel;
import com.corptostore.model.StoreTransmitInfoModel;
import com.corptostore.model.TesterModel;
import com.corptostore.model.TesterStoreModel;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreTransmitInfo;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.TesterStore;
import com.corptostore.model.search.StoreSearchModel;
import com.corptostore.model.search.TesterSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class TesterStoreModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TesterStoreModel.class.getName());
    
    // Hubs
    protected Hub<TesterStore> hub;
    // selected testerStores
    protected Hub<TesterStore> hubMultiSelect;
    // detail hubs
    protected Hub<StoreTransmitInfo> hubCalcStoreTransmitInfo;
    protected Hub<Store> hubStore;
    protected Hub<Tester> hubTester;
    
    // ObjectModels
    protected StoreTransmitInfoModel modelCalcStoreTransmitInfo;
    protected StoreModel modelStore;
    protected TesterModel modelTester;
    
    // SearchModels used for references
    protected StoreSearchModel modelStoreSearch;
    protected TesterSearchModel modelTesterSearch;
    
    public TesterStoreModel() {
        setDisplayName("Tester Store");
        setPluralDisplayName("Tester Stores");
    }
    
    public TesterStoreModel(Hub<TesterStore> hubTesterStore) {
        this();
        if (hubTesterStore != null) HubDelegate.setObjectClass(hubTesterStore, TesterStore.class);
        this.hub = hubTesterStore;
    }
    public TesterStoreModel(TesterStore testerStore) {
        this();
        getHub().add(testerStore);
        getHub().setPos(0);
    }
    
    public Hub<TesterStore> getOriginalHub() {
        return getHub();
    }
    
    public Hub<StoreTransmitInfo> getCalcStoreTransmitInfoHub() {
        if (hubCalcStoreTransmitInfo != null) return hubCalcStoreTransmitInfo;
        // this is a calculated
        hubCalcStoreTransmitInfo = getHub().getDetailHub(TesterStore.P_CalcStoreTransmitInfo);
        return hubCalcStoreTransmitInfo;
    }
    public Hub<Store> getStoreHub() {
        if (hubStore != null) return hubStore;
        hubStore = getHub().getDetailHub(TesterStore.P_Store);
        return hubStore;
    }
    public Hub<Tester> getTesterHub() {
        if (hubTester != null) return hubTester;
        // this is the owner, use detailHub
        hubTester = getHub().getDetailHub(TesterStore.P_Tester);
        return hubTester;
    }
    public TesterStore getTesterStore() {
        return getHub().getAO();
    }
    
    public Hub<TesterStore> getHub() {
        if (hub == null) {
            hub = new Hub<TesterStore>(TesterStore.class);
        }
        return hub;
    }
    
    public Hub<TesterStore> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<TesterStore>(TesterStore.class);
        }
        return hubMultiSelect;
    }
    
    public StoreTransmitInfoModel getCalcStoreTransmitInfoModel() {
        if (modelCalcStoreTransmitInfo != null) return modelCalcStoreTransmitInfo;
        modelCalcStoreTransmitInfo = new StoreTransmitInfoModel(getCalcStoreTransmitInfoHub());
        modelCalcStoreTransmitInfo.setDisplayName("Store Transmit Info");
        modelCalcStoreTransmitInfo.setPluralDisplayName("Store Transmit Infos");
        modelCalcStoreTransmitInfo.setForJfc(getForJfc());
        modelCalcStoreTransmitInfo.setAllowNew(false);
        modelCalcStoreTransmitInfo.setAllowSave(false);
        modelCalcStoreTransmitInfo.setAllowAdd(false);
        modelCalcStoreTransmitInfo.setAllowRemove(false);
        modelCalcStoreTransmitInfo.setAllowClear(false);
        modelCalcStoreTransmitInfo.setAllowDelete(false);
        modelCalcStoreTransmitInfo.setAllowSearch(false);
        modelCalcStoreTransmitInfo.setAllowHubSearch(false);
        modelCalcStoreTransmitInfo.setAllowGotoEdit(true);
        modelCalcStoreTransmitInfo.setViewOnly(true);
        // call TesterStore.calcStoreTransmitInfoModelCallback(StoreTransmitInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TesterStore.class, TesterStore.P_CalcStoreTransmitInfo, modelCalcStoreTransmitInfo);
    
        return modelCalcStoreTransmitInfo;
    }
    public StoreModel getStoreModel() {
        if (modelStore != null) return modelStore;
        modelStore = new StoreModel(getStoreHub());
        modelStore.setDisplayName("Store");
        modelStore.setPluralDisplayName("Stores");
        modelStore.setForJfc(getForJfc());
        modelStore.setAllowNew(false);
        modelStore.setAllowSave(true);
        modelStore.setAllowAdd(false);
        modelStore.setAllowRemove(false);
        modelStore.setAllowClear(false);
        modelStore.setAllowDelete(false);
        modelStore.setAllowSearch(false);
        modelStore.setAllowHubSearch(true);
        modelStore.setAllowGotoEdit(true);
        modelStore.setViewOnly(getViewOnly());
        // call TesterStore.storeModelCallback(StoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TesterStore.class, TesterStore.P_Store, modelStore);
    
        return modelStore;
    }
    public TesterModel getTesterModel() {
        if (modelTester != null) return modelTester;
        modelTester = new TesterModel(getTesterHub());
        modelTester.setDisplayName("Tester");
        modelTester.setPluralDisplayName("Testers");
        modelTester.setForJfc(getForJfc());
        modelTester.setAllowNew(false);
        modelTester.setAllowSave(true);
        modelTester.setAllowAdd(false);
        modelTester.setAllowRemove(false);
        modelTester.setAllowClear(false);
        modelTester.setAllowDelete(false);
        modelTester.setAllowSearch(false);
        modelTester.setAllowHubSearch(true);
        modelTester.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelTester.setCreateUI(li == null || !TesterStore.P_Tester.equalsIgnoreCase(li.getName()) );
        modelTester.setViewOnly(getViewOnly());
        // call TesterStore.testerModelCallback(TesterModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TesterStore.class, TesterStore.P_Tester, modelTester);
    
        return modelTester;
    }
    
    public StoreSearchModel getStoreSearchModel() {
        if (modelStoreSearch != null) return modelStoreSearch;
        modelStoreSearch = new StoreSearchModel();
        HubSelectDelegate.adoptWhereHub(modelStoreSearch.getHub(), TesterStore.P_Store, getHub());
        return modelStoreSearch;
    }
    public TesterSearchModel getTesterSearchModel() {
        if (modelTesterSearch != null) return modelTesterSearch;
        modelTesterSearch = new TesterSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTesterSearch.getHub(), TesterStore.P_Tester, getHub());
        return modelTesterSearch;
    }
    
    public HubCopy<TesterStore> createHubCopy() {
        Hub<TesterStore> hubTesterStorex = new Hub<>(TesterStore.class);
        HubCopy<TesterStore> hc = new HubCopy<>(getHub(), hubTesterStorex, true);
        return hc;
    }
    public TesterStoreModel createCopy() {
        TesterStoreModel mod = new TesterStoreModel(createHubCopy().getHub());
        return mod;
    }
}

