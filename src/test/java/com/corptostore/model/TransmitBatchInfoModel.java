// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.StatusInfoModel;
import com.corptostore.model.TransmitBatchInfoModel;
import com.corptostore.model.TransmitBatchServiceInfoModel;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.TransmitBatchInfo;
import com.corptostore.model.oa.TransmitBatchServiceInfo;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class TransmitBatchInfoModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TransmitBatchInfoModel.class.getName());
    
    // Hubs
    protected Hub<TransmitBatchInfo> hub;
    // selected transmitBatchInfos
    protected Hub<TransmitBatchInfo> hubMultiSelect;
    // detail hubs
    protected Hub<StatusInfo> hubStatusInfo;
    protected Hub<TransmitBatchServiceInfo> hubTransmitBatchServiceInfo;
    
    // ObjectModels
    protected StatusInfoModel modelStatusInfo;
    protected TransmitBatchServiceInfoModel modelTransmitBatchServiceInfo;
    
    public TransmitBatchInfoModel() {
        setDisplayName("Transmit Batch Info");
        setPluralDisplayName("Transmit Batch Infos");
    }
    
    public TransmitBatchInfoModel(Hub<TransmitBatchInfo> hubTransmitBatchInfo) {
        this();
        if (hubTransmitBatchInfo != null) HubDelegate.setObjectClass(hubTransmitBatchInfo, TransmitBatchInfo.class);
        this.hub = hubTransmitBatchInfo;
    }
    public TransmitBatchInfoModel(TransmitBatchInfo transmitBatchInfo) {
        this();
        getHub().add(transmitBatchInfo);
        getHub().setPos(0);
    }
    
    public Hub<TransmitBatchInfo> getOriginalHub() {
        return getHub();
    }
    
    public Hub<StatusInfo> getStatusInfoHub() {
        if (hubStatusInfo != null) return hubStatusInfo;
        hubStatusInfo = getHub().getDetailHub(TransmitBatchInfo.P_StatusInfo);
        return hubStatusInfo;
    }
    public Hub<TransmitBatchServiceInfo> getTransmitBatchServiceInfoHub() {
        if (hubTransmitBatchServiceInfo != null) return hubTransmitBatchServiceInfo;
        // this is the owner, use detailHub
        hubTransmitBatchServiceInfo = getHub().getDetailHub(TransmitBatchInfo.P_TransmitBatchServiceInfo);
        return hubTransmitBatchServiceInfo;
    }
    public TransmitBatchInfo getTransmitBatchInfo() {
        return getHub().getAO();
    }
    
    public Hub<TransmitBatchInfo> getHub() {
        if (hub == null) {
            hub = new Hub<TransmitBatchInfo>(TransmitBatchInfo.class);
        }
        return hub;
    }
    
    public Hub<TransmitBatchInfo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<TransmitBatchInfo>(TransmitBatchInfo.class);
        }
        return hubMultiSelect;
    }
    
    public StatusInfoModel getStatusInfoModel() {
        if (modelStatusInfo != null) return modelStatusInfo;
        modelStatusInfo = new StatusInfoModel(getStatusInfoHub());
        modelStatusInfo.setDisplayName("Status Info");
        modelStatusInfo.setPluralDisplayName("Status Infos");
        modelStatusInfo.setForJfc(getForJfc());
        modelStatusInfo.setAllowNew(false);
        modelStatusInfo.setAllowSave(true);
        modelStatusInfo.setAllowAdd(false);
        modelStatusInfo.setAllowRemove(false);
        modelStatusInfo.setAllowClear(false);
        modelStatusInfo.setAllowDelete(false);
        modelStatusInfo.setAllowSearch(false);
        modelStatusInfo.setAllowHubSearch(false);
        modelStatusInfo.setAllowGotoEdit(true);
        modelStatusInfo.setViewOnly(getViewOnly());
        // call TransmitBatchInfo.statusInfoModelCallback(StatusInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TransmitBatchInfo.class, TransmitBatchInfo.P_StatusInfo, modelStatusInfo);
    
        return modelStatusInfo;
    }
    public TransmitBatchServiceInfoModel getTransmitBatchServiceInfoModel() {
        if (modelTransmitBatchServiceInfo != null) return modelTransmitBatchServiceInfo;
        modelTransmitBatchServiceInfo = new TransmitBatchServiceInfoModel(getTransmitBatchServiceInfoHub());
        modelTransmitBatchServiceInfo.setDisplayName("Transmit Batch Service Info");
        modelTransmitBatchServiceInfo.setPluralDisplayName("Transmit Batch Service Infos");
        modelTransmitBatchServiceInfo.setForJfc(getForJfc());
        modelTransmitBatchServiceInfo.setAllowNew(false);
        modelTransmitBatchServiceInfo.setAllowSave(true);
        modelTransmitBatchServiceInfo.setAllowAdd(false);
        modelTransmitBatchServiceInfo.setAllowRemove(false);
        modelTransmitBatchServiceInfo.setAllowClear(false);
        modelTransmitBatchServiceInfo.setAllowDelete(false);
        modelTransmitBatchServiceInfo.setAllowSearch(false);
        modelTransmitBatchServiceInfo.setAllowHubSearch(false);
        modelTransmitBatchServiceInfo.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelTransmitBatchServiceInfo.setCreateUI(li == null || !TransmitBatchInfo.P_TransmitBatchServiceInfo.equalsIgnoreCase(li.getName()) );
        modelTransmitBatchServiceInfo.setViewOnly(getViewOnly());
        // call TransmitBatchInfo.transmitBatchServiceInfoModelCallback(TransmitBatchServiceInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TransmitBatchInfo.class, TransmitBatchInfo.P_TransmitBatchServiceInfo, modelTransmitBatchServiceInfo);
    
        return modelTransmitBatchServiceInfo;
    }
    
    public HubCopy<TransmitBatchInfo> createHubCopy() {
        Hub<TransmitBatchInfo> hubTransmitBatchInfox = new Hub<>(TransmitBatchInfo.class);
        HubCopy<TransmitBatchInfo> hc = new HubCopy<>(getHub(), hubTransmitBatchInfox, true);
        return hc;
    }
    public TransmitBatchInfoModel createCopy() {
        TransmitBatchInfoModel mod = new TransmitBatchInfoModel(createHubCopy().getHub());
        return mod;
    }
}

