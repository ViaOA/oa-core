// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.StoreTransmitBatchModel;
import com.corptostore.model.TransmitBatchModel;
import com.corptostore.model.TransmitModel;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.TransmitBatch;
import com.corptostore.model.search.StoreTransmitBatchSearchModel;
import com.corptostore.model.search.TransmitSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class TransmitBatchModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TransmitBatchModel.class.getName());
    
    // Hubs
    protected Hub<TransmitBatch> hub;
    // selected transmitBatches
    protected Hub<TransmitBatch> hubMultiSelect;
    // detail hubs
    protected Hub<StoreTransmitBatch> hubStoreTransmitBatches;
    protected Hub<Transmit> hubTransmits;
    
    // ObjectModels
    protected StoreTransmitBatchModel modelStoreTransmitBatches;
    protected TransmitModel modelTransmits;
    
    // SearchModels used for references
    protected StoreTransmitBatchSearchModel modelStoreTransmitBatchesSearch;
    protected TransmitSearchModel modelTransmitsSearch;
    
    public TransmitBatchModel() {
        setDisplayName("Transmit Batch");
        setPluralDisplayName("Transmit Batches");
    }
    
    public TransmitBatchModel(Hub<TransmitBatch> hubTransmitBatch) {
        this();
        if (hubTransmitBatch != null) HubDelegate.setObjectClass(hubTransmitBatch, TransmitBatch.class);
        this.hub = hubTransmitBatch;
    }
    public TransmitBatchModel(TransmitBatch transmitBatch) {
        this();
        getHub().add(transmitBatch);
        getHub().setPos(0);
    }
    
    public Hub<TransmitBatch> getOriginalHub() {
        return getHub();
    }
    
    public Hub<StoreTransmitBatch> getStoreTransmitBatches() {
        if (hubStoreTransmitBatches != null) return hubStoreTransmitBatches;
        if (getForJfc()) {
            hubStoreTransmitBatches = new Hub<StoreTransmitBatch>(StoreTransmitBatch.class);
            new HubJfcDetail(getHub(), hubStoreTransmitBatches, TransmitBatch.P_StoreTransmitBatches);
        }
        else {
            hubStoreTransmitBatches = getHub().getDetailHub(TransmitBatch.P_StoreTransmitBatches);
        }
        return hubStoreTransmitBatches;
    }
    public Hub<Transmit> getTransmits() {
        // createMethod=false, used by getTransmitsSearchModel() for searches
        if (hubTransmits != null) return hubTransmits;
        hubTransmits = new Hub<Transmit>(Transmit.class);
        hubTransmits.setSelectWhereHub(getHub(), TransmitBatch.P_Transmits);
        getHub().onChangeAO(hubEvent -> hubTransmits.clear());
        return hubTransmits;
    }
    public TransmitBatch getTransmitBatch() {
        return getHub().getAO();
    }
    
    public Hub<TransmitBatch> getHub() {
        if (hub == null) {
            hub = new Hub<TransmitBatch>(TransmitBatch.class);
        }
        return hub;
    }
    
    public Hub<TransmitBatch> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<TransmitBatch>(TransmitBatch.class);
        }
        return hubMultiSelect;
    }
    
    public StoreTransmitBatchModel getStoreTransmitBatchesModel() {
        if (modelStoreTransmitBatches != null) return modelStoreTransmitBatches;
        modelStoreTransmitBatches = new StoreTransmitBatchModel(getStoreTransmitBatches());
        modelStoreTransmitBatches.setDisplayName("Store Transmit Batch");
        modelStoreTransmitBatches.setPluralDisplayName("Store Transmit Batches");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getStoreTransmitBatches())) {
            modelStoreTransmitBatches.setCreateUI(false);
        }
        modelStoreTransmitBatches.setForJfc(getForJfc());
        modelStoreTransmitBatches.setAllowNew(false);
        modelStoreTransmitBatches.setAllowSave(true);
        modelStoreTransmitBatches.setAllowAdd(false);
        modelStoreTransmitBatches.setAllowMove(false);
        modelStoreTransmitBatches.setAllowRemove(false);
        modelStoreTransmitBatches.setAllowDelete(true);
        modelStoreTransmitBatches.setAllowRefresh(true);
        modelStoreTransmitBatches.setAllowSearch(false);
        modelStoreTransmitBatches.setAllowHubSearch(true);
        modelStoreTransmitBatches.setAllowGotoEdit(true);
        modelStoreTransmitBatches.setViewOnly(getViewOnly());
        modelStoreTransmitBatches.setAllowNew(false);
        modelStoreTransmitBatches.setAllowTableFilter(true);
        modelStoreTransmitBatches.setAllowTableSorting(true);
        modelStoreTransmitBatches.setAllowMultiSelect(false);
        modelStoreTransmitBatches.setAllowCopy(false);
        modelStoreTransmitBatches.setAllowCut(false);
        modelStoreTransmitBatches.setAllowPaste(false);
        // call TransmitBatch.storeTransmitBatchesModelCallback(StoreTransmitBatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TransmitBatch.class, TransmitBatch.P_StoreTransmitBatches, modelStoreTransmitBatches);
    
        return modelStoreTransmitBatches;
    }
    public TransmitModel getTransmitsModel() {
        if (modelTransmits != null) return modelTransmits;
        modelTransmits = new TransmitModel(getTransmits());
        modelTransmits.setDisplayName("Transmit");
        modelTransmits.setPluralDisplayName("Transmits");
        modelTransmits.setForJfc(getForJfc());
        modelTransmits.setAllowNew(false);
        modelTransmits.setAllowSave(true);
        modelTransmits.setAllowAdd(false);
        modelTransmits.setAllowMove(false);
        modelTransmits.setAllowRemove(false);
        modelTransmits.setAllowDelete(true);
        modelTransmits.setAllowRefresh(true);
        modelTransmits.setAllowSearch(true);
        modelTransmits.setAllowHubSearch(false);
        modelTransmits.setAllowGotoEdit(true);
        modelTransmits.setViewOnly(getViewOnly());
        modelTransmits.setAllowNew(false);
        modelTransmits.setAllowTableFilter(true);
        modelTransmits.setAllowTableSorting(true);
        modelTransmits.setAllowMultiSelect(false);
        modelTransmits.setAllowCopy(false);
        modelTransmits.setAllowCut(false);
        modelTransmits.setAllowPaste(false);
        // call TransmitBatch.transmitsModelCallback(TransmitModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TransmitBatch.class, TransmitBatch.P_Transmits, modelTransmits);
    
        return modelTransmits;
    }
    
    public StoreTransmitBatchSearchModel getStoreTransmitBatchesSearchModel() {
        if (modelStoreTransmitBatchesSearch != null) return modelStoreTransmitBatchesSearch;
        modelStoreTransmitBatchesSearch = new StoreTransmitBatchSearchModel();
        return modelStoreTransmitBatchesSearch;
    }
    public TransmitSearchModel getTransmitsSearchModel() {
        if (modelTransmitsSearch != null) return modelTransmitsSearch;
        modelTransmitsSearch = new TransmitSearchModel(getTransmits()); // createMethod=false, directly uses hub
        return modelTransmitsSearch;
    }
    
    public HubCopy<TransmitBatch> createHubCopy() {
        Hub<TransmitBatch> hubTransmitBatchx = new Hub<>(TransmitBatch.class);
        HubCopy<TransmitBatch> hc = new HubCopy<>(getHub(), hubTransmitBatchx, true);
        return hc;
    }
    public TransmitBatchModel createCopy() {
        TransmitBatchModel mod = new TransmitBatchModel(createHubCopy().getHub());
        return mod;
    }
}

