// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.CorpToStoreModel;
import com.corptostore.model.StatusInfoModel;
import com.corptostore.model.TransmitBatchInfoModel;
import com.corptostore.model.TransmitBatchServiceInfoModel;
import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.TransmitBatchInfo;
import com.corptostore.model.oa.TransmitBatchServiceInfo;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class TransmitBatchServiceInfoModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TransmitBatchServiceInfoModel.class.getName());
    
    // Hubs
    protected Hub<TransmitBatchServiceInfo> hub;
    // selected transmitBatchServiceInfos
    protected Hub<TransmitBatchServiceInfo> hubMultiSelect;
    // detail hubs
    protected Hub<CorpToStore> hubCorpToStore;
    protected Hub<StatusInfo> hubStatusInfo;
    protected Hub<TransmitBatchInfo> hubTransmitBatchInfos;
    
    // ObjectModels
    protected CorpToStoreModel modelCorpToStore;
    protected StatusInfoModel modelStatusInfo;
    protected TransmitBatchInfoModel modelTransmitBatchInfos;
    
    public TransmitBatchServiceInfoModel() {
        setDisplayName("Transmit Batch Service Info");
        setPluralDisplayName("Transmit Batch Service Infos");
    }
    
    public TransmitBatchServiceInfoModel(Hub<TransmitBatchServiceInfo> hubTransmitBatchServiceInfo) {
        this();
        if (hubTransmitBatchServiceInfo != null) HubDelegate.setObjectClass(hubTransmitBatchServiceInfo, TransmitBatchServiceInfo.class);
        this.hub = hubTransmitBatchServiceInfo;
    }
    public TransmitBatchServiceInfoModel(TransmitBatchServiceInfo transmitBatchServiceInfo) {
        this();
        getHub().add(transmitBatchServiceInfo);
        getHub().setPos(0);
    }
    
    public Hub<TransmitBatchServiceInfo> getOriginalHub() {
        return getHub();
    }
    
    public Hub<CorpToStore> getCorpToStoreHub() {
        if (hubCorpToStore != null) return hubCorpToStore;
        // this is the owner, use detailHub
        hubCorpToStore = getHub().getDetailHub(TransmitBatchServiceInfo.P_CorpToStore);
        return hubCorpToStore;
    }
    public Hub<StatusInfo> getStatusInfoHub() {
        if (hubStatusInfo != null) return hubStatusInfo;
        hubStatusInfo = getHub().getDetailHub(TransmitBatchServiceInfo.P_StatusInfo);
        return hubStatusInfo;
    }
    public Hub<TransmitBatchInfo> getTransmitBatchInfos() {
        if (hubTransmitBatchInfos == null) {
            hubTransmitBatchInfos = getHub().getDetailHub(TransmitBatchServiceInfo.P_TransmitBatchInfos);
        }
        return hubTransmitBatchInfos;
    }
    public TransmitBatchServiceInfo getTransmitBatchServiceInfo() {
        return getHub().getAO();
    }
    
    public Hub<TransmitBatchServiceInfo> getHub() {
        if (hub == null) {
            hub = new Hub<TransmitBatchServiceInfo>(TransmitBatchServiceInfo.class);
        }
        return hub;
    }
    
    public Hub<TransmitBatchServiceInfo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<TransmitBatchServiceInfo>(TransmitBatchServiceInfo.class);
        }
        return hubMultiSelect;
    }
    
    public CorpToStoreModel getCorpToStoreModel() {
        if (modelCorpToStore != null) return modelCorpToStore;
        modelCorpToStore = new CorpToStoreModel(getCorpToStoreHub());
        modelCorpToStore.setDisplayName("Corp To Store");
        modelCorpToStore.setPluralDisplayName("Corp To Stores");
        modelCorpToStore.setForJfc(getForJfc());
        modelCorpToStore.setAllowNew(false);
        modelCorpToStore.setAllowSave(true);
        modelCorpToStore.setAllowAdd(false);
        modelCorpToStore.setAllowRemove(false);
        modelCorpToStore.setAllowClear(false);
        modelCorpToStore.setAllowDelete(false);
        modelCorpToStore.setAllowSearch(false);
        modelCorpToStore.setAllowHubSearch(false);
        modelCorpToStore.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelCorpToStore.setCreateUI(li == null || !TransmitBatchServiceInfo.P_CorpToStore.equalsIgnoreCase(li.getName()) );
        modelCorpToStore.setViewOnly(getViewOnly());
        // call TransmitBatchServiceInfo.corpToStoreModelCallback(CorpToStoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TransmitBatchServiceInfo.class, TransmitBatchServiceInfo.P_CorpToStore, modelCorpToStore);
    
        return modelCorpToStore;
    }
    public StatusInfoModel getStatusInfoModel() {
        if (modelStatusInfo != null) return modelStatusInfo;
        modelStatusInfo = new StatusInfoModel(getStatusInfoHub());
        modelStatusInfo.setDisplayName("Status Info");
        modelStatusInfo.setPluralDisplayName("Status Infos");
        modelStatusInfo.setForJfc(getForJfc());
        modelStatusInfo.setAllowNew(false);
        modelStatusInfo.setAllowSave(true);
        modelStatusInfo.setAllowAdd(false);
        modelStatusInfo.setAllowRemove(false);
        modelStatusInfo.setAllowClear(false);
        modelStatusInfo.setAllowDelete(false);
        modelStatusInfo.setAllowSearch(false);
        modelStatusInfo.setAllowHubSearch(false);
        modelStatusInfo.setAllowGotoEdit(true);
        modelStatusInfo.setViewOnly(getViewOnly());
        // call TransmitBatchServiceInfo.statusInfoModelCallback(StatusInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TransmitBatchServiceInfo.class, TransmitBatchServiceInfo.P_StatusInfo, modelStatusInfo);
    
        return modelStatusInfo;
    }
    public TransmitBatchInfoModel getTransmitBatchInfosModel() {
        if (modelTransmitBatchInfos != null) return modelTransmitBatchInfos;
        modelTransmitBatchInfos = new TransmitBatchInfoModel(getTransmitBatchInfos());
        modelTransmitBatchInfos.setDisplayName("Transmit Batch Info");
        modelTransmitBatchInfos.setPluralDisplayName("Transmit Batch Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getTransmitBatchInfos())) {
            modelTransmitBatchInfos.setCreateUI(false);
        }
        modelTransmitBatchInfos.setForJfc(getForJfc());
        modelTransmitBatchInfos.setAllowNew(true);
        modelTransmitBatchInfos.setAllowSave(true);
        modelTransmitBatchInfos.setAllowAdd(false);
        modelTransmitBatchInfos.setAllowMove(false);
        modelTransmitBatchInfos.setAllowRemove(false);
        modelTransmitBatchInfos.setAllowDelete(true);
        modelTransmitBatchInfos.setAllowRefresh(false);
        modelTransmitBatchInfos.setAllowSearch(false);
        modelTransmitBatchInfos.setAllowHubSearch(false);
        modelTransmitBatchInfos.setAllowGotoEdit(true);
        modelTransmitBatchInfos.setViewOnly(getViewOnly());
        modelTransmitBatchInfos.setAllowNew(true);
        modelTransmitBatchInfos.setAllowTableFilter(true);
        modelTransmitBatchInfos.setAllowTableSorting(true);
        modelTransmitBatchInfos.setAllowMultiSelect(false);
        modelTransmitBatchInfos.setAllowCopy(false);
        modelTransmitBatchInfos.setAllowCut(false);
        modelTransmitBatchInfos.setAllowPaste(false);
        // call TransmitBatchServiceInfo.transmitBatchInfosModelCallback(TransmitBatchInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TransmitBatchServiceInfo.class, TransmitBatchServiceInfo.P_TransmitBatchInfos, modelTransmitBatchInfos);
    
        return modelTransmitBatchInfos;
    }
    
    public HubCopy<TransmitBatchServiceInfo> createHubCopy() {
        Hub<TransmitBatchServiceInfo> hubTransmitBatchServiceInfox = new Hub<>(TransmitBatchServiceInfo.class);
        HubCopy<TransmitBatchServiceInfo> hc = new HubCopy<>(getHub(), hubTransmitBatchServiceInfox, true);
        return hc;
    }
    public TransmitBatchServiceInfoModel createCopy() {
        TransmitBatchServiceInfoModel mod = new TransmitBatchServiceInfoModel(createHubCopy().getHub());
        return mod;
    }
}

