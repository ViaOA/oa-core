// Generated by OABuilder

package com.corptostore.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.filter.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.StoreModel;
import com.corptostore.model.TransmitBatchModel;
import com.corptostore.model.TransmitModel;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.TransmitBatch;
import com.corptostore.model.search.StoreSearchModel;
import com.corptostore.model.search.TransmitBatchSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class TransmitModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TransmitModel.class.getName());
    
    // Hubs
    protected Hub<Transmit> hub;
    // selected transmits
    protected Hub<Transmit> hubMultiSelect;
    // detail hubs
    protected Hub<Store> hubStore;
    protected Hub<TransmitBatch> hubTransmitBatch;
    
    // ObjectModels
    protected StoreModel modelStore;
    protected TransmitBatchModel modelTransmitBatch;
    
    // SearchModels used for references
    protected StoreSearchModel modelStoreSearch;
    protected TransmitBatchSearchModel modelTransmitBatchSearch;
    
    public TransmitModel() {
        setDisplayName("Transmit");
        setPluralDisplayName("Transmits");
    }
    
    public TransmitModel(Hub<Transmit> hubTransmit) {
        this();
        if (hubTransmit != null) HubDelegate.setObjectClass(hubTransmit, Transmit.class);
        this.hub = hubTransmit;
    }
    public TransmitModel(Transmit transmit) {
        this();
        getHub().add(transmit);
        getHub().setPos(0);
    }
    
    public Hub<Transmit> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Store> getStoreHub() {
        if (hubStore != null) return hubStore;
        hubStore = getHub().getDetailHub(Transmit.P_Store);
        return hubStore;
    }
    public Hub<TransmitBatch> getTransmitBatchHub() {
        if (hubTransmitBatch != null) return hubTransmitBatch;
        hubTransmitBatch = getHub().getDetailHub(Transmit.P_TransmitBatch);
        return hubTransmitBatch;
    }
    public Transmit getTransmit() {
        return getHub().getAO();
    }
    
    public Hub<Transmit> getHub() {
        if (hub == null) {
            hub = new Hub<Transmit>(Transmit.class);
        }
        return hub;
    }
    
    public Hub<Transmit> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Transmit>(Transmit.class);
        }
        return hubMultiSelect;
    }
    
    public StoreModel getStoreModel() {
        if (modelStore != null) return modelStore;
        modelStore = new StoreModel(getStoreHub());
        modelStore.setDisplayName("Store");
        modelStore.setPluralDisplayName("Stores");
        modelStore.setForJfc(getForJfc());
        modelStore.setAllowNew(false);
        modelStore.setAllowSave(true);
        modelStore.setAllowAdd(false);
        modelStore.setAllowRemove(true);
        modelStore.setAllowClear(true);
        modelStore.setAllowDelete(false);
        modelStore.setAllowSearch(true);
        modelStore.setAllowHubSearch(true);
        modelStore.setAllowGotoEdit(true);
        modelStore.setViewOnly(true);
        // call Transmit.storeModelCallback(StoreModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Transmit.class, Transmit.P_Store, modelStore);
    
        return modelStore;
    }
    public TransmitBatchModel getTransmitBatchModel() {
        if (modelTransmitBatch != null) return modelTransmitBatch;
        modelTransmitBatch = new TransmitBatchModel(getTransmitBatchHub());
        modelTransmitBatch.setDisplayName("Transmit Batch");
        modelTransmitBatch.setPluralDisplayName("Transmit Batches");
        modelTransmitBatch.setForJfc(getForJfc());
        modelTransmitBatch.setAllowNew(false);
        modelTransmitBatch.setAllowSave(true);
        modelTransmitBatch.setAllowAdd(false);
        modelTransmitBatch.setAllowRemove(true);
        modelTransmitBatch.setAllowClear(true);
        modelTransmitBatch.setAllowDelete(false);
        modelTransmitBatch.setAllowSearch(true);
        modelTransmitBatch.setAllowHubSearch(true);
        modelTransmitBatch.setAllowGotoEdit(true);
        modelTransmitBatch.setViewOnly(true);
        // call Transmit.transmitBatchModelCallback(TransmitBatchModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Transmit.class, Transmit.P_TransmitBatch, modelTransmitBatch);
    
        return modelTransmitBatch;
    }
    
    public StoreSearchModel getStoreSearchModel() {
        if (modelStoreSearch != null) return modelStoreSearch;
        modelStoreSearch = new StoreSearchModel();
        HubSelectDelegate.adoptWhereHub(modelStoreSearch.getHub(), Transmit.P_Store, getHub());
        return modelStoreSearch;
    }
    public TransmitBatchSearchModel getTransmitBatchSearchModel() {
        if (modelTransmitBatchSearch != null) return modelTransmitBatchSearch;
        modelTransmitBatchSearch = new TransmitBatchSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTransmitBatchSearch.getHub(), Transmit.P_TransmitBatch, getHub());
        return modelTransmitBatchSearch;
    }
    
    public HubCopy<Transmit> createHubCopy() {
        Hub<Transmit> hubTransmitx = new Hub<>(Transmit.class);
        HubCopy<Transmit> hc = new HubCopy<>(getHub(), hubTransmitx, true);
        return hc;
    }
    public TransmitModel createCopy() {
        TransmitModel mod = new TransmitModel(createHubCopy().getHub());
        return mod;
    }
}

