// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Receive;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.oa.filter.BatchOpenTestFilter;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "batch",
    pluralName = "Batches",
    shortName = "btc",
    displayName = "Batch",
    displayProperty = "batchId",
    sortProperty = "batchId",
    filterClasses = {BatchOpenTestFilter.class}
)
@OATable(
    name = "message_service_batch",
    indexes = {
        @OAIndex(name = "message_service_batch_begin_all_store_send", fkey = true, columns = { @OAIndexColumn(name = "begin_all_store_send_id") }), 
        @OAIndex(name = "message_service_batch_end_all_store_send", fkey = true, columns = { @OAIndexColumn(name = "end_all_store_send_id") }), 
        @OAIndex(name = "message_service_batch_from_store", fkey = true, columns = { @OAIndexColumn(name = "from_store_number") }), 
        @OAIndex(name = "message_service_batch_to_store", fkey = true, columns = { @OAIndexColumn(name = "to_store_number") })
    }
)
public class Batch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Batch.class.getName());

    public static final String P_BatchId = "batchId";
    public static final String P_Available = "available";
    public static final String P_ReadyToUse = "readyToUse";
    public static final String P_Created = "created";
    public static final String P_SessionStartDate = "sessionStartDate";
    public static final String P_SessionSequenceNumber = "sessionSequenceNumber";
    public static final String P_PreviousStartDate = "previousStartDate";
    public static final String P_PreviousSequenceNumber = "previousSequenceNumber";
     
     
    public static final String P_BeginAllStoreSend = "beginAllStoreSend";
    public static final String P_EndAllStoreSend = "endAllStoreSend";
    public static final String P_FromStore = "fromStore";
    public static final String P_Receives = "receives";
    public static final String P_Sends = "sends";
    public static final String P_StoreBatch = "storeBatch";
    public static final String P_ToStore = "toStore";
     
    protected volatile long batchId;
    protected volatile OADateTime available;
    protected volatile OADateTime readyToUse;
    protected volatile OADateTime created;
    protected volatile OADateTime sessionStartDate;
    protected volatile int sessionSequenceNumber;
    protected volatile OADateTime previousStartDate;
    protected volatile int previousSequenceNumber;
     
    // Links to other objects.
    protected volatile transient Send beginAllStoreSend;
    protected volatile transient Send endAllStoreSend;
    protected volatile transient Store fromStore;
    protected transient Hub<Receive> hubReceives;
    protected transient Hub<Send> hubSends;
    protected volatile transient StoreBatch storeBatch;
    protected volatile transient Store toStore;
     
    public Batch() {
        if (!isLoading()) setObjectDefaults();
    }
     
    public Batch(long batchId) {
        this();
        setBatchId(batchId);
    }
     

    @OAProperty(displayName = "Batch Id", isUnique = true, trackPrimitiveNull = false, displayLength = 6, columnLength = 8)
    @OAId
    @OAColumn(name = "batch_id", sqlType = java.sql.Types.BIGINT)
    public long getBatchId() {
        return batchId;
    }
    public void setBatchId(long newValue) {
        long old = batchId;
        fireBeforePropertyChange(P_BatchId, old, newValue);
        this.batchId = newValue;
        firePropertyChange(P_BatchId, old, this.batchId);
    }
    @OAProperty(displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getAvailable() {
        return available;
    }
    public void setAvailable(OADateTime newValue) {
        OADateTime old = available;
        fireBeforePropertyChange(P_Available, old, newValue);
        this.available = newValue;
        firePropertyChange(P_Available, old, this.available);
    }
    @OAProperty(displayName = "Ready To Use", displayLength = 15)
    @OAColumn(name = "ready_to_use", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getReadyToUse() {
        return readyToUse;
    }
    public void setReadyToUse(OADateTime newValue) {
        OADateTime old = readyToUse;
        fireBeforePropertyChange(P_ReadyToUse, old, newValue);
        this.readyToUse = newValue;
        firePropertyChange(P_ReadyToUse, old, this.readyToUse);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(name = "created_date", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Session Start Date", displayLength = 15, columnLength = 18)
    @OAColumn(name = "session_start_date", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getSessionStartDate() {
        return sessionStartDate;
    }
    public void setSessionStartDate(OADateTime newValue) {
        OADateTime old = sessionStartDate;
        fireBeforePropertyChange(P_SessionStartDate, old, newValue);
        this.sessionStartDate = newValue;
        firePropertyChange(P_SessionStartDate, old, this.sessionStartDate);
    }
    @OAProperty(displayName = "Session Sequence Number", displayLength = 6, columnLength = 23)
    @OAColumn(name = "session_sequence_number", sqlType = java.sql.Types.INTEGER)
    public int getSessionSequenceNumber() {
        return sessionSequenceNumber;
    }
    public void setSessionSequenceNumber(int newValue) {
        int old = sessionSequenceNumber;
        fireBeforePropertyChange(P_SessionSequenceNumber, old, newValue);
        this.sessionSequenceNumber = newValue;
        firePropertyChange(P_SessionSequenceNumber, old, this.sessionSequenceNumber);
    }
    @OAProperty(displayName = "Previous Start Date", displayLength = 15, columnLength = 19)
    @OAColumn(name = "previous_start_date", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getPreviousStartDate() {
        return previousStartDate;
    }
    public void setPreviousStartDate(OADateTime newValue) {
        OADateTime old = previousStartDate;
        fireBeforePropertyChange(P_PreviousStartDate, old, newValue);
        this.previousStartDate = newValue;
        firePropertyChange(P_PreviousStartDate, old, this.previousStartDate);
    }
    @OAProperty(displayName = "Previous Sequence Number", displayLength = 6, columnLength = 24)
    @OAColumn(name = "previous_sequence_number", sqlType = java.sql.Types.INTEGER)
    public int getPreviousSequenceNumber() {
        return previousSequenceNumber;
    }
    public void setPreviousSequenceNumber(int newValue) {
        int old = previousSequenceNumber;
        fireBeforePropertyChange(P_PreviousSequenceNumber, old, newValue);
        this.previousSequenceNumber = newValue;
        firePropertyChange(P_PreviousSequenceNumber, old, this.previousSequenceNumber);
    }
    @OAOne(
        displayName = "Begin All Store Send", 
        reverseName = Send.P_BeginAllStoreBatches, 
        allowCreateNew = false, 
        pojoNames = { "beginAllStoreSendId" }
    )
    @OAFkey(columns = {"begin_all_store_send_id"})
    public Send getBeginAllStoreSend() {
        if (beginAllStoreSend == null) {
            beginAllStoreSend = (Send) getObject(P_BeginAllStoreSend);
        }
        return beginAllStoreSend;
    }
    public void setBeginAllStoreSend(Send newValue) {
        Send old = this.beginAllStoreSend;
        fireBeforePropertyChange(P_BeginAllStoreSend, old, newValue);
        this.beginAllStoreSend = newValue;
        firePropertyChange(P_BeginAllStoreSend, old, this.beginAllStoreSend);
    }
    @OAOne(
        displayName = "End All Store Send", 
        reverseName = Send.P_EndAllStoreBatches, 
        allowCreateNew = false, 
        pojoNames = { "endAllStoreSendId" }
    )
    @OAFkey(columns = {"end_all_store_send_id"})
    public Send getEndAllStoreSend() {
        if (endAllStoreSend == null) {
            endAllStoreSend = (Send) getObject(P_EndAllStoreSend);
        }
        return endAllStoreSend;
    }
    public void setEndAllStoreSend(Send newValue) {
        Send old = this.endAllStoreSend;
        fireBeforePropertyChange(P_EndAllStoreSend, old, newValue);
        this.endAllStoreSend = newValue;
        firePropertyChange(P_EndAllStoreSend, old, this.endAllStoreSend);
    }
    @OAOne(
        displayName = "From Store", 
        reverseName = Store.P_FromBatches, 
        allowCreateNew = false, 
        isOneAndOnlyOne = true, 
        pojoNames = { "fromStoreNumber" }
    )
    @OAFkey(columns = {"from_store_number"})
    public Store getFromStore() {
        if (fromStore == null) {
            fromStore = (Store) getObject(P_FromStore);
        }
        return fromStore;
    }
    public void setFromStore(Store newValue) {
        Store old = this.fromStore;
        fireBeforePropertyChange(P_FromStore, old, newValue);
        this.fromStore = newValue;
        firePropertyChange(P_FromStore, old, this.fromStore);
    }
    @OAMany(
        toClass = Receive.class, 
        reverseName = Receive.P_Batch
    )
    public Hub<Receive> getReceives() {
        if (hubReceives == null) {
            hubReceives = (Hub<Receive>) getHub(P_Receives);
        }
        return hubReceives;
    }
    @OAMany(
        toClass = Send.class, 
        reverseName = Send.P_Batch, 
        isProcessed = true
    )
    public Hub<Send> getSends() {
        if (hubSends == null) {
            hubSends = (Hub<Send>) getHub(P_Sends);
        }
        return hubSends;
    }
    @OAOne(
        displayName = "Store Batch", 
        reverseName = StoreBatch.P_Batch, 
        allowCreateNew = false
    )
    public StoreBatch getStoreBatch() {
        if (storeBatch == null) {
            storeBatch = (StoreBatch) getObject(P_StoreBatch);
        }
        return storeBatch;
    }
    public void setStoreBatch(StoreBatch newValue) {
        StoreBatch old = this.storeBatch;
        fireBeforePropertyChange(P_StoreBatch, old, newValue);
        this.storeBatch = newValue;
        firePropertyChange(P_StoreBatch, old, this.storeBatch);
    }
    @OAOne(
        displayName = "To Store", 
        reverseName = Store.P_ToBatches, 
        allowCreateNew = false, 
        isOneAndOnlyOne = true, 
        pojoNames = { "toStoreNumber" }
    )
    @OAFkey(columns = {"to_store_number"})
    public Store getToStore() {
        if (toStore == null) {
            toStore = (Store) getObject(P_ToStore);
        }
        return toStore;
    }
    public void setToStore(Store newValue) {
        Store old = this.toStore;
        fireBeforePropertyChange(P_ToStore, old, newValue);
        this.toStore = newValue;
        firePropertyChange(P_ToStore, old, this.toStore);
    }
    public void load(ResultSet rs, long batchId) throws SQLException {
        this.batchId = batchId;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.available = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.readyToUse = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(5);
        if (timestamp != null) this.sessionStartDate = new OADateTime(timestamp);
        this.sessionSequenceNumber = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Batch.P_SessionSequenceNumber, true);
        }
        timestamp = rs.getTimestamp(7);
        if (timestamp != null) this.previousStartDate = new OADateTime(timestamp);
        this.previousSequenceNumber = (int) rs.getInt(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Batch.P_PreviousSequenceNumber, true);
        }
        long beginAllStoreSendFkey = rs.getLong(9);
        if (!rs.wasNull() && beginAllStoreSendFkey > 0) {
            setProperty(P_BeginAllStoreSend, new OAObjectKey(beginAllStoreSendFkey));
        }
        long endAllStoreSendFkey = rs.getLong(10);
        if (!rs.wasNull() && endAllStoreSendFkey > 0) {
            setProperty(P_EndAllStoreSend, new OAObjectKey(endAllStoreSendFkey));
        }
        int fromStoreFkey = rs.getInt(11);
        if (!rs.wasNull() && fromStoreFkey > 0) {
            setProperty(P_FromStore, new OAObjectKey(fromStoreFkey));
        }
        int toStoreFkey = rs.getInt(12);
        if (!rs.wasNull() && toStoreFkey > 0) {
            setProperty(P_ToStore, new OAObjectKey(toStoreFkey));
        }
        if (rs.getMetaData().getColumnCount() != 12) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
