// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.delegate.oa.DashboardDelegate;
import com.corptostore.model.oa.Dashboard;
import com.corptostore.model.oa.DashboardLine;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "dashboard",
    pluralName = "Dashboards",
    shortName = "dsh",
    displayName = "Dashboard",
    useDataSource = false,
    displayProperty = "id"
)
public class Dashboard extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Dashboard.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
     
     
    public static final String P_DashboardLines = "dashboardLines";
     
    public static final String M_Refresh = "refresh";
    protected volatile int id;
    protected volatile OADateTime created;
     
    // Links to other objects.
    protected transient Hub<DashboardLine> hubDashboardLines;
     
    public Dashboard() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public Dashboard(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAMany(
        displayName = "Dashboard Lines", 
        toClass = DashboardLine.class, 
        owner = true, 
        reverseName = DashboardLine.P_Dashboard, 
        isProcessed = true, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<DashboardLine> getDashboardLines() {
        if (hubDashboardLines == null) {
            hubDashboardLines = (Hub<DashboardLine>) getHub(P_DashboardLines);
        }
        return hubDashboardLines;
    }
    @OAMethod(displayName = "Refresh")
    public void refresh() {
        DashboardDelegate.refresh(this);
    }

}
 
