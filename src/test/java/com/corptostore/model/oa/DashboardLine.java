// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Dashboard;
import com.corptostore.model.oa.DashboardLine;
import com.corptostore.model.oa.Environment;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "dashboardLine",
    pluralName = "DashboardLines",
    shortName = "dsl",
    displayName = "Dashboard Line",
    useDataSource = false,
    isProcessed = true,
    displayProperty = "id"
)
public class DashboardLine extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(DashboardLine.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_Location = "location";
    public static final String P_Message = "message";
     
     
    public static final String P_Dashboard = "dashboard";
    public static final String P_Environment = "environment";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String location;
    protected volatile String message;
     
    // Links to other objects.
    protected volatile transient Dashboard dashboard;
    protected volatile transient Environment environment;
     
    public DashboardLine() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public DashboardLine(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 45, displayLength = 20)
    @OAColumn(maxLength = 45)
    public String getLocation() {
        return location;
    }
    public void setLocation(String newValue) {
        String old = location;
        fireBeforePropertyChange(P_Location, old, newValue);
        this.location = newValue;
        firePropertyChange(P_Location, old, this.location);
    }
    @OAProperty(maxLength = 250, displayLength = 35, columnLength = 20)
    @OAColumn(maxLength = 250)
    public String getMessage() {
        return message;
    }
    public void setMessage(String newValue) {
        String old = message;
        fireBeforePropertyChange(P_Message, old, newValue);
        this.message = newValue;
        firePropertyChange(P_Message, old, this.message);
    }
    @OAOne(
        reverseName = Dashboard.P_DashboardLines, 
        required = true, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"dashboard_id"})
    public Dashboard getDashboard() {
        if (dashboard == null) {
            dashboard = (Dashboard) getObject(P_Dashboard);
        }
        return dashboard;
    }
    public void setDashboard(Dashboard newValue) {
        Dashboard old = this.dashboard;
        fireBeforePropertyChange(P_Dashboard, old, newValue);
        this.dashboard = newValue;
        firePropertyChange(P_Dashboard, old, this.dashboard);
    }
    @OAOne(
        reverseName = Environment.P_DashboardLines, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"environment_id"})
    public Environment getEnvironment() {
        if (environment == null) {
            environment = (Environment) getObject(P_Environment);
        }
        return environment;
    }
    public void setEnvironment(Environment newValue) {
        Environment old = this.environment;
        fireBeforePropertyChange(P_Environment, old, newValue);
        this.environment = newValue;
        firePropertyChange(P_Environment, old, this.environment);
    }
}
 
