// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.PurgeWindow;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.StorePurgeInfo;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "purgeWindow",
    pluralName = "PurgeWindows",
    shortName = "prw",
    displayName = "Purge Window",
    useDataSource = false,
    displayProperty = "id"
)
public class PurgeWindow extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(PurgeWindow.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_TimeoutMinutes = "timeoutMinutes";
    public static final String P_StoreLimit = "storeLimit";
    public static final String P_Finished = "finished";
     
     
    public static final String P_CorpToStore = "corpToStore";
    public static final String P_StatusInfo = "statusInfo";
    public static final String P_StorePurgeInfos = "storePurgeInfos";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile int timeoutMinutes;
    protected volatile int storeLimit;
    protected volatile OADateTime finished;
     
    // Links to other objects.
    protected volatile transient CorpToStore corpToStore;
    protected volatile transient StatusInfo statusInfo;
    protected transient Hub<StorePurgeInfo> hubStorePurgeInfos;
     
    public PurgeWindow() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
        getStatusInfo(); // have it autoCreated
    }
     
    public PurgeWindow(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Timeout Minutes", displayLength = 6, columnLength = 15)
    @OAColumn(name = "timeout_minutes", sqlType = java.sql.Types.INTEGER)
    public int getTimeoutMinutes() {
        return timeoutMinutes;
    }
    public void setTimeoutMinutes(int newValue) {
        int old = timeoutMinutes;
        fireBeforePropertyChange(P_TimeoutMinutes, old, newValue);
        this.timeoutMinutes = newValue;
        firePropertyChange(P_TimeoutMinutes, old, this.timeoutMinutes);
    }
    @OAProperty(displayName = "Store Limit", description = "number of stores that can run purge at once", displayLength = 6, columnLength = 11)
    @OAColumn(name = "store_limit", sqlType = java.sql.Types.INTEGER)
    /**
      number of stores that can run purge at once
    */
    public int getStoreLimit() {
        return storeLimit;
    }
    public void setStoreLimit(int newValue) {
        int old = storeLimit;
        fireBeforePropertyChange(P_StoreLimit, old, newValue);
        this.storeLimit = newValue;
        firePropertyChange(P_StoreLimit, old, this.storeLimit);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getFinished() {
        return finished;
    }
    public void setFinished(OADateTime newValue) {
        OADateTime old = finished;
        fireBeforePropertyChange(P_Finished, old, newValue);
        this.finished = newValue;
        firePropertyChange(P_Finished, old, this.finished);
    }
    @OAOne(
        displayName = "Corp To Store", 
        reverseName = CorpToStore.P_PurgeWindows, 
        required = true, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"corp_to_store_id"})
    public CorpToStore getCorpToStore() {
        if (corpToStore == null) {
            corpToStore = (CorpToStore) getObject(P_CorpToStore);
        }
        return corpToStore;
    }
    public void setCorpToStore(CorpToStore newValue) {
        CorpToStore old = this.corpToStore;
        fireBeforePropertyChange(P_CorpToStore, old, newValue);
        this.corpToStore = newValue;
        firePropertyChange(P_CorpToStore, old, this.corpToStore);
    }
    @OAOne(
        displayName = "Status Info", 
        reverseName = StatusInfo.P_PurgeWindow, 
        required = true, 
        autoCreateNew = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"status_info_id"})
    public StatusInfo getStatusInfo() {
        if (statusInfo == null) {
            statusInfo = (StatusInfo) getObject(P_StatusInfo);
        }
        return statusInfo;
    }
    public void setStatusInfo(StatusInfo newValue) {
        StatusInfo old = this.statusInfo;
        fireBeforePropertyChange(P_StatusInfo, old, newValue);
        this.statusInfo = newValue;
        firePropertyChange(P_StatusInfo, old, this.statusInfo);
    }
    @OAMany(
        displayName = "Store Purge Infos", 
        toClass = StorePurgeInfo.class, 
        reverseName = StorePurgeInfo.P_PurgeWindow, 
        isProcessed = true
    )
    public Hub<StorePurgeInfo> getStorePurgeInfos() {
        if (hubStorePurgeInfos == null) {
            hubStorePurgeInfos = (Hub<StorePurgeInfo>) getHub(P_StorePurgeInfos);
        }
        return hubStorePurgeInfos;
    }
}
 
