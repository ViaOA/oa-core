// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Receive;
import com.corptostore.model.oa.Store;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "receive",
    pluralName = "Receives",
    shortName = "rcv",
    displayName = "Receive",
    displayProperty = "receiveId"
)
@OATable(
    name = "message_service_receive",
    indexes = {
        @OAIndex(name = "message_service_receive_batch", fkey = true, columns = { @OAIndexColumn(name = "batch_id") }), 
        @OAIndex(name = "message_service_receive_store", fkey = true, columns = { @OAIndexColumn(name = "store_number") })
    }
)
public class Receive extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Receive.class.getName());

    public static final String P_ReceiveId = "receiveId";
    public static final String P_Created = "created";
    public static final String P_Processed = "processed";
    public static final String P_IfsSeqNumber = "ifsSeqNumber";
    public static final String P_MessageType = "messageType";
    public static final String P_MessageName = "messageName";
    public static final String P_MessageData = "messageData";
    public static final String P_Error = "error";
     
     
    public static final String P_Batch = "batch";
    public static final String P_Store = "store";
     
    protected volatile int receiveId;
    protected volatile OADateTime created;
    protected volatile OADateTime processed;
    protected volatile long ifsSeqNumber;
    protected volatile String messageType;
    protected volatile String messageName;
    protected volatile String messageData;
    protected volatile String error;
     
    // Links to other objects.
    protected volatile transient Batch batch;
    protected volatile transient Store store;
     
    public Receive() {
        if (!isLoading()) setObjectDefaults();
    }
     
    public Receive(int receiveId) {
        this();
        setReceiveId(receiveId);
    }
     

    @OAProperty(displayName = "Receive Id", isUnique = true, trackPrimitiveNull = false, displayLength = 6, columnLength = 10)
    @OAId
    @OAColumn(name = "receive_id", sqlType = java.sql.Types.INTEGER)
    public int getReceiveId() {
        return receiveId;
    }
    public void setReceiveId(int newValue) {
        int old = receiveId;
        fireBeforePropertyChange(P_ReceiveId, old, newValue);
        this.receiveId = newValue;
        firePropertyChange(P_ReceiveId, old, this.receiveId);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(name = "created_date", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(name = "processed_date", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getProcessed() {
        return processed;
    }
    public void setProcessed(OADateTime newValue) {
        OADateTime old = processed;
        fireBeforePropertyChange(P_Processed, old, newValue);
        this.processed = newValue;
        firePropertyChange(P_Processed, old, this.processed);
    }
    @OAProperty(displayName = "Ifs Seq Number", displayLength = 6, columnLength = 14)
    @OAColumn(name = "ifs_seq_number", sqlType = java.sql.Types.BIGINT)
    public long getIfsSeqNumber() {
        return ifsSeqNumber;
    }
    public void setIfsSeqNumber(long newValue) {
        long old = ifsSeqNumber;
        fireBeforePropertyChange(P_IfsSeqNumber, old, newValue);
        this.ifsSeqNumber = newValue;
        firePropertyChange(P_IfsSeqNumber, old, this.ifsSeqNumber);
    }
    @OAProperty(displayName = "Message Type", maxLength = 35, displayLength = 35, columnLength = 20)
    @OAColumn(name = "message_type", maxLength = 35)
    public String getMessageType() {
        return messageType;
    }
    public void setMessageType(String newValue) {
        String old = messageType;
        fireBeforePropertyChange(P_MessageType, old, newValue);
        this.messageType = newValue;
        firePropertyChange(P_MessageType, old, this.messageType);
    }
    @OAProperty(displayName = "Message Name", maxLength = 50, displayLength = 50, columnLength = 20)
    @OAColumn(name = "message_name", maxLength = 50)
    public String getMessageName() {
        return messageName;
    }
    public void setMessageName(String newValue) {
        String old = messageName;
        fireBeforePropertyChange(P_MessageName, old, newValue);
        this.messageName = newValue;
        firePropertyChange(P_MessageName, old, this.messageName);
    }
    @OAProperty(displayName = "Message Data", displayLength = 30, columnLength = 20)
    @OAColumn(name = "message_data", sqlType = java.sql.Types.CLOB)
    public String getMessageData() {
        return messageData;
    }
    public void setMessageData(String newValue) {
        String old = messageData;
        fireBeforePropertyChange(P_MessageData, old, newValue);
        this.messageData = newValue;
        firePropertyChange(P_MessageData, old, this.messageData);
    }
    @OAProperty(maxLength = 250, displayLength = 50, columnLength = 20)
    @OAColumn(maxLength = 250)
    public String getError() {
        return error;
    }
    public void setError(String newValue) {
        String old = error;
        fireBeforePropertyChange(P_Error, old, newValue);
        this.error = newValue;
        firePropertyChange(P_Error, old, this.error);
    }
    @OAOne(
        reverseName = Batch.P_Receives, 
        allowCreateNew = false, 
        pojoNames = { "batchId" }
    )
    @OAFkey(columns = {"batch_id"})
    public Batch getBatch() {
        if (batch == null) {
            batch = (Batch) getObject(P_Batch);
        }
        return batch;
    }
    public void setBatch(Batch newValue) {
        Batch old = this.batch;
        fireBeforePropertyChange(P_Batch, old, newValue);
        this.batch = newValue;
        firePropertyChange(P_Batch, old, this.batch);
    }
    @OAOne(
        reverseName = Store.P_Receives, 
        required = true, 
        allowCreateNew = false, 
        pojoNames = { "storeNumber" }
    )
    @OAFkey(columns = {"store_number"})
    public Store getStore() {
        if (store == null) {
            store = (Store) getObject(P_Store);
        }
        return store;
    }
    public void setStore(Store newValue) {
        Store old = this.store;
        fireBeforePropertyChange(P_Store, old, newValue);
        this.store = newValue;
        firePropertyChange(P_Store, old, this.store);
    }
    public void load(ResultSet rs, int receiveId) throws SQLException {
        this.receiveId = receiveId;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.processed = new OADateTime(timestamp);
        this.ifsSeqNumber = (long) rs.getLong(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Receive.P_IfsSeqNumber, true);
        }
        this.messageType = rs.getString(5);
        this.messageName = rs.getString(6);
        this.messageData = rs.getString(7);
        this.error = rs.getString(8);
        long batchFkey = rs.getLong(9);
        if (!rs.wasNull() && batchFkey > 0) {
            setProperty(P_Batch, new OAObjectKey(batchFkey));
        }
        int storeFkey = rs.getInt(10);
        if (!rs.wasNull() && storeFkey > 0) {
            setProperty(P_Store, new OAObjectKey(storeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 10) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
