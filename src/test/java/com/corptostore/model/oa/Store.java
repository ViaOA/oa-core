// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Receive;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreInfo;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.TesterStore;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.filter.StoreTestFilterFilter;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "store",
    pluralName = "Stores",
    shortName = "str",
    displayName = "Store",
    displayProperty = "storeNumber",
    sortProperty = "storeNumber",
    filterClasses = {StoreTestFilterFilter.class}
)
@OATable(
    name = "message_service_store"
)
public class Store extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Store.class.getName());

    public static final String P_StoreNumber = "storeNumber";
    public static final String P_CorpFromStoreLock = "corpFromStoreLock";
    public static final String P_CorpToStoreLock = "corpToStoreLock";
    public static final String P_LastTransmitId = "lastTransmitId";
    public static final String P_LastProcessedIfsSequenceNumber = "lastProcessedIfsSequenceNumber";
    public static final String P_StoreOnline = "storeOnline";
    public static final String P_Active = "active";
    public static final String P_Registered = "registered";
     
     
    public static final String P_FromBatches = "fromBatches";
    public static final String P_Receives = "receives";
    public static final String P_Sends = "sends";
    public static final String P_StoreInfos = "storeInfos";
    public static final String P_StoreTransmitBatches = "storeTransmitBatches";
    public static final String P_TesterStores = "testerStores";
    public static final String P_ToBatches = "toBatches";
    public static final String P_Transmits = "transmits";
     
    protected volatile int storeNumber;
    protected volatile OADateTime corpFromStoreLock;
    protected volatile OADateTime corpToStoreLock;
    protected volatile long lastTransmitId;
    protected volatile long lastProcessedIfsSequenceNumber;
    protected volatile boolean storeOnline;
    protected volatile boolean active;
    protected volatile OADateTime registered;
     
    // Links to other objects.
    protected transient Hub<StoreInfo> hubStoreInfos;
    protected transient Hub<StoreTransmitBatch> hubStoreTransmitBatches;
     
    public Store() {
        if (!isLoading()) setObjectDefaults();
    }
     
    public Store(int storeNumber) {
        this();
        setStoreNumber(storeNumber);
    }
     

    @OAProperty(displayName = "Store Number", isUnique = true, trackPrimitiveNull = false, displayLength = 5, columnLength = 6)
    @OAId(autoAssign = false)
    @OAColumn(name = "store_number", sqlType = java.sql.Types.INTEGER)
    public int getStoreNumber() {
        return storeNumber;
    }
    public void setStoreNumber(int newValue) {
        int old = storeNumber;
        fireBeforePropertyChange(P_StoreNumber, old, newValue);
        this.storeNumber = newValue;
        firePropertyChange(P_StoreNumber, old, this.storeNumber);
    }
    @OAProperty(displayName = "Corp From Store Lock", displayLength = 15, columnLength = 20)
    @OAColumn(name = "corp_from_store_lock", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCorpFromStoreLock() {
        return corpFromStoreLock;
    }
    public void setCorpFromStoreLock(OADateTime newValue) {
        OADateTime old = corpFromStoreLock;
        fireBeforePropertyChange(P_CorpFromStoreLock, old, newValue);
        this.corpFromStoreLock = newValue;
        firePropertyChange(P_CorpFromStoreLock, old, this.corpFromStoreLock);
    }
    @OAProperty(displayName = "Corp To Store Lock", displayLength = 15, columnLength = 18)
    @OAColumn(name = "corp_to_store_lock", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCorpToStoreLock() {
        return corpToStoreLock;
    }
    public void setCorpToStoreLock(OADateTime newValue) {
        OADateTime old = corpToStoreLock;
        fireBeforePropertyChange(P_CorpToStoreLock, old, newValue);
        this.corpToStoreLock = newValue;
        firePropertyChange(P_CorpToStoreLock, old, this.corpToStoreLock);
    }
    @OAProperty(displayName = "Last Transmit Id", displayLength = 6, columnLength = 16)
    @OAColumn(name = "last_transmit_id", sqlType = java.sql.Types.BIGINT)
    public long getLastTransmitId() {
        return lastTransmitId;
    }
    public void setLastTransmitId(long newValue) {
        long old = lastTransmitId;
        fireBeforePropertyChange(P_LastTransmitId, old, newValue);
        this.lastTransmitId = newValue;
        firePropertyChange(P_LastTransmitId, old, this.lastTransmitId);
    }
    @OAProperty(displayName = "Last Processed Ifs Sequence Number", displayLength = 6, columnLength = 34)
    @OAColumn(name = "last_processed_ifs_sequence_number", sqlType = java.sql.Types.BIGINT)
    public long getLastProcessedIfsSequenceNumber() {
        return lastProcessedIfsSequenceNumber;
    }
    public void setLastProcessedIfsSequenceNumber(long newValue) {
        long old = lastProcessedIfsSequenceNumber;
        fireBeforePropertyChange(P_LastProcessedIfsSequenceNumber, old, newValue);
        this.lastProcessedIfsSequenceNumber = newValue;
        firePropertyChange(P_LastProcessedIfsSequenceNumber, old, this.lastProcessedIfsSequenceNumber);
    }
    @OAProperty(displayName = "Store Online", displayLength = 5, columnLength = 12)
    @OAColumn(name = "store_online", sqlType = java.sql.Types.BOOLEAN)
    public boolean getStoreOnline() {
        return storeOnline;
    }
    public boolean isStoreOnline() {
        return getStoreOnline();
    }
    public void setStoreOnline(boolean newValue) {
        boolean old = storeOnline;
        fireBeforePropertyChange(P_StoreOnline, old, newValue);
        this.storeOnline = newValue;
        firePropertyChange(P_StoreOnline, old, this.storeOnline);
    }
    @OAProperty(displayLength = 5, columnLength = 6)
    @OAColumn(name = "corp_to_store_active", sqlType = java.sql.Types.BOOLEAN)
    public boolean getActive() {
        return active;
    }
    public boolean isActive() {
        return getActive();
    }
    public void setActive(boolean newValue) {
        boolean old = active;
        fireBeforePropertyChange(P_Active, old, newValue);
        this.active = newValue;
        firePropertyChange(P_Active, old, this.active);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(name = "corp_to_store_registered", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getRegistered() {
        return registered;
    }
    public void setRegistered(OADateTime newValue) {
        OADateTime old = registered;
        fireBeforePropertyChange(P_Registered, old, newValue);
        this.registered = newValue;
        firePropertyChange(P_Registered, old, this.registered);
    }
    @OAMany(
        displayName = "From Batches", 
        toClass = Batch.class, 
        reverseName = Batch.P_FromStore, 
        mustBeEmptyForDelete = true, 
        createMethod = false
    )
    private Hub<Batch> getFromBatches() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        toClass = Receive.class, 
        reverseName = Receive.P_Store, 
        createMethod = false
    )
    private Hub<Receive> getReceives() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        toClass = Send.class, 
        reverseName = Send.P_Store, 
        mustBeEmptyForDelete = true, 
        createMethod = false
    )
    private Hub<Send> getSends() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        displayName = "Store Infos", 
        toClass = StoreInfo.class, 
        reverseName = StoreInfo.P_Store, 
        isProcessed = true
    )
    public Hub<StoreInfo> getStoreInfos() {
        if (hubStoreInfos == null) {
            hubStoreInfos = (Hub<StoreInfo>) getHub(P_StoreInfos);
        }
        return hubStoreInfos;
    }
    @OAMany(
        displayName = "Store Transmit Batches", 
        toClass = StoreTransmitBatch.class, 
        owner = true, 
        reverseName = StoreTransmitBatch.P_Store, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<StoreTransmitBatch> getStoreTransmitBatches() {
        if (hubStoreTransmitBatches == null) {
            hubStoreTransmitBatches = (Hub<StoreTransmitBatch>) getHub(P_StoreTransmitBatches);
        }
        return hubStoreTransmitBatches;
    }
    @OAMany(
        displayName = "Tester Stores", 
        toClass = TesterStore.class, 
        reverseName = TesterStore.P_Store, 
        createMethod = false
    )
    private Hub<TesterStore> getTesterStores() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        displayName = "To Batches", 
        toClass = Batch.class, 
        reverseName = Batch.P_ToStore, 
        mustBeEmptyForDelete = true, 
        createMethod = false
    )
    private Hub<Batch> getToBatches() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        toClass = Transmit.class, 
        reverseName = Transmit.P_Store, 
        createMethod = false
    )
    private Hub<Transmit> getTransmits() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    public void load(ResultSet rs, int storeNumber) throws SQLException {
        this.storeNumber = storeNumber;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.corpFromStoreLock = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.corpToStoreLock = new OADateTime(timestamp);
        this.lastTransmitId = (long) rs.getLong(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Store.P_LastTransmitId, true);
        }
        this.lastProcessedIfsSequenceNumber = (long) rs.getLong(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Store.P_LastProcessedIfsSequenceNumber, true);
        }
        this.storeOnline = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Store.P_StoreOnline, true);
        }
        this.active = rs.getBoolean(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Store.P_Active, true);
        }
        timestamp = rs.getTimestamp(8);
        if (timestamp != null) this.registered = new OADateTime(timestamp);
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
