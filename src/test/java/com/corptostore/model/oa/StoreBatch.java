// Generated by OABuilder
package com.corptostore.model.oa;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAIndex;
import com.viaoa.annotation.OAIndexColumn;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.annotation.OATable;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectKey;
import com.viaoa.util.OADate;

@OAClass(lowerName = "storeBatch", pluralName = "StoreBatches", shortName = "stb", displayName = "Store Batch", displayProperty = "batch")
@OATable(name = "message_service_store_batch", indexes = {
		@OAIndex(name = "message_service_store_batch_batch", fkey = true, columns = { @OAIndexColumn(name = "batch_id") }),
		@OAIndex(name = "message_service_store_batch_store_transmit_batch", fkey = true, columns = { @OAIndexColumn(name = "store_number"),
				@OAIndexColumn(name = "transmit_batch_date") })
})
public class StoreBatch extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(StoreBatch.class.getName());

	public static final String P_StoreNumber = "storeNumber";
	public static final String P_TransmitBatchDate = "transmitBatchDate";
	public static final String P_BatchId = "batchId";

	public static final String P_Batch = "batch";
	public static final String P_StoreTransmitBatch = "storeTransmitBatch";

	protected volatile int storeNumber;
	protected volatile OADate transmitBatchDate;
	protected volatile long batchId;

	// Links to other objects.
	protected volatile transient Batch batch;
	protected volatile transient StoreTransmitBatch storeTransmitBatch;

	public StoreBatch() {
		if (!isLoading()) {
			setObjectDefaults();
		}
	}

	public StoreBatch(int storeNumber, OADate transmitBatchDate, long batchId) {
		this();
		setStoreNumber(storeNumber);
		setTransmitBatchDate(transmitBatchDate);
		setBatchId(batchId);
	}

	@OAProperty(displayName = "Store Number", isUnique = true, trackPrimitiveNull = false, displayLength = 6)
	@OAId(autoAssign = false)
	@OAColumn(name = "store_number", sqlType = java.sql.Types.INTEGER)
	public int getStoreNumber() {
		return storeNumber;
	}

	public void setStoreNumber(int newValue) {
		int old = storeNumber;
		fireBeforePropertyChange(P_StoreNumber, old, newValue);
		this.storeNumber = newValue;
		firePropertyChange(P_StoreNumber, old, this.storeNumber);
	}

	@OAProperty(displayName = "Transmit Batch Date", isUnique = true, trackPrimitiveNull = false, displayLength = 8, uiColumnLength = 19)
	@OAId(autoAssign = false, pos = 1)
	@OAColumn(name = "transmit_batch_date", sqlType = java.sql.Types.DATE)
	public OADate getTransmitBatchDate() {
		return transmitBatchDate;
	}

	public void setTransmitBatchDate(OADate newValue) {
		OADate old = transmitBatchDate;
		fireBeforePropertyChange(P_TransmitBatchDate, old, newValue);
		this.transmitBatchDate = newValue;
		firePropertyChange(P_TransmitBatchDate, old, this.transmitBatchDate);
	}

	@OAProperty(displayName = "Batch Id", isUnique = true, trackPrimitiveNull = false, displayLength = 6, uiColumnLength = 8)
	@OAId(autoAssign = false, pos = 2)
	@OAColumn(name = "batch_id", sqlType = java.sql.Types.BIGINT)
	public long getBatchId() {
		return batchId;
	}

	public void setBatchId(long newValue) {
		long old = batchId;
		fireBeforePropertyChange(P_BatchId, old, newValue);
		this.batchId = newValue;
		firePropertyChange(P_BatchId, old, this.batchId);
	}

	@OAOne(reverseName = Batch.P_StoreBatch, fkeys = { @OAFkey(fromProperty = P_BatchId, toProperty = Batch.P_BatchId) })
	public Batch getBatch() {
		if (batch == null) {
			batch = (Batch) getObject(P_Batch);
		}
		return batch;
	}

	public void setBatch(Batch newValue) {
		Batch old = this.batch;
		fireBeforePropertyChange(P_Batch, old, newValue);
		this.batch = newValue;
		firePropertyChange(P_Batch, old, this.batch);
	}

	@OAOne(displayName = "Store Transmit Batch", reverseName = StoreTransmitBatch.P_StoreBatches, required = true, allowCreateNew = false, fkeys = {
			@OAFkey(fromProperty = P_StoreNumber, toProperty = StoreTransmitBatch.P_StoreNumber),
			@OAFkey(fromProperty = P_TransmitBatchDate, toProperty = StoreTransmitBatch.P_TransmitBatchDate) })
	public StoreTransmitBatch getStoreTransmitBatch() {
		if (storeTransmitBatch == null) {
			storeTransmitBatch = (StoreTransmitBatch) getObject(P_StoreTransmitBatch);
		}
		return storeTransmitBatch;
	}

	public void setStoreTransmitBatch(StoreTransmitBatch newValue) {
		StoreTransmitBatch old = this.storeTransmitBatch;
		fireBeforePropertyChange(P_StoreTransmitBatch, old, newValue);
		this.storeTransmitBatch = newValue;
		firePropertyChange(P_StoreTransmitBatch, old, this.storeTransmitBatch);
	}

	public void load(ResultSet rs, int storeNumber, OADate transmitBatchDate, long batchId) throws SQLException {
		this.storeNumber = storeNumber;
		this.transmitBatchDate = transmitBatchDate;
		this.batchId = batchId;
		setProperty(P_Batch, new OAObjectKey(this.batchId));
		setProperty(P_StoreTransmitBatch, new OAObjectKey(this.storeNumber, this.transmitBatchDate));

		this.changedFlag = false;
		this.newFlag = false;
	}
}
