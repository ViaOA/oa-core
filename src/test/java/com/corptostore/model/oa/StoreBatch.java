// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;
 
@OAClass(
    lowerName = "storeBatch",
    pluralName = "StoreBatches",
    shortName = "stb",
    displayName = "Store Batch",
    displayProperty = "batch"
)
@OATable(
    name = "message_service_store_batch",
    indexes = {
        @OAIndex(name = "message_service_store_batch_batch", fkey = true, columns = { @OAIndexColumn(name = "batch_id") }), 
        @OAIndex(name = "message_service_store_batch_store_transmit_batch", fkey = true, columns = { @OAIndexColumn(name = "store_number"), @OAIndexColumn(name = "transmit_batch_date") })
    }
)
public class StoreBatch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(StoreBatch.class.getName());

    public static final String P_StoreNumber = "storeNumber";
    public static final String P_TransmitBatchDate = "transmitBatchDate";
    public static final String P_BatchId = "batchId";
     
     
    public static final String P_Batch = "batch";
    public static final String P_StoreTransmitBatch = "storeTransmitBatch";
     
    protected volatile int storeNumber;
    protected volatile OADate transmitBatchDate;
    protected volatile long batchId;
     
    // Links to other objects.
    protected volatile transient Batch batch;
    protected volatile transient StoreTransmitBatch storeTransmitBatch;
     
    public StoreBatch() {
        if (!isLoading()) setObjectDefaults();
    }
     
    public StoreBatch(int storeNumber, OADate transmitBatchDate, long batchId) {
        this();
        setStoreNumber(storeNumber);
        setTransmitBatchDate(transmitBatchDate);
        setBatchId(batchId);
    }
     

    @OAProperty(displayName = "Store Number", isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId(autoAssign = false)
    @OAColumn(name = "store_number", sqlType = java.sql.Types.INTEGER)
    public int getStoreNumber() {
        Object val = getValueFromLink(P_StoreNumber, storeNumber);
        if (val == null) this.storeNumber = 0;
        else this.storeNumber = (int) val;
        return storeNumber;
    }
    public void setStoreNumber(int newValue) {
        int old = storeNumber;
        fireBeforePropertyChange(P_StoreNumber, old, newValue);
        this.storeNumber = newValue;
        if (!isLoading() && onFkeyPropertyChange(P_StoreNumber, storeNumber)) {
            storeTransmitBatch = null; // reset, fkey value changed
        }
        firePropertyChange(P_StoreNumber, old, this.storeNumber);
    }
    @OAProperty(displayName = "Transmit Batch Date", isUnique = true, trackPrimitiveNull = false, displayLength = 8, columnLength = 19)
    @OAId(autoAssign = false, pos = 1)
    @OAColumn(name = "transmit_batch_date", sqlType = java.sql.Types.DATE)
    public OADate getTransmitBatchDate() {
        Object val = getValueFromLink(P_TransmitBatchDate, transmitBatchDate);
        if (val == null) this.transmitBatchDate = null;
        else this.transmitBatchDate = (OADate) val;
        return transmitBatchDate;
    }
    public void setTransmitBatchDate(OADate newValue) {
        OADate old = transmitBatchDate;
        fireBeforePropertyChange(P_TransmitBatchDate, old, newValue);
        this.transmitBatchDate = newValue;
        if (!isLoading() && onFkeyPropertyChange(P_TransmitBatchDate, transmitBatchDate)) {
            storeTransmitBatch = null; // reset, fkey value changed
        }
        firePropertyChange(P_TransmitBatchDate, old, this.transmitBatchDate);
    }
    @OAProperty(displayName = "Batch Id", isUnique = true, trackPrimitiveNull = false, displayLength = 6, columnLength = 8)
    @OAId(autoAssign = false, pos = 2)
    @OAColumn(name = "batch_id", sqlType = java.sql.Types.BIGINT)
    public long getBatchId() {
        Object val = getValueFromLink(P_BatchId, batchId);
        if (val == null) this.batchId = 0;
        else this.batchId = (long) val;
        return batchId;
    }
    public void setBatchId(long newValue) {
        long old = batchId;
        fireBeforePropertyChange(P_BatchId, old, newValue);
        this.batchId = newValue;
        if (!isLoading() && onFkeyPropertyChange(P_BatchId, batchId)) {
            batch = null; // reset, fkey value changed
        }
        firePropertyChange(P_BatchId, old, this.batchId);
    }
    @OAOne(
        reverseName = Batch.P_StoreBatch, 
        usesProperties = { P_BatchId }
    )
    @OAFkey(columns = {"batch_id"})
    public Batch getBatch() {
        if (batch == null) {
            batch = (Batch) getObject(P_Batch);
        }
        return batch;
    }
    public void setBatch(Batch newValue) {
        Batch old = this.batch;
        fireBeforePropertyChange(P_Batch, old, newValue);
        this.batch = newValue;
        firePropertyChange(P_Batch, old, this.batch);
    }
    @OAOne(
        displayName = "Store Transmit Batch", 
        reverseName = StoreTransmitBatch.P_StoreBatches, 
        required = true, 
        allowCreateNew = false, 
        usesProperties = { P_StoreNumber, P_TransmitBatchDate }
    )
    @OAFkey(columns = {"store_number", "transmit_batch_date"})
    public StoreTransmitBatch getStoreTransmitBatch() {
        if (storeTransmitBatch == null) {
            storeTransmitBatch = (StoreTransmitBatch) getObject(P_StoreTransmitBatch);
        }
        return storeTransmitBatch;
    }
    public void setStoreTransmitBatch(StoreTransmitBatch newValue) {
        StoreTransmitBatch old = this.storeTransmitBatch;
        fireBeforePropertyChange(P_StoreTransmitBatch, old, newValue);
        this.storeTransmitBatch = newValue;
        firePropertyChange(P_StoreTransmitBatch, old, this.storeTransmitBatch);
    }
    public void load(ResultSet rs, int storeNumber, OADate transmitBatchDate, long batchId) throws SQLException {
        this.storeNumber = storeNumber;
        this.transmitBatchDate = transmitBatchDate;
        this.batchId = batchId;
        setProperty(P_Batch, new OAObjectKey(this.batchId));
        setProperty(P_StoreTransmitBatch, new OAObjectKey(this.storeNumber, this.transmitBatchDate));
        if (rs.getMetaData().getColumnCount() != 3) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
