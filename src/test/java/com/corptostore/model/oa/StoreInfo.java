// Generated by OABuilder
package com.corptostore.model.oa;

import java.util.logging.Logger;

import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.ResendBatchRequest;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreInfo;
import com.corptostore.model.oa.StoreLockInfo;
import com.corptostore.model.oa.StorePurgeInfo;
import com.corptostore.model.oa.StoreTransmitInfo;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAMany;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.hub.Hub;
import com.viaoa.object.OAObject;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;

@OAClass(lowerName = "storeInfo", pluralName = "StoreInfos", shortName = "sti", displayName = "Store Info", useDataSource = false, isProcessed = true, displayProperty = "store")
public class StoreInfo extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(StoreInfo.class.getName());

	public static final String P_Id = "id";
	public static final String P_Created = "created";
	public static final String P_Paused = "paused";
	public static final String P_Locked = "locked";
	public static final String P_CheckCount = "checkCount";
	public static final String P_FirstCheck = "firstCheck";
	public static final String P_LastCheck = "lastCheck";
	public static final String P_LastCheckDone = "lastCheckDone";
	public static final String P_LastActivity = "lastActivity";
	public static final String P_LastActivityDate = "lastActivityDate";
	public static final String P_LastActivityDone = "lastActivityDone";
	public static final String P_ActivityCount = "activityCount";
	public static final String P_NextTransmit = "nextTransmit";
	public static final String P_LastTransmit = "lastTransmit";
	public static final String P_LastBatchCompleted = "lastBatchCompleted";

	public static final String P_CorpToStore = "corpToStore";
	public static final String P_ResendBatchRequests = "resendBatchRequests";
	public static final String P_StatusInfo = "statusInfo";
	public static final String P_Store = "store";
	public static final String P_StoreLockInfo = "storeLockInfo";
	public static final String P_StorePurgeInfos = "storePurgeInfos";
	public static final String P_StoreTransmitInfos = "storeTransmitInfos";

	public static final String M_PauseStore = "pauseStore";
	public static final String M_ContinueStore = "continueStore";
	protected volatile int id;
	protected volatile OADateTime created;
	protected volatile OADateTime paused;
	protected volatile boolean locked;
	protected volatile int checkCount;
	protected volatile OADateTime firstCheck;
	protected volatile OADateTime lastCheck;
	protected volatile OADateTime lastCheckDone;
	protected volatile OADateTime lastActivity;
	protected volatile OADate lastActivityDate;
	protected volatile OADateTime lastActivityDone;
	protected volatile int activityCount;
	protected volatile OADate nextTransmit;
	protected volatile OADate lastTransmit;
	protected volatile String lastBatchCompleted;

	// Links to other objects.
	protected volatile transient CorpToStore corpToStore;
	protected transient Hub<ResendBatchRequest> hubResendBatchRequests;
	protected volatile transient StatusInfo statusInfo;
	protected volatile transient Store store;
	protected volatile transient StoreLockInfo storeLockInfo;
	protected transient Hub<StorePurgeInfo> hubStorePurgeInfos;
	protected transient Hub<StoreTransmitInfo> hubStoreTransmitInfos;

	public static int idx;

	public StoreInfo() {
		System.out.println("==========> StoreInfo: " + (++idx) + "    ID=" + id);
		int xx = 4;
		xx++;
		if (!isLoading()) {
			setObjectDefaults();
		}
	}

	@Override
	public void setObjectDefaults() {
		setCreated(new OADateTime());
		getStatusInfo(); // have it autoCreated
	}

	public StoreInfo(int id) {
		this();
		setId(id);
	}

	@OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
	@OAId
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getCreated() {
		return created;
	}

	public void setCreated(OADateTime newValue) {
		OADateTime old = created;
		fireBeforePropertyChange(P_Created, old, newValue);
		this.created = newValue;
		firePropertyChange(P_Created, old, this.created);
	}

	@OAProperty(displayLength = 15)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getPaused() {
		return paused;
	}

	public void setPaused(OADateTime newValue) {
		OADateTime old = paused;
		fireBeforePropertyChange(P_Paused, old, newValue);
		this.paused = newValue;
		firePropertyChange(P_Paused, old, this.paused);
	}

	@OAProperty(displayLength = 5, columnLength = 6)
	@OAColumn(sqlType = java.sql.Types.BOOLEAN)
	public boolean getLocked() {
		return locked;
	}

	public boolean isLocked() {
		return getLocked();
	}

	public void setLocked(boolean newValue) {
		boolean old = locked;
		fireBeforePropertyChange(P_Locked, old, newValue);
		this.locked = newValue;
		firePropertyChange(P_Locked, old, this.locked);
	}

	@OAProperty(displayName = "Check Count", displayLength = 6, columnLength = 11)
	@OAColumn(name = "check_count", sqlType = java.sql.Types.INTEGER)
	public int getCheckCount() {
		return checkCount;
	}

	public void setCheckCount(int newValue) {
		int old = checkCount;
		fireBeforePropertyChange(P_CheckCount, old, newValue);
		this.checkCount = newValue;
		firePropertyChange(P_CheckCount, old, this.checkCount);
	}

	@OAProperty(displayName = "First Check", displayLength = 15, ignoreTimeZone = true)
	@OAColumn(name = "first_check", sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getFirstCheck() {
		return firstCheck;
	}

	public void setFirstCheck(OADateTime newValue) {
		OADateTime old = firstCheck;
		fireBeforePropertyChange(P_FirstCheck, old, newValue);
		this.firstCheck = newValue;
		firePropertyChange(P_FirstCheck, old, this.firstCheck);
	}

	@OAProperty(displayName = "Last Check", displayLength = 15, ignoreTimeZone = true)
	@OAColumn(name = "last_check", sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getLastCheck() {
		return lastCheck;
	}

	public void setLastCheck(OADateTime newValue) {
		OADateTime old = lastCheck;
		fireBeforePropertyChange(P_LastCheck, old, newValue);
		this.lastCheck = newValue;
		firePropertyChange(P_LastCheck, old, this.lastCheck);
	}

	@OAProperty(displayName = "Last Check Done", displayLength = 15, ignoreTimeZone = true)
	@OAColumn(name = "last_check_done", sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getLastCheckDone() {
		return lastCheckDone;
	}

	public void setLastCheckDone(OADateTime newValue) {
		OADateTime old = lastCheckDone;
		fireBeforePropertyChange(P_LastCheckDone, old, newValue);
		this.lastCheckDone = newValue;
		firePropertyChange(P_LastCheckDone, old, this.lastCheckDone);
	}

	@OAProperty(displayName = "Last Activity", displayLength = 15, ignoreTimeZone = true)
	@OAColumn(name = "last_activity", sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getLastActivity() {
		return lastActivity;
	}

	public void setLastActivity(OADateTime newValue) {
		OADateTime old = lastActivity;
		fireBeforePropertyChange(P_LastActivity, old, newValue);
		this.lastActivity = newValue;
		firePropertyChange(P_LastActivity, old, this.lastActivity);
	}

	@OAProperty(displayName = "Last Activity Date", displayLength = 8, columnLength = 18)
	@OAColumn(name = "last_activity_date", sqlType = java.sql.Types.DATE)
	public OADate getLastActivityDate() {
		return lastActivityDate;
	}

	public void setLastActivityDate(OADate newValue) {
		OADate old = lastActivityDate;
		fireBeforePropertyChange(P_LastActivityDate, old, newValue);
		this.lastActivityDate = newValue;
		firePropertyChange(P_LastActivityDate, old, this.lastActivityDate);
	}

	@OAProperty(displayName = "Last Activity Done", displayLength = 15, columnLength = 18, ignoreTimeZone = true)
	@OAColumn(name = "last_activity_done", sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getLastActivityDone() {
		return lastActivityDone;
	}

	public void setLastActivityDone(OADateTime newValue) {
		OADateTime old = lastActivityDone;
		fireBeforePropertyChange(P_LastActivityDone, old, newValue);
		this.lastActivityDone = newValue;
		firePropertyChange(P_LastActivityDone, old, this.lastActivityDone);
	}

	@OAProperty(displayName = "Activity Count", displayLength = 6, columnLength = 14)
	@OAColumn(name = "activity_count", sqlType = java.sql.Types.INTEGER)
	public int getActivityCount() {
		return activityCount;
	}

	public void setActivityCount(int newValue) {
		int old = activityCount;
		fireBeforePropertyChange(P_ActivityCount, old, newValue);
		this.activityCount = newValue;
		firePropertyChange(P_ActivityCount, old, this.activityCount);
	}

	@OAProperty(displayName = "Next Transmit", displayLength = 8, columnLength = 13)
	@OAColumn(name = "next_transmit", sqlType = java.sql.Types.DATE)
	public OADate getNextTransmit() {
		return nextTransmit;
	}

	public void setNextTransmit(OADate newValue) {
		OADate old = nextTransmit;
		fireBeforePropertyChange(P_NextTransmit, old, newValue);
		this.nextTransmit = newValue;
		firePropertyChange(P_NextTransmit, old, this.nextTransmit);
	}

	@OAProperty(displayName = "Last Transmit", displayLength = 8, columnLength = 13)
	@OAColumn(name = "last_transmit", sqlType = java.sql.Types.DATE)
	public OADate getLastTransmit() {
		return lastTransmit;
	}

	public void setLastTransmit(OADate newValue) {
		OADate old = lastTransmit;
		fireBeforePropertyChange(P_LastTransmit, old, newValue);
		this.lastTransmit = newValue;
		firePropertyChange(P_LastTransmit, old, this.lastTransmit);
	}

	@OAProperty(displayName = "Last Batch Completed", maxLength = 254, displayLength = 50, columnLength = 20)
	@OAColumn(name = "last_batch_completed", maxLength = 254)
	public String getLastBatchCompleted() {
		return lastBatchCompleted;
	}

	public void setLastBatchCompleted(String newValue) {
		String old = lastBatchCompleted;
		fireBeforePropertyChange(P_LastBatchCompleted, old, newValue);
		this.lastBatchCompleted = newValue;
		firePropertyChange(P_LastBatchCompleted, old, this.lastBatchCompleted);
	}

	@OAOne(displayName = "Corp To Store", reverseName = CorpToStore.P_StoreInfos, required = true, isProcessed = true, allowCreateNew = false, allowAddExisting = false)
	@OAFkey(columns = { "corp_to_store_id" })
	public CorpToStore getCorpToStore() {
		if (corpToStore == null) {
			corpToStore = (CorpToStore) getObject(P_CorpToStore);
		}
		return corpToStore;
	}

	public void setCorpToStore(CorpToStore newValue) {
		CorpToStore old = this.corpToStore;
		fireBeforePropertyChange(P_CorpToStore, old, newValue);
		this.corpToStore = newValue;
		firePropertyChange(P_CorpToStore, old, this.corpToStore);
	}

	@OAMany(displayName = "Resend Batch Requests", toClass = ResendBatchRequest.class, owner = true, reverseName = ResendBatchRequest.P_StoreInfo, cascadeSave = true, cascadeDelete = true)
	public Hub<ResendBatchRequest> getResendBatchRequests() {
		if (hubResendBatchRequests == null) {
			hubResendBatchRequests = (Hub<ResendBatchRequest>) getHub(P_ResendBatchRequests);
		}
		return hubResendBatchRequests;
	}

	@OAOne(displayName = "Status Info", reverseName = StatusInfo.P_StoreInfo, required = true,
			// autoCreateNew = true,
			allowAddExisting = false)
	@OAFkey(columns = { "status_info_id" })
	public StatusInfo getStatusInfo() {
		if (statusInfo == null) {
			statusInfo = (StatusInfo) getObject(P_StatusInfo);
		}
		return statusInfo;
	}

	public void setStatusInfo(StatusInfo newValue) {
		StatusInfo old = this.statusInfo;
		fireBeforePropertyChange(P_StatusInfo, old, newValue);
		this.statusInfo = newValue;
		firePropertyChange(P_StatusInfo, old, this.statusInfo);
	}

	@OAOne(reverseName = Store.P_StoreInfos, isProcessed = true, allowCreateNew = false, allowAddExisting = false, pojoNames = {
			"storeNumber" }, importMatch = true)
	@OAFkey(columns = { "store_number" })
	public Store getStore() {
		if (store == null) {
			store = (Store) getObject(P_Store);
		}
		return store;
	}

	public void setStore(Store newValue) {
		Store old = this.store;
		fireBeforePropertyChange(P_Store, old, newValue);
		this.store = newValue;
		firePropertyChange(P_Store, old, this.store);
	}

	@OAOne(displayName = "Store Lock Info", reverseName = StoreLockInfo.P_StoreInfo, isProcessed = true, allowCreateNew = false, allowAddExisting = false, equalPropertyPath = "storeLockServiceInfo.corpToStore")
	public StoreLockInfo getStoreLockInfo() {
		if (storeLockInfo == null) {
			storeLockInfo = (StoreLockInfo) getObject(P_StoreLockInfo);
		}
		return storeLockInfo;
	}

	public void setStoreLockInfo(StoreLockInfo newValue) {
		StoreLockInfo old = this.storeLockInfo;
		fireBeforePropertyChange(P_StoreLockInfo, old, newValue);
		this.storeLockInfo = newValue;
		firePropertyChange(P_StoreLockInfo, old, this.storeLockInfo);
	}

	@OAMany(displayName = "Store Purge Infos", toClass = StorePurgeInfo.class, owner = true, reverseName = StorePurgeInfo.P_StoreInfo, cascadeSave = true, cascadeDelete = true)
	public Hub<StorePurgeInfo> getStorePurgeInfos() {
		if (hubStorePurgeInfos == null) {
			hubStorePurgeInfos = (Hub<StorePurgeInfo>) getHub(P_StorePurgeInfos);
		}
		return hubStorePurgeInfos;
	}

	@OAMany(displayName = "Store Transmit Infos", toClass = StoreTransmitInfo.class, owner = true, reverseName = StoreTransmitInfo.P_StoreInfo, isProcessed = true, cascadeSave = true, cascadeDelete = true)
	public Hub<StoreTransmitInfo> getStoreTransmitInfos() {
		if (hubStoreTransmitInfos == null) {
			hubStoreTransmitInfos = (Hub<StoreTransmitInfo>) getHub(P_StoreTransmitInfos);
		}
		return hubStoreTransmitInfos;
	}

	@OAMethod(displayName = "Pause")
	public void pauseStore() {
		setPaused(new OADateTime());
	}

	@OAMethod(displayName = "Continue")
	public void continueStore() {
		setPaused(null);
	}

}
