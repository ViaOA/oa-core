// Generated by OABuilder
package com.corptostore.model.oa;

import java.util.logging.Logger;

import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.StoreInfo;
import com.corptostore.model.oa.StoreLockInfo;
import com.corptostore.model.oa.StoreLockServiceInfo;
import com.corptostore.model.oa.ThreadInfo;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.object.OAObject;
import com.viaoa.util.OADateTime;

@OAClass(lowerName = "storeLockInfo", pluralName = "StoreLockInfos", shortName = "sli", displayName = "Store Lock Info", useDataSource = false, isProcessed = true, displayProperty = "id")
public class StoreLockInfo extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(StoreLockInfo.class.getName());

	public static final String P_Id = "id";
	public static final String P_Created = "created";
	public static final String P_Expire = "expire";
	public static final String P_Used = "used";
	public static final String P_Completed = "completed";
	public static final String P_AutoExtendExpireCounter = "autoExtendExpireCounter";
	public static final String P_LastTimeoutReported = "lastTimeoutReported";

	public static final String P_StatusInfo = "statusInfo";
	public static final String P_StoreInfo = "storeInfo";
	public static final String P_StoreLockServiceInfo = "storeLockServiceInfo";
	public static final String P_ThreadInfo = "threadInfo";

	public static final String M_ReleaseLock = "releaseLock";
	protected volatile int id;
	protected volatile OADateTime created;
	protected volatile OADateTime expire;
	protected volatile OADateTime used;
	protected volatile OADateTime completed;
	protected volatile int autoExtendExpireCounter;
	protected volatile boolean lastTimeoutReported;

	// Links to other objects.
	protected volatile transient StatusInfo statusInfo;
	protected volatile transient StoreInfo storeInfo;
	protected volatile transient StoreLockServiceInfo storeLockServiceInfo;
	protected volatile transient ThreadInfo threadInfo;

	public StoreLockInfo() {
		if (!isLoading()) {
			setObjectDefaults();
		}
	}

	@Override
	public void setObjectDefaults() {
		setCreated(new OADateTime());
		getStatusInfo(); // have it autoCreated
	}

	public StoreLockInfo(int id) {
		this();
		setId(id);
	}

	@OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
	@OAId
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getCreated() {
		return created;
	}

	public void setCreated(OADateTime newValue) {
		OADateTime old = created;
		fireBeforePropertyChange(P_Created, old, newValue);
		this.created = newValue;
		firePropertyChange(P_Created, old, this.created);
	}

	@OAProperty(displayLength = 15, ignoreTimeZone = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getExpire() {
		return expire;
	}

	public void setExpire(OADateTime newValue) {
		OADateTime old = expire;
		fireBeforePropertyChange(P_Expire, old, newValue);
		this.expire = newValue;
		firePropertyChange(P_Expire, old, this.expire);
	}

	@OAProperty(displayLength = 15, ignoreTimeZone = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getUsed() {
		return used;
	}

	public void setUsed(OADateTime newValue) {
		OADateTime old = used;
		fireBeforePropertyChange(P_Used, old, newValue);
		this.used = newValue;
		firePropertyChange(P_Used, old, this.used);
	}

	@OAProperty(displayLength = 15, ignoreTimeZone = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getCompleted() {
		return completed;
	}

	public void setCompleted(OADateTime newValue) {
		OADateTime old = completed;
		fireBeforePropertyChange(P_Completed, old, newValue);
		this.completed = newValue;
		firePropertyChange(P_Completed, old, this.completed);
	}

	@OAProperty(displayName = "Auto Extend Expire Counter", displayLength = 6, columnLength = 26)
	@OAColumn(name = "auto_extend_expire_counter", sqlType = java.sql.Types.INTEGER)
	public int getAutoExtendExpireCounter() {
		return autoExtendExpireCounter;
	}

	public void setAutoExtendExpireCounter(int newValue) {
		int old = autoExtendExpireCounter;
		fireBeforePropertyChange(P_AutoExtendExpireCounter, old, newValue);
		this.autoExtendExpireCounter = newValue;
		firePropertyChange(P_AutoExtendExpireCounter, old, this.autoExtendExpireCounter);
	}

	@OAProperty(displayName = "Last Timeout Reported", displayLength = 5, columnLength = 21)
	@OAColumn(name = "last_timeout_reported", sqlType = java.sql.Types.BOOLEAN)
	public boolean getLastTimeoutReported() {
		return lastTimeoutReported;
	}

	public boolean isLastTimeoutReported() {
		return getLastTimeoutReported();
	}

	public void setLastTimeoutReported(boolean newValue) {
		boolean old = lastTimeoutReported;
		fireBeforePropertyChange(P_LastTimeoutReported, old, newValue);
		this.lastTimeoutReported = newValue;
		firePropertyChange(P_LastTimeoutReported, old, this.lastTimeoutReported);
	}

	@OAOne(displayName = "Status Info", reverseName = StatusInfo.P_StoreLockInfo, required = true,
			// autoCreateNew = true, 
			allowAddExisting = false)
	@OAFkey(columns = { "status_info_id" })
	public StatusInfo getStatusInfo() {
		if (statusInfo == null) {
			statusInfo = (StatusInfo) getObject(P_StatusInfo);
		}
		return statusInfo;
	}

	public void setStatusInfo(StatusInfo newValue) {
		StatusInfo old = this.statusInfo;
		fireBeforePropertyChange(P_StatusInfo, old, newValue);
		this.statusInfo = newValue;
		firePropertyChange(P_StatusInfo, old, this.statusInfo);
	}

	@OAOne(displayName = "Store Info", reverseName = StoreInfo.P_StoreLockInfo, isProcessed = true, allowCreateNew = false, allowAddExisting = false, equalPropertyPath = "corpToStore")
	@OAFkey(columns = { "store_info_id" })
	public StoreInfo getStoreInfo() {
		if (storeInfo == null) {
			storeInfo = (StoreInfo) getObject(P_StoreInfo);
		}
		return storeInfo;
	}

	public void setStoreInfo(StoreInfo newValue) {
		StoreInfo old = this.storeInfo;
		fireBeforePropertyChange(P_StoreInfo, old, newValue);
		this.storeInfo = newValue;
		firePropertyChange(P_StoreInfo, old, this.storeInfo);
	}

	@OAOne(displayName = "Store Lock Service Info", reverseName = StoreLockServiceInfo.P_StoreLockInfos, required = true, isProcessed = true, allowCreateNew = false, allowAddExisting = false)
	@OAFkey(columns = { "store_lock_service_info_id" })
	public StoreLockServiceInfo getStoreLockServiceInfo() {
		if (storeLockServiceInfo == null) {
			storeLockServiceInfo = (StoreLockServiceInfo) getObject(P_StoreLockServiceInfo);
		}
		return storeLockServiceInfo;
	}

	public void setStoreLockServiceInfo(StoreLockServiceInfo newValue) {
		StoreLockServiceInfo old = this.storeLockServiceInfo;
		fireBeforePropertyChange(P_StoreLockServiceInfo, old, newValue);
		this.storeLockServiceInfo = newValue;
		firePropertyChange(P_StoreLockServiceInfo, old, this.storeLockServiceInfo);
	}

	@OAOne(displayName = "Thread Info", reverseName = ThreadInfo.P_StoreLockInfo, isProcessed = true, allowCreateNew = false, allowAddExisting = false, equalPropertyPath = "corpToStore")
	@OAFkey(columns = { "thread_info_id" })
	public ThreadInfo getThreadInfo() {
		if (threadInfo == null) {
			threadInfo = (ThreadInfo) getObject(P_ThreadInfo);
		}
		return threadInfo;
	}

	public void setThreadInfo(ThreadInfo newValue) {
		ThreadInfo old = this.threadInfo;
		fireBeforePropertyChange(P_ThreadInfo, old, newValue);
		this.threadInfo = newValue;
		firePropertyChange(P_ThreadInfo, old, this.threadInfo);
	}

	@OAMethod(displayName = "Release Lock")
	public void releaseLock() {
		// todo: add custom code here
		//qqqqqqqqqqqqqqqqqqqqqqqqqq
		// need to create a trigger/listener to interact with EndPoint
		setCompleted(new OADateTime());
	}

}
