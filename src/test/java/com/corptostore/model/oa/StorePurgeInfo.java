// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.PurgeWindow;
import com.corptostore.model.oa.StoreInfo;
import com.corptostore.model.oa.StorePurgeInfo;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "storePurgeInfo",
    pluralName = "StorePurgeInfos",
    shortName = "spi",
    displayName = "Store Purge Info",
    useDataSource = false,
    displayProperty = "id"
)
public class StorePurgeInfo extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(StorePurgeInfo.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_Ended = "ended";
    public static final String P_TableName = "tableName";
    public static final String P_PurgedRecordCount = "purgedRecordCount";
     
     
    public static final String P_PurgeWindow = "purgeWindow";
    public static final String P_StoreInfo = "storeInfo";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile OADateTime ended;
    protected volatile String tableName;
    protected volatile int purgedRecordCount;
     
    // Links to other objects.
    protected volatile transient PurgeWindow purgeWindow;
    protected volatile transient StoreInfo storeInfo;
     
    public StorePurgeInfo() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public StorePurgeInfo(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getEnded() {
        return ended;
    }
    public void setEnded(OADateTime newValue) {
        OADateTime old = ended;
        fireBeforePropertyChange(P_Ended, old, newValue);
        this.ended = newValue;
        firePropertyChange(P_Ended, old, this.ended);
    }
    @OAProperty(displayName = "Table Name", maxLength = 35, displayLength = 35, columnLength = 20)
    @OAColumn(name = "table_name", maxLength = 35)
    public String getTableName() {
        return tableName;
    }
    public void setTableName(String newValue) {
        String old = tableName;
        fireBeforePropertyChange(P_TableName, old, newValue);
        this.tableName = newValue;
        firePropertyChange(P_TableName, old, this.tableName);
    }
    @OAProperty(displayName = "Purged Record Count", displayLength = 6, columnLength = 19)
    @OAColumn(name = "purged_record_count", sqlType = java.sql.Types.INTEGER)
    public int getPurgedRecordCount() {
        return purgedRecordCount;
    }
    public void setPurgedRecordCount(int newValue) {
        int old = purgedRecordCount;
        fireBeforePropertyChange(P_PurgedRecordCount, old, newValue);
        this.purgedRecordCount = newValue;
        firePropertyChange(P_PurgedRecordCount, old, this.purgedRecordCount);
    }
    @OAOne(
        displayName = "Purge Window", 
        reverseName = PurgeWindow.P_StorePurgeInfos, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"purge_window_id"})
    public PurgeWindow getPurgeWindow() {
        if (purgeWindow == null) {
            purgeWindow = (PurgeWindow) getObject(P_PurgeWindow);
        }
        return purgeWindow;
    }
    public void setPurgeWindow(PurgeWindow newValue) {
        PurgeWindow old = this.purgeWindow;
        fireBeforePropertyChange(P_PurgeWindow, old, newValue);
        this.purgeWindow = newValue;
        firePropertyChange(P_PurgeWindow, old, this.purgeWindow);
    }
    @OAOne(
        displayName = "Store Info", 
        reverseName = StoreInfo.P_StorePurgeInfos, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"store_info_id"})
    public StoreInfo getStoreInfo() {
        if (storeInfo == null) {
            storeInfo = (StoreInfo) getObject(P_StoreInfo);
        }
        return storeInfo;
    }
    public void setStoreInfo(StoreInfo newValue) {
        StoreInfo old = this.storeInfo;
        fireBeforePropertyChange(P_StoreInfo, old, newValue);
        this.storeInfo = newValue;
        firePropertyChange(P_StoreInfo, old, this.storeInfo);
    }
}
 
