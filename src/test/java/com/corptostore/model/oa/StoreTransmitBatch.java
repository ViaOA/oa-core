// Generated by OABuilder
package com.corptostore.model.oa;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAIndex;
import com.viaoa.annotation.OAIndexColumn;
import com.viaoa.annotation.OAMany;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.annotation.OATable;
import com.viaoa.datasource.OASelect;
import com.viaoa.hub.Hub;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectInfoDelegate;
import com.viaoa.object.OAObjectKey;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;

@OAClass(lowerName = "storeTransmitBatch", pluralName = "StoreTransmitBatches", shortName = "stb", displayName = "Store Transmit Batch", displayProperty = "transmitBatch", sortProperty = "transmitBatchDate")
@OATable(name = "message_service_store_transmit_batch", indexes = {
		@OAIndex(name = "message_service_store_transmit_batch_store", fkey = true, columns = { @OAIndexColumn(name = "store_number") }),
		@OAIndex(name = "message_service_store_transmit_batch_transmit_batch", fkey = true, columns = {
				@OAIndexColumn(name = "transmit_batch_date") })
})
public class StoreTransmitBatch extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(StoreTransmitBatch.class.getName());

	public static final String P_StoreNumber = "storeNumber";
	public static final String P_TransmitBatchDate = "transmitBatchDate";
	public static final String P_GreenMessageAdded = "greenMessageAdded";
	public static final String P_BatchProcessed = "batchProcessed";
	public static final String P_StoreTransmitProcessed = "storeTransmitProcessed";
	public static final String P_StoreTransmitPostProcessProcessed = "storeTransmitPostProcessProcessed";
	public static final String P_StoreStatus = "storeStatus";

	public static final String P_Store = "store";
	public static final String P_StoreBatches = "storeBatches";
	public static final String P_StoreTransmitInfos = "storeTransmitInfos";
	public static final String P_TransmitBatch = "transmitBatch";

	public static final String M_GetTotalSendCount = "getTotalSendCount";
	protected volatile int storeNumber;
	protected volatile OADate transmitBatchDate;
	protected volatile OADateTime greenMessageAdded;
	protected volatile OADateTime batchProcessed;
	protected volatile boolean storeTransmitProcessed;
	protected volatile boolean storeTransmitPostProcessProcessed;
	protected volatile String storeStatus;

	// Links to other objects.
	protected transient Hub<Transmit> hubSearchTransmits;
	protected volatile transient Store store;
	protected transient Hub<StoreBatch> hubStoreBatches;
	protected volatile transient TransmitBatch transmitBatch;

	public StoreTransmitBatch() {
		if (!isLoading()) {
			setObjectDefaults();
		}
	}

	public StoreTransmitBatch(int storeNumber, OADate transmitBatchDate) {
		this();
		setStoreNumber(storeNumber);
		setTransmitBatchDate(transmitBatchDate);
	}

	@OAProperty(displayName = "Store Number", isUnique = true, trackPrimitiveNull = false, displayLength = 5, uiColumnLength = 6)
	@OAId(autoAssign = false)
	@OAColumn(name = "store_number", sqlType = java.sql.Types.INTEGER)
	public int getStoreNumber() {
		return storeNumber;
	}

	public void setStoreNumber(int newValue) {
		int old = storeNumber;
		fireBeforePropertyChange(P_StoreNumber, old, newValue);
		this.storeNumber = newValue;
		firePropertyChange(P_StoreNumber, old, this.storeNumber);
	}

	@OAProperty(displayName = "Transmit Batch Date", isUnique = true, trackPrimitiveNull = false, displayLength = 8, uiColumnLength = 19)
	@OAId(autoAssign = false, pos = 1)
	@OAColumn(name = "transmit_batch_date", sqlType = java.sql.Types.DATE)
	public OADate getTransmitBatchDate() {
		return transmitBatchDate;
	}

	public void setTransmitBatchDate(OADate newValue) {
		OADate old = transmitBatchDate;
		fireBeforePropertyChange(P_TransmitBatchDate, old, newValue);
		this.transmitBatchDate = newValue;
		firePropertyChange(P_TransmitBatchDate, old, this.transmitBatchDate);
	}

	@OAProperty(displayName = "Green Message Added", displayLength = 15, uiColumnLength = 19)
	@OAColumn(name = "green_message_added", sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getGreenMessageAdded() {
		return greenMessageAdded;
	}

	public void setGreenMessageAdded(OADateTime newValue) {
		OADateTime old = greenMessageAdded;
		fireBeforePropertyChange(P_GreenMessageAdded, old, newValue);
		this.greenMessageAdded = newValue;
		firePropertyChange(P_GreenMessageAdded, old, this.greenMessageAdded);
	}

	@OAProperty(displayName = "Batch Processed", displayLength = 15)
	@OAColumn(name = "batch_processed", sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getBatchProcessed() {
		return batchProcessed;
	}

	public void setBatchProcessed(OADateTime newValue) {
		OADateTime old = batchProcessed;
		fireBeforePropertyChange(P_BatchProcessed, old, newValue);
		this.batchProcessed = newValue;
		firePropertyChange(P_BatchProcessed, old, this.batchProcessed);
	}

	@OAProperty(displayName = "Store Transmit Processed", displayLength = 5, uiColumnLength = 24)
	@OAColumn(name = "store_transmit_processed", sqlType = java.sql.Types.BOOLEAN)
	public boolean getStoreTransmitProcessed() {
		return storeTransmitProcessed;
	}

	public boolean isStoreTransmitProcessed() {
		return getStoreTransmitProcessed();
	}

	public void setStoreTransmitProcessed(boolean newValue) {
		boolean old = storeTransmitProcessed;
		fireBeforePropertyChange(P_StoreTransmitProcessed, old, newValue);
		this.storeTransmitProcessed = newValue;
		firePropertyChange(P_StoreTransmitProcessed, old, this.storeTransmitProcessed);
	}

	@OAProperty(displayName = "Store Transmit Post Process Processed", displayLength = 5, uiColumnLength = 37)
	@OAColumn(name = "store_transmit_post_process_processed", sqlType = java.sql.Types.BOOLEAN)
	public boolean getStoreTransmitPostProcessProcessed() {
		return storeTransmitPostProcessProcessed;
	}

	public boolean isStoreTransmitPostProcessProcessed() {
		return getStoreTransmitPostProcessProcessed();
	}

	public void setStoreTransmitPostProcessProcessed(boolean newValue) {
		boolean old = storeTransmitPostProcessProcessed;
		fireBeforePropertyChange(P_StoreTransmitPostProcessProcessed, old, newValue);
		this.storeTransmitPostProcessProcessed = newValue;
		firePropertyChange(P_StoreTransmitPostProcessProcessed, old, this.storeTransmitPostProcessProcessed);
	}

	@OAProperty(displayName = "Store Status", displayLength = 30, uiColumnLength = 20)
	@OAColumn(name = "store_status", sqlType = java.sql.Types.CLOB)
	public String getStoreStatus() {
		return storeStatus;
	}

	public void setStoreStatus(String newValue) {
		String old = storeStatus;
		fireBeforePropertyChange(P_StoreStatus, old, newValue);
		this.storeStatus = newValue;
		firePropertyChange(P_StoreStatus, old, this.storeStatus);
	}

	@OAOne(reverseName = Store.P_StoreTransmitBatches, required = true, allowCreateNew = false, fkeys = {
			@OAFkey(fromProperty = P_StoreNumber, toProperty = Store.P_StoreNumber) })
	public Store getStore() {
		if (store == null) {
			store = (Store) getObject(P_Store);
		}
		return store;
	}

	public void setStore(Store newValue) {
		Store old = this.store;
		fireBeforePropertyChange(P_Store, old, newValue);
		this.store = newValue;
		firePropertyChange(P_Store, old, this.store);
	}

	@OAMany(displayName = "Store Batches", toClass = StoreBatch.class, owner = true, reverseName = StoreBatch.P_StoreTransmitBatch, cascadeSave = true, cascadeDelete = true)
	public Hub<StoreBatch> getStoreBatches() {
		if (hubStoreBatches == null) {
			hubStoreBatches = (Hub<StoreBatch>) getHub(P_StoreBatches);
		}
		return hubStoreBatches;
	}

	@OAMany(displayName = "Store Transmit Infos", toClass = StoreTransmitInfo.class, reverseName = StoreTransmitInfo.P_StoreTransmitBatch, isProcessed = true, createMethod = false)
	private Hub<StoreTransmitInfo> getStoreTransmitInfos() {
		// oamodel has createMethod set to false, this method exists only for annotations.
		return null;
	}

	@OAOne(displayName = "Transmit Batch", reverseName = TransmitBatch.P_StoreTransmitBatches, allowCreateNew = false, fkeys = {
			@OAFkey(fromProperty = P_TransmitBatchDate, toProperty = TransmitBatch.P_TransmitBatchDate) })
	public TransmitBatch getTransmitBatch() {
		if (transmitBatch == null) {
			transmitBatch = (TransmitBatch) getObject(P_TransmitBatch);
		}
		return transmitBatch;
	}

	public void setTransmitBatch(TransmitBatch newValue) {
		TransmitBatch old = this.transmitBatch;
		fireBeforePropertyChange(P_TransmitBatch, old, newValue);
		this.transmitBatch = newValue;
		firePropertyChange(P_TransmitBatch, old, this.transmitBatch);
	}

	@OAMethod(displayName = "Get Total Send Count")
	public int getTotalSendCount() {
		int cnt = 0;
		for (StoreBatch sb : getStoreBatches()) {
			Batch b = sb.getBatch();

			OASelect<Send> sel = new OASelect(Send.class);
			sel.select(Send.P_Batch + "= ?", new Object[] { b });
			cnt = sel.getCount();
		}
		System.out.println("count=" + cnt);
		return cnt;
	}

	public void load(ResultSet rs, int storeNumber, OADate transmitBatchDate) throws SQLException {
		this.storeNumber = storeNumber;
		this.transmitBatchDate = transmitBatchDate;
		java.sql.Timestamp timestamp;
		timestamp = rs.getTimestamp(3);
		if (timestamp != null) {
			this.greenMessageAdded = new OADateTime(timestamp);
		}
		timestamp = rs.getTimestamp(4);
		if (timestamp != null) {
			this.batchProcessed = new OADateTime(timestamp);
		}
		this.storeTransmitProcessed = rs.getBoolean(5);
		OAObjectInfoDelegate.setPrimitiveNull(this, P_StoreTransmitProcessed, rs.wasNull());
		this.storeTransmitPostProcessProcessed = rs.getBoolean(6);
		OAObjectInfoDelegate.setPrimitiveNull(this, P_StoreTransmitPostProcessProcessed, rs.wasNull());
		this.storeStatus = rs.getString(7);
		setProperty(P_Store, new OAObjectKey(this.storeNumber));
		setProperty(P_TransmitBatch, new OAObjectKey(this.transmitBatchDate));

		this.changedFlag = false;
		this.newFlag = false;
	}

	public static void main(String[] args) {
		boolean b;
		StoreTransmitBatch stb = new StoreTransmitBatch();
		b = stb.getNull(P_StoreNumber);

		stb.setTransmitBatchDate(new OADate());
		stb.setStoreNumber(1234);
		b = OAObjectInfoDelegate.getPrimitiveNull(stb, P_StoreNumber);

		Store store = new Store();
		store.setStoreNumber(1234);
		b = OAObjectInfoDelegate.getPrimitiveNull(stb, P_StoreNumber);

		TransmitBatch tb = new TransmitBatch();
		tb.setTransmitBatchDate(new OADate());

		Store storex = stb.getStore();
		TransmitBatch tbx = stb.getTransmitBatch();

		stb.setStore(null);
		b = OAObjectInfoDelegate.getPrimitiveNull(stb, P_StoreNumber);

		stb.setStoreNumber(5678);

		stb.setNull(P_StoreNumber);
		// objKey should change
		b = OAObjectInfoDelegate.getPrimitiveNull(stb, P_StoreNumber);

		stb.setTransmitBatchDate(null);
		// bug, prop "TransmitBatch" is not null, but has objKey

		int i = 44;
		i++;

	}

}
