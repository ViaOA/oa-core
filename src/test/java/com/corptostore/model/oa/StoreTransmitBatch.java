// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.StoreTransmitInfo;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.TransmitBatch;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
 
@OAClass(
    lowerName = "storeTransmitBatch",
    pluralName = "StoreTransmitBatches",
    shortName = "stb",
    displayName = "Store Transmit Batch",
    displayProperty = "transmitBatch",
    sortProperty = "transmitBatchDate"
)
@OATable(
    name = "message_service_store_transmit_batch",
    indexes = {
        @OAIndex(name = "message_service_store_transmit_batch_store", fkey = true, columns = { @OAIndexColumn(name = "store_number") }), 
        @OAIndex(name = "message_service_store_transmit_batch_transmit_batch", fkey = true, columns = { @OAIndexColumn(name = "transmit_batch_date") })
    }
)
public class StoreTransmitBatch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(StoreTransmitBatch.class.getName());

    public static final String P_StoreNumber = "storeNumber";
    public static final String P_TransmitBatchDate = "transmitBatchDate";
    public static final String P_GreenMessageAdded = "greenMessageAdded";
    public static final String P_BatchProcessed = "batchProcessed";
    public static final String P_StoreTransmitProcessed = "storeTransmitProcessed";
    public static final String P_StoreTransmitPostProcessProcessed = "storeTransmitPostProcessProcessed";
    public static final String P_StoreStatus = "storeStatus";
     
     
    public static final String P_Store = "store";
    public static final String P_StoreBatches = "storeBatches";
    public static final String P_StoreTransmitInfos = "storeTransmitInfos";
    public static final String P_TransmitBatch = "transmitBatch";
     
    public static final String M_GetTotalSendCount = "getTotalSendCount";
    protected volatile int storeNumber;
    protected volatile OADate transmitBatchDate;
    protected volatile OADateTime greenMessageAdded;
    protected volatile OADateTime batchProcessed;
    protected volatile boolean storeTransmitProcessed;
    protected volatile boolean storeTransmitPostProcessProcessed;
    protected volatile String storeStatus;
     
    // Links to other objects.
    protected transient Hub<Transmit> hubSearchTransmits;
    protected volatile transient Store store;
    protected transient Hub<StoreBatch> hubStoreBatches;
    protected volatile transient TransmitBatch transmitBatch;
     
    public StoreTransmitBatch() {
        if (!isLoading()) setObjectDefaults();
    }
     
    public StoreTransmitBatch(int storeNumber, OADate transmitBatchDate) {
        this();
        setStoreNumber(storeNumber);
        setTransmitBatchDate(transmitBatchDate);
    }
     

    @OAProperty(displayName = "Store Number", isUnique = true, trackPrimitiveNull = false, displayLength = 5, columnLength = 6)
    @OAId(autoAssign = false)
    @OAColumn(name = "store_number", sqlType = java.sql.Types.INTEGER)
    public int getStoreNumber() {
        Object val = getValueFromLink(P_StoreNumber, storeNumber);
        if (val == null) this.storeNumber = 0;
        else this.storeNumber = (int) val;
        return storeNumber;
    }
    public void setStoreNumber(int newValue) {
        int old = storeNumber;
        fireBeforePropertyChange(P_StoreNumber, old, newValue);
        this.storeNumber = newValue;
        if (!isLoading() && onFkeyPropertyChange(P_StoreNumber, storeNumber)) {
            store = null; // reset, fkey value changed
        }
        firePropertyChange(P_StoreNumber, old, this.storeNumber);
    }
    @OAProperty(displayName = "Transmit Batch Date", isUnique = true, trackPrimitiveNull = false, displayLength = 8, columnLength = 19)
    @OAId(autoAssign = false, pos = 1)
    @OAColumn(name = "transmit_batch_date", sqlType = java.sql.Types.DATE)
    public OADate getTransmitBatchDate() {
        Object val = getValueFromLink(P_TransmitBatchDate, transmitBatchDate);
        if (val == null) this.transmitBatchDate = null;
        else this.transmitBatchDate = (OADate) val;
        return transmitBatchDate;
    }
    public void setTransmitBatchDate(OADate newValue) {
        OADate old = transmitBatchDate;
        fireBeforePropertyChange(P_TransmitBatchDate, old, newValue);
        this.transmitBatchDate = newValue;
        if (!isLoading() && onFkeyPropertyChange(P_TransmitBatchDate, transmitBatchDate)) {
            transmitBatch = null; // reset, fkey value changed
        }
        firePropertyChange(P_TransmitBatchDate, old, this.transmitBatchDate);
    }
    @OAProperty(displayName = "Green Message Added", displayLength = 15, columnLength = 19)
    @OAColumn(name = "green_message_added", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getGreenMessageAdded() {
        return greenMessageAdded;
    }
    public void setGreenMessageAdded(OADateTime newValue) {
        OADateTime old = greenMessageAdded;
        fireBeforePropertyChange(P_GreenMessageAdded, old, newValue);
        this.greenMessageAdded = newValue;
        firePropertyChange(P_GreenMessageAdded, old, this.greenMessageAdded);
    }
    @OAProperty(displayName = "Batch Processed", displayLength = 15)
    @OAColumn(name = "batch_processed", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getBatchProcessed() {
        return batchProcessed;
    }
    public void setBatchProcessed(OADateTime newValue) {
        OADateTime old = batchProcessed;
        fireBeforePropertyChange(P_BatchProcessed, old, newValue);
        this.batchProcessed = newValue;
        firePropertyChange(P_BatchProcessed, old, this.batchProcessed);
    }
    @OAProperty(displayName = "Store Transmit Processed", displayLength = 5, columnLength = 24)
    @OAColumn(name = "store_transmit_processed", sqlType = java.sql.Types.BOOLEAN)
    public boolean getStoreTransmitProcessed() {
        return storeTransmitProcessed;
    }
    public boolean isStoreTransmitProcessed() {
        return getStoreTransmitProcessed();
    }
    public void setStoreTransmitProcessed(boolean newValue) {
        boolean old = storeTransmitProcessed;
        fireBeforePropertyChange(P_StoreTransmitProcessed, old, newValue);
        this.storeTransmitProcessed = newValue;
        firePropertyChange(P_StoreTransmitProcessed, old, this.storeTransmitProcessed);
    }
    @OAProperty(displayName = "Store Transmit Post Process Processed", displayLength = 5, columnLength = 37)
    @OAColumn(name = "store_transmit_post_process_processed", sqlType = java.sql.Types.BOOLEAN)
    public boolean getStoreTransmitPostProcessProcessed() {
        return storeTransmitPostProcessProcessed;
    }
    public boolean isStoreTransmitPostProcessProcessed() {
        return getStoreTransmitPostProcessProcessed();
    }
    public void setStoreTransmitPostProcessProcessed(boolean newValue) {
        boolean old = storeTransmitPostProcessProcessed;
        fireBeforePropertyChange(P_StoreTransmitPostProcessProcessed, old, newValue);
        this.storeTransmitPostProcessProcessed = newValue;
        firePropertyChange(P_StoreTransmitPostProcessProcessed, old, this.storeTransmitPostProcessProcessed);
    }
    @OAProperty(displayName = "Store Status", displayLength = 30, columnLength = 20)
    @OAColumn(name = "store_status", sqlType = java.sql.Types.CLOB)
    public String getStoreStatus() {
        return storeStatus;
    }
    public void setStoreStatus(String newValue) {
        String old = storeStatus;
        fireBeforePropertyChange(P_StoreStatus, old, newValue);
        this.storeStatus = newValue;
        firePropertyChange(P_StoreStatus, old, this.storeStatus);
    }
    @OAOne(
        reverseName = Store.P_StoreTransmitBatches, 
        required = true, 
        allowCreateNew = false, 
        usesProperties = { P_StoreNumber }
    )
    @OAFkey(columns = {"store_number"})
    public Store getStore() {
        if (store == null) {
            store = (Store) getObject(P_Store);
        }
        return store;
    }
    public void setStore(Store newValue) {
        Store old = this.store;
        fireBeforePropertyChange(P_Store, old, newValue);
        this.store = newValue;
        firePropertyChange(P_Store, old, this.store);
    }
    @OAMany(
        displayName = "Store Batches", 
        toClass = StoreBatch.class, 
        owner = true, 
        reverseName = StoreBatch.P_StoreTransmitBatch, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<StoreBatch> getStoreBatches() {
        if (hubStoreBatches == null) {
            hubStoreBatches = (Hub<StoreBatch>) getHub(P_StoreBatches);
        }
        return hubStoreBatches;
    }
    @OAMany(
        displayName = "Store Transmit Infos", 
        toClass = StoreTransmitInfo.class, 
        reverseName = StoreTransmitInfo.P_StoreTransmitBatch, 
        isProcessed = true, 
        createMethod = false
    )
    private Hub<StoreTransmitInfo> getStoreTransmitInfos() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAOne(
        displayName = "Transmit Batch", 
        reverseName = TransmitBatch.P_StoreTransmitBatches, 
        allowCreateNew = false, 
        usesProperties = { P_TransmitBatchDate }
    )
    @OAFkey(columns = {"transmit_batch_date"})
    public TransmitBatch getTransmitBatch() {
        if (transmitBatch == null) {
            transmitBatch = (TransmitBatch) getObject(P_TransmitBatch);
        }
        return transmitBatch;
    }
    public void setTransmitBatch(TransmitBatch newValue) {
        TransmitBatch old = this.transmitBatch;
        fireBeforePropertyChange(P_TransmitBatch, old, newValue);
        this.transmitBatch = newValue;
        firePropertyChange(P_TransmitBatch, old, this.transmitBatch);
    }
    @OAMethod(displayName = "Get Total Send Count")
    public int getTotalSendCount() {
        int cnt = 0;
        for (StoreBatch sb : getStoreBatches()) {
            Batch b = sb.getBatch();
    
            OASelect<Send> sel = new OASelect(Send.class);
            sel.select(Send.P_Batch + "= ?", new Object[] { b });
            cnt = sel.getCount();
        }
        System.out.println("count="+cnt);
        return cnt;
    }

    public void load(ResultSet rs, int storeNumber, OADate transmitBatchDate) throws SQLException {
        this.storeNumber = storeNumber;
        this.transmitBatchDate = transmitBatchDate;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.greenMessageAdded = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.batchProcessed = new OADateTime(timestamp);
        this.storeTransmitProcessed = rs.getBoolean(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, StoreTransmitBatch.P_StoreTransmitProcessed, true);
        }
        this.storeTransmitPostProcessProcessed = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, StoreTransmitBatch.P_StoreTransmitPostProcessProcessed, true);
        }
        this.storeStatus = rs.getString(7);
        setProperty(P_Store, new OAObjectKey(this.storeNumber));
        setProperty(P_TransmitBatch, new OAObjectKey(this.transmitBatchDate));
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
