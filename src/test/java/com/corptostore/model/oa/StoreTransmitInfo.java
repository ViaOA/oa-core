// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.StoreInfo;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.StoreTransmitInfo;
import com.corptostore.model.oa.TesterStore;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "storeTransmitInfo",
    pluralName = "StoreTransmitInfos",
    shortName = "sti",
    displayName = "Store Transmit Info",
    useDataSource = false,
    isProcessed = true,
    displayProperty = "id"
)
public class StoreTransmitInfo extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(StoreTransmitInfo.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_DtStart = "dtStart";
    public static final String P_DtEnd = "dtEnd";
    public static final String P_MessageCount = "messageCount";
    public static final String P_BatchCount = "batchCount";
    public static final String P_Seconds = "seconds";
     
     
    public static final String P_CalcTesterStore = "calcTesterStore";
    public static final String P_StoreInfo = "storeInfo";
    public static final String P_StoreTransmitBatch = "storeTransmitBatch";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile OADateTime dtStart;
    protected volatile OADateTime dtEnd;
    protected volatile int messageCount;
    protected volatile int batchCount;
    protected volatile int seconds;
     
    // Links to other objects.
    protected volatile transient StoreInfo storeInfo;
    protected volatile transient StoreTransmitBatch storeTransmitBatch;
     
    public StoreTransmitInfo() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public StoreTransmitInfo(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Start", displayLength = 15, ignoreTimeZone = true)
    @OAColumn(name = "dt_start", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getDtStart() {
        return dtStart;
    }
    public void setDtStart(OADateTime newValue) {
        OADateTime old = dtStart;
        fireBeforePropertyChange(P_DtStart, old, newValue);
        this.dtStart = newValue;
        firePropertyChange(P_DtStart, old, this.dtStart);
    }
    @OAProperty(displayName = "End", displayLength = 15, ignoreTimeZone = true)
    @OAColumn(name = "dt_end", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getDtEnd() {
        return dtEnd;
    }
    public void setDtEnd(OADateTime newValue) {
        OADateTime old = dtEnd;
        fireBeforePropertyChange(P_DtEnd, old, newValue);
        this.dtEnd = newValue;
        firePropertyChange(P_DtEnd, old, this.dtEnd);
    }
    @OAProperty(displayName = "Message Count", displayLength = 6, columnLength = 13)
    @OAColumn(name = "message_count", sqlType = java.sql.Types.INTEGER)
    public int getMessageCount() {
        return messageCount;
    }
    public void setMessageCount(int newValue) {
        int old = messageCount;
        fireBeforePropertyChange(P_MessageCount, old, newValue);
        this.messageCount = newValue;
        firePropertyChange(P_MessageCount, old, this.messageCount);
    }
    @OAProperty(displayName = "Batch Count", displayLength = 6, columnLength = 11)
    @OAColumn(name = "batch_count", sqlType = java.sql.Types.INTEGER)
    public int getBatchCount() {
        return batchCount;
    }
    public void setBatchCount(int newValue) {
        int old = batchCount;
        fireBeforePropertyChange(P_BatchCount, old, newValue);
        this.batchCount = newValue;
        firePropertyChange(P_BatchCount, old, this.batchCount);
    }
    @OAProperty(displayLength = 6, columnLength = 7)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeconds() {
        return seconds;
    }
    public void setSeconds(int newValue) {
        int old = seconds;
        fireBeforePropertyChange(P_Seconds, old, newValue);
        this.seconds = newValue;
        firePropertyChange(P_Seconds, old, this.seconds);
    }
    @OAOne(
        displayName = "Tester Store", 
        isCalculated = true, 
        reverseName = TesterStore.P_CalcStoreTransmitInfo, 
        allowCreateNew = false, 
        allowAddExisting = false, 
        equalPropertyPath = "store"
    )
    private TesterStore getCalcTesterStore() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAOne(
        displayName = "Store Info", 
        reverseName = StoreInfo.P_StoreTransmitInfos, 
        required = true, 
        isProcessed = true, 
        allowCreateNew = false, 
        equalPropertyPath = "store"
    )
    @OAFkey(columns = {"store_info_id"})
    public StoreInfo getStoreInfo() {
        if (storeInfo == null) {
            storeInfo = (StoreInfo) getObject(P_StoreInfo);
        }
        return storeInfo;
    }
    public void setStoreInfo(StoreInfo newValue) {
        StoreInfo old = this.storeInfo;
        fireBeforePropertyChange(P_StoreInfo, old, newValue);
        this.storeInfo = newValue;
        firePropertyChange(P_StoreInfo, old, this.storeInfo);
    }
    @OAOne(
        displayName = "Store Transmit Batch", 
        reverseName = StoreTransmitBatch.P_StoreTransmitInfos, 
        isProcessed = true, 
        allowCreateNew = false, 
        importMatch = true, 
        equalPropertyPath = "store"
    )
    @OAFkey(columns = {"store_transmit_batch_store_number", "store_transmit_batch_transmit_batch_date"})
    public StoreTransmitBatch getStoreTransmitBatch() {
        if (storeTransmitBatch == null) {
            storeTransmitBatch = (StoreTransmitBatch) getObject(P_StoreTransmitBatch);
        }
        return storeTransmitBatch;
    }
    public void setStoreTransmitBatch(StoreTransmitBatch newValue) {
        StoreTransmitBatch old = this.storeTransmitBatch;
        fireBeforePropertyChange(P_StoreTransmitBatch, old, newValue);
        this.storeTransmitBatch = newValue;
        firePropertyChange(P_StoreTransmitBatch, old, this.storeTransmitBatch);
    }
}
 
