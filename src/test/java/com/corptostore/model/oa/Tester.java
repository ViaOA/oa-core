// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.delegate.oa.TesterDelegate;
import com.corptostore.model.oa.Environment;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.TesterResult;
import com.corptostore.model.oa.TesterResultType;
import com.corptostore.model.oa.TesterStep;
import com.corptostore.model.oa.TesterStepType;
import com.corptostore.model.oa.TesterStore;
import com.corptostore.model.oa.TransmitBatch;
import com.corptostore.model.oa.filter.TesterOpenFilter;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.viaoa.util.OADate;
 
@OAClass(
    lowerName = "tester",
    pluralName = "Testers",
    shortName = "tst",
    displayName = "Tester",
    useDataSource = false,
    displayProperty = "created",
    filterClasses = {TesterOpenFilter.class}
)
public class Tester extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Tester.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_NumberOfStores = "numberOfStores";
    public static final String P_AllStoreMessages = "allStoreMessages";
    public static final String P_AverageMessagesPerStore = "averageMessagesPerStore";
    public static final String P_TransmitBatchDate = "transmitBatchDate";
    public static final String P_WasEnvironmentPaused = "wasEnvironmentPaused";
    public static final String P_Results = "results";
    public static final String P_VerifyReport = "verifyReport";
    public static final String P_Console = "console";
     
    public static final String P_IsTestDone = "isTestDone";
    public static final String P_NextTesterStepMessage = "nextTesterStepMessage";
    public static final String P_RefreshEnabled = "refreshEnabled";
     
    public static final String P_CalcNextTesterStep = "calcNextTesterStep";
    public static final String P_Environment = "environment";
    public static final String P_TesterResults = "testerResults";
    public static final String P_TesterSteps = "testerSteps";
    public static final String P_TesterStores = "testerStores";
    public static final String P_TransmitBatch = "transmitBatch";
     
    public static final String M_Next = "next";
    public static final String M_Cancel = "cancel";
    public static final String M_RefreshResults = "refreshResults";
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile int numberOfStores;
    protected volatile int allStoreMessages;
    protected volatile int averageMessagesPerStore;
    protected volatile OADate transmitBatchDate;
    protected volatile boolean wasEnvironmentPaused;
    protected volatile String results;
    protected volatile String verifyReport;
    protected volatile String console;
     
    // Links to other objects.
    protected volatile transient Environment environment;
    protected transient Hub<TesterResult> hubTesterResults;
    protected transient Hub<TesterStep> hubTesterSteps;
    protected transient Hub<TesterStore> hubTesterStores;
    protected volatile transient TransmitBatch transmitBatch;
     
    public Tester() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public Tester(int id) {
        this();
        setId(id);
    }
     
    @OAObjCallback(supportedTypes = {OAObjectCallback.Type.AllowDelete})
    public void callback(final OAObjectCallback callback) {
        if (callback == null) return;
        switch (callback.getType()) {
        case AllowDelete:
            callback.ack();
            callback.setAllowed(getAllowDelete()); 
            callback.setResponse("cant delete since there is a TransmitBatch");
            break;
        }
    }
    public boolean getAllowDelete() {
        if (getTransmitBatch() != null) {
            return false;
        }
        return true;
    }
    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Number Of Stores", displayLength = 6, columnLength = 16)
    @OAColumn(name = "number_of_stores", sqlType = java.sql.Types.INTEGER)
    public int getNumberOfStores() {
        return numberOfStores;
    }
    public void setNumberOfStores(int newValue) {
        int old = numberOfStores;
        fireBeforePropertyChange(P_NumberOfStores, old, newValue);
        this.numberOfStores = newValue;
        firePropertyChange(P_NumberOfStores, old, this.numberOfStores);
    }
    @OAProperty(displayName = "All Store Messages", displayLength = 6, columnLength = 18)
    @OAColumn(name = "all_store_messages", sqlType = java.sql.Types.INTEGER)
    public int getAllStoreMessages() {
        return allStoreMessages;
    }
    public void setAllStoreMessages(int newValue) {
        int old = allStoreMessages;
        fireBeforePropertyChange(P_AllStoreMessages, old, newValue);
        this.allStoreMessages = newValue;
        firePropertyChange(P_AllStoreMessages, old, this.allStoreMessages);
    }
    @OAProperty(displayName = "Average Messages Per Store", displayLength = 6, columnLength = 8)
    @OAColumn(name = "average_messages_per_store", sqlType = java.sql.Types.INTEGER)
    public int getAverageMessagesPerStore() {
        return averageMessagesPerStore;
    }
    public void setAverageMessagesPerStore(int newValue) {
        int old = averageMessagesPerStore;
        fireBeforePropertyChange(P_AverageMessagesPerStore, old, newValue);
        this.averageMessagesPerStore = newValue;
        firePropertyChange(P_AverageMessagesPerStore, old, this.averageMessagesPerStore);
    }
    @OAProperty(displayName = "Transmit Batch Date", displayLength = 8, columnLength = 19)
    @OAColumn(name = "transmit_batch_date", sqlType = java.sql.Types.DATE)
    public OADate getTransmitBatchDate() {
        return transmitBatchDate;
    }
    public void setTransmitBatchDate(OADate newValue) {
        OADate old = transmitBatchDate;
        fireBeforePropertyChange(P_TransmitBatchDate, old, newValue);
        this.transmitBatchDate = newValue;
        firePropertyChange(P_TransmitBatchDate, old, this.transmitBatchDate);
    }
     
    @OAObjCallback(enabledProperty = Tester.P_TransmitBatchDate, enabledValue = false)
    public void transmitBatchDateCallback(OAObjectCallback callback) {
        if (callback == null) return;
        switch (callback.getType()) {
        }
    }
    @OAProperty(displayName = "Was Environment Paused", displayLength = 5, columnLength = 22, isProcessed = true)
    @OAColumn(name = "was_environment_paused", sqlType = java.sql.Types.BOOLEAN)
    public boolean getWasEnvironmentPaused() {
        return wasEnvironmentPaused;
    }
    public boolean isWasEnvironmentPaused() {
        return getWasEnvironmentPaused();
    }
    public void setWasEnvironmentPaused(boolean newValue) {
        boolean old = wasEnvironmentPaused;
        fireBeforePropertyChange(P_WasEnvironmentPaused, old, newValue);
        this.wasEnvironmentPaused = newValue;
        firePropertyChange(P_WasEnvironmentPaused, old, this.wasEnvironmentPaused);
    }
    @OAProperty(displayLength = 30, columnLength = 20, isProcessed = true, isHtml = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getResults() {
        return results;
    }
    public void setResults(String newValue) {
        String old = results;
        fireBeforePropertyChange(P_Results, old, newValue);
        this.results = newValue;
        firePropertyChange(P_Results, old, this.results);
    }
    @OAProperty(displayName = "Verify Report", displayLength = 30, columnLength = 20, isProcessed = true, isHtml = true)
    @OAColumn(name = "verify_report", sqlType = java.sql.Types.CLOB)
    public String getVerifyReport() {
        return verifyReport;
    }
    public void setVerifyReport(String newValue) {
        String old = verifyReport;
        fireBeforePropertyChange(P_VerifyReport, old, newValue);
        this.verifyReport = newValue;
        firePropertyChange(P_VerifyReport, old, this.verifyReport);
    }
    @OAProperty(maxLength = 254, displayLength = 50, columnLength = 20, isProcessed = true)
    public String getConsole() {
        return console;
    }
    public void setConsole(String newValue) {
        String old = console;
        fireBeforePropertyChange(P_Console, old, newValue);
        this.console = newValue;
        firePropertyChange(P_Console, old, this.console);
    }
    @OACalculatedProperty(displayName = "Is Test Done", displayLength = 5, columnLength = 12, properties = {P_TesterSteps+"."+TesterStep.P_Ended})
    public boolean getIsTestDone() {
        return TesterDelegate.getIsTestDone(this);
    }
    public boolean isTestDone() {
        return getIsTestDone();
    }
    @OACalculatedProperty(displayName = "Next Tester Step Message", displayLength = 25, columnLength = 24, properties = {P_CalcNextTesterStep})
    public String getNextTesterStepMessage() {
        return TesterDelegate.getNextTesterStepMessage(this);
    }
    @OACalculatedProperty(displayName = "Refresh Enabled", displayLength = 5, columnLength = 15, properties = {P_IsTestDone, P_CalcNextTesterStep})
    public boolean getRefreshEnabled() {
        if (this.getIsTestDone()) return false;
        TesterStep testerStep = this.getCalcNextTesterStep();
        boolean b = (testerStep.getTesterStepType().getType() >= TesterStepType.TYPE_continueEnvironment);
        return b;
    }
    public boolean isRefreshEnabled() {
        return getRefreshEnabled();
    }
    @OAOne(
        displayName = "Next Step", 
        isCalculated = true, 
        calcDependentProperties = {P_TesterSteps+"."+TesterStep.P_Started, P_TesterSteps+"."+TesterStep.P_Ended}, 
        reverseName = TesterStep.P_CalcTester, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    public TesterStep getCalcNextTesterStep() {
        // Custom code
        return TesterDelegate.getNextTesterStep(this);
    }
    @OAOne(
        reverseName = Environment.P_Testers, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"environment_id"})
    public Environment getEnvironment() {
        if (environment == null) {
            environment = (Environment) getObject(P_Environment);
        }
        return environment;
    }
    public void setEnvironment(Environment newValue) {
        Environment old = this.environment;
        fireBeforePropertyChange(P_Environment, old, newValue);
        this.environment = newValue;
        firePropertyChange(P_Environment, old, this.environment);
    }
    @OAMany(
        displayName = "Tester Results", 
        toClass = TesterResult.class, 
        owner = true, 
        reverseName = TesterResult.P_Tester, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchProperty = TesterResult.P_TesterResultType
    )
    public Hub<TesterResult> getTesterResults() {
        if (hubTesterResults == null) {
            Hub<TesterResultType> hubMatch = com.corptostore.delegate.ModelDelegate.getTesterResultTypes();
            hubTesterResults = (Hub<TesterResult>) getHub(P_TesterResults, hubMatch);
        }
        return hubTesterResults;
    }
    @OAMany(
        displayName = "Tester Steps", 
        toClass = TesterStep.class, 
        owner = true, 
        reverseName = TesterStep.P_Tester, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchProperty = TesterStep.P_TesterStepType
    )
    public Hub<TesterStep> getTesterSteps() {
        if (hubTesterSteps == null) {
            Hub<TesterStepType> hubMatch = com.corptostore.delegate.ModelDelegate.getTesterStepTypes();
            hubTesterSteps = (Hub<TesterStep>) getHub(P_TesterSteps, hubMatch);
        }
        return hubTesterSteps;
    }
    @OAMany(
        displayName = "Tester Stores", 
        toClass = TesterStore.class, 
        owner = true, 
        reverseName = TesterStore.P_Tester, 
        isProcessed = true, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<TesterStore> getTesterStores() {
        if (hubTesterStores == null) {
            hubTesterStores = (Hub<TesterStore>) getHub(P_TesterStores);
        }
        return hubTesterStores;
    }
    @OAOne(
        displayName = "Transmit Batch", 
        reverseName = TransmitBatch.P_Tester, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"transmit_batch_date"})
    public TransmitBatch getTransmitBatch() {
        if (transmitBatch == null) {
            transmitBatch = (TransmitBatch) getObject(P_TransmitBatch);
        }
        return transmitBatch;
    }
    public void setTransmitBatch(TransmitBatch newValue) {
        TransmitBatch old = this.transmitBatch;
        fireBeforePropertyChange(P_TransmitBatch, old, newValue);
        this.transmitBatch = newValue;
        firePropertyChange(P_TransmitBatch, old, this.transmitBatch);
    }
    @OAMethod(displayName = "Next")
    public void next() {
        TesterDelegate.next(this);
    }
    @OAObjCallback(enabledProperty = Tester.P_CalcNextTesterStep)
    public void nextCallback(final OAObjectCallback callback) {
        switch (callback.getType()) {
        case GetToolTip:
            TesterStep ts = getCalcNextTesterStep();
            if (ts == null) {
                if (isTestDone()) {
                    callback.setToolTip("Test is done");
                } else {
                    callback.setToolTip("fill out test config/params to be able to start running test");
                }
            } else {
                callback.setToolTip("click next to run " + ts.getTesterStepType().getTypeString() + " Step in the test");
            }
            break;
        }
    }

    @OAMethod(displayName = "Cancel")
    public void cancel() {
        // use this to run on server (remote)
        if (isRemoteAvailable()) {
            remote();
            return;
        }
        // todo: add custom code here
        TesterDelegate.cancel(this);
    }
    @OAObjCallback(enabledProperty = Tester.P_IsTestDone, enabledValue = false)
    public void cancelCallback(OAObjectCallback cb) {
    }

    @OAMethod(displayName = "Refresh Results")
    public void refreshResults() {
        TesterDelegate.getResults(this);
    }
    @OAObjCallback(enabledProperty = Tester.P_RefreshEnabled)
    public void refreshResultsCallback(OAObjectCallback cb) {
    }

}
 
