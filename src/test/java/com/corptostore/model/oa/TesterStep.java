// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.TesterStep;
import com.corptostore.model.oa.TesterStepType;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "testerStep",
    pluralName = "TesterSteps",
    shortName = "tss",
    displayName = "Tester Step",
    useDataSource = false,
    displayProperty = "testerStepType",
    sortProperty = "testerStepType"
)
public class TesterStep extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(TesterStep.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_Started = "started";
    public static final String P_Ended = "ended";
     
     
    public static final String P_CalcTester = "calcTester";
    public static final String P_Tester = "tester";
    public static final String P_TesterStepType = "testerStepType";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile OADateTime started;
    protected volatile OADateTime ended;
     
    // Links to other objects.
    protected volatile transient Tester tester;
    protected volatile transient TesterStepType testerStepType;
     
    public TesterStep() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public TesterStep(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStarted() {
        return started;
    }
    public void setStarted(OADateTime newValue) {
        OADateTime old = started;
        fireBeforePropertyChange(P_Started, old, newValue);
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getEnded() {
        return ended;
    }
    public void setEnded(OADateTime newValue) {
        OADateTime old = ended;
        fireBeforePropertyChange(P_Ended, old, newValue);
        this.ended = newValue;
        firePropertyChange(P_Ended, old, this.ended);
    }
    @OAOne(
        displayName = "Tester", 
        isCalculated = true, 
        reverseName = Tester.P_CalcNextTesterStep, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Tester getCalcTester() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAOne(
        reverseName = Tester.P_TesterSteps, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"tester_id"})
    public Tester getTester() {
        if (tester == null) {
            tester = (Tester) getObject(P_Tester);
        }
        return tester;
    }
    public void setTester(Tester newValue) {
        Tester old = this.tester;
        fireBeforePropertyChange(P_Tester, old, newValue);
        this.tester = newValue;
        firePropertyChange(P_Tester, old, this.tester);
    }
    @OAOne(
        displayName = "Tester Step Type", 
        reverseName = TesterStepType.P_TesterSteps, 
        required = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"tester_step_type_id"})
    public TesterStepType getTesterStepType() {
        if (testerStepType == null) {
            testerStepType = (TesterStepType) getObject(P_TesterStepType);
        }
        return testerStepType;
    }
    public void setTesterStepType(TesterStepType newValue) {
        TesterStepType old = this.testerStepType;
        fireBeforePropertyChange(P_TesterStepType, old, newValue);
        this.testerStepType = newValue;
        firePropertyChange(P_TesterStepType, old, this.testerStepType);
    }
}
 
