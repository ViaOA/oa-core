// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.TesterStep;
import com.corptostore.model.oa.TesterStepType;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "testerStepType",
    pluralName = "TesterStepTypes",
    shortName = "tst",
    displayName = "Tester Step Type",
    isLookup = true,
    isPreSelect = true,
    useDataSource = false,
    displayProperty = "type",
    sortProperty = "type"
)
public class TesterStepType extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(TesterStepType.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_Type = "type";
    public static final String P_TypeAsString = "typeString";
     
     
    public static final String P_TesterSteps = "testerSteps";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile int type;
    public static enum Type {
        getEnvironmentInfo("Get Environment Info"),
        pauseEnvironment("Pause Environment"),
        selectStores("Select Stores"),
        createTransmitBatch("Create Transmit Batch"),
        CreateTransmitData("Create Transmit Data"),
        setBatchAsCompleted("Set Batch As Completed"),
        continueEnvironment("Continue Environment"),
        verify("Verify"),
        getResults("Get Results"),
        cancel("Cancel"),
        resetEnvironment("Reset Environment");

        private String display;
        Type(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int TYPE_getEnvironmentInfo = 0;
    public static final int TYPE_pauseEnvironment = 1;
    public static final int TYPE_selectStores = 2;
    public static final int TYPE_createTransmitBatch = 3;
    public static final int TYPE_CreateTransmitData = 4;
    public static final int TYPE_setBatchAsCompleted = 5;
    public static final int TYPE_continueEnvironment = 6;
    public static final int TYPE_verify = 7;
    public static final int TYPE_getResults = 8;
    public static final int TYPE_cancel = 9;
    public static final int TYPE_resetEnvironment = 10;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("Get Environment Info");
        hubType.addElement("Pause Environment");
        hubType.addElement("Select Stores");
        hubType.addElement("Create Transmit Batch");
        hubType.addElement("Create Transmit Data");
        hubType.addElement("Set Batch As Completed");
        hubType.addElement("Continue Environment");
        hubType.addElement("Verify");
        hubType.addElement("Get Results");
        hubType.addElement("Cancel");
        hubType.addElement("Reset Environment");
    }
     
     
    public TesterStepType() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public TesterStepType(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayLength = 6, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    public void setType(int newValue) {
        int old = type;
        fireBeforePropertyChange(P_Type, old, newValue);
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
        firePropertyChange(P_Type + "String");
        firePropertyChange(P_Type + "Enum");
    }

    public String getTypeString() {
        Type type = getTypeEnum();
        if (type == null) return null;
        return type.name();
    }
    public void setTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            Type type = Type.valueOf(val);
            if (type != null) x = type.ordinal();
        }
        if (x < 0) setNull(P_Type);
        else setType(x);
    }


    public Type getTypeEnum() {
        if (isNull(P_Type)) return null;
        final int val = getType();
        if (val < 0 || val >= Type.values().length) return null;
        return Type.values()[val];
    }

    public void setTypeEnum(Type val) {
        if (val == null) {
            setNull(P_Type);
        }
        else {
            setType(val.ordinal());
        }
    }
    @OAMany(
        displayName = "Tester Steps", 
        toClass = TesterStep.class, 
        reverseName = TesterStep.P_TesterStepType, 
        createMethod = false
    )
    private Hub<TesterStep> getTesterSteps() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
}
 
