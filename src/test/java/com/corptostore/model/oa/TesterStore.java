// Generated by OABuilder
package com.corptostore.model.oa;

import java.util.logging.Logger;

import com.corptostore.model.oa.propertypath.StoreTransmitBatchPP;
import com.corptostore.model.oa.propertypath.StoreTransmitInfoPP;
import com.corptostore.model.oa.propertypath.TesterStorePP;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.StoreTransmitInfo;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.TesterStore;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.object.OAFinder;
import com.viaoa.object.OAObject;
import com.viaoa.util.OADateTime;

@OAClass(lowerName = "testerStore", pluralName = "TesterStores", shortName = "tss", displayName = "Tester Store", useDataSource = false, isProcessed = true, displayProperty = "id")
public class TesterStore extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(TesterStore.class.getName());

	public static final String P_Id = "id";
	public static final String P_Created = "created";
	public static final String P_WasActive = "wasActive";
	public static final String P_HoldRegisteredDate = "holdRegisteredDate";

	public static final String P_CalcStoreTransmitInfo = "calcStoreTransmitInfo";
	public static final String P_Store = "store";
	public static final String P_Tester = "tester";

	protected volatile int id;
	protected volatile OADateTime created;
	protected volatile boolean wasActive;
	protected volatile OADateTime holdRegisteredDate;

	// Links to other objects.
	protected volatile transient Store store;
	protected volatile transient Tester tester;

	public TesterStore() {
		if (!isLoading()) {
			setObjectDefaults();
		}
	}

	@Override
	public void setObjectDefaults() {
		setCreated(new OADateTime());
	}

	public TesterStore(int id) {
		this();
		setId(id);
	}

	@OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
	@OAId
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getCreated() {
		return created;
	}

	public void setCreated(OADateTime newValue) {
		OADateTime old = created;
		fireBeforePropertyChange(P_Created, old, newValue);
		this.created = newValue;
		firePropertyChange(P_Created, old, this.created);
	}

	@OAProperty(displayName = "Was Active", displayLength = 5, columnLength = 10)
	@OAColumn(name = "was_active", sqlType = java.sql.Types.BOOLEAN)
	public boolean getWasActive() {
		return wasActive;
	}

	public boolean isWasActive() {
		return getWasActive();
	}

	public void setWasActive(boolean newValue) {
		boolean old = wasActive;
		fireBeforePropertyChange(P_WasActive, old, newValue);
		this.wasActive = newValue;
		firePropertyChange(P_WasActive, old, this.wasActive);
	}

	@OAProperty(displayName = "Hold Registered Date", displayLength = 15, columnLength = 20, ignoreTimeZone = true)
	@OAColumn(name = "hold_registered_date", sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getHoldRegisteredDate() {
		return holdRegisteredDate;
	}

	public void setHoldRegisteredDate(OADateTime newValue) {
		OADateTime old = holdRegisteredDate;
		fireBeforePropertyChange(P_HoldRegisteredDate, old, newValue);
		this.holdRegisteredDate = newValue;
		firePropertyChange(P_HoldRegisteredDate, old, this.holdRegisteredDate);
	}

	@OAOne(displayName = "Store Transmit Info", isCalculated = true, reverseName = StoreTransmitInfo.P_CalcTesterStore, allowCreateNew = false, allowAddExisting = false, equalPropertyPath = "storeTransmitBatch.store")
	public StoreTransmitInfo getCalcStoreTransmitInfo() {
		// Custom code
		if (calcStoreTransmitInfo == null) {
			OAFinder<TesterStore, StoreTransmitBatch> finder = new OAFinder<>(
					TesterStorePP.tester().transmitBatch().storeTransmitBatches().pp);
			finder.addEqualFilter(StoreTransmitBatchPP.store().pp, this.getStore());

			StoreTransmitBatch storeTransmitBatch = finder.findFirst(this);
			if (storeTransmitBatch == null) {
				return null;
			}

			OAFinder<TesterStore, StoreTransmitInfo> finder2 = new OAFinder<>(
					TesterStorePP.tester().transmitBatch().tester().environment().corpToStores().storeInfos().storeTransmitInfos().pp);
			finder.addEqualFilter(StoreTransmitInfoPP.storeTransmitBatch().pp, storeTransmitBatch);
			calcStoreTransmitInfo = finder2.findFirst(this);

			// Note: this can be replaced with Query
			/*
			OASelect<StoreTransmitInfo> sel = new OASelect<>(StoreTransmitInfo.class);
			String query = StoreTransmitInfoPP.storeTransmitBatch().store() + " = ? AND "
					+ StoreTransmitInfoPP.storeTransmitBatch().transmitBatchDate() + " = ?";

			Tester tester = getTester();
			if (tester == null) {
				return null;
			}

			sel.select(query, new Object[] { getStore(), tester.getTransmitBatchDate() });
			calcStoreTransmitInfo = sel.next();
			*/
		}
		return calcStoreTransmitInfo;
	}

	private transient StoreTransmitInfo calcStoreTransmitInfo;

	@OAOne(reverseName = Store.P_TesterStores, required = true, allowCreateNew = false)
	@OAFkey(columns = { "store_number" })
	public Store getStore() {
		if (store == null) {
			store = (Store) getObject(P_Store);
		}
		return store;
	}

	public void setStore(Store newValue) {
		Store old = this.store;
		fireBeforePropertyChange(P_Store, old, newValue);
		this.store = newValue;
		firePropertyChange(P_Store, old, this.store);
	}

	@OAOne(reverseName = Tester.P_TesterStores, required = true, isProcessed = true, allowCreateNew = false, allowAddExisting = false)
	@OAFkey(columns = { "tester_id" })
	public Tester getTester() {
		if (tester == null) {
			tester = (Tester) getObject(P_Tester);
		}
		return tester;
	}

	public void setTester(Tester newValue) {
		Tester old = this.tester;
		fireBeforePropertyChange(P_Tester, old, newValue);
		this.tester = newValue;
		firePropertyChange(P_Tester, old, this.tester);
	}
}
