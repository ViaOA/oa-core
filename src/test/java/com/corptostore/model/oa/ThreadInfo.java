// Generated by OABuilder
package com.corptostore.model.oa;

import java.util.logging.Logger;

import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.StoreLockInfo;
import com.corptostore.model.oa.ThreadInfo;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAObjCallback;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCallback;
import com.viaoa.util.OADateTime;

@OAClass(lowerName = "threadInfo", pluralName = "ThreadInfos", shortName = "thi", displayName = "Thread Info", useDataSource = false, isProcessed = true, displayProperty = "name")
public class ThreadInfo extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(ThreadInfo.class.getName());

	public static final String P_Id = "id";
	public static final String P_ThreadId = "threadId";
	public static final String P_Name = "name";
	public static final String P_Paused = "paused";
	public static final String P_IsRunning = "isRunning";
	public static final String P_Status = "status";
	public static final String P_StoreCount = "storeCount";
	public static final String P_StackTrace = "stackTrace";

	public static final String P_CorpToStore = "corpToStore";
	public static final String P_StatusInfo = "statusInfo";
	public static final String P_StoreLockInfo = "storeLockInfo";

	public static final String M_PauseThread = "pauseThread";
	public static final String M_ContinueThread = "continueThread";
	protected volatile int id;
	protected volatile int threadId;
	protected volatile String name;
	protected volatile OADateTime paused;
	protected volatile boolean isRunning;
	protected volatile String status;
	protected volatile int storeCount;
	protected volatile String stackTrace;

	// Links to other objects.
	protected volatile transient CorpToStore corpToStore;
	protected volatile transient StatusInfo statusInfo;
	protected volatile transient StoreLockInfo storeLockInfo;

	public ThreadInfo() {
		if (!isLoading()) {
			setObjectDefaults();
		}
	}

	@Override
	public void setObjectDefaults() {
		getStatusInfo(); // have it autoCreated
	}

	public ThreadInfo(int id) {
		this();
		setId(id);
	}

	@OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
	@OAId
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(displayName = "Thread Id", displayLength = 6, columnLength = 9, isProcessed = true, importMatch = true)
	@OAColumn(name = "thread_id", sqlType = java.sql.Types.INTEGER)
	public int getThreadId() {
		return threadId;
	}

	public void setThreadId(int newValue) {
		int old = threadId;
		fireBeforePropertyChange(P_ThreadId, old, newValue);
		this.threadId = newValue;
		firePropertyChange(P_ThreadId, old, this.threadId);
	}

	@OAProperty(maxLength = 30, displayLength = 20, isProcessed = true)
	@OAColumn(maxLength = 30)
	public String getName() {
		return name;
	}

	public void setName(String newValue) {
		String old = name;
		fireBeforePropertyChange(P_Name, old, newValue);
		this.name = newValue;
		firePropertyChange(P_Name, old, this.name);
	}

	@OAProperty(displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getPaused() {
		return paused;
	}

	public void setPaused(OADateTime newValue) {
		OADateTime old = paused;
		fireBeforePropertyChange(P_Paused, old, newValue);
		this.paused = newValue;
		firePropertyChange(P_Paused, old, this.paused);
	}

	@OAProperty(displayName = "Is Running", displayLength = 5, columnLength = 10, isProcessed = true)
	@OAColumn(name = "is_running", sqlType = java.sql.Types.BOOLEAN)
	public boolean getIsRunning() {
		return isRunning;
	}

	public boolean isIsRunning() {
		return getIsRunning();
	}

	public void setIsRunning(boolean newValue) {
		boolean old = isRunning;
		fireBeforePropertyChange(P_IsRunning, old, newValue);
		this.isRunning = newValue;
		firePropertyChange(P_IsRunning, old, this.isRunning);
	}

	@OAProperty(maxLength = 80, displayLength = 20, isProcessed = true)
	@OAColumn(maxLength = 80)
	public String getStatus() {
		return status;
	}

	public void setStatus(String newValue) {
		String old = status;
		fireBeforePropertyChange(P_Status, old, newValue);
		this.status = newValue;
		firePropertyChange(P_Status, old, this.status);
	}

	@OAProperty(displayName = "Store Count", displayLength = 4, columnLength = 5, isProcessed = true)
	@OAColumn(name = "store_count", sqlType = java.sql.Types.INTEGER)
	public int getStoreCount() {
		return storeCount;
	}

	public void setStoreCount(int newValue) {
		int old = storeCount;
		fireBeforePropertyChange(P_StoreCount, old, newValue);
		this.storeCount = newValue;
		firePropertyChange(P_StoreCount, old, this.storeCount);
	}

	@OAProperty(displayName = "Stack Trace", displayLength = 30, columnLength = 20, isProcessed = true)
	@OAColumn(name = "stack_trace", sqlType = java.sql.Types.CLOB)
	public String getStackTrace() {
		return stackTrace;
	}

	public void setStackTrace(String newValue) {
		String old = stackTrace;
		fireBeforePropertyChange(P_StackTrace, old, newValue);
		this.stackTrace = newValue;
		firePropertyChange(P_StackTrace, old, this.stackTrace);
	}

	@OAOne(displayName = "Corp To Store", reverseName = CorpToStore.P_ThreadInfos, required = true, isProcessed = true, allowCreateNew = false, allowAddExisting = false)
	@OAFkey(columns = { "corp_to_store_id" })
	public CorpToStore getCorpToStore() {
		if (corpToStore == null) {
			corpToStore = (CorpToStore) getObject(P_CorpToStore);
		}
		return corpToStore;
	}

	public void setCorpToStore(CorpToStore newValue) {
		CorpToStore old = this.corpToStore;
		fireBeforePropertyChange(P_CorpToStore, old, newValue);
		this.corpToStore = newValue;
		firePropertyChange(P_CorpToStore, old, this.corpToStore);
	}

	@OAOne(displayName = "Status Info", reverseName = StatusInfo.P_ThreadInfo, required = true,
			//autoCreateNew = true, 
			allowAddExisting = false)
	@OAFkey(columns = { "status_info_id" })
	public StatusInfo getStatusInfo() {
		if (statusInfo == null) {
			statusInfo = (StatusInfo) getObject(P_StatusInfo);
		}
		return statusInfo;
	}

	public void setStatusInfo(StatusInfo newValue) {
		StatusInfo old = this.statusInfo;
		fireBeforePropertyChange(P_StatusInfo, old, newValue);
		this.statusInfo = newValue;
		firePropertyChange(P_StatusInfo, old, this.statusInfo);
	}

	@OAOne(displayName = "Store Lock Info", reverseName = StoreLockInfo.P_ThreadInfo, isProcessed = true, allowCreateNew = false, allowAddExisting = false, equalPropertyPath = "storeLockServiceInfo.corpToStore")
	public StoreLockInfo getStoreLockInfo() {
		if (storeLockInfo == null) {
			storeLockInfo = (StoreLockInfo) getObject(P_StoreLockInfo);
		}
		return storeLockInfo;
	}

	public void setStoreLockInfo(StoreLockInfo newValue) {
		StoreLockInfo old = this.storeLockInfo;
		fireBeforePropertyChange(P_StoreLockInfo, old, newValue);
		this.storeLockInfo = newValue;
		firePropertyChange(P_StoreLockInfo, old, this.storeLockInfo);
	}

	@OAMethod(displayName = "Pause")
	public void pauseThread() {
		// todo: add custom code here
		setPaused(new OADateTime());
	}

	@OAObjCallback(enabledProperty = ThreadInfo.P_Paused, enabledValue = false)
	public void pauseThreadCallback(OAObjectCallback cb) {
	}

	@OAMethod(displayName = "Continue")
	public void continueThread() {
		setPaused(null);
	}

	@OAObjCallback(enabledProperty = ThreadInfo.P_Paused)
	public void continueThreadCallback(OAObjectCallback cb) {
	}

}
