// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.delegate.oa.TransmitDelegate;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.TransmitBatch;
import com.viaoa.annotation.*;
 
@OAClass(
    lowerName = "transmit",
    pluralName = "Transmits",
    shortName = "trn",
    displayName = "Transmit",
    displayProperty = "transmitId",
    sortProperty = "transmitId"
)
@OATable(
    name = "message_service_transmit",
    indexes = {
        @OAIndex(name = "message_service_transmit_store", fkey = true, columns = { @OAIndexColumn(name = "store_number") }), 
        @OAIndex(name = "message_service_transmit_transmit_batch", fkey = true, columns = { @OAIndexColumn(name = "transmit_batch_date") })
    }
)
public class Transmit extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Transmit.class.getName());

    public static final String P_TransmitId = "transmitId";
    public static final String P_MessageCode = "messageCode";
    public static final String P_RpgRecord = "rpgRecord";
     
    public static final String P_BinaryDisplay = "binaryDisplay";
    public static final String P_AsJson = "asJson";
     
    public static final String P_Send = "send";
    public static final String P_Store = "store";
    public static final String P_TransmitBatch = "transmitBatch";
     
    protected volatile long transmitId;
    protected volatile int messageCode;
    protected volatile transient byte[] rpgRecord;
     
    // Links to other objects.
    protected volatile transient Store store;
    protected volatile transient TransmitBatch transmitBatch;
     
    public Transmit() {
        if (!isLoading()) setObjectDefaults();
    }
     
    public Transmit(long transmitId) {
        this();
        setTransmitId(transmitId);
    }
     

    @OAProperty(displayName = "Transmit Id", isUnique = true, trackPrimitiveNull = false, displayLength = 6, columnLength = 11)
    @OAId
    @OAColumn(name = "transmit_id", sqlType = java.sql.Types.BIGINT)
    public long getTransmitId() {
        return transmitId;
    }
    public void setTransmitId(long newValue) {
        long old = transmitId;
        fireBeforePropertyChange(P_TransmitId, old, newValue);
        this.transmitId = newValue;
        firePropertyChange(P_TransmitId, old, this.transmitId);
    }
    @OAProperty(displayName = "Message Code", displayLength = 6, columnLength = 12)
    @OAColumn(name = "message_code", sqlType = java.sql.Types.INTEGER)
    public int getMessageCode() {
        return messageCode;
    }
    public void setMessageCode(int newValue) {
        int old = messageCode;
        fireBeforePropertyChange(P_MessageCode, old, newValue);
        this.messageCode = newValue;
        firePropertyChange(P_MessageCode, old, this.messageCode);
    }
    @OAProperty(displayName = "Rpg Record", isBlob = true, columnLength = 10)
    @OAColumn(name = "rpg_record", sqlType = java.sql.Types.BLOB)
    public byte[] getRpgRecord() {
        if (rpgRecord == null) {
            rpgRecord = getBlob(P_RpgRecord);
        }
        return rpgRecord;
    }
    public void setRpgRecord(byte[] newValue) {
        byte[] old = rpgRecord;
        fireBeforePropertyChange(P_RpgRecord, old, newValue);
        this.rpgRecord = newValue;
        firePropertyChange(P_RpgRecord, old, this.rpgRecord);
    }
    @OACalculatedProperty(displayName = "Binary Display", displayLength = 30, columnLength = 20, isHtml = true, properties = {P_RpgRecord})
    public String getBinaryDisplay() {
        return TransmitDelegate.getBinaryDisplay(this);
    }
    @OACalculatedProperty(displayName = "As Json", displayLength = 30, columnLength = 20, properties = {P_MessageCode, P_RpgRecord})
    public String getAsJson() {
        return TransmitDelegate.getAsJson(this);
    }
    @OAOne(
        reverseName = Send.P_BeginTransmit, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Send getSend() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAOne(
        reverseName = Store.P_Transmits, 
        allowCreateNew = false, 
        pojoNames = { "storeNumber" }
    )
    @OAFkey(columns = {"store_number"})
    public Store getStore() {
        if (store == null) {
            store = (Store) getObject(P_Store);
        }
        return store;
    }
    public void setStore(Store newValue) {
        Store old = this.store;
        fireBeforePropertyChange(P_Store, old, newValue);
        this.store = newValue;
        firePropertyChange(P_Store, old, this.store);
    }
    @OAOne(
        displayName = "Transmit Batch", 
        reverseName = TransmitBatch.P_Transmits, 
        required = true, 
        allowCreateNew = false, 
        pojoNames = { "transmitBatchDate" }
    )
    @OAFkey(columns = {"transmit_batch_date"})
    public TransmitBatch getTransmitBatch() {
        if (transmitBatch == null) {
            transmitBatch = (TransmitBatch) getObject(P_TransmitBatch);
        }
        return transmitBatch;
    }
    public void setTransmitBatch(TransmitBatch newValue) {
        TransmitBatch old = this.transmitBatch;
        fireBeforePropertyChange(P_TransmitBatch, old, newValue);
        this.transmitBatch = newValue;
        firePropertyChange(P_TransmitBatch, old, this.transmitBatch);
    }
    public void load(ResultSet rs, long transmitId) throws SQLException {
        this.transmitId = transmitId;
        this.messageCode = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Transmit.P_MessageCode, true);
        }
        int storeFkey = rs.getInt(3);
        if (!rs.wasNull() && storeFkey > 0) {
            setProperty(P_Store, new OAObjectKey(storeFkey));
        }
        java.sql.Date date;
        date = rs.getDate(4);
        if (date != null) {
            setProperty(P_TransmitBatch, new OAObjectKey(new OADate(date)));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
