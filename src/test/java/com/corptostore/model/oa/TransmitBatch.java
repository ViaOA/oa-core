// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.method.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.process.server.TransmitBatchDataGenerator;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.TransmitBatch;
import com.corptostore.model.oa.method.TransmitBatchGenerateSampleDataMethod;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "transmitBatch",
    pluralName = "TransmitBatches",
    shortName = "trb",
    displayName = "Transmit Batch",
    displayProperty = "transmitBatchDate",
    sortProperty = "transmitBatchDate"
)
@OATable(
    name = "message_service_transmit_batch"
)
public class TransmitBatch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(TransmitBatch.class.getName());

    public static final String P_TransmitBatchDate = "transmitBatchDate";
    public static final String P_Lock = "lock";
    public static final String P_DataPullCompleted = "dataPullCompleted";
    public static final String P_CommBuildVerified = "commBuildVerified";
    public static final String P_DataAreaVerified = "dataAreaVerified";
    public static final String P_StoreInitializationCheck = "storeInitializationCheck";
    public static final String P_StoreMessagesBuilt = "storeMessagesBuilt";
    public static final String P_StoreMessagesProcessed = "storeMessagesProcessed";
    public static final String P_LastHcomm1Offset = "lastHcomm1Offset";
     
     
    public static final String P_StoreTransmitBatches = "storeTransmitBatches";
    public static final String P_Tester = "tester";
    public static final String P_Transmits = "transmits";
     
    public static final String M_GenerateSampleData = "generateSampleData";
    protected volatile OADate transmitBatchDate;
    protected volatile OADateTime lock;
    protected volatile OADateTime dataPullCompleted;
    protected volatile OADateTime commBuildVerified;
    protected volatile OADateTime dataAreaVerified;
    protected volatile OADateTime storeInitializationCheck;
    protected volatile OADateTime storeMessagesBuilt;
    protected volatile OADateTime storeMessagesProcessed;
    protected volatile long lastHcomm1Offset;
     
    // Links to other objects.
    protected transient Hub<StoreTransmitBatch> hubStoreTransmitBatches;
     
    public TransmitBatch() {
        if (!isLoading()) setObjectDefaults();
    }
     
    public TransmitBatch(OADate transmitBatchDate) {
        this();
        setTransmitBatchDate(transmitBatchDate);
    }
     

    @OAProperty(displayName = "Transmit Batch Date", isUnique = true, trackPrimitiveNull = false, displayLength = 8, columnLength = 19)
    @OAId(autoAssign = false)
    @OAColumn(name = "transmit_batch_date", sqlType = java.sql.Types.DATE)
    public OADate getTransmitBatchDate() {
        return transmitBatchDate;
    }
    public void setTransmitBatchDate(OADate newValue) {
        OADate old = transmitBatchDate;
        fireBeforePropertyChange(P_TransmitBatchDate, old, newValue);
        this.transmitBatchDate = newValue;
        firePropertyChange(P_TransmitBatchDate, old, this.transmitBatchDate);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getLock() {
        return lock;
    }
    public void setLock(OADateTime newValue) {
        OADateTime old = lock;
        fireBeforePropertyChange(P_Lock, old, newValue);
        this.lock = newValue;
        firePropertyChange(P_Lock, old, this.lock);
    }
    @OAProperty(displayName = "Data Pull Completed", displayLength = 15, columnLength = 19)
    @OAColumn(name = "data_pull_completed", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getDataPullCompleted() {
        return dataPullCompleted;
    }
    public void setDataPullCompleted(OADateTime newValue) {
        OADateTime old = dataPullCompleted;
        fireBeforePropertyChange(P_DataPullCompleted, old, newValue);
        this.dataPullCompleted = newValue;
        firePropertyChange(P_DataPullCompleted, old, this.dataPullCompleted);
    }
    @OAProperty(displayName = "Comm Build Verified", displayLength = 15, columnLength = 19)
    @OAColumn(name = "comm_build_verified", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCommBuildVerified() {
        return commBuildVerified;
    }
    public void setCommBuildVerified(OADateTime newValue) {
        OADateTime old = commBuildVerified;
        fireBeforePropertyChange(P_CommBuildVerified, old, newValue);
        this.commBuildVerified = newValue;
        firePropertyChange(P_CommBuildVerified, old, this.commBuildVerified);
    }
    @OAProperty(displayName = "Data Area Verified", displayLength = 15, columnLength = 18)
    @OAColumn(name = "data_area_verified", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getDataAreaVerified() {
        return dataAreaVerified;
    }
    public void setDataAreaVerified(OADateTime newValue) {
        OADateTime old = dataAreaVerified;
        fireBeforePropertyChange(P_DataAreaVerified, old, newValue);
        this.dataAreaVerified = newValue;
        firePropertyChange(P_DataAreaVerified, old, this.dataAreaVerified);
    }
    @OAProperty(displayName = "Store Initialization Check", displayLength = 15, columnLength = 26)
    @OAColumn(name = "store_initialization_check", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStoreInitializationCheck() {
        return storeInitializationCheck;
    }
    public void setStoreInitializationCheck(OADateTime newValue) {
        OADateTime old = storeInitializationCheck;
        fireBeforePropertyChange(P_StoreInitializationCheck, old, newValue);
        this.storeInitializationCheck = newValue;
        firePropertyChange(P_StoreInitializationCheck, old, this.storeInitializationCheck);
    }
    @OAProperty(displayName = "Store Messages Built", displayLength = 15, columnLength = 20)
    @OAColumn(name = "store_messages_built", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStoreMessagesBuilt() {
        return storeMessagesBuilt;
    }
    public void setStoreMessagesBuilt(OADateTime newValue) {
        OADateTime old = storeMessagesBuilt;
        fireBeforePropertyChange(P_StoreMessagesBuilt, old, newValue);
        this.storeMessagesBuilt = newValue;
        firePropertyChange(P_StoreMessagesBuilt, old, this.storeMessagesBuilt);
    }
    @OAProperty(displayName = "Store Messages Processed", displayLength = 15, columnLength = 24)
    @OAColumn(name = "store_messages_processed", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStoreMessagesProcessed() {
        return storeMessagesProcessed;
    }
    public void setStoreMessagesProcessed(OADateTime newValue) {
        OADateTime old = storeMessagesProcessed;
        fireBeforePropertyChange(P_StoreMessagesProcessed, old, newValue);
        this.storeMessagesProcessed = newValue;
        firePropertyChange(P_StoreMessagesProcessed, old, this.storeMessagesProcessed);
    }
    @OAProperty(displayName = "Last Hcomm1 Offset", displayLength = 6, columnLength = 18)
    @OAColumn(name = "last_hcomm1_offset", sqlType = java.sql.Types.BIGINT)
    public long getLastHcomm1Offset() {
        return lastHcomm1Offset;
    }
    public void setLastHcomm1Offset(long newValue) {
        long old = lastHcomm1Offset;
        fireBeforePropertyChange(P_LastHcomm1Offset, old, newValue);
        this.lastHcomm1Offset = newValue;
        firePropertyChange(P_LastHcomm1Offset, old, this.lastHcomm1Offset);
    }
    @OAMany(
        displayName = "Store Transmit Batches", 
        toClass = StoreTransmitBatch.class, 
        reverseName = StoreTransmitBatch.P_TransmitBatch, 
        mustBeEmptyForDelete = true
    )
    public Hub<StoreTransmitBatch> getStoreTransmitBatches() {
        if (hubStoreTransmitBatches == null) {
            hubStoreTransmitBatches = (Hub<StoreTransmitBatch>) getHub(P_StoreTransmitBatches);
        }
        return hubStoreTransmitBatches;
    }
    @OAOne(
        reverseName = Tester.P_TransmitBatch, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Tester getTester() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        toClass = Transmit.class, 
        reverseName = Transmit.P_TransmitBatch, 
        createMethod = false
    )
    private Hub<Transmit> getTransmits() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMethod(displayName = "Generate Sample Data")
    public void generateSampleData(TransmitBatchGenerateSampleDataMethod request) {
        TransmitBatchDataGenerator gen = new TransmitBatchDataGenerator();
        gen.generateTransmitRecords(this, request.getAllStoreMessages(), request.getTotalMessages());
    }

    public void load(ResultSet rs, OADate transmitBatchDate) throws SQLException {
        this.transmitBatchDate = transmitBatchDate;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.lock = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.dataPullCompleted = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.commBuildVerified = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(5);
        if (timestamp != null) this.dataAreaVerified = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(6);
        if (timestamp != null) this.storeInitializationCheck = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(7);
        if (timestamp != null) this.storeMessagesBuilt = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(8);
        if (timestamp != null) this.storeMessagesProcessed = new OADateTime(timestamp);
        this.lastHcomm1Offset = (long) rs.getLong(9);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, TransmitBatch.P_LastHcomm1Offset, true);
        }
        if (rs.getMetaData().getColumnCount() != 9) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
