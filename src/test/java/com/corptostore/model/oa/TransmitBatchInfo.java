// Generated by OABuilder
package com.corptostore.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.corptostore.delegate.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.TransmitBatchInfo;
import com.corptostore.model.oa.TransmitBatchServiceInfo;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.viaoa.util.OADate;
 
@OAClass(
    lowerName = "transmitBatchInfo",
    pluralName = "TransmitBatchInfos",
    shortName = "tbi",
    displayName = "Transmit Batch Info",
    useDataSource = false,
    displayProperty = "id"
)
public class TransmitBatchInfo extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(TransmitBatchInfo.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_TransmitBatchDate = "transmitBatchDate";
    public static final String P_Paused = "paused";
    public static final String P_LoadDataStart = "loadDataStart";
    public static final String P_LoadDataEnd = "loadDataEnd";
     
     
    public static final String P_StatusInfo = "statusInfo";
    public static final String P_TransmitBatchServiceInfo = "transmitBatchServiceInfo";
     
    public static final String M_PauseBatch = "pauseBatch";
    public static final String M_ContinueBatch = "continueBatch";
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile OADate transmitBatchDate;
    protected volatile OADateTime paused;
    protected volatile OADateTime loadDataStart;
    protected volatile OADateTime loadDataEnd;
     
    // Links to other objects.
    protected volatile transient StatusInfo statusInfo;
    protected volatile transient TransmitBatchServiceInfo transmitBatchServiceInfo;
     
    public TransmitBatchInfo() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
        getStatusInfo(); // have it autoCreated
    }
     
    public TransmitBatchInfo(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Transmit Batch Date", displayLength = 8, columnLength = 19)
    @OAColumn(name = "transmit_batch_date", sqlType = java.sql.Types.DATE)
    public OADate getTransmitBatchDate() {
        return transmitBatchDate;
    }
    public void setTransmitBatchDate(OADate newValue) {
        OADate old = transmitBatchDate;
        fireBeforePropertyChange(P_TransmitBatchDate, old, newValue);
        this.transmitBatchDate = newValue;
        firePropertyChange(P_TransmitBatchDate, old, this.transmitBatchDate);
    }
    @OAProperty(displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getPaused() {
        return paused;
    }
    public void setPaused(OADateTime newValue) {
        OADateTime old = paused;
        fireBeforePropertyChange(P_Paused, old, newValue);
        this.paused = newValue;
        firePropertyChange(P_Paused, old, this.paused);
    }
    @OAProperty(displayName = "Load Data Start", displayLength = 15, isProcessed = true)
    @OAColumn(name = "load_data_start", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getLoadDataStart() {
        return loadDataStart;
    }
    public void setLoadDataStart(OADateTime newValue) {
        OADateTime old = loadDataStart;
        fireBeforePropertyChange(P_LoadDataStart, old, newValue);
        this.loadDataStart = newValue;
        firePropertyChange(P_LoadDataStart, old, this.loadDataStart);
    }
    @OAProperty(displayName = "Load Data End", displayLength = 15, isProcessed = true)
    @OAColumn(name = "load_data_end", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getLoadDataEnd() {
        return loadDataEnd;
    }
    public void setLoadDataEnd(OADateTime newValue) {
        OADateTime old = loadDataEnd;
        fireBeforePropertyChange(P_LoadDataEnd, old, newValue);
        this.loadDataEnd = newValue;
        firePropertyChange(P_LoadDataEnd, old, this.loadDataEnd);
    }
    @OAOne(
        displayName = "Status Info", 
        reverseName = StatusInfo.P_TransmitBatchInfo, 
        required = true, 
        allowCreateNew = false, 
        autoCreateNew = true
    )
    @OAFkey(columns = {"status_info_id"})
    public StatusInfo getStatusInfo() {
        if (statusInfo == null) {
            statusInfo = (StatusInfo) getObject(P_StatusInfo);
        }
        return statusInfo;
    }
    public void setStatusInfo(StatusInfo newValue) {
        StatusInfo old = this.statusInfo;
        fireBeforePropertyChange(P_StatusInfo, old, newValue);
        this.statusInfo = newValue;
        firePropertyChange(P_StatusInfo, old, this.statusInfo);
    }
    @OAOne(
        displayName = "Transmit Batch Service Info", 
        reverseName = TransmitBatchServiceInfo.P_TransmitBatchInfos, 
        required = true, 
        isProcessed = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"transmit_batch_service_info_id"})
    public TransmitBatchServiceInfo getTransmitBatchServiceInfo() {
        if (transmitBatchServiceInfo == null) {
            transmitBatchServiceInfo = (TransmitBatchServiceInfo) getObject(P_TransmitBatchServiceInfo);
        }
        return transmitBatchServiceInfo;
    }
    public void setTransmitBatchServiceInfo(TransmitBatchServiceInfo newValue) {
        TransmitBatchServiceInfo old = this.transmitBatchServiceInfo;
        fireBeforePropertyChange(P_TransmitBatchServiceInfo, old, newValue);
        this.transmitBatchServiceInfo = newValue;
        firePropertyChange(P_TransmitBatchServiceInfo, old, this.transmitBatchServiceInfo);
    }
    @OAMethod(displayName = "Pause")
    public void pauseBatch() {
        setPaused(new OADateTime());
    }
    @OAObjCallback(enabledProperty = TransmitBatchServiceInfo.P_Paused, enabledValue = false
    )
    public void pauseBatchCallback(OAObjectCallback cb) {
    }

    @OAMethod(displayName = "Continue")
    public void continueBatch() {
        setPaused(null);
    }
    @OAObjCallback(enabledProperty = TransmitBatchServiceInfo.P_Paused)
    public void continueBatchCallback(OAObjectCallback cb) {
    }

}
 
