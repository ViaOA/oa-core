// Generated by OABuilder
package com.corptostore.model.oa;

import java.util.logging.Logger;

import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.StatusInfo;
import com.corptostore.model.oa.TransmitBatchInfo;
import com.corptostore.model.oa.TransmitBatchServiceInfo;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAMany;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAObjCallback;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.hub.Hub;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCallback;
import com.viaoa.util.OADateTime;

@OAClass(lowerName = "transmitBatchServiceInfo", pluralName = "TransmitBatchServiceInfos", shortName = "tbs", displayName = "Transmit Batch Service Info", useDataSource = false, displayProperty = "id")
public class TransmitBatchServiceInfo extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(TransmitBatchServiceInfo.class.getName());

	public static final String P_Id = "id";
	public static final String P_Created = "created";
	public static final String P_Paused = "paused";
	public static final String P_HasLock = "hasLock";
	public static final String P_LockExpire = "lockExpire";

	public static final String P_CorpToStore = "corpToStore";
	public static final String P_StatusInfo = "statusInfo";
	public static final String P_TransmitBatchInfos = "transmitBatchInfos";

	public static final String M_PauseService = "pauseService";
	public static final String M_ContinueService = "continueService";
	protected volatile int id;
	protected volatile OADateTime created;
	protected volatile OADateTime paused;
	protected volatile boolean hasLock;
	protected volatile OADateTime lockExpire;

	// Links to other objects.
	protected volatile transient CorpToStore corpToStore;
	protected volatile transient StatusInfo statusInfo;
	protected transient Hub<TransmitBatchInfo> hubTransmitBatchInfos;

	public TransmitBatchServiceInfo() {
		if (!isLoading()) {
			setObjectDefaults();
		}
	}

	@Override
	public void setObjectDefaults() {
		setCreated(new OADateTime());
		// getStatusInfo(); // have it autoCreated
	}

	public TransmitBatchServiceInfo(int id) {
		this();
		setId(id);
	}

	@OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
	@OAId
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getCreated() {
		return created;
	}

	public void setCreated(OADateTime newValue) {
		OADateTime old = created;
		fireBeforePropertyChange(P_Created, old, newValue);
		this.created = newValue;
		firePropertyChange(P_Created, old, this.created);
	}

	@OAProperty(displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getPaused() {
		return paused;
	}

	public void setPaused(OADateTime newValue) {
		OADateTime old = paused;
		fireBeforePropertyChange(P_Paused, old, newValue);
		this.paused = newValue;
		firePropertyChange(P_Paused, old, this.paused);
	}

	@OAProperty(displayName = "Has Lock", displayLength = 5, columnLength = 8, isProcessed = true)
	@OAColumn(name = "has_lock", sqlType = java.sql.Types.BOOLEAN)
	public boolean getHasLock() {
		return hasLock;
	}

	public boolean isHasLock() {
		return getHasLock();
	}

	public void setHasLock(boolean newValue) {
		boolean old = hasLock;
		fireBeforePropertyChange(P_HasLock, old, newValue);
		this.hasLock = newValue;
		firePropertyChange(P_HasLock, old, this.hasLock);
	}

	@OAProperty(displayName = "Lock Expire", displayLength = 15, isProcessed = true)
	@OAColumn(name = "lock_expire", sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getLockExpire() {
		return lockExpire;
	}

	public void setLockExpire(OADateTime newValue) {
		OADateTime old = lockExpire;
		fireBeforePropertyChange(P_LockExpire, old, newValue);
		this.lockExpire = newValue;
		firePropertyChange(P_LockExpire, old, this.lockExpire);
	}

	@OAOne(displayName = "Corp To Store", reverseName = CorpToStore.P_TransmitBatchServiceInfo, required = true, allowCreateNew = false, allowAddExisting = false)
	@OAFkey(columns = { "corp_to_store_id" })
	public CorpToStore getCorpToStore() {
		if (corpToStore == null) {
			corpToStore = (CorpToStore) getObject(P_CorpToStore);
		}
		return corpToStore;
	}

	public void setCorpToStore(CorpToStore newValue) {
		CorpToStore old = this.corpToStore;
		fireBeforePropertyChange(P_CorpToStore, old, newValue);
		this.corpToStore = newValue;
		firePropertyChange(P_CorpToStore, old, this.corpToStore);
	}

	@OAOne(displayName = "Status Info", reverseName = StatusInfo.P_TransmitBatchServiceInfo, required = true, allowCreateNew = false,
			// autoCreateNew = true,
			allowAddExisting = false)
	@OAFkey(columns = { "status_info_id" })
	public StatusInfo getStatusInfo() {
		if (statusInfo == null) {
			statusInfo = (StatusInfo) getObject(P_StatusInfo);
		}
		return statusInfo;
	}

	public void setStatusInfo(StatusInfo newValue) {
		StatusInfo old = this.statusInfo;
		fireBeforePropertyChange(P_StatusInfo, old, newValue);
		this.statusInfo = newValue;
		firePropertyChange(P_StatusInfo, old, this.statusInfo);
	}

	@OAMany(displayName = "Transmit Batch Infos", toClass = TransmitBatchInfo.class, owner = true, reverseName = TransmitBatchInfo.P_TransmitBatchServiceInfo, isProcessed = true, cascadeSave = true, cascadeDelete = true)
	public Hub<TransmitBatchInfo> getTransmitBatchInfos() {
		if (hubTransmitBatchInfos == null) {
			hubTransmitBatchInfos = (Hub<TransmitBatchInfo>) getHub(P_TransmitBatchInfos);
		}
		return hubTransmitBatchInfos;
	}

	@OAMethod(displayName = "Pause")
	public void pauseService() {
		setPaused(new OADateTime());
	}

	@OAObjCallback(enabledProperty = TransmitBatchServiceInfo.P_Paused, enabledValue = false)
	public void pauseServiceCallback(OAObjectCallback cb) {
	}

	@OAMethod(displayName = "Continue")
	public void continueService() {
		setPaused(null);
	}

	@OAObjCallback(enabledProperty = TransmitBatchServiceInfo.P_Paused)
	public void continueServiceCallback(OAObjectCallback cb) {
	}

}
