// Generated by OABuilder
package com.corptostore.model.oa.filter;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Dashboard;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.filter.SendOpenFilter;
import com.corptostore.model.oa.search.BatchSearch;
import com.corptostore.model.oa.search.DashboardSearch;
import com.corptostore.model.oa.search.StoreSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import java.util.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "Open", displayName = "Open", hasInputParams = true)
public class SendOpenFilter extends OAObject implements CustomHubFilter<Send> {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(SendOpenFilter.class.getName());

    public static final String P_EnvironmentUrlTemplate = "EnvironmentUrlTemplate";
    public static final String P_AppServerStarted = "AppServerStarted";
    public static final String P_Store = "Store";
    public static final String P_UseStoreSearch = "UseStoreSearch";
    public static final String P_Batch = "Batch";
    public static final String P_UseBatchSearch = "UseBatchSearch";
    public static final String P_Dashboard = "Dashboard";
    public static final String P_UseDashboardSearch = "UseDashboardSearch";

    protected String environmentUrlTemplate;
    protected OADateTime appServerStarted;
    protected Store store;
    protected boolean useStoreSearch;
    protected StoreSearch searchStore;
    protected Batch batch;
    protected boolean useBatchSearch;
    protected BatchSearch searchBatch;
    protected Dashboard dashboard;
    protected boolean useDashboardSearch;
    protected DashboardSearch searchDashboard;
    public static final String PPCode = ":Open(?,?,?,?,?)";
    private Hub<Send> hubMaster;
    private Hub<Send> hub;
    private HubFilter<Send> hubFilter;
    private OAObjectCacheFilter<Send> cacheFilter;
    private boolean bUseObjectCache;

    public SendOpenFilter() {
        this(null, null, false);
    }
    public SendOpenFilter(Hub<Send> hub) {
        this(null, hub, true);
    }
    public SendOpenFilter(Hub<Send> hubMaster, Hub<Send> hub) {
        this(hubMaster, hub, false);
    }
    public SendOpenFilter(Hub<Send> hubMaster, Hub<Send> hubFiltered, boolean bUseObjectCache) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        this.bUseObjectCache = bUseObjectCache;
        if (hubMaster != null) getHubFilter();
        if (bUseObjectCache) getObjectCacheFilter();
    }
    public SendOpenFilter(Hub<Send> hubMaster, Hub<Send> hubFiltered, String environmentUrlTemplate, OADateTime appServerStarted) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        if (hubMaster == null) this.hubMaster = new Hub<Send>(Send.class);
        setEnvironmentUrlTemplate(environmentUrlTemplate);
        setAppServerStarted(appServerStarted);
        getHubFilter(); // create filter
    }


    public String getEnvironmentUrlTemplate() {
        return environmentUrlTemplate;
    }
    public void setEnvironmentUrlTemplate(String newValue) {
        String old = environmentUrlTemplate;
        fireBeforePropertyChange(P_EnvironmentUrlTemplate, old, newValue);
        this.environmentUrlTemplate = newValue;
        firePropertyChange(P_EnvironmentUrlTemplate, old, this.environmentUrlTemplate);
    }
      
    public OADateTime getAppServerStarted() {
        return appServerStarted;
    }
    public void setAppServerStarted(OADateTime newValue) {
        OADateTime old = appServerStarted;
        fireBeforePropertyChange(P_AppServerStarted, old, newValue);
        this.appServerStarted = newValue;
        firePropertyChange(P_AppServerStarted, old, this.appServerStarted);
    }
      

    @OAOne
    public Store getStore() {
        if (store == null) {
            store = (Store) getObject(P_Store);
        }
        return store;
    }
    public void setStore(Store newValue) {
        Store old = this.store;
        this.store = newValue;
        firePropertyChange(P_Store, old, this.store);
    }
    public boolean getUseStoreSearch() {
        return useStoreSearch;
    }
    public void setUseStoreSearch(boolean newValue) {
        boolean old = this.useStoreSearch;
        this.useStoreSearch = newValue;
        firePropertyChange(P_UseStoreSearch, old, this.useStoreSearch);
    }
    public StoreSearch getStoreSearch() {
        return this.searchStore;
    }
    public void setStoreSearch(StoreSearch newValue) {
        this.searchStore = newValue;
    }

    @OAOne
    public Batch getBatch() {
        if (batch == null) {
            batch = (Batch) getObject(P_Batch);
        }
        return batch;
    }
    public void setBatch(Batch newValue) {
        Batch old = this.batch;
        this.batch = newValue;
        firePropertyChange(P_Batch, old, this.batch);
    }
    public boolean getUseBatchSearch() {
        return useBatchSearch;
    }
    public void setUseBatchSearch(boolean newValue) {
        boolean old = this.useBatchSearch;
        this.useBatchSearch = newValue;
        firePropertyChange(P_UseBatchSearch, old, this.useBatchSearch);
    }
    public BatchSearch getBatchSearch() {
        return this.searchBatch;
    }
    public void setBatchSearch(BatchSearch newValue) {
        this.searchBatch = newValue;
    }

    @OAOne
    public Dashboard getDashboard() {
        if (dashboard == null) {
            dashboard = (Dashboard) getObject(P_Dashboard);
        }
        return dashboard;
    }
    public void setDashboard(Dashboard newValue) {
        Dashboard old = this.dashboard;
        this.dashboard = newValue;
        firePropertyChange(P_Dashboard, old, this.dashboard);
    }
    public boolean getUseDashboardSearch() {
        return useDashboardSearch;
    }
    public void setUseDashboardSearch(boolean newValue) {
        boolean old = this.useDashboardSearch;
        this.useDashboardSearch = newValue;
        firePropertyChange(P_UseDashboardSearch, old, this.useDashboardSearch);
    }
    public DashboardSearch getDashboardSearch() {
        return this.searchDashboard;
    }
    public void setDashboardSearch(DashboardSearch newValue) {
        this.searchDashboard = newValue;
    }

    public void reset() {
        setEnvironmentUrlTemplate(null);
        setAppServerStarted(null);
        setStore(null);
        setUseStoreSearch(false);
        setBatch(null);
        setUseBatchSearch(false);
        setDashboard(null);
        setUseDashboardSearch(false);
    }

    public boolean isDataEntered() {
        if (getEnvironmentUrlTemplate() != null) return true;
        if (getAppServerStarted() != null) return true;
        if (getStore() != null) return true;
        if (getUseStoreSearch()) return true;
        if (getBatch() != null) return true;
        if (getUseBatchSearch()) return true;
        if (getDashboard() != null) return true;
        if (getUseDashboardSearch()) return true;
        return false;
    }
    public void refresh() {
        if (hubFilter != null) getHubFilter().refresh();
        if (cacheFilter != null) getObjectCacheFilter().refresh();
    }

    @Override
    public HubFilter<Send> getHubFilter() {
        if (hubFilter != null) return hubFilter;
        if (hubMaster == null) return null;
        hubFilter = new HubFilter<Send>(hubMaster, hub) {
            @Override
            public boolean isUsed(Send send) {
                return SendOpenFilter.this.isUsed(send);
            }
        };
        return hubFilter;
    }

    public OAObjectCacheFilter<Send> getObjectCacheFilter() {
        if (cacheFilter != null) return cacheFilter;
        if (!bUseObjectCache) return null;
        cacheFilter = new OAObjectCacheFilter<Send>(hub) {
            @Override
            public boolean isUsed(Send send) {
                return SendOpenFilter.this.isUsed(send);
            }
            @Override
            protected void reselect() {
                SendOpenFilter.this.reselect();
            }
        };
        return cacheFilter;
    }

    public void reselect() {
        // can be overwritten to query datasource
    }

    // ==================
    // this method has custom code that will need to be put into the OABuilder filter

    @Override
    public boolean isUsed(Send send) {
        boolean bResult = true;
    // TEST ONLY, remove this qqqqqqqqqqqqqqqqqqqqqqqqqqqqq
        return bResult;
    }
}
