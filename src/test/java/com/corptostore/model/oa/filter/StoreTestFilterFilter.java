// Generated by OABuilder
package com.corptostore.model.oa.filter;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.model.search.*;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.filter.StoreTestFilterFilter;
import com.corptostore.model.oa.search.SendSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "TestFilter", displayName = "Test Filter", hasInputParams = true)
public class StoreTestFilterFilter extends OAObject implements CustomHubFilter<Store> {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(StoreTestFilterFilter.class.getName());

    public static final String P_Send = "Send";
    public static final String P_UseSendSearch = "UseSendSearch";

    protected Send send;
    protected boolean useSendSearch;
    protected SendSearch searchSend;
    public static final String PPCode = ":TestFilter(?)";
    private Hub<Store> hubMaster;
    private Hub<Store> hub;
    private HubFilter<Store> hubFilter;
    private OAObjectCacheFilter<Store> cacheFilter;
    private boolean bUseObjectCache;

    public StoreTestFilterFilter() {
        this(null, null, false);
    }
    public StoreTestFilterFilter(Hub<Store> hub) {
        this(null, hub, true);
    }
    public StoreTestFilterFilter(Hub<Store> hubMaster, Hub<Store> hub) {
        this(hubMaster, hub, false);
    }
    public StoreTestFilterFilter(Hub<Store> hubMaster, Hub<Store> hubFiltered, boolean bUseObjectCache) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        this.bUseObjectCache = bUseObjectCache;
        if (hubMaster != null) getHubFilter();
        if (bUseObjectCache) getObjectCacheFilter();
    }



    @OAOne
    public Send getSend() {
        if (send == null) {
            send = (Send) getObject(P_Send);
        }
        return send;
    }
    public void setSend(Send newValue) {
        Send old = this.send;
        this.send = newValue;
        firePropertyChange(P_Send, old, this.send);
    }
    public boolean getUseSendSearch() {
        return useSendSearch;
    }
    public void setUseSendSearch(boolean newValue) {
        boolean old = this.useSendSearch;
        this.useSendSearch = newValue;
        firePropertyChange(P_UseSendSearch, old, this.useSendSearch);
    }
    public SendSearch getSendSearch() {
        return this.searchSend;
    }
    public void setSendSearch(SendSearch newValue) {
        this.searchSend = newValue;
    }

    public void reset() {
        setSend(null);
        setUseSendSearch(false);
    }

    public boolean isDataEntered() {
        if (getSend() != null) return true;
        if (getUseSendSearch()) return true;
        return false;
    }
    public void refresh() {
        if (hubFilter != null) getHubFilter().refresh();
        if (cacheFilter != null) getObjectCacheFilter().refresh();
    }

    @Override
    public HubFilter<Store> getHubFilter() {
        if (hubFilter != null) return hubFilter;
        if (hubMaster == null) return null;
        hubFilter = new HubFilter<Store>(hubMaster, hub) {
            @Override
            public boolean isUsed(Store store) {
                return StoreTestFilterFilter.this.isUsed(store);
            }
        };
        return hubFilter;
    }

    public OAObjectCacheFilter<Store> getObjectCacheFilter() {
        if (cacheFilter != null) return cacheFilter;
        if (!bUseObjectCache) return null;
        cacheFilter = new OAObjectCacheFilter<Store>(hub) {
            @Override
            public boolean isUsed(Store store) {
                return StoreTestFilterFilter.this.isUsed(store);
            }
            @Override
            protected void reselect() {
                StoreTestFilterFilter.this.reselect();
            }
        };
        return cacheFilter;
    }

    public void reselect() {
        // can be overwritten to query datasource
    }

    // ==================
    // this method has custom code that will need to be put into the OABuilder filter

    @Override
   public boolean isUsed(Store store) {
        // custom code here needs to be put in OABuilder
        return true;
   }
}
