// Generated by OABuilder
package com.corptostore.model.oa.propertypath;
 
import java.io.Serializable;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.propertypath.BatchPPx;
import com.corptostore.model.oa.propertypath.PPxInterface;
import com.corptostore.model.oa.propertypath.ReceivePPx;
import com.corptostore.model.oa.propertypath.SendPPx;
import com.corptostore.model.oa.propertypath.StoreBatchPPx;
import com.corptostore.model.oa.propertypath.StorePPx;
 
public class BatchPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public BatchPPx(String name) {
        this(null, name);
    }

    public BatchPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public SendPPx beginAllStoreSend() {
        SendPPx ppx = new SendPPx(this, Batch.P_BeginAllStoreSend);
        return ppx;
    }

    public SendPPx endAllStoreSend() {
        SendPPx ppx = new SendPPx(this, Batch.P_EndAllStoreSend);
        return ppx;
    }

    public StorePPx fromStore() {
        StorePPx ppx = new StorePPx(this, Batch.P_FromStore);
        return ppx;
    }

    public ReceivePPx receives() {
        ReceivePPx ppx = new ReceivePPx(this, Batch.P_Receives);
        return ppx;
    }

    public SendPPx sends() {
        SendPPx ppx = new SendPPx(this, Batch.P_Sends);
        return ppx;
    }

    public StoreBatchPPx storeBatch() {
        StoreBatchPPx ppx = new StoreBatchPPx(this, Batch.P_StoreBatch);
        return ppx;
    }

    public StorePPx toStore() {
        StorePPx ppx = new StorePPx(this, Batch.P_ToStore);
        return ppx;
    }

    public String batchId() {
        return pp + "." + Batch.P_BatchId;
    }

    public String available() {
        return pp + "." + Batch.P_Available;
    }

    public String readyToUse() {
        return pp + "." + Batch.P_ReadyToUse;
    }

    public String created() {
        return pp + "." + Batch.P_Created;
    }

    public String sessionStartDate() {
        return pp + "." + Batch.P_SessionStartDate;
    }

    public String sessionSequenceNumber() {
        return pp + "." + Batch.P_SessionSequenceNumber;
    }

    public String previousStartDate() {
        return pp + "." + Batch.P_PreviousStartDate;
    }

    public String previousSequenceNumber() {
        return pp + "." + Batch.P_PreviousSequenceNumber;
    }

    public BatchPPx openTestFilter() {
        BatchPPx ppx = new BatchPPx(this, ":openTest()");
        return ppx;
    }

    @Override
    public String toString() {
        return pp;
    }
    public String pp() {
        return pp;
    }
}
 
