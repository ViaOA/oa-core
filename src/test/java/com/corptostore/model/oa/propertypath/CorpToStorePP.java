// Generated by OABuilder
package com.corptostore.model.oa.propertypath;
 
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.propertypath.EnvironmentPPx;
import com.corptostore.model.oa.propertypath.PurgeWindowPPx;
import com.corptostore.model.oa.propertypath.StatusInfoPPx;
import com.corptostore.model.oa.propertypath.StoreInfoPPx;
import com.corptostore.model.oa.propertypath.StoreLockServiceInfoPPx;
import com.corptostore.model.oa.propertypath.ThreadInfoPPx;
import com.corptostore.model.oa.propertypath.TransmitBatchServiceInfoPPx;
 
public class CorpToStorePP {
    private static EnvironmentPPx environment;
    private static PurgeWindowPPx purgeWindows;
    private static StatusInfoPPx statusInfo;
    private static StoreInfoPPx storeInfos;
    private static StoreLockServiceInfoPPx storeLockServiceInfo;
    private static ThreadInfoPPx threadInfos;
    private static TransmitBatchServiceInfoPPx transmitBatchServiceInfo;
     

    public static EnvironmentPPx environment() {
        if (environment == null) environment = new EnvironmentPPx(CorpToStore.P_Environment);
        return environment;
    }

    public static PurgeWindowPPx purgeWindows() {
        if (purgeWindows == null) purgeWindows = new PurgeWindowPPx(CorpToStore.P_PurgeWindows);
        return purgeWindows;
    }

    public static StatusInfoPPx statusInfo() {
        if (statusInfo == null) statusInfo = new StatusInfoPPx(CorpToStore.P_StatusInfo);
        return statusInfo;
    }

    public static StoreInfoPPx storeInfos() {
        if (storeInfos == null) storeInfos = new StoreInfoPPx(CorpToStore.P_StoreInfos);
        return storeInfos;
    }

    public static StoreLockServiceInfoPPx storeLockServiceInfo() {
        if (storeLockServiceInfo == null) storeLockServiceInfo = new StoreLockServiceInfoPPx(CorpToStore.P_StoreLockServiceInfo);
        return storeLockServiceInfo;
    }

    public static ThreadInfoPPx threadInfos() {
        if (threadInfos == null) threadInfos = new ThreadInfoPPx(CorpToStore.P_ThreadInfos);
        return threadInfos;
    }

    public static TransmitBatchServiceInfoPPx transmitBatchServiceInfo() {
        if (transmitBatchServiceInfo == null) transmitBatchServiceInfo = new TransmitBatchServiceInfoPPx(CorpToStore.P_TransmitBatchServiceInfo);
        return transmitBatchServiceInfo;
    }

    public static String id() {
        String s = CorpToStore.P_Id;
        return s;
    }

    public static String created() {
        String s = CorpToStore.P_Created;
        return s;
    }

    public static String nodeName() {
        String s = CorpToStore.P_NodeName;
        return s;
    }

    public static String baseUrl() {
        String s = CorpToStore.P_BaseUrl;
        return s;
    }

    public static String allPaused() {
        String s = CorpToStore.P_AllPaused;
        return s;
    }

    public static String threadsPaused() {
        String s = CorpToStore.P_ThreadsPaused;
        return s;
    }

    public static String purgePaused() {
        String s = CorpToStore.P_PurgePaused;
        return s;
    }

    public static String console() {
        String s = CorpToStore.P_Console;
        return s;
    }

    public static String lastSync() {
        String s = CorpToStore.P_LastSync;
        return s;
    }

    public static String updateInfo() {
        String s = "updateInfo";
        return s;
    }

    public static String pauseAll() {
        String s = "pauseAll";
        return s;
    }

    public static String continueAll() {
        String s = "continueAll";
        return s;
    }

    public static String pauseThreads() {
        String s = "pauseThreads";
        return s;
    }

    public static String continueThreads() {
        String s = "continueThreads";
        return s;
    }

    public static String pausePurge() {
        String s = "pausePurge";
        return s;
    }

    public static String continuePurge() {
        String s = "continuePurge";
        return s;
    }

    public static String pp() {
        return ""; // this
    }
}
 
