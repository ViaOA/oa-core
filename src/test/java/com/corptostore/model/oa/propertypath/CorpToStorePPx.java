// Generated by OABuilder
package com.corptostore.model.oa.propertypath;
 
import java.io.Serializable;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.CorpToStore;
import com.corptostore.model.oa.propertypath.EnvironmentPPx;
import com.corptostore.model.oa.propertypath.PPxInterface;
import com.corptostore.model.oa.propertypath.PurgeWindowPPx;
import com.corptostore.model.oa.propertypath.StatusInfoPPx;
import com.corptostore.model.oa.propertypath.StoreInfoPPx;
import com.corptostore.model.oa.propertypath.StoreLockServiceInfoPPx;
import com.corptostore.model.oa.propertypath.ThreadInfoPPx;
import com.corptostore.model.oa.propertypath.TransmitBatchServiceInfoPPx;
 
public class CorpToStorePPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public CorpToStorePPx(String name) {
        this(null, name);
    }

    public CorpToStorePPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public EnvironmentPPx environment() {
        EnvironmentPPx ppx = new EnvironmentPPx(this, CorpToStore.P_Environment);
        return ppx;
    }

    public PurgeWindowPPx purgeWindows() {
        PurgeWindowPPx ppx = new PurgeWindowPPx(this, CorpToStore.P_PurgeWindows);
        return ppx;
    }

    public StatusInfoPPx statusInfo() {
        StatusInfoPPx ppx = new StatusInfoPPx(this, CorpToStore.P_StatusInfo);
        return ppx;
    }

    public StoreInfoPPx storeInfos() {
        StoreInfoPPx ppx = new StoreInfoPPx(this, CorpToStore.P_StoreInfos);
        return ppx;
    }

    public StoreLockServiceInfoPPx storeLockServiceInfo() {
        StoreLockServiceInfoPPx ppx = new StoreLockServiceInfoPPx(this, CorpToStore.P_StoreLockServiceInfo);
        return ppx;
    }

    public ThreadInfoPPx threadInfos() {
        ThreadInfoPPx ppx = new ThreadInfoPPx(this, CorpToStore.P_ThreadInfos);
        return ppx;
    }

    public TransmitBatchServiceInfoPPx transmitBatchServiceInfo() {
        TransmitBatchServiceInfoPPx ppx = new TransmitBatchServiceInfoPPx(this, CorpToStore.P_TransmitBatchServiceInfo);
        return ppx;
    }

    public String id() {
        return pp + "." + CorpToStore.P_Id;
    }

    public String created() {
        return pp + "." + CorpToStore.P_Created;
    }

    public String nodeName() {
        return pp + "." + CorpToStore.P_NodeName;
    }

    public String baseUrl() {
        return pp + "." + CorpToStore.P_BaseUrl;
    }

    public String allPaused() {
        return pp + "." + CorpToStore.P_AllPaused;
    }

    public String threadsPaused() {
        return pp + "." + CorpToStore.P_ThreadsPaused;
    }

    public String purgePaused() {
        return pp + "." + CorpToStore.P_PurgePaused;
    }

    public String console() {
        return pp + "." + CorpToStore.P_Console;
    }

    public String lastSync() {
        return pp + "." + CorpToStore.P_LastSync;
    }

    public String updateInfo() {
        return pp + ".updateInfo";
    }

    public String pauseAll() {
        return pp + ".pauseAll";
    }

    public String continueAll() {
        return pp + ".continueAll";
    }

    public String pauseThreads() {
        return pp + ".pauseThreads";
    }

    public String continueThreads() {
        return pp + ".continueThreads";
    }

    public String pausePurge() {
        return pp + ".pausePurge";
    }

    public String continuePurge() {
        return pp + ".continuePurge";
    }

    @Override
    public String toString() {
        return pp;
    }
    public String pp() {
        return pp;
    }
}
 
