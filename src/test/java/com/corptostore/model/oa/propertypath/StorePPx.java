// Generated by OABuilder
package com.corptostore.model.oa.propertypath;
 
import java.io.Serializable;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.propertypath.BatchPPx;
import com.corptostore.model.oa.propertypath.PPxInterface;
import com.corptostore.model.oa.propertypath.ReceivePPx;
import com.corptostore.model.oa.propertypath.SendPPx;
import com.corptostore.model.oa.propertypath.StoreInfoPPx;
import com.corptostore.model.oa.propertypath.StorePPx;
import com.corptostore.model.oa.propertypath.StoreTransmitBatchPPx;
import com.corptostore.model.oa.propertypath.TesterStorePPx;
import com.corptostore.model.oa.propertypath.TransmitPPx;
 
public class StorePPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public StorePPx(String name) {
        this(null, name);
    }

    public StorePPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public BatchPPx fromBatches() {
        BatchPPx ppx = new BatchPPx(this, Store.P_FromBatches);
        return ppx;
    }

    public ReceivePPx receives() {
        ReceivePPx ppx = new ReceivePPx(this, Store.P_Receives);
        return ppx;
    }

    public SendPPx sends() {
        SendPPx ppx = new SendPPx(this, Store.P_Sends);
        return ppx;
    }

    public StoreInfoPPx storeInfos() {
        StoreInfoPPx ppx = new StoreInfoPPx(this, Store.P_StoreInfos);
        return ppx;
    }

    public StoreTransmitBatchPPx storeTransmitBatches() {
        StoreTransmitBatchPPx ppx = new StoreTransmitBatchPPx(this, Store.P_StoreTransmitBatches);
        return ppx;
    }

    public TesterStorePPx testerStores() {
        TesterStorePPx ppx = new TesterStorePPx(this, Store.P_TesterStores);
        return ppx;
    }

    public BatchPPx toBatches() {
        BatchPPx ppx = new BatchPPx(this, Store.P_ToBatches);
        return ppx;
    }

    public TransmitPPx transmits() {
        TransmitPPx ppx = new TransmitPPx(this, Store.P_Transmits);
        return ppx;
    }

    public String storeNumber() {
        return pp + "." + Store.P_StoreNumber;
    }

    public String corpFromStoreLock() {
        return pp + "." + Store.P_CorpFromStoreLock;
    }

    public String corpToStoreLock() {
        return pp + "." + Store.P_CorpToStoreLock;
    }

    public String lastTransmitId() {
        return pp + "." + Store.P_LastTransmitId;
    }

    public String lastProcessedIfsSequenceNumber() {
        return pp + "." + Store.P_LastProcessedIfsSequenceNumber;
    }

    public String storeOnline() {
        return pp + "." + Store.P_StoreOnline;
    }

    public String active() {
        return pp + "." + Store.P_Active;
    }

    public String registered() {
        return pp + "." + Store.P_Registered;
    }

    public StorePPx testFilterFilter() {
        StorePPx ppx = new StorePPx(this, ":testFilter(?)");
        return ppx;
    }

    @Override
    public String toString() {
        return pp;
    }
    public String pp() {
        return pp;
    }
}
 
