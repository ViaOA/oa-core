// Generated by OABuilder
package com.corptostore.model.oa.propertypath;
 
import java.io.Serializable;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.propertypath.EnvironmentPPx;
import com.corptostore.model.oa.propertypath.PPxInterface;
import com.corptostore.model.oa.propertypath.TesterPPx;
import com.corptostore.model.oa.propertypath.TesterResultPPx;
import com.corptostore.model.oa.propertypath.TesterStepPPx;
import com.corptostore.model.oa.propertypath.TesterStorePPx;
import com.corptostore.model.oa.propertypath.TransmitBatchPPx;
 
public class TesterPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public TesterPPx(String name) {
        this(null, name);
    }

    public TesterPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public TesterStepPPx calcNextTesterStep() {
        TesterStepPPx ppx = new TesterStepPPx(this, Tester.P_CalcNextTesterStep);
        return ppx;
    }

    public EnvironmentPPx environment() {
        EnvironmentPPx ppx = new EnvironmentPPx(this, Tester.P_Environment);
        return ppx;
    }

    public TesterResultPPx testerResults() {
        TesterResultPPx ppx = new TesterResultPPx(this, Tester.P_TesterResults);
        return ppx;
    }

    public TesterStepPPx testerSteps() {
        TesterStepPPx ppx = new TesterStepPPx(this, Tester.P_TesterSteps);
        return ppx;
    }

    public TesterStorePPx testerStores() {
        TesterStorePPx ppx = new TesterStorePPx(this, Tester.P_TesterStores);
        return ppx;
    }

    public TransmitBatchPPx transmitBatch() {
        TransmitBatchPPx ppx = new TransmitBatchPPx(this, Tester.P_TransmitBatch);
        return ppx;
    }

    public String id() {
        return pp + "." + Tester.P_Id;
    }

    public String created() {
        return pp + "." + Tester.P_Created;
    }

    public String numberOfStores() {
        return pp + "." + Tester.P_NumberOfStores;
    }

    public String allStoreMessages() {
        return pp + "." + Tester.P_AllStoreMessages;
    }

    public String averageMessagesPerStore() {
        return pp + "." + Tester.P_AverageMessagesPerStore;
    }

    public String transmitBatchDate() {
        return pp + "." + Tester.P_TransmitBatchDate;
    }

    public String wasEnvironmentPaused() {
        return pp + "." + Tester.P_WasEnvironmentPaused;
    }

    public String results() {
        return pp + "." + Tester.P_Results;
    }

    public String verifyReport() {
        return pp + "." + Tester.P_VerifyReport;
    }

    public String console() {
        return pp + "." + Tester.P_Console;
    }

    public String isTestDone() {
        return pp + "." + Tester.P_IsTestDone;
    }

    public String nextTesterStepMessage() {
        return pp + "." + Tester.P_NextTesterStepMessage;
    }

    public String refreshEnabled() {
        return pp + "." + Tester.P_RefreshEnabled;
    }

    public String next() {
        return pp + ".next";
    }

    public String cancel() {
        return pp + ".cancel";
    }

    public String refreshResults() {
        return pp + ".refreshResults";
    }

    public TesterPPx openFilter() {
        TesterPPx ppx = new TesterPPx(this, ":open()");
        return ppx;
    }

    @Override
    public String toString() {
        return pp;
    }
    public String pp() {
        return pp;
    }
}
 
