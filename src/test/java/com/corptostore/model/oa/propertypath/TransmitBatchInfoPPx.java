// Generated by OABuilder
package com.corptostore.model.oa.propertypath;
 
import java.io.Serializable;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.TransmitBatchInfo;
import com.corptostore.model.oa.propertypath.PPxInterface;
import com.corptostore.model.oa.propertypath.StatusInfoPPx;
import com.corptostore.model.oa.propertypath.TransmitBatchServiceInfoPPx;
 
public class TransmitBatchInfoPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public TransmitBatchInfoPPx(String name) {
        this(null, name);
    }

    public TransmitBatchInfoPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public StatusInfoPPx statusInfo() {
        StatusInfoPPx ppx = new StatusInfoPPx(this, TransmitBatchInfo.P_StatusInfo);
        return ppx;
    }

    public TransmitBatchServiceInfoPPx transmitBatchServiceInfo() {
        TransmitBatchServiceInfoPPx ppx = new TransmitBatchServiceInfoPPx(this, TransmitBatchInfo.P_TransmitBatchServiceInfo);
        return ppx;
    }

    public String id() {
        return pp + "." + TransmitBatchInfo.P_Id;
    }

    public String created() {
        return pp + "." + TransmitBatchInfo.P_Created;
    }

    public String transmitBatchDate() {
        return pp + "." + TransmitBatchInfo.P_TransmitBatchDate;
    }

    public String paused() {
        return pp + "." + TransmitBatchInfo.P_Paused;
    }

    public String loadDataStart() {
        return pp + "." + TransmitBatchInfo.P_LoadDataStart;
    }

    public String loadDataEnd() {
        return pp + "." + TransmitBatchInfo.P_LoadDataEnd;
    }

    public String pauseBatch() {
        return pp + ".pauseBatch";
    }

    public String continueBatch() {
        return pp + ".continueBatch";
    }

    @Override
    public String toString() {
        return pp;
    }
    public String pp() {
        return pp;
    }
}
 
