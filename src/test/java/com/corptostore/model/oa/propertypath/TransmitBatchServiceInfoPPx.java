// Generated by OABuilder
package com.corptostore.model.oa.propertypath;
 
import java.io.Serializable;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.TransmitBatchServiceInfo;
import com.corptostore.model.oa.propertypath.CorpToStorePPx;
import com.corptostore.model.oa.propertypath.PPxInterface;
import com.corptostore.model.oa.propertypath.StatusInfoPPx;
import com.corptostore.model.oa.propertypath.TransmitBatchInfoPPx;
 
public class TransmitBatchServiceInfoPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public TransmitBatchServiceInfoPPx(String name) {
        this(null, name);
    }

    public TransmitBatchServiceInfoPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public CorpToStorePPx corpToStore() {
        CorpToStorePPx ppx = new CorpToStorePPx(this, TransmitBatchServiceInfo.P_CorpToStore);
        return ppx;
    }

    public StatusInfoPPx statusInfo() {
        StatusInfoPPx ppx = new StatusInfoPPx(this, TransmitBatchServiceInfo.P_StatusInfo);
        return ppx;
    }

    public TransmitBatchInfoPPx transmitBatchInfos() {
        TransmitBatchInfoPPx ppx = new TransmitBatchInfoPPx(this, TransmitBatchServiceInfo.P_TransmitBatchInfos);
        return ppx;
    }

    public String id() {
        return pp + "." + TransmitBatchServiceInfo.P_Id;
    }

    public String created() {
        return pp + "." + TransmitBatchServiceInfo.P_Created;
    }

    public String paused() {
        return pp + "." + TransmitBatchServiceInfo.P_Paused;
    }

    public String hasLock() {
        return pp + "." + TransmitBatchServiceInfo.P_HasLock;
    }

    public String lockExpire() {
        return pp + "." + TransmitBatchServiceInfo.P_LockExpire;
    }

    public String pauseService() {
        return pp + ".pauseService";
    }

    public String continueService() {
        return pp + ".continueService";
    }

    @Override
    public String toString() {
        return pp;
    }
    public String pp() {
        return pp;
    }
}
 
