// Generated by OABuilder
package com.corptostore.model.oa.search;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.oa.propertypath.BatchPP;
import com.corptostore.model.oa.search.BatchSearch;
import com.corptostore.model.oa.search.StoreBatchSearch;
import com.corptostore.model.oa.search.StoreSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class BatchSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(BatchSearch.class.getName());

    public static final String P_BatchId = "BatchId";
    public static final String P_BatchId2 = "BatchId2";
    public static final String P_Available = "Available";
    public static final String P_ReadyToUse = "ReadyToUse";
    public static final String P_Created = "Created";
    public static final String P_SessionStartDate = "SessionStartDate";
    public static final String P_SessionSequenceNumber = "SessionSequenceNumber";
    public static final String P_SessionSequenceNumber2 = "SessionSequenceNumber2";
    public static final String P_PreviousStartDate = "PreviousStartDate";
    public static final String P_PreviousSequenceNumber = "PreviousSequenceNumber";
    public static final String P_PreviousSequenceNumber2 = "PreviousSequenceNumber2";
    public static final String P_FromStore = "FromStore";
    public static final String P_UseFromStoreSearch = "UseFromStoreSearch";
    public static final String P_ToStore = "ToStore";
    public static final String P_UseToStoreSearch = "UseToStoreSearch";
    public static final String P_StoreBatch = "StoreBatch";
    public static final String P_UseStoreBatchSearch = "UseStoreBatchSearch";
    public static final String P_MaxResults = "MaxResults";

    protected long batchId;
    protected long batchId2;
    protected OADateTime available;
    protected OADateTime readyToUse;
    protected OADateTime created;
    protected OADateTime sessionStartDate;
    protected int sessionSequenceNumber;
    protected int sessionSequenceNumber2;
    protected OADateTime previousStartDate;
    protected int previousSequenceNumber;
    protected int previousSequenceNumber2;
    protected Store fromStore;
    protected boolean useFromStoreSearch;
    protected StoreSearch searchFromStore;
    protected Store toStore;
    protected boolean useToStoreSearch;
    protected StoreSearch searchToStore;
    protected StoreBatch storeBatch;
    protected boolean useStoreBatchSearch;
    protected StoreBatchSearch searchStoreBatch;
    protected int maxResults;

    public long getBatchId() {
        return batchId;
    }
    public void setBatchId(long newValue) {
        long old = batchId;
        fireBeforePropertyChange(P_BatchId, old, newValue);
        this.batchId = newValue;
        firePropertyChange(P_BatchId, old, this.batchId);
        if (isLoading()) return;
        if (batchId > batchId2) setBatchId2(this.batchId);
    } 
    public long getBatchId2() {
        return batchId2;
    }
    public void setBatchId2(long newValue) {
        long old = batchId2;
        fireBeforePropertyChange(P_BatchId2, old, newValue);
        this.batchId2 = newValue;
        firePropertyChange(P_BatchId2, old, this.batchId2);
        if (isLoading()) return;
        if (batchId > batchId2) setBatchId(this.batchId2);
    }
    public OADateTime getAvailable() {
        return available;
    }
    public void setAvailable(OADateTime newValue) {
        OADateTime old = available;
        fireBeforePropertyChange(P_Available, old, newValue);
        this.available = newValue;
        firePropertyChange(P_Available, old, this.available);
    }
      
    public OADateTime getReadyToUse() {
        return readyToUse;
    }
    public void setReadyToUse(OADateTime newValue) {
        OADateTime old = readyToUse;
        fireBeforePropertyChange(P_ReadyToUse, old, newValue);
        this.readyToUse = newValue;
        firePropertyChange(P_ReadyToUse, old, this.readyToUse);
    }
      
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      
    public OADateTime getSessionStartDate() {
        return sessionStartDate;
    }
    public void setSessionStartDate(OADateTime newValue) {
        OADateTime old = sessionStartDate;
        fireBeforePropertyChange(P_SessionStartDate, old, newValue);
        this.sessionStartDate = newValue;
        firePropertyChange(P_SessionStartDate, old, this.sessionStartDate);
    }
      
    public int getSessionSequenceNumber() {
        return sessionSequenceNumber;
    }
    public void setSessionSequenceNumber(int newValue) {
        int old = sessionSequenceNumber;
        fireBeforePropertyChange(P_SessionSequenceNumber, old, newValue);
        this.sessionSequenceNumber = newValue;
        firePropertyChange(P_SessionSequenceNumber, old, this.sessionSequenceNumber);
        if (isLoading()) return;
        if (sessionSequenceNumber > sessionSequenceNumber2) setSessionSequenceNumber2(this.sessionSequenceNumber);
    } 
    public int getSessionSequenceNumber2() {
        return sessionSequenceNumber2;
    }
    public void setSessionSequenceNumber2(int newValue) {
        int old = sessionSequenceNumber2;
        fireBeforePropertyChange(P_SessionSequenceNumber2, old, newValue);
        this.sessionSequenceNumber2 = newValue;
        firePropertyChange(P_SessionSequenceNumber2, old, this.sessionSequenceNumber2);
        if (isLoading()) return;
        if (sessionSequenceNumber > sessionSequenceNumber2) setSessionSequenceNumber(this.sessionSequenceNumber2);
    }
    public OADateTime getPreviousStartDate() {
        return previousStartDate;
    }
    public void setPreviousStartDate(OADateTime newValue) {
        OADateTime old = previousStartDate;
        fireBeforePropertyChange(P_PreviousStartDate, old, newValue);
        this.previousStartDate = newValue;
        firePropertyChange(P_PreviousStartDate, old, this.previousStartDate);
    }
      
    public int getPreviousSequenceNumber() {
        return previousSequenceNumber;
    }
    public void setPreviousSequenceNumber(int newValue) {
        int old = previousSequenceNumber;
        fireBeforePropertyChange(P_PreviousSequenceNumber, old, newValue);
        this.previousSequenceNumber = newValue;
        firePropertyChange(P_PreviousSequenceNumber, old, this.previousSequenceNumber);
        if (isLoading()) return;
        if (previousSequenceNumber > previousSequenceNumber2) setPreviousSequenceNumber2(this.previousSequenceNumber);
    } 
    public int getPreviousSequenceNumber2() {
        return previousSequenceNumber2;
    }
    public void setPreviousSequenceNumber2(int newValue) {
        int old = previousSequenceNumber2;
        fireBeforePropertyChange(P_PreviousSequenceNumber2, old, newValue);
        this.previousSequenceNumber2 = newValue;
        firePropertyChange(P_PreviousSequenceNumber2, old, this.previousSequenceNumber2);
        if (isLoading()) return;
        if (previousSequenceNumber > previousSequenceNumber2) setPreviousSequenceNumber(this.previousSequenceNumber2);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Store getFromStore() {
        if (fromStore == null) {
            fromStore = (Store) getObject(P_FromStore);
        }
        return fromStore;
    }
    public void setFromStore(Store newValue) {
        Store old = this.fromStore;
        this.fromStore = newValue;
        firePropertyChange(P_FromStore, old, this.fromStore);
    }
    public boolean getUseFromStoreSearch() {
        return useFromStoreSearch;
    }
    public void setUseFromStoreSearch(boolean newValue) {
        boolean old = this.useFromStoreSearch;
        this.useFromStoreSearch = newValue;
        firePropertyChange(P_UseFromStoreSearch, old, this.useFromStoreSearch);
    }
    public StoreSearch getFromStoreSearch() {
        return this.searchFromStore;
    }
    public void setFromStoreSearch(StoreSearch newValue) {
        this.searchFromStore = newValue;
    }

    @OAOne
    public Store getToStore() {
        if (toStore == null) {
            toStore = (Store) getObject(P_ToStore);
        }
        return toStore;
    }
    public void setToStore(Store newValue) {
        Store old = this.toStore;
        this.toStore = newValue;
        firePropertyChange(P_ToStore, old, this.toStore);
    }
    public boolean getUseToStoreSearch() {
        return useToStoreSearch;
    }
    public void setUseToStoreSearch(boolean newValue) {
        boolean old = this.useToStoreSearch;
        this.useToStoreSearch = newValue;
        firePropertyChange(P_UseToStoreSearch, old, this.useToStoreSearch);
    }
    public StoreSearch getToStoreSearch() {
        return this.searchToStore;
    }
    public void setToStoreSearch(StoreSearch newValue) {
        this.searchToStore = newValue;
    }

    @OAOne
    public StoreBatch getStoreBatch() {
        if (storeBatch == null) {
            storeBatch = (StoreBatch) getObject(P_StoreBatch);
        }
        return storeBatch;
    }
    public void setStoreBatch(StoreBatch newValue) {
        StoreBatch old = this.storeBatch;
        this.storeBatch = newValue;
        firePropertyChange(P_StoreBatch, old, this.storeBatch);
    }
    public boolean getUseStoreBatchSearch() {
        return useStoreBatchSearch;
    }
    public void setUseStoreBatchSearch(boolean newValue) {
        boolean old = this.useStoreBatchSearch;
        this.useStoreBatchSearch = newValue;
        firePropertyChange(P_UseStoreBatchSearch, old, this.useStoreBatchSearch);
    }
    public StoreBatchSearch getStoreBatchSearch() {
        return this.searchStoreBatch;
    }
    public void setStoreBatchSearch(StoreBatchSearch newValue) {
        this.searchStoreBatch = newValue;
    }

    public void reset() {
        setBatchId(0);
        setNull(P_BatchId);
        setBatchId2(0);
        setNull(P_BatchId2);
        setAvailable(null);
        setReadyToUse(null);
        setCreated(null);
        setSessionStartDate(null);
        setSessionSequenceNumber(0);
        setNull(P_SessionSequenceNumber);
        setSessionSequenceNumber2(0);
        setNull(P_SessionSequenceNumber2);
        setPreviousStartDate(null);
        setPreviousSequenceNumber(0);
        setNull(P_PreviousSequenceNumber);
        setPreviousSequenceNumber2(0);
        setNull(P_PreviousSequenceNumber2);
        setFromStore(null);
        setUseFromStoreSearch(false);
        setToStore(null);
        setUseToStoreSearch(false);
        setStoreBatch(null);
        setUseStoreBatchSearch(false);
    }

    public boolean isDataEntered() {
        if (!isNull(P_BatchId)) return true;
        if (getAvailable() != null) return true;
        if (getReadyToUse() != null) return true;
        if (getCreated() != null) return true;
        if (getSessionStartDate() != null) return true;
        if (!isNull(P_SessionSequenceNumber)) return true;
        if (getPreviousStartDate() != null) return true;
        if (!isNull(P_PreviousSequenceNumber)) return true;
        if (getFromStore() != null) return true;
        if (getUseFromStoreSearch()) return true;
        if (getToStore() != null) return true;
        if (getUseToStoreSearch()) return true;
        if (getStoreBatch() != null) return true;
        if (getUseStoreBatchSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Batch> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Batch> f = new OAQueryFilter<Batch>(Batch.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Batch> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Batch> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Batch> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!isNull(P_BatchId)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_BatchId2) && batchId != batchId2) {
                sql += Batch.P_BatchId + " >= ?";
                args = OAArray.add(Object.class, args, getBatchId());
                sql += " AND " + Batch.P_BatchId + " <= ?";
                args = OAArray.add(Object.class, args, getBatchId2());
            }
            else {
                sql += Batch.P_BatchId + " = ?";
                args = OAArray.add(Object.class, args, getBatchId());
            }
        }
        if (available != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Batch.P_Available + " = ?";
            args = OAArray.add(Object.class, args, this.available);
        }
        if (readyToUse != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Batch.P_ReadyToUse + " = ?";
            args = OAArray.add(Object.class, args, this.readyToUse);
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Batch.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (sessionStartDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Batch.P_SessionStartDate + " = ?";
            args = OAArray.add(Object.class, args, this.sessionStartDate);
        }
        if (!isNull(P_SessionSequenceNumber)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_SessionSequenceNumber2) && sessionSequenceNumber != sessionSequenceNumber2) {
                sql += Batch.P_SessionSequenceNumber + " >= ?";
                args = OAArray.add(Object.class, args, getSessionSequenceNumber());
                sql += " AND " + Batch.P_SessionSequenceNumber + " <= ?";
                args = OAArray.add(Object.class, args, getSessionSequenceNumber2());
            }
            else {
                sql += Batch.P_SessionSequenceNumber + " = ?";
                args = OAArray.add(Object.class, args, getSessionSequenceNumber());
            }
        }
        if (previousStartDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Batch.P_PreviousStartDate + " = ?";
            args = OAArray.add(Object.class, args, this.previousStartDate);
        }
        if (!isNull(P_PreviousSequenceNumber)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_PreviousSequenceNumber2) && previousSequenceNumber != previousSequenceNumber2) {
                sql += Batch.P_PreviousSequenceNumber + " >= ?";
                args = OAArray.add(Object.class, args, getPreviousSequenceNumber());
                sql += " AND " + Batch.P_PreviousSequenceNumber + " <= ?";
                args = OAArray.add(Object.class, args, getPreviousSequenceNumber2());
            }
            else {
                sql += Batch.P_PreviousSequenceNumber + " = ?";
                args = OAArray.add(Object.class, args, getPreviousSequenceNumber());
            }
        }
        if (!useFromStoreSearch && getFromStore() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += BatchPP.fromStore().pp + " = ?";
            args = OAArray.add(Object.class, args, getFromStore());
        }
        if (!useToStoreSearch && getToStore() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += BatchPP.toStore().pp + " = ?";
            args = OAArray.add(Object.class, args, getToStore());
        }
        if (!useStoreBatchSearch && getStoreBatch() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += BatchPP.storeBatch().pp + " = ?";
            args = OAArray.add(Object.class, args, getStoreBatch());
            finder = new OAFinder<StoreBatch, Batch>(getStoreBatch(), StoreBatch.P_Batch);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Batch> select = new OASelect<Batch>(Batch.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useFromStoreSearch && getFromStoreSearch() != null) {
            getFromStoreSearch().appendSelect(BatchPP.fromStore().pp, select);
        }
        if (useToStoreSearch && getToStoreSearch() != null) {
            getToStoreSearch().appendSelect(BatchPP.toStore().pp, select);
        }
        if (useStoreBatchSearch && getStoreBatchSearch() != null) {
            getStoreBatchSearch().appendSelect(BatchPP.storeBatch().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_BatchId)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_BatchId2) && batchId != batchId2) {
                sql += prefix + Batch.P_BatchId + " >= ?";
                args = OAArray.add(Object.class, args, getBatchId());
                sql += " AND " + prefix + Batch.P_BatchId + " <= ?";
                args = OAArray.add(Object.class, args, getBatchId2());
            }
            else {
                sql += prefix + Batch.P_BatchId + " = ?";
                args = OAArray.add(Object.class, args, getBatchId());
            }
        }
        if (available != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Batch.P_Available + " = ?";
            args = OAArray.add(Object.class, args, this.available);
        }
        if (readyToUse != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Batch.P_ReadyToUse + " = ?";
            args = OAArray.add(Object.class, args, this.readyToUse);
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Batch.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (sessionStartDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Batch.P_SessionStartDate + " = ?";
            args = OAArray.add(Object.class, args, this.sessionStartDate);
        }
        if (!isNull(P_SessionSequenceNumber)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_SessionSequenceNumber2) && sessionSequenceNumber != sessionSequenceNumber2) {
                sql += prefix + Batch.P_SessionSequenceNumber + " >= ?";
                args = OAArray.add(Object.class, args, getSessionSequenceNumber());
                sql += " AND " + prefix + Batch.P_SessionSequenceNumber + " <= ?";
                args = OAArray.add(Object.class, args, getSessionSequenceNumber2());
            }
            else {
                sql += prefix + Batch.P_SessionSequenceNumber + " = ?";
                args = OAArray.add(Object.class, args, getSessionSequenceNumber());
            }
        }
        if (previousStartDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Batch.P_PreviousStartDate + " = ?";
            args = OAArray.add(Object.class, args, this.previousStartDate);
        }
        if (!isNull(P_PreviousSequenceNumber)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_PreviousSequenceNumber2) && previousSequenceNumber != previousSequenceNumber2) {
                sql += prefix + Batch.P_PreviousSequenceNumber + " >= ?";
                args = OAArray.add(Object.class, args, getPreviousSequenceNumber());
                sql += " AND " + prefix + Batch.P_PreviousSequenceNumber + " <= ?";
                args = OAArray.add(Object.class, args, getPreviousSequenceNumber2());
            }
            else {
                sql += prefix + Batch.P_PreviousSequenceNumber + " = ?";
                args = OAArray.add(Object.class, args, getPreviousSequenceNumber());
            }
        }
        if (!useFromStoreSearch && getFromStore() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + BatchPP.fromStore().pp + " = ?";
            args = OAArray.add(Object.class, args, getFromStore());
        }
        if (useFromStoreSearch && getFromStoreSearch() != null) {
            getFromStoreSearch().appendSelect(prefix + BatchPP.fromStore().pp, select);
        }
        if (!useToStoreSearch && getToStore() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + BatchPP.toStore().pp + " = ?";
            args = OAArray.add(Object.class, args, getToStore());
        }
        if (useToStoreSearch && getToStoreSearch() != null) {
            getToStoreSearch().appendSelect(prefix + BatchPP.toStore().pp, select);
        }
        if (!useStoreBatchSearch && getStoreBatch() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + BatchPP.storeBatch().pp + " = ?";
            args = OAArray.add(Object.class, args, getStoreBatch());
        }
        if (useStoreBatchSearch && getStoreBatchSearch() != null) {
            getStoreBatchSearch().appendSelect(prefix + BatchPP.storeBatch().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Batch> filterDataSourceFilter;
    public OAFilter<Batch> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Batch>() {
            @Override
            public boolean isUsed(Batch batch) {
                return BatchSearch.this.isUsedForDataSourceFilter(batch);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Batch> filterCustomFilter;
    public OAFilter<Batch> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Batch>() {
            @Override
            public boolean isUsed(Batch batch) {
                boolean b = BatchSearch.this.isUsedForCustomFilter(batch);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Batch searchBatch) {
        return true;
    }
    public boolean isUsedForCustomFilter(Batch searchBatch) {
        return true;
    }
}
