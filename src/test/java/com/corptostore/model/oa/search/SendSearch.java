// Generated by OABuilder
package com.corptostore.model.oa.search;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.propertypath.SendPP;
import com.corptostore.model.oa.search.SendSearch;
import com.corptostore.model.oa.search.StoreSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class SendSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(SendSearch.class.getName());

    public static final String P_SendId = "SendId";
    public static final String P_SendId2 = "SendId2";
    public static final String P_Created = "Created";
    public static final String P_SentDate = "SentDate";
    public static final String P_MessageType = "MessageType";
    public static final String P_MessageName = "MessageName";
    public static final String P_MessageData = "MessageData";
    public static final String P_Store = "Store";
    public static final String P_UseStoreSearch = "UseStoreSearch";
    public static final String P_Transmits = "Transmits";
    public static final String P_MaxResults = "MaxResults";

    protected long sendId;
    protected long sendId2;
    protected OADateTime created;
    protected OADateTime sentDate;
    protected String messageType;
    protected String messageName;
    protected String messageData;
    protected Store store;
    protected boolean useStoreSearch;
    protected StoreSearch searchStore;
    protected Hub<Transmit> hubTransmits;
    protected int maxResults;

    public long getSendId() {
        return sendId;
    }
    public void setSendId(long newValue) {
        long old = sendId;
        fireBeforePropertyChange(P_SendId, old, newValue);
        this.sendId = newValue;
        firePropertyChange(P_SendId, old, this.sendId);
        if (isLoading()) return;
        if (sendId > sendId2) setSendId2(this.sendId);
    } 
    public long getSendId2() {
        return sendId2;
    }
    public void setSendId2(long newValue) {
        long old = sendId2;
        fireBeforePropertyChange(P_SendId2, old, newValue);
        this.sendId2 = newValue;
        firePropertyChange(P_SendId2, old, this.sendId2);
        if (isLoading()) return;
        if (sendId > sendId2) setSendId(this.sendId2);
    }
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      
    public OADateTime getSentDate() {
        return sentDate;
    }
    public void setSentDate(OADateTime newValue) {
        OADateTime old = sentDate;
        fireBeforePropertyChange(P_SentDate, old, newValue);
        this.sentDate = newValue;
        firePropertyChange(P_SentDate, old, this.sentDate);
    }
      
    public String getMessageType() {
        return messageType;
    }
    public void setMessageType(String newValue) {
        String old = messageType;
        fireBeforePropertyChange(P_MessageType, old, newValue);
        this.messageType = newValue;
        firePropertyChange(P_MessageType, old, this.messageType);
    }
      
    public String getMessageName() {
        return messageName;
    }
    public void setMessageName(String newValue) {
        String old = messageName;
        fireBeforePropertyChange(P_MessageName, old, newValue);
        this.messageName = newValue;
        firePropertyChange(P_MessageName, old, this.messageName);
    }
      
    public String getMessageData() {
        return messageData;
    }
    public void setMessageData(String newValue) {
        String old = messageData;
        fireBeforePropertyChange(P_MessageData, old, newValue);
        this.messageData = newValue;
        firePropertyChange(P_MessageData, old, this.messageData);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Store getStore() {
        if (store == null) {
            store = (Store) getObject(P_Store);
        }
        return store;
    }
    public void setStore(Store newValue) {
        Store old = this.store;
        this.store = newValue;
        firePropertyChange(P_Store, old, this.store);
    }
    public boolean getUseStoreSearch() {
        return useStoreSearch;
    }
    public void setUseStoreSearch(boolean newValue) {
        boolean old = this.useStoreSearch;
        this.useStoreSearch = newValue;
        firePropertyChange(P_UseStoreSearch, old, this.useStoreSearch);
    }
    public StoreSearch getStoreSearch() {
        return this.searchStore;
    }
    public void setStoreSearch(StoreSearch newValue) {
        this.searchStore = newValue;
    }

    @OAMany
    public Hub<Transmit> getTransmits() {
        if (hubTransmits == null) {
            hubTransmits = (Hub<Transmit>) getHub(P_Transmits);
        }
        return hubTransmits;
    }

    public void reset() {
        setSendId(0);
        setNull(P_SendId);
        setSendId2(0);
        setNull(P_SendId2);
        setCreated(null);
        setSentDate(null);
        setMessageType(null);
        setMessageName(null);
        setMessageData(null);
        setStore(null);
        setUseStoreSearch(false);
        getTransmits().clear();
    }

    public boolean isDataEntered() {
        if (!isNull(P_SendId)) return true;
        if (getCreated() != null) return true;
        if (getSentDate() != null) return true;
        if (getMessageType() != null) return true;
        if (getMessageName() != null) return true;
        if (getMessageData() != null) return true;
        if (getStore() != null) return true;
        if (getUseStoreSearch()) return true;
        if (getTransmits().getSize() > 0) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Send> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Send> f = new OAQueryFilter<Send>(Send.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Send> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Send> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Send> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (!isNull(P_SendId)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_SendId2) && sendId != sendId2) {
                sql += Send.P_SendId + " >= ?";
                args = OAArray.add(Object.class, args, getSendId());
                sql += " AND " + Send.P_SendId + " <= ?";
                args = OAArray.add(Object.class, args, getSendId2());
            }
            else {
                sql += Send.P_SendId + " = ?";
                args = OAArray.add(Object.class, args, getSendId());
            }
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Send.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (sentDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Send.P_SentDate + " = ?";
            args = OAArray.add(Object.class, args, this.sentDate);
        }
        if (OAString.isNotEmpty(this.messageType)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(messageType);
            if (value.indexOf("%") >= 0) {
                sql += Send.P_MessageType + " LIKE ?";
            }
            else {
                sql += Send.P_MessageType + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.messageName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(messageName);
            if (value.indexOf("%") >= 0) {
                sql += Send.P_MessageName + " LIKE ?";
            }
            else {
                sql += Send.P_MessageName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.messageData)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(messageData);
            if (value.indexOf("%") >= 0) {
                sql += Send.P_MessageData + " LIKE ?";
            }
            else {
                sql += Send.P_MessageData + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useStoreSearch && getStore() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += SendPP.store().pp + " = ?";
            args = OAArray.add(Object.class, args, getStore());
        }
        if (getTransmits().getSize() > 0) {
            if (sql.length() > 0) sql += " AND (";
            else sql += "(";
            for (int i=0; ;i++) {
                Object obj = getTransmits().getAt(i);
                if (obj == null) break;
                if (i > 0) sql += " || ";
                sql += OAString.cpp(Send.P_BeginTransmit) + " = ?";
                args = OAArray.add(Object.class, args, obj);
            }
            sql += ")";
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Send> select = new OASelect<Send>(Send.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useStoreSearch && getStoreSearch() != null) {
            getStoreSearch().appendSelect(SendPP.store().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_SendId)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_SendId2) && sendId != sendId2) {
                sql += prefix + Send.P_SendId + " >= ?";
                args = OAArray.add(Object.class, args, getSendId());
                sql += " AND " + prefix + Send.P_SendId + " <= ?";
                args = OAArray.add(Object.class, args, getSendId2());
            }
            else {
                sql += prefix + Send.P_SendId + " = ?";
                args = OAArray.add(Object.class, args, getSendId());
            }
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Send.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (sentDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Send.P_SentDate + " = ?";
            args = OAArray.add(Object.class, args, this.sentDate);
        }
        if (OAString.isNotEmpty(this.messageType)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(messageType);
            if (value.indexOf("%") >= 0) {
                sql += prefix + Send.P_MessageType + " LIKE ?";
            }
            else {
                sql += prefix + Send.P_MessageType + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.messageName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(messageName);
            if (value.indexOf("%") >= 0) {
                sql += prefix + Send.P_MessageName + " LIKE ?";
            }
            else {
                sql += prefix + Send.P_MessageName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.messageData)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(messageData);
            if (value.indexOf("%") >= 0) {
                sql += prefix + Send.P_MessageData + " LIKE ?";
            }
            else {
                sql += prefix + Send.P_MessageData + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useStoreSearch && getStore() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + SendPP.store().pp + " = ?";
            args = OAArray.add(Object.class, args, getStore());
        }
        if (useStoreSearch && getStoreSearch() != null) {
            getStoreSearch().appendSelect(prefix + SendPP.store().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Send> filterDataSourceFilter;
    public OAFilter<Send> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Send>() {
            @Override
            public boolean isUsed(Send send) {
                return SendSearch.this.isUsedForDataSourceFilter(send);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Send> filterCustomFilter;
    public OAFilter<Send> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Send>() {
            @Override
            public boolean isUsed(Send send) {
                boolean b = SendSearch.this.isUsedForCustomFilter(send);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Send searchSend) {
        return true;
    }
    public boolean isUsedForCustomFilter(Send searchSend) {
        return true;
    }
}
