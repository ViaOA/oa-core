// Generated by OABuilder
package com.corptostore.model.oa.search;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.propertypath.StoreBatchPP;
import com.corptostore.model.oa.search.BatchSearch;
import com.corptostore.model.oa.search.StoreBatchSearch;
import com.corptostore.model.oa.search.StoreTransmitBatchSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class StoreBatchSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(StoreBatchSearch.class.getName());

    public static final String P_Batch = "Batch";
    public static final String P_UseBatchSearch = "UseBatchSearch";
    public static final String P_StoreTransmitBatch = "StoreTransmitBatch";
    public static final String P_UseStoreTransmitBatchSearch = "UseStoreTransmitBatchSearch";
    public static final String P_MaxResults = "MaxResults";

    protected Batch batch;
    protected boolean useBatchSearch;
    protected BatchSearch searchBatch;
    protected StoreTransmitBatch storeTransmitBatch;
    protected boolean useStoreTransmitBatchSearch;
    protected StoreTransmitBatchSearch searchStoreTransmitBatch;
    protected int maxResults;


    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Batch getBatch() {
        if (batch == null) {
            batch = (Batch) getObject(P_Batch);
        }
        return batch;
    }
    public void setBatch(Batch newValue) {
        Batch old = this.batch;
        this.batch = newValue;
        firePropertyChange(P_Batch, old, this.batch);
    }
    public boolean getUseBatchSearch() {
        return useBatchSearch;
    }
    public void setUseBatchSearch(boolean newValue) {
        boolean old = this.useBatchSearch;
        this.useBatchSearch = newValue;
        firePropertyChange(P_UseBatchSearch, old, this.useBatchSearch);
    }
    public BatchSearch getBatchSearch() {
        return this.searchBatch;
    }
    public void setBatchSearch(BatchSearch newValue) {
        this.searchBatch = newValue;
    }

    @OAOne
    public StoreTransmitBatch getStoreTransmitBatch() {
        if (storeTransmitBatch == null) {
            storeTransmitBatch = (StoreTransmitBatch) getObject(P_StoreTransmitBatch);
        }
        return storeTransmitBatch;
    }
    public void setStoreTransmitBatch(StoreTransmitBatch newValue) {
        StoreTransmitBatch old = this.storeTransmitBatch;
        this.storeTransmitBatch = newValue;
        firePropertyChange(P_StoreTransmitBatch, old, this.storeTransmitBatch);
    }
    public boolean getUseStoreTransmitBatchSearch() {
        return useStoreTransmitBatchSearch;
    }
    public void setUseStoreTransmitBatchSearch(boolean newValue) {
        boolean old = this.useStoreTransmitBatchSearch;
        this.useStoreTransmitBatchSearch = newValue;
        firePropertyChange(P_UseStoreTransmitBatchSearch, old, this.useStoreTransmitBatchSearch);
    }
    public StoreTransmitBatchSearch getStoreTransmitBatchSearch() {
        return this.searchStoreTransmitBatch;
    }
    public void setStoreTransmitBatchSearch(StoreTransmitBatchSearch newValue) {
        this.searchStoreTransmitBatch = newValue;
    }

    public void reset() {
        setBatch(null);
        setUseBatchSearch(false);
        setStoreTransmitBatch(null);
        setUseStoreTransmitBatchSearch(false);
    }

    public boolean isDataEntered() {
        if (getBatch() != null) return true;
        if (getUseBatchSearch()) return true;
        if (getStoreTransmitBatch() != null) return true;
        if (getUseStoreTransmitBatchSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<StoreBatch> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<StoreBatch> f = new OAQueryFilter<StoreBatch>(StoreBatch.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<StoreBatch> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<StoreBatch> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<StoreBatch> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!useBatchSearch && getBatch() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreBatchPP.batch().pp + " = ?";
            args = OAArray.add(Object.class, args, getBatch());
            finder = new OAFinder<Batch, StoreBatch>(getBatch(), Batch.P_StoreBatch);
        }
        if (!useStoreTransmitBatchSearch && getStoreTransmitBatch() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreBatchPP.storeTransmitBatch().pp + " = ?";
            args = OAArray.add(Object.class, args, getStoreTransmitBatch());
            finder = new OAFinder<StoreTransmitBatch, StoreBatch>(getStoreTransmitBatch(), StoreTransmitBatch.P_StoreBatches);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<StoreBatch> select = new OASelect<StoreBatch>(StoreBatch.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useBatchSearch && getBatchSearch() != null) {
            getBatchSearch().appendSelect(StoreBatchPP.batch().pp, select);
        }
        if (useStoreTransmitBatchSearch && getStoreTransmitBatchSearch() != null) {
            getStoreTransmitBatchSearch().appendSelect(StoreBatchPP.storeTransmitBatch().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!useBatchSearch && getBatch() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreBatchPP.batch().pp + " = ?";
            args = OAArray.add(Object.class, args, getBatch());
        }
        if (useBatchSearch && getBatchSearch() != null) {
            getBatchSearch().appendSelect(prefix + StoreBatchPP.batch().pp, select);
        }
        if (!useStoreTransmitBatchSearch && getStoreTransmitBatch() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreBatchPP.storeTransmitBatch().pp + " = ?";
            args = OAArray.add(Object.class, args, getStoreTransmitBatch());
        }
        if (useStoreTransmitBatchSearch && getStoreTransmitBatchSearch() != null) {
            getStoreTransmitBatchSearch().appendSelect(prefix + StoreBatchPP.storeTransmitBatch().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<StoreBatch> filterDataSourceFilter;
    public OAFilter<StoreBatch> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<StoreBatch>() {
            @Override
            public boolean isUsed(StoreBatch storeBatch) {
                return StoreBatchSearch.this.isUsedForDataSourceFilter(storeBatch);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<StoreBatch> filterCustomFilter;
    public OAFilter<StoreBatch> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<StoreBatch>() {
            @Override
            public boolean isUsed(StoreBatch storeBatch) {
                boolean b = StoreBatchSearch.this.isUsedForCustomFilter(storeBatch);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(StoreBatch searchStoreBatch) {
        return true;
    }
    public boolean isUsedForCustomFilter(StoreBatch searchStoreBatch) {
        return true;
    }
}
