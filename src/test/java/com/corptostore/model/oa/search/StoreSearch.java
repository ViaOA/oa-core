// Generated by OABuilder
package com.corptostore.model.oa.search;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.search.StoreSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class StoreSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(StoreSearch.class.getName());

    public static final String P_StoreNumber = "StoreNumber";
    public static final String P_StoreNumber2 = "StoreNumber2";
    public static final String P_StoreOnline = "StoreOnline";
    public static final String P_StoreOnlineUseNull = "StoreOnlineUseNull";
    public static final String P_StoreOnlineUseNotNull = "StoreOnlineUseNotNull";
    public static final String P_Active = "Active";
    public static final String P_ActiveUseNull = "ActiveUseNull";
    public static final String P_ActiveUseNotNull = "ActiveUseNotNull";
    public static final String P_Registered = "Registered";
    public static final String P_MaxResults = "MaxResults";

    protected int storeNumber;
    protected int storeNumber2;
    protected boolean storeOnline;
    protected boolean storeOnlineUseNull;
    protected boolean storeOnlineUseNotNull;
    protected boolean active;
    protected boolean activeUseNull;
    protected boolean activeUseNotNull;
    protected OADateTime registered;
    protected int maxResults;

    public int getStoreNumber() {
        return storeNumber;
    }
    public void setStoreNumber(int newValue) {
        int old = storeNumber;
        fireBeforePropertyChange(P_StoreNumber, old, newValue);
        this.storeNumber = newValue;
        firePropertyChange(P_StoreNumber, old, this.storeNumber);
        if (isLoading()) return;
        if (storeNumber > storeNumber2) setStoreNumber2(this.storeNumber);
    } 
    public int getStoreNumber2() {
        return storeNumber2;
    }
    public void setStoreNumber2(int newValue) {
        int old = storeNumber2;
        fireBeforePropertyChange(P_StoreNumber2, old, newValue);
        this.storeNumber2 = newValue;
        firePropertyChange(P_StoreNumber2, old, this.storeNumber2);
        if (isLoading()) return;
        if (storeNumber > storeNumber2) setStoreNumber(this.storeNumber2);
    }
    public boolean getStoreOnline() {
        return storeOnline;
    }
    public boolean isStoreOnline() {
        return getStoreOnline();
    }
    public void setStoreOnline(boolean newValue) {
        boolean old = storeOnline;
        fireBeforePropertyChange(P_StoreOnline, old, newValue);
        this.storeOnline = newValue;
        firePropertyChange(P_StoreOnline, old, this.storeOnline);
    }
      
    public boolean getStoreOnlineUseNull() {
        return storeOnlineUseNull;
    }
    public void setStoreOnlineUseNull(boolean newValue) {
        boolean old = this.storeOnlineUseNull;
        this.storeOnlineUseNull = newValue;
        firePropertyChange(P_StoreOnlineUseNull, old, this.storeOnlineUseNull);
    }
    public boolean getStoreOnlineUseNotNull() {
        return storeOnlineUseNotNull;
    }
    public void setStoreOnlineUseNotNull(boolean newValue) {
        boolean old = this.storeOnlineUseNotNull;
        this.storeOnlineUseNotNull = newValue;
        firePropertyChange(P_StoreOnlineUseNotNull, old, this.storeOnlineUseNotNull);
    }
    public boolean getActive() {
        return active;
    }
    public boolean isActive() {
        return getActive();
    }
    public void setActive(boolean newValue) {
        boolean old = active;
        fireBeforePropertyChange(P_Active, old, newValue);
        this.active = newValue;
        firePropertyChange(P_Active, old, this.active);
    }
      
    public boolean getActiveUseNull() {
        return activeUseNull;
    }
    public void setActiveUseNull(boolean newValue) {
        boolean old = this.activeUseNull;
        this.activeUseNull = newValue;
        firePropertyChange(P_ActiveUseNull, old, this.activeUseNull);
    }
    public boolean getActiveUseNotNull() {
        return activeUseNotNull;
    }
    public void setActiveUseNotNull(boolean newValue) {
        boolean old = this.activeUseNotNull;
        this.activeUseNotNull = newValue;
        firePropertyChange(P_ActiveUseNotNull, old, this.activeUseNotNull);
    }
    public OADateTime getRegistered() {
        return registered;
    }
    public void setRegistered(OADateTime newValue) {
        OADateTime old = registered;
        fireBeforePropertyChange(P_Registered, old, newValue);
        this.registered = newValue;
        firePropertyChange(P_Registered, old, this.registered);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
        setStoreNumber(0);
        setNull(P_StoreNumber);
        setStoreNumber2(0);
        setNull(P_StoreNumber2);
        setStoreOnline(false);
        setNull(P_StoreOnline);
        setStoreOnlineUseNull(false);
        setStoreOnlineUseNotNull(false);
        setActive(false);
        setNull(P_Active);
        setActiveUseNull(false);
        setActiveUseNotNull(false);
        setRegistered(null);
    }

    public boolean isDataEntered() {
        if (!isNull(P_StoreNumber)) return true;
        if (!isNull(P_StoreOnline)) return true;
        if (getStoreOnlineUseNull()) return true;
        if (getStoreOnlineUseNotNull()) return true;
        if (!isNull(P_Active)) return true;
        if (getActiveUseNull()) return true;
        if (getActiveUseNotNull()) return true;
        if (getRegistered() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Store> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Store> f = new OAQueryFilter<Store>(Store.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Store> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Store> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Store> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (!isNull(P_StoreNumber)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_StoreNumber2) && storeNumber != storeNumber2) {
                sql += Store.P_StoreNumber + " >= ?";
                args = OAArray.add(Object.class, args, getStoreNumber());
                sql += " AND " + Store.P_StoreNumber + " <= ?";
                args = OAArray.add(Object.class, args, getStoreNumber2());
            }
            else {
                sql += Store.P_StoreNumber + " = ?";
                args = OAArray.add(Object.class, args, getStoreNumber());
            }
        }
        if (storeOnlineUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Store.P_StoreOnline + " = null";
        }
        else if (storeOnlineUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Store.P_StoreOnline + " != null";
        }
        if (!isNull(P_StoreOnline)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Store.P_StoreOnline + " = ?";
            args = OAArray.add(Object.class, args, this.storeOnline);
        }
        if (activeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Store.P_Active + " = null";
        }
        else if (activeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Store.P_Active + " != null";
        }
        if (!isNull(P_Active)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Store.P_Active + " = ?";
            args = OAArray.add(Object.class, args, this.active);
        }
        if (registered != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Store.P_Registered + " = ?";
            args = OAArray.add(Object.class, args, this.registered);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Store> select = new OASelect<Store>(Store.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_StoreNumber)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_StoreNumber2) && storeNumber != storeNumber2) {
                sql += prefix + Store.P_StoreNumber + " >= ?";
                args = OAArray.add(Object.class, args, getStoreNumber());
                sql += " AND " + prefix + Store.P_StoreNumber + " <= ?";
                args = OAArray.add(Object.class, args, getStoreNumber2());
            }
            else {
                sql += prefix + Store.P_StoreNumber + " = ?";
                args = OAArray.add(Object.class, args, getStoreNumber());
            }
        }
        if (storeOnlineUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Store.P_StoreOnline + " = null";
        }
        else if (storeOnlineUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Store.P_StoreOnline + " != null";
        }
        if (!isNull(P_StoreOnline)) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Store.P_StoreOnline + " = ?";
            args = OAArray.add(Object.class, args, this.storeOnline);
        }
        if (activeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Store.P_Active + " = null";
        }
        else if (activeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Store.P_Active + " != null";
        }
        if (!isNull(P_Active)) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Store.P_Active + " = ?";
            args = OAArray.add(Object.class, args, this.active);
        }
        if (registered != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Store.P_Registered + " = ?";
            args = OAArray.add(Object.class, args, this.registered);
        }
        select.add(sql, args);
    }

    private OAFilter<Store> filterDataSourceFilter;
    public OAFilter<Store> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Store>() {
            @Override
            public boolean isUsed(Store store) {
                return StoreSearch.this.isUsedForDataSourceFilter(store);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Store> filterCustomFilter;
    public OAFilter<Store> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Store>() {
            @Override
            public boolean isUsed(Store store) {
                boolean b = StoreSearch.this.isUsedForCustomFilter(store);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Store searchStore) {
        return true;
    }
    public boolean isUsedForCustomFilter(Store searchStore) {
        return true;
    }
}
