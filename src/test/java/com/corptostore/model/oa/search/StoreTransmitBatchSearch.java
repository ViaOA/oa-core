// Generated by OABuilder
package com.corptostore.model.oa.search;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.TransmitBatch;
import com.corptostore.model.oa.propertypath.StoreTransmitBatchPP;
import com.corptostore.model.oa.search.StoreSearch;
import com.corptostore.model.oa.search.StoreTransmitBatchSearch;
import com.corptostore.model.oa.search.TransmitBatchSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

@OAClass(useDataSource=false, localOnly=true)
public class StoreTransmitBatchSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(StoreTransmitBatchSearch.class.getName());

    public static final String P_GreenMessageAdded = "GreenMessageAdded";
    public static final String P_BatchProcessed = "BatchProcessed";
    public static final String P_StoreTransmitProcessed = "StoreTransmitProcessed";
    public static final String P_StoreTransmitProcessedUseNull = "StoreTransmitProcessedUseNull";
    public static final String P_StoreTransmitProcessedUseNotNull = "StoreTransmitProcessedUseNotNull";
    public static final String P_StoreTransmitPostProcessProcessed = "StoreTransmitPostProcessProcessed";
    public static final String P_StoreTransmitPostProcessProcessedUseNull = "StoreTransmitPostProcessProcessedUseNull";
    public static final String P_StoreTransmitPostProcessProcessedUseNotNull = "StoreTransmitPostProcessProcessedUseNotNull";
    public static final String P_Store = "Store";
    public static final String P_UseStoreSearch = "UseStoreSearch";
    public static final String P_TransmitBatch = "TransmitBatch";
    public static final String P_UseTransmitBatchSearch = "UseTransmitBatchSearch";
    public static final String P_MaxResults = "MaxResults";

    protected OADateTime greenMessageAdded;
    protected OADateTime batchProcessed;
    protected boolean storeTransmitProcessed;
    protected boolean storeTransmitProcessedUseNull;
    protected boolean storeTransmitProcessedUseNotNull;
    protected boolean storeTransmitPostProcessProcessed;
    protected boolean storeTransmitPostProcessProcessedUseNull;
    protected boolean storeTransmitPostProcessProcessedUseNotNull;
    protected Store store;
    protected boolean useStoreSearch;
    protected StoreSearch searchStore;
    protected TransmitBatch transmitBatch;
    protected boolean useTransmitBatchSearch;
    protected TransmitBatchSearch searchTransmitBatch;
    protected int maxResults;

    public OADateTime getGreenMessageAdded() {
        return greenMessageAdded;
    }
    public void setGreenMessageAdded(OADateTime newValue) {
        OADateTime old = greenMessageAdded;
        fireBeforePropertyChange(P_GreenMessageAdded, old, newValue);
        this.greenMessageAdded = newValue;
        firePropertyChange(P_GreenMessageAdded, old, this.greenMessageAdded);
    }
      
    public OADateTime getBatchProcessed() {
        return batchProcessed;
    }
    public void setBatchProcessed(OADateTime newValue) {
        OADateTime old = batchProcessed;
        fireBeforePropertyChange(P_BatchProcessed, old, newValue);
        this.batchProcessed = newValue;
        firePropertyChange(P_BatchProcessed, old, this.batchProcessed);
    }
      
    public boolean getStoreTransmitProcessed() {
        return storeTransmitProcessed;
    }
    public boolean isStoreTransmitProcessed() {
        return getStoreTransmitProcessed();
    }
    public void setStoreTransmitProcessed(boolean newValue) {
        boolean old = storeTransmitProcessed;
        fireBeforePropertyChange(P_StoreTransmitProcessed, old, newValue);
        this.storeTransmitProcessed = newValue;
        firePropertyChange(P_StoreTransmitProcessed, old, this.storeTransmitProcessed);
    }
      
    public boolean getStoreTransmitProcessedUseNull() {
        return storeTransmitProcessedUseNull;
    }
    public void setStoreTransmitProcessedUseNull(boolean newValue) {
        boolean old = this.storeTransmitProcessedUseNull;
        this.storeTransmitProcessedUseNull = newValue;
        firePropertyChange(P_StoreTransmitProcessedUseNull, old, this.storeTransmitProcessedUseNull);
    }
    public boolean getStoreTransmitProcessedUseNotNull() {
        return storeTransmitProcessedUseNotNull;
    }
    public void setStoreTransmitProcessedUseNotNull(boolean newValue) {
        boolean old = this.storeTransmitProcessedUseNotNull;
        this.storeTransmitProcessedUseNotNull = newValue;
        firePropertyChange(P_StoreTransmitProcessedUseNotNull, old, this.storeTransmitProcessedUseNotNull);
    }
    public boolean getStoreTransmitPostProcessProcessed() {
        return storeTransmitPostProcessProcessed;
    }
    public boolean isStoreTransmitPostProcessProcessed() {
        return getStoreTransmitPostProcessProcessed();
    }
    public void setStoreTransmitPostProcessProcessed(boolean newValue) {
        boolean old = storeTransmitPostProcessProcessed;
        fireBeforePropertyChange(P_StoreTransmitPostProcessProcessed, old, newValue);
        this.storeTransmitPostProcessProcessed = newValue;
        firePropertyChange(P_StoreTransmitPostProcessProcessed, old, this.storeTransmitPostProcessProcessed);
    }
      
    public boolean getStoreTransmitPostProcessProcessedUseNull() {
        return storeTransmitPostProcessProcessedUseNull;
    }
    public void setStoreTransmitPostProcessProcessedUseNull(boolean newValue) {
        boolean old = this.storeTransmitPostProcessProcessedUseNull;
        this.storeTransmitPostProcessProcessedUseNull = newValue;
        firePropertyChange(P_StoreTransmitPostProcessProcessedUseNull, old, this.storeTransmitPostProcessProcessedUseNull);
    }
    public boolean getStoreTransmitPostProcessProcessedUseNotNull() {
        return storeTransmitPostProcessProcessedUseNotNull;
    }
    public void setStoreTransmitPostProcessProcessedUseNotNull(boolean newValue) {
        boolean old = this.storeTransmitPostProcessProcessedUseNotNull;
        this.storeTransmitPostProcessProcessedUseNotNull = newValue;
        firePropertyChange(P_StoreTransmitPostProcessProcessedUseNotNull, old, this.storeTransmitPostProcessProcessedUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Store getStore() {
        if (store == null) {
            store = (Store) getObject(P_Store);
        }
        return store;
    }
    public void setStore(Store newValue) {
        Store old = this.store;
        this.store = newValue;
        firePropertyChange(P_Store, old, this.store);
    }
    public boolean getUseStoreSearch() {
        return useStoreSearch;
    }
    public void setUseStoreSearch(boolean newValue) {
        boolean old = this.useStoreSearch;
        this.useStoreSearch = newValue;
        firePropertyChange(P_UseStoreSearch, old, this.useStoreSearch);
    }
    public StoreSearch getStoreSearch() {
        return this.searchStore;
    }
    public void setStoreSearch(StoreSearch newValue) {
        this.searchStore = newValue;
    }

    @OAOne
    public TransmitBatch getTransmitBatch() {
        if (transmitBatch == null) {
            transmitBatch = (TransmitBatch) getObject(P_TransmitBatch);
        }
        return transmitBatch;
    }
    public void setTransmitBatch(TransmitBatch newValue) {
        TransmitBatch old = this.transmitBatch;
        this.transmitBatch = newValue;
        firePropertyChange(P_TransmitBatch, old, this.transmitBatch);
    }
    public boolean getUseTransmitBatchSearch() {
        return useTransmitBatchSearch;
    }
    public void setUseTransmitBatchSearch(boolean newValue) {
        boolean old = this.useTransmitBatchSearch;
        this.useTransmitBatchSearch = newValue;
        firePropertyChange(P_UseTransmitBatchSearch, old, this.useTransmitBatchSearch);
    }
    public TransmitBatchSearch getTransmitBatchSearch() {
        return this.searchTransmitBatch;
    }
    public void setTransmitBatchSearch(TransmitBatchSearch newValue) {
        this.searchTransmitBatch = newValue;
    }

    public void reset() {
        setGreenMessageAdded(null);
        setBatchProcessed(null);
        setStoreTransmitProcessed(false);
        setNull(P_StoreTransmitProcessed);
        setStoreTransmitProcessedUseNull(false);
        setStoreTransmitProcessedUseNotNull(false);
        setStoreTransmitPostProcessProcessed(false);
        setNull(P_StoreTransmitPostProcessProcessed);
        setStoreTransmitPostProcessProcessedUseNull(false);
        setStoreTransmitPostProcessProcessedUseNotNull(false);
        setStore(null);
        setUseStoreSearch(false);
        setTransmitBatch(null);
        setUseTransmitBatchSearch(false);
    }

    public boolean isDataEntered() {
        if (getGreenMessageAdded() != null) return true;
        if (getBatchProcessed() != null) return true;
        if (!isNull(P_StoreTransmitProcessed)) return true;
        if (getStoreTransmitProcessedUseNull()) return true;
        if (getStoreTransmitProcessedUseNotNull()) return true;
        if (!isNull(P_StoreTransmitPostProcessProcessed)) return true;
        if (getStoreTransmitPostProcessProcessedUseNull()) return true;
        if (getStoreTransmitPostProcessProcessedUseNotNull()) return true;
        if (getStore() != null) return true;
        if (getUseStoreSearch()) return true;
        if (getTransmitBatch() != null) return true;
        if (getUseTransmitBatchSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<StoreTransmitBatch> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<StoreTransmitBatch> f = new OAQueryFilter<StoreTransmitBatch>(StoreTransmitBatch.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<StoreTransmitBatch> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<StoreTransmitBatch> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<StoreTransmitBatch> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (greenMessageAdded != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatch.P_GreenMessageAdded + " = ?";
            args = OAArray.add(Object.class, args, this.greenMessageAdded);
        }
        if (batchProcessed != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatch.P_BatchProcessed + " = ?";
            args = OAArray.add(Object.class, args, this.batchProcessed);
        }
        if (storeTransmitProcessedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatch.P_StoreTransmitProcessed + " = null";
        }
        else if (storeTransmitProcessedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatch.P_StoreTransmitProcessed + " != null";
        }
        if (!isNull(P_StoreTransmitProcessed)) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatch.P_StoreTransmitProcessed + " = ?";
            args = OAArray.add(Object.class, args, this.storeTransmitProcessed);
        }
        if (storeTransmitPostProcessProcessedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatch.P_StoreTransmitPostProcessProcessed + " = null";
        }
        else if (storeTransmitPostProcessProcessedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatch.P_StoreTransmitPostProcessProcessed + " != null";
        }
        if (!isNull(P_StoreTransmitPostProcessProcessed)) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatch.P_StoreTransmitPostProcessProcessed + " = ?";
            args = OAArray.add(Object.class, args, this.storeTransmitPostProcessProcessed);
        }
        if (!useStoreSearch && getStore() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatchPP.store().pp + " = ?";
            args = OAArray.add(Object.class, args, getStore());
            finder = new OAFinder<Store, StoreTransmitBatch>(getStore(), Store.P_StoreTransmitBatches);
        }
        if (!useTransmitBatchSearch && getTransmitBatch() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += StoreTransmitBatchPP.transmitBatch().pp + " = ?";
            args = OAArray.add(Object.class, args, getTransmitBatch());
            finder = new OAFinder<TransmitBatch, StoreTransmitBatch>(getTransmitBatch(), TransmitBatch.P_StoreTransmitBatches);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<StoreTransmitBatch> select = new OASelect<StoreTransmitBatch>(StoreTransmitBatch.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useStoreSearch && getStoreSearch() != null) {
            getStoreSearch().appendSelect(StoreTransmitBatchPP.store().pp, select);
        }
        if (useTransmitBatchSearch && getTransmitBatchSearch() != null) {
            getTransmitBatchSearch().appendSelect(StoreTransmitBatchPP.transmitBatch().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (greenMessageAdded != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatch.P_GreenMessageAdded + " = ?";
            args = OAArray.add(Object.class, args, this.greenMessageAdded);
        }
        if (batchProcessed != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatch.P_BatchProcessed + " = ?";
            args = OAArray.add(Object.class, args, this.batchProcessed);
        }
        if (storeTransmitProcessedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatch.P_StoreTransmitProcessed + " = null";
        }
        else if (storeTransmitProcessedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatch.P_StoreTransmitProcessed + " != null";
        }
        if (!isNull(P_StoreTransmitProcessed)) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatch.P_StoreTransmitProcessed + " = ?";
            args = OAArray.add(Object.class, args, this.storeTransmitProcessed);
        }
        if (storeTransmitPostProcessProcessedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatch.P_StoreTransmitPostProcessProcessed + " = null";
        }
        else if (storeTransmitPostProcessProcessedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatch.P_StoreTransmitPostProcessProcessed + " != null";
        }
        if (!isNull(P_StoreTransmitPostProcessProcessed)) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatch.P_StoreTransmitPostProcessProcessed + " = ?";
            args = OAArray.add(Object.class, args, this.storeTransmitPostProcessProcessed);
        }
        if (!useStoreSearch && getStore() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatchPP.store().pp + " = ?";
            args = OAArray.add(Object.class, args, getStore());
        }
        if (useStoreSearch && getStoreSearch() != null) {
            getStoreSearch().appendSelect(prefix + StoreTransmitBatchPP.store().pp, select);
        }
        if (!useTransmitBatchSearch && getTransmitBatch() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + StoreTransmitBatchPP.transmitBatch().pp + " = ?";
            args = OAArray.add(Object.class, args, getTransmitBatch());
        }
        if (useTransmitBatchSearch && getTransmitBatchSearch() != null) {
            getTransmitBatchSearch().appendSelect(prefix + StoreTransmitBatchPP.transmitBatch().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<StoreTransmitBatch> filterDataSourceFilter;
    public OAFilter<StoreTransmitBatch> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<StoreTransmitBatch>() {
            @Override
            public boolean isUsed(StoreTransmitBatch storeTransmitBatch) {
                return StoreTransmitBatchSearch.this.isUsedForDataSourceFilter(storeTransmitBatch);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<StoreTransmitBatch> filterCustomFilter;
    public OAFilter<StoreTransmitBatch> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<StoreTransmitBatch>() {
            @Override
            public boolean isUsed(StoreTransmitBatch storeTransmitBatch) {
                boolean b = StoreTransmitBatchSearch.this.isUsedForCustomFilter(storeTransmitBatch);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(StoreTransmitBatch searchStoreTransmitBatch) {
        return true;
    }
    public boolean isUsedForCustomFilter(StoreTransmitBatch searchStoreTransmitBatch) {
        return true;
    }
}
