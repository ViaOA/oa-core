// Generated by OABuilder
package com.corptostore.model.oa.search;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.TesterResult;
import com.corptostore.model.oa.search.TesterResultSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class TesterResultSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(TesterResultSearch.class.getName());

    public static final String P_Started = "Started";
    public static final String P_Ended = "Ended";
    public static final String P_MaxResults = "MaxResults";

    protected OADateTime started;
    protected OADateTime ended;
    protected int maxResults;

    public OADateTime getStarted() {
        return started;
    }
    public void setStarted(OADateTime newValue) {
        OADateTime old = started;
        fireBeforePropertyChange(P_Started, old, newValue);
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
      
    public OADateTime getEnded() {
        return ended;
    }
    public void setEnded(OADateTime newValue) {
        OADateTime old = ended;
        fireBeforePropertyChange(P_Ended, old, newValue);
        this.ended = newValue;
        firePropertyChange(P_Ended, old, this.ended);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
        setStarted(null);
        setEnded(null);
    }

    public boolean isDataEntered() {
        if (getStarted() != null) return true;
        if (getEnded() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<TesterResult> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<TesterResult> f = new OAQueryFilter<TesterResult>(TesterResult.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<TesterResult> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<TesterResult> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<TesterResult> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (started != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += TesterResult.P_Started + " = ?";
            args = OAArray.add(Object.class, args, this.started);
        }
        if (ended != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += TesterResult.P_Ended + " = ?";
            args = OAArray.add(Object.class, args, this.ended);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<TesterResult> select = new OASelect<TesterResult>(TesterResult.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (started != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + TesterResult.P_Started + " = ?";
            args = OAArray.add(Object.class, args, this.started);
        }
        if (ended != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + TesterResult.P_Ended + " = ?";
            args = OAArray.add(Object.class, args, this.ended);
        }
        select.add(sql, args);
    }

    private OAFilter<TesterResult> filterDataSourceFilter;
    public OAFilter<TesterResult> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<TesterResult>() {
            @Override
            public boolean isUsed(TesterResult testerResult) {
                return TesterResultSearch.this.isUsedForDataSourceFilter(testerResult);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<TesterResult> filterCustomFilter;
    public OAFilter<TesterResult> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<TesterResult>() {
            @Override
            public boolean isUsed(TesterResult testerResult) {
                boolean b = TesterResultSearch.this.isUsedForCustomFilter(testerResult);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(TesterResult searchTesterResult) {
        return true;
    }
    public boolean isUsedForCustomFilter(TesterResult searchTesterResult) {
        return true;
    }
}
