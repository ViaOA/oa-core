// Generated by OABuilder
package com.corptostore.model.oa.search;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.TesterResultType;
import com.corptostore.model.oa.search.TesterResultTypeSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class TesterResultTypeSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(TesterResultTypeSearch.class.getName());

    public static final String P_Type = "Type";
    public static final String P_Type2 = "Type2";
    public static final String P_MaxResults = "MaxResults";

    protected int type;
    protected int type2;
    protected int maxResults;

    public int getType() {
        return type;
    }
    public void setType(int newValue) {
        int old = type;
        fireBeforePropertyChange(P_Type, old, newValue);
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
        firePropertyChange(P_Type + "String");
        firePropertyChange(P_Type + "Enum");
        if (isLoading()) return;
        if (type > type2) setType2(this.type);
    } 
    public int getType2() {
        return type2;
    }
    public void setType2(int newValue) {
        int old = type2;
        fireBeforePropertyChange(P_Type2, old, newValue);
        this.type2 = newValue;
        firePropertyChange(P_Type2, old, this.type2);
        firePropertyChange(P_Type + "String");
        firePropertyChange(P_Type + "Enum");
        if (isLoading()) return;
        if (type > type2) setType(this.type2);
    }

    public String getTypeString() {
        TesterResultType.Type type = getTypeEnum();
        if (type == null) return null;
        return type.name();
    }
    public void setTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            TesterResultType.Type type = TesterResultType.Type.valueOf(val);
            if (type != null) x = type.ordinal();
        }
        if (x < 0) setNull(P_Type);
        else setType(x);
    }

    public TesterResultType.Type getTypeEnum() {
        if (isNull(P_Type)) return null;
        final int val = getType();
        if (val < 0 || val >= TesterResultType.Type.values().length) return null;
        return TesterResultType.Type.values()[val];
    }

    public void setTypeEnum(TesterResultType.Type val) {
        if (val == null) {
            setNull(P_Type);
        }
        else {
            setType(val.ordinal());
        }
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
        setType(0);
        setNull(P_Type);
        setType2(0);
        setNull(P_Type2);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Type)) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<TesterResultType> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<TesterResultType> f = new OAQueryFilter<TesterResultType>(TesterResultType.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<TesterResultType> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<TesterResultType> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<TesterResultType> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (!isNull(P_Type)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Type2) && type != type2) {
                sql += TesterResultType.P_Type + " >= ?";
                args = OAArray.add(Object.class, args, getType());
                sql += " AND " + TesterResultType.P_Type + " <= ?";
                args = OAArray.add(Object.class, args, getType2());
            }
            else {
                sql += TesterResultType.P_Type + " = ?";
                args = OAArray.add(Object.class, args, getType());
            }
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<TesterResultType> select = new OASelect<TesterResultType>(TesterResultType.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Type)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Type2) && type != type2) {
                sql += prefix + TesterResultType.P_Type + " >= ?";
                args = OAArray.add(Object.class, args, getType());
                sql += " AND " + prefix + TesterResultType.P_Type + " <= ?";
                args = OAArray.add(Object.class, args, getType2());
            }
            else {
                sql += prefix + TesterResultType.P_Type + " = ?";
                args = OAArray.add(Object.class, args, getType());
            }
        }
        select.add(sql, args);
    }

    private OAFilter<TesterResultType> filterDataSourceFilter;
    public OAFilter<TesterResultType> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<TesterResultType>() {
            @Override
            public boolean isUsed(TesterResultType testerResultType) {
                return TesterResultTypeSearch.this.isUsedForDataSourceFilter(testerResultType);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<TesterResultType> filterCustomFilter;
    public OAFilter<TesterResultType> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<TesterResultType>() {
            @Override
            public boolean isUsed(TesterResultType testerResultType) {
                boolean b = TesterResultTypeSearch.this.isUsedForCustomFilter(testerResultType);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(TesterResultType searchTesterResultType) {
        return true;
    }
    public boolean isUsedForCustomFilter(TesterResultType searchTesterResultType) {
        return true;
    }
}
