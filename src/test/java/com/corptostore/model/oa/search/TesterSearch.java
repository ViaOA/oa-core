// Generated by OABuilder
package com.corptostore.model.oa.search;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Environment;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.propertypath.TesterPP;
import com.corptostore.model.oa.search.EnvironmentSearch;
import com.corptostore.model.oa.search.TesterSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.util.OADate;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class TesterSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(TesterSearch.class.getName());

    public static final String P_Created = "Created";
    public static final String P_TransmitDate = "TransmitDate";
    public static final String P_Environment = "Environment";
    public static final String P_UseEnvironmentSearch = "UseEnvironmentSearch";
    public static final String P_MaxResults = "MaxResults";

    protected OADateTime created;
    protected OADate transmitDate;
    protected Environment environment;
    protected boolean useEnvironmentSearch;
    protected EnvironmentSearch searchEnvironment;
    protected int maxResults;

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      
    public OADate getTransmitDate() {
        return transmitDate;
    }
    public void setTransmitDate(OADate newValue) {
        OADate old = transmitDate;
        fireBeforePropertyChange(P_TransmitDate, old, newValue);
        this.transmitDate = newValue;
        firePropertyChange(P_TransmitDate, old, this.transmitDate);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Environment getEnvironment() {
        if (environment == null) {
            environment = (Environment) getObject(P_Environment);
        }
        return environment;
    }
    public void setEnvironment(Environment newValue) {
        Environment old = this.environment;
        this.environment = newValue;
        firePropertyChange(P_Environment, old, this.environment);
    }
    public boolean getUseEnvironmentSearch() {
        return useEnvironmentSearch;
    }
    public void setUseEnvironmentSearch(boolean newValue) {
        boolean old = this.useEnvironmentSearch;
        this.useEnvironmentSearch = newValue;
        firePropertyChange(P_UseEnvironmentSearch, old, this.useEnvironmentSearch);
    }
    public EnvironmentSearch getEnvironmentSearch() {
        return this.searchEnvironment;
    }
    public void setEnvironmentSearch(EnvironmentSearch newValue) {
        this.searchEnvironment = newValue;
    }

    public void reset() {
        setCreated(null);
        setTransmitDate(null);
        setEnvironment(null);
        setUseEnvironmentSearch(false);
    }

    public boolean isDataEntered() {
        if (getCreated() != null) return true;
        if (getTransmitDate() != null) return true;
        if (getEnvironment() != null) return true;
        if (getUseEnvironmentSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Tester> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Tester> f = new OAQueryFilter<Tester>(Tester.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Tester> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Tester> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Tester> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Tester.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (transmitDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Tester.P_TransmitBatchDate + " = ?";
            args = OAArray.add(Object.class, args, this.transmitDate);
        }
        if (!useEnvironmentSearch && getEnvironment() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += TesterPP.environment().pp + " = ?";
            args = OAArray.add(Object.class, args, getEnvironment());
            finder = new OAFinder<Environment, Tester>(getEnvironment(), Environment.P_Testers);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Tester> select = new OASelect<Tester>(Tester.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useEnvironmentSearch && getEnvironmentSearch() != null) {
            getEnvironmentSearch().appendSelect(TesterPP.environment().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Tester.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (transmitDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Tester.P_TransmitBatchDate + " = ?";
            args = OAArray.add(Object.class, args, this.transmitDate);
        }
        if (!useEnvironmentSearch && getEnvironment() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + TesterPP.environment().pp + " = ?";
            args = OAArray.add(Object.class, args, getEnvironment());
        }
        if (useEnvironmentSearch && getEnvironmentSearch() != null) {
            getEnvironmentSearch().appendSelect(prefix + TesterPP.environment().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Tester> filterDataSourceFilter;
    public OAFilter<Tester> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Tester>() {
            @Override
            public boolean isUsed(Tester tester) {
                return TesterSearch.this.isUsedForDataSourceFilter(tester);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Tester> filterCustomFilter;
    public OAFilter<Tester> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Tester>() {
            @Override
            public boolean isUsed(Tester tester) {
                boolean b = TesterSearch.this.isUsedForCustomFilter(tester);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Tester searchTester) {
        return true;
    }
    public boolean isUsedForCustomFilter(Tester searchTester) {
        return true;
    }
}
