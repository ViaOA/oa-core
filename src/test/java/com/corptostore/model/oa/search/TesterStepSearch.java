// Generated by OABuilder
package com.corptostore.model.oa.search;

import java.util.*;
import java.util.logging.*;

import com.corptostore.model.oa.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.TesterStep;
import com.corptostore.model.oa.TesterStepType;
import com.corptostore.model.oa.propertypath.TesterStepPP;
import com.corptostore.model.oa.search.TesterSearch;
import com.corptostore.model.oa.search.TesterStepSearch;
import com.corptostore.model.oa.search.TesterStepTypeSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class TesterStepSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    private static Logger LOG = Logger.getLogger(TesterStepSearch.class.getName());

    public static final String P_Started = "Started";
    public static final String P_Ended = "Ended";
    public static final String P_TesterStepType = "TesterStepType";
    public static final String P_UseTesterStepTypeSearch = "UseTesterStepTypeSearch";
    public static final String P_Tester = "Tester";
    public static final String P_UseTesterSearch = "UseTesterSearch";
    public static final String P_MaxResults = "MaxResults";

    protected OADateTime started;
    protected OADateTime ended;
    protected TesterStepType testerStepType;
    protected boolean useTesterStepTypeSearch;
    protected TesterStepTypeSearch searchTesterStepType;
    protected Tester tester;
    protected boolean useTesterSearch;
    protected TesterSearch searchTester;
    protected int maxResults;

    public OADateTime getStarted() {
        return started;
    }
    public void setStarted(OADateTime newValue) {
        OADateTime old = started;
        fireBeforePropertyChange(P_Started, old, newValue);
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
      
    public OADateTime getEnded() {
        return ended;
    }
    public void setEnded(OADateTime newValue) {
        OADateTime old = ended;
        fireBeforePropertyChange(P_Ended, old, newValue);
        this.ended = newValue;
        firePropertyChange(P_Ended, old, this.ended);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public TesterStepType getTesterStepType() {
        if (testerStepType == null) {
            testerStepType = (TesterStepType) getObject(P_TesterStepType);
        }
        return testerStepType;
    }
    public void setTesterStepType(TesterStepType newValue) {
        TesterStepType old = this.testerStepType;
        this.testerStepType = newValue;
        firePropertyChange(P_TesterStepType, old, this.testerStepType);
    }
    public boolean getUseTesterStepTypeSearch() {
        return useTesterStepTypeSearch;
    }
    public void setUseTesterStepTypeSearch(boolean newValue) {
        boolean old = this.useTesterStepTypeSearch;
        this.useTesterStepTypeSearch = newValue;
        firePropertyChange(P_UseTesterStepTypeSearch, old, this.useTesterStepTypeSearch);
    }
    public TesterStepTypeSearch getTesterStepTypeSearch() {
        return this.searchTesterStepType;
    }
    public void setTesterStepTypeSearch(TesterStepTypeSearch newValue) {
        this.searchTesterStepType = newValue;
    }

    @OAOne
    public Tester getTester() {
        if (tester == null) {
            tester = (Tester) getObject(P_Tester);
        }
        return tester;
    }
    public void setTester(Tester newValue) {
        Tester old = this.tester;
        this.tester = newValue;
        firePropertyChange(P_Tester, old, this.tester);
    }
    public boolean getUseTesterSearch() {
        return useTesterSearch;
    }
    public void setUseTesterSearch(boolean newValue) {
        boolean old = this.useTesterSearch;
        this.useTesterSearch = newValue;
        firePropertyChange(P_UseTesterSearch, old, this.useTesterSearch);
    }
    public TesterSearch getTesterSearch() {
        return this.searchTester;
    }
    public void setTesterSearch(TesterSearch newValue) {
        this.searchTester = newValue;
    }

    public void reset() {
        setStarted(null);
        setEnded(null);
        setTesterStepType(null);
        setUseTesterStepTypeSearch(false);
        setTester(null);
        setUseTesterSearch(false);
    }

    public boolean isDataEntered() {
        if (getStarted() != null) return true;
        if (getEnded() != null) return true;
        if (getTesterStepType() != null) return true;
        if (getUseTesterStepTypeSearch()) return true;
        if (getTester() != null) return true;
        if (getUseTesterSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<TesterStep> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<TesterStep> f = new OAQueryFilter<TesterStep>(TesterStep.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<TesterStep> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<TesterStep> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<TesterStep> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (started != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += TesterStep.P_Started + " = ?";
            args = OAArray.add(Object.class, args, this.started);
        }
        if (ended != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += TesterStep.P_Ended + " = ?";
            args = OAArray.add(Object.class, args, this.ended);
        }
        if (!useTesterStepTypeSearch && getTesterStepType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += TesterStepPP.testerStepType().pp + " = ?";
            args = OAArray.add(Object.class, args, getTesterStepType());
        }
        if (!useTesterSearch && getTester() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += TesterStepPP.tester().pp + " = ?";
            args = OAArray.add(Object.class, args, getTester());
            finder = new OAFinder<Tester, TesterStep>(getTester(), Tester.P_TesterSteps);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<TesterStep> select = new OASelect<TesterStep>(TesterStep.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useTesterStepTypeSearch && getTesterStepTypeSearch() != null) {
            getTesterStepTypeSearch().appendSelect(TesterStepPP.testerStepType().pp, select);
        }
        if (useTesterSearch && getTesterSearch() != null) {
            getTesterSearch().appendSelect(TesterStepPP.tester().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (started != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + TesterStep.P_Started + " = ?";
            args = OAArray.add(Object.class, args, this.started);
        }
        if (ended != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + TesterStep.P_Ended + " = ?";
            args = OAArray.add(Object.class, args, this.ended);
        }
        if (!useTesterStepTypeSearch && getTesterStepType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + TesterStepPP.testerStepType().pp + " = ?";
            args = OAArray.add(Object.class, args, getTesterStepType());
        }
        if (useTesterStepTypeSearch && getTesterStepTypeSearch() != null) {
            getTesterStepTypeSearch().appendSelect(prefix + TesterStepPP.testerStepType().pp, select);
        }
        if (!useTesterSearch && getTester() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + TesterStepPP.tester().pp + " = ?";
            args = OAArray.add(Object.class, args, getTester());
        }
        if (useTesterSearch && getTesterSearch() != null) {
            getTesterSearch().appendSelect(prefix + TesterStepPP.tester().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<TesterStep> filterDataSourceFilter;
    public OAFilter<TesterStep> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<TesterStep>() {
            @Override
            public boolean isUsed(TesterStep testerStep) {
                return TesterStepSearch.this.isUsedForDataSourceFilter(testerStep);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<TesterStep> filterCustomFilter;
    public OAFilter<TesterStep> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<TesterStep>() {
            @Override
            public boolean isUsed(TesterStep testerStep) {
                boolean b = TesterStepSearch.this.isUsedForCustomFilter(testerStep);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(TesterStep searchTesterStep) {
        return true;
    }
    public boolean isUsedForCustomFilter(TesterStep searchTesterStep) {
        return true;
    }
}
