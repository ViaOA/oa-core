// Generated by OABuilder
package com.corptostore.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.StoreBatchModel;
import com.corptostore.model.StoreModel;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.oa.search.BatchSearch;
import com.corptostore.model.search.BatchSearchModel;
import com.corptostore.model.search.StoreBatchSearchModel;
import com.corptostore.model.search.StoreSearchModel;
import com.viaoa.datasource.*;

public class BatchSearchModel {
    private static Logger LOG = Logger.getLogger(BatchSearchModel.class.getName());
    
    protected Hub<Batch> hub;  // search results
    protected Hub<Batch> hubMultiSelect;
    protected Hub<Batch> hubSearchFrom;  // hub (optional) to search from
    protected Hub<BatchSearch> hubBatchSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Store> hubFromStore;
    protected Hub<Store> hubToStore;
    protected Hub<StoreBatch> hubStoreBatch;
    
    // finder used to find objects in a path
    protected OAFinder<?, Batch> finder;
    
    // ObjectModels
    protected StoreModel modelFromStore;
    protected StoreModel modelToStore;
    protected StoreBatchModel modelStoreBatch;
    
    // SearchModels
    protected StoreSearchModel modelFromStoreSearch;
    protected StoreSearchModel modelToStoreSearch;
    protected StoreBatchSearchModel modelStoreBatchSearch;
    
    // object used for search data
    protected BatchSearch batchSearch;
    
    public BatchSearchModel() {
    }
    
    public BatchSearchModel(Hub<Batch> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Batch> getHub() {
        if (hub == null) {
            hub = new Hub<Batch>(Batch.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Batch> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Batch> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    BatchSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Batch> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Batch.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Batch> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Batch> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public BatchSearch getBatchSearch() {
        if (batchSearch != null) return batchSearch;
        batchSearch = new BatchSearch();
        return batchSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<BatchSearch> getBatchSearchHub() {
        if (hubBatchSearch == null) {
            hubBatchSearch = new Hub<BatchSearch>(BatchSearch.class);
            hubBatchSearch.add(getBatchSearch());
            hubBatchSearch.setPos(0);
        }
        return hubBatchSearch;
    }
    public Hub<Store> getFromStoreHub() {
        if (hubFromStore != null) return hubFromStore;
        hubFromStore = getBatchSearchHub().getDetailHub(BatchSearch.P_FromStore);
        return hubFromStore;
    }
    public Hub<Store> getToStoreHub() {
        if (hubToStore != null) return hubToStore;
        hubToStore = getBatchSearchHub().getDetailHub(BatchSearch.P_ToStore);
        return hubToStore;
    }
    public Hub<StoreBatch> getStoreBatchHub() {
        if (hubStoreBatch != null) return hubStoreBatch;
        hubStoreBatch = getBatchSearchHub().getDetailHub(BatchSearch.P_StoreBatch);
        return hubStoreBatch;
    }
    
    public StoreModel getFromStoreModel() {
        if (modelFromStore != null) return modelFromStore;
        modelFromStore = new StoreModel(getFromStoreHub());
        modelFromStore.setDisplayName("From Store");
        modelFromStore.setPluralDisplayName("Stores");
        modelFromStore.setAllowNew(false);
        modelFromStore.setAllowSave(true);
        modelFromStore.setAllowAdd(false);
        modelFromStore.setAllowRemove(false);
        modelFromStore.setAllowClear(true);
        modelFromStore.setAllowDelete(false);
        modelFromStore.setAllowSearch(true);
        modelFromStore.setAllowHubSearch(false);
        modelFromStore.setAllowGotoEdit(true);
        modelFromStore.setViewOnly(true);
        return modelFromStore;
    }
    public StoreModel getToStoreModel() {
        if (modelToStore != null) return modelToStore;
        modelToStore = new StoreModel(getToStoreHub());
        modelToStore.setDisplayName("To Store");
        modelToStore.setPluralDisplayName("Stores");
        modelToStore.setAllowNew(false);
        modelToStore.setAllowSave(true);
        modelToStore.setAllowAdd(false);
        modelToStore.setAllowRemove(false);
        modelToStore.setAllowClear(true);
        modelToStore.setAllowDelete(false);
        modelToStore.setAllowSearch(true);
        modelToStore.setAllowHubSearch(false);
        modelToStore.setAllowGotoEdit(true);
        modelToStore.setViewOnly(true);
        return modelToStore;
    }
    public StoreBatchModel getStoreBatchModel() {
        if (modelStoreBatch != null) return modelStoreBatch;
        modelStoreBatch = new StoreBatchModel(getStoreBatchHub());
        modelStoreBatch.setDisplayName("Store Batch");
        modelStoreBatch.setPluralDisplayName("Store Batches");
        modelStoreBatch.setAllowNew(false);
        modelStoreBatch.setAllowSave(true);
        modelStoreBatch.setAllowAdd(false);
        modelStoreBatch.setAllowRemove(false);
        modelStoreBatch.setAllowClear(true);
        modelStoreBatch.setAllowDelete(false);
        modelStoreBatch.setAllowSearch(true);
        modelStoreBatch.setAllowHubSearch(false);
        modelStoreBatch.setAllowGotoEdit(true);
        modelStoreBatch.setViewOnly(true);
        return modelStoreBatch;
    }
    
    public StoreSearchModel getFromStoreSearchModel() {
        if (modelFromStoreSearch == null) {
            modelFromStoreSearch = new StoreSearchModel();
            getBatchSearch().setFromStoreSearch(modelFromStoreSearch.getStoreSearch());
        }
        return modelFromStoreSearch;
    }
    public StoreSearchModel getToStoreSearchModel() {
        if (modelToStoreSearch == null) {
            modelToStoreSearch = new StoreSearchModel();
            getBatchSearch().setToStoreSearch(modelToStoreSearch.getStoreSearch());
        }
        return modelToStoreSearch;
    }
    public StoreBatchSearchModel getStoreBatchSearchModel() {
        if (modelStoreBatchSearch == null) {
            modelStoreBatchSearch = new StoreBatchSearchModel();
            getBatchSearch().setStoreBatchSearch(modelStoreBatchSearch.getStoreBatchSearch());
        }
        return modelStoreBatchSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses BatchSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Batch> sel = getBatchSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Batch batch, Hub<Batch> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Batch> hub) {
    }
}

