// Generated by OABuilder
package com.corptostore.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.BatchModel;
import com.corptostore.model.StoreModel;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.Receive;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.search.ReceiveSearch;
import com.corptostore.model.search.BatchSearchModel;
import com.corptostore.model.search.ReceiveSearchModel;
import com.corptostore.model.search.StoreSearchModel;
import com.viaoa.datasource.*;

public class ReceiveSearchModel {
    private static Logger LOG = Logger.getLogger(ReceiveSearchModel.class.getName());
    
    protected Hub<Receive> hub;  // search results
    protected Hub<Receive> hubMultiSelect;
    protected Hub<Receive> hubSearchFrom;  // hub (optional) to search from
    protected Hub<ReceiveSearch> hubReceiveSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Store> hubStore;
    protected Hub<Batch> hubBatch;
    
    // finder used to find objects in a path
    protected OAFinder<?, Receive> finder;
    
    // ObjectModels
    protected StoreModel modelStore;
    protected BatchModel modelBatch;
    
    // SearchModels
    protected StoreSearchModel modelStoreSearch;
    protected BatchSearchModel modelBatchSearch;
    
    // object used for search data
    protected ReceiveSearch receiveSearch;
    
    public ReceiveSearchModel() {
    }
    
    public ReceiveSearchModel(Hub<Receive> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Receive> getHub() {
        if (hub == null) {
            hub = new Hub<Receive>(Receive.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Receive> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Receive> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    ReceiveSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Receive> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Receive.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Receive> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Receive> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public ReceiveSearch getReceiveSearch() {
        if (receiveSearch != null) return receiveSearch;
        receiveSearch = new ReceiveSearch();
        return receiveSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<ReceiveSearch> getReceiveSearchHub() {
        if (hubReceiveSearch == null) {
            hubReceiveSearch = new Hub<ReceiveSearch>(ReceiveSearch.class);
            hubReceiveSearch.add(getReceiveSearch());
            hubReceiveSearch.setPos(0);
        }
        return hubReceiveSearch;
    }
    public Hub<Store> getStoreHub() {
        if (hubStore != null) return hubStore;
        hubStore = getReceiveSearchHub().getDetailHub(ReceiveSearch.P_Store);
        return hubStore;
    }
    public Hub<Batch> getBatchHub() {
        if (hubBatch != null) return hubBatch;
        hubBatch = getReceiveSearchHub().getDetailHub(ReceiveSearch.P_Batch);
        return hubBatch;
    }
    
    public StoreModel getStoreModel() {
        if (modelStore != null) return modelStore;
        modelStore = new StoreModel(getStoreHub());
        modelStore.setDisplayName("Store");
        modelStore.setPluralDisplayName("Stores");
        modelStore.setAllowNew(false);
        modelStore.setAllowSave(true);
        modelStore.setAllowAdd(false);
        modelStore.setAllowRemove(false);
        modelStore.setAllowClear(true);
        modelStore.setAllowDelete(false);
        modelStore.setAllowSearch(true);
        modelStore.setAllowHubSearch(false);
        modelStore.setAllowGotoEdit(true);
        modelStore.setViewOnly(true);
        return modelStore;
    }
    public BatchModel getBatchModel() {
        if (modelBatch != null) return modelBatch;
        modelBatch = new BatchModel(getBatchHub());
        modelBatch.setDisplayName("Batch");
        modelBatch.setPluralDisplayName("Batches");
        modelBatch.setAllowNew(false);
        modelBatch.setAllowSave(true);
        modelBatch.setAllowAdd(false);
        modelBatch.setAllowRemove(false);
        modelBatch.setAllowClear(true);
        modelBatch.setAllowDelete(false);
        modelBatch.setAllowSearch(true);
        modelBatch.setAllowHubSearch(false);
        modelBatch.setAllowGotoEdit(true);
        modelBatch.setViewOnly(true);
        return modelBatch;
    }
    
    public StoreSearchModel getStoreSearchModel() {
        if (modelStoreSearch == null) {
            modelStoreSearch = new StoreSearchModel();
            getReceiveSearch().setStoreSearch(modelStoreSearch.getStoreSearch());
        }
        return modelStoreSearch;
    }
    public BatchSearchModel getBatchSearchModel() {
        if (modelBatchSearch == null) {
            modelBatchSearch = new BatchSearchModel();
            getReceiveSearch().setBatchSearch(modelBatchSearch.getBatchSearch());
        }
        return modelBatchSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses ReceiveSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Receive> sel = getReceiveSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Receive receive, Hub<Receive> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Receive> hub) {
    }
}

