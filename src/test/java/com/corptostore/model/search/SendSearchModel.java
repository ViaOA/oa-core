// Generated by OABuilder
package com.corptostore.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.StoreModel;
import com.corptostore.model.TransmitModel;
import com.corptostore.model.oa.Send;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.Transmit;
import com.corptostore.model.oa.search.SendSearch;
import com.corptostore.model.search.SendSearchModel;
import com.corptostore.model.search.StoreSearchModel;
import com.corptostore.model.search.TransmitSearchModel;
import com.viaoa.datasource.*;

public class SendSearchModel {
    private static Logger LOG = Logger.getLogger(SendSearchModel.class.getName());
    
    protected Hub<Send> hub;  // search results
    protected Hub<Send> hubMultiSelect;
    protected Hub<Send> hubSearchFrom;  // hub (optional) to search from
    protected Hub<SendSearch> hubSendSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Store> hubStore;
    protected Hub<Transmit> hubTransmits;
    
    // finder used to find objects in a path
    protected OAFinder<?, Send> finder;
    
    // ObjectModels
    protected StoreModel modelStore;
    protected TransmitModel modelTransmits;
    
    // SearchModels
    protected StoreSearchModel modelStoreSearch;
    protected TransmitSearchModel modelTransmitsSearch;
    
    // object used for search data
    protected SendSearch sendSearch;
    
    public SendSearchModel() {
    }
    
    public SendSearchModel(Hub<Send> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Send> getHub() {
        if (hub == null) {
            hub = new Hub<Send>(Send.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Send> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Send> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    SendSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Send> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Send.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Send> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Send> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public SendSearch getSendSearch() {
        if (sendSearch != null) return sendSearch;
        sendSearch = new SendSearch();
        return sendSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<SendSearch> getSendSearchHub() {
        if (hubSendSearch == null) {
            hubSendSearch = new Hub<SendSearch>(SendSearch.class);
            hubSendSearch.add(getSendSearch());
            hubSendSearch.setPos(0);
        }
        return hubSendSearch;
    }
    public Hub<Store> getStoreHub() {
        if (hubStore != null) return hubStore;
        hubStore = getSendSearchHub().getDetailHub(SendSearch.P_Store);
        return hubStore;
    }
    public Hub<Transmit> getTransmits() {
        if (hubTransmits == null) {
            hubTransmits = getHub().getDetailHub(SendSearch.P_Transmits);
        }
        return hubTransmits;
    }
    
    public StoreModel getStoreModel() {
        if (modelStore != null) return modelStore;
        modelStore = new StoreModel(getStoreHub());
        modelStore.setDisplayName("Store");
        modelStore.setPluralDisplayName("Stores");
        modelStore.setAllowNew(false);
        modelStore.setAllowSave(true);
        modelStore.setAllowAdd(false);
        modelStore.setAllowRemove(false);
        modelStore.setAllowClear(true);
        modelStore.setAllowDelete(false);
        modelStore.setAllowSearch(true);
        modelStore.setAllowHubSearch(false);
        modelStore.setAllowGotoEdit(true);
        modelStore.setViewOnly(true);
        return modelStore;
    }
    public TransmitModel getTransmitsModel() {
        if (modelTransmits != null) return modelTransmits;
        modelTransmits = new TransmitModel(getTransmits());
        modelTransmits.setDisplayName("Transmit");
        modelTransmits.setPluralDisplayName("Transmits");
        modelTransmits.setAllowNew(false);
        modelTransmits.setAllowSave(true);
        modelTransmits.setAllowAdd(true);
        modelTransmits.setAllowMove(false);
        modelTransmits.setAllowRemove(false);
        modelTransmits.setAllowDelete(false);
        modelTransmits.setAllowRefresh(true);
        modelTransmits.setAllowSearch(false);
        modelTransmits.setAllowHubSearch(true);
        modelTransmits.setAllowGotoEdit(false);
        modelTransmits.setAllowNew(false);
        modelTransmits.setAllowTableFilter(true);
        modelTransmits.setAllowTableSorting(true);
        modelTransmits.setAllowMultiSelect(false);
        modelTransmits.setAllowCopy(false);
        modelTransmits.setAllowCut(false);
        modelTransmits.setAllowPaste(false);
        return modelTransmits;
    }
    
    public StoreSearchModel getStoreSearchModel() {
        if (modelStoreSearch == null) {
            modelStoreSearch = new StoreSearchModel();
            getSendSearch().setStoreSearch(modelStoreSearch.getStoreSearch());
        }
        return modelStoreSearch;
    }
    public TransmitSearchModel getTransmitsSearchModel() {
        if (modelTransmitsSearch != null) return modelTransmitsSearch;
        modelTransmitsSearch = new TransmitSearchModel();
        return modelTransmitsSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses SendSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Send> sel = getSendSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Send send, Hub<Send> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Send> hub) {
    }
}

