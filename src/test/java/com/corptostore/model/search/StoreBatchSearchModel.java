// Generated by OABuilder
package com.corptostore.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.BatchModel;
import com.corptostore.model.StoreTransmitBatchModel;
import com.corptostore.model.oa.Batch;
import com.corptostore.model.oa.StoreBatch;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.search.StoreBatchSearch;
import com.corptostore.model.search.BatchSearchModel;
import com.corptostore.model.search.StoreBatchSearchModel;
import com.corptostore.model.search.StoreTransmitBatchSearchModel;
import com.viaoa.datasource.*;

public class StoreBatchSearchModel {
    private static Logger LOG = Logger.getLogger(StoreBatchSearchModel.class.getName());
    
    protected Hub<StoreBatch> hub;  // search results
    protected Hub<StoreBatch> hubMultiSelect;
    protected Hub<StoreBatch> hubSearchFrom;  // hub (optional) to search from
    protected Hub<StoreBatchSearch> hubStoreBatchSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Batch> hubBatch;
    protected Hub<StoreTransmitBatch> hubStoreTransmitBatch;
    
    // finder used to find objects in a path
    protected OAFinder<?, StoreBatch> finder;
    
    // ObjectModels
    protected BatchModel modelBatch;
    protected StoreTransmitBatchModel modelStoreTransmitBatch;
    
    // SearchModels
    protected BatchSearchModel modelBatchSearch;
    protected StoreTransmitBatchSearchModel modelStoreTransmitBatchSearch;
    
    // object used for search data
    protected StoreBatchSearch storeBatchSearch;
    
    public StoreBatchSearchModel() {
    }
    
    public StoreBatchSearchModel(Hub<StoreBatch> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<StoreBatch> getHub() {
        if (hub == null) {
            hub = new Hub<StoreBatch>(StoreBatch.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<StoreBatch> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<StoreBatch> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    StoreBatchSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<StoreBatch> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(StoreBatch.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, StoreBatch> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, StoreBatch> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public StoreBatchSearch getStoreBatchSearch() {
        if (storeBatchSearch != null) return storeBatchSearch;
        storeBatchSearch = new StoreBatchSearch();
        return storeBatchSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<StoreBatchSearch> getStoreBatchSearchHub() {
        if (hubStoreBatchSearch == null) {
            hubStoreBatchSearch = new Hub<StoreBatchSearch>(StoreBatchSearch.class);
            hubStoreBatchSearch.add(getStoreBatchSearch());
            hubStoreBatchSearch.setPos(0);
        }
        return hubStoreBatchSearch;
    }
    public Hub<Batch> getBatchHub() {
        if (hubBatch != null) return hubBatch;
        hubBatch = getStoreBatchSearchHub().getDetailHub(StoreBatchSearch.P_Batch);
        return hubBatch;
    }
    public Hub<StoreTransmitBatch> getStoreTransmitBatchHub() {
        if (hubStoreTransmitBatch != null) return hubStoreTransmitBatch;
        hubStoreTransmitBatch = getStoreBatchSearchHub().getDetailHub(StoreBatchSearch.P_StoreTransmitBatch);
        return hubStoreTransmitBatch;
    }
    
    public BatchModel getBatchModel() {
        if (modelBatch != null) return modelBatch;
        modelBatch = new BatchModel(getBatchHub());
        modelBatch.setDisplayName("Batch");
        modelBatch.setPluralDisplayName("Batches");
        modelBatch.setAllowNew(false);
        modelBatch.setAllowSave(true);
        modelBatch.setAllowAdd(false);
        modelBatch.setAllowRemove(false);
        modelBatch.setAllowClear(true);
        modelBatch.setAllowDelete(false);
        modelBatch.setAllowSearch(true);
        modelBatch.setAllowHubSearch(false);
        modelBatch.setAllowGotoEdit(true);
        return modelBatch;
    }
    public StoreTransmitBatchModel getStoreTransmitBatchModel() {
        if (modelStoreTransmitBatch != null) return modelStoreTransmitBatch;
        modelStoreTransmitBatch = new StoreTransmitBatchModel(getStoreTransmitBatchHub());
        modelStoreTransmitBatch.setDisplayName("Store Transmit Batch");
        modelStoreTransmitBatch.setPluralDisplayName("Store Transmit Batches");
        modelStoreTransmitBatch.setAllowNew(false);
        modelStoreTransmitBatch.setAllowSave(true);
        modelStoreTransmitBatch.setAllowAdd(false);
        modelStoreTransmitBatch.setAllowRemove(false);
        modelStoreTransmitBatch.setAllowClear(true);
        modelStoreTransmitBatch.setAllowDelete(false);
        modelStoreTransmitBatch.setAllowSearch(true);
        modelStoreTransmitBatch.setAllowHubSearch(false);
        modelStoreTransmitBatch.setAllowGotoEdit(true);
        return modelStoreTransmitBatch;
    }
    
    public BatchSearchModel getBatchSearchModel() {
        if (modelBatchSearch == null) {
            modelBatchSearch = new BatchSearchModel();
            getStoreBatchSearch().setBatchSearch(modelBatchSearch.getBatchSearch());
        }
        return modelBatchSearch;
    }
    public StoreTransmitBatchSearchModel getStoreTransmitBatchSearchModel() {
        if (modelStoreTransmitBatchSearch == null) {
            modelStoreTransmitBatchSearch = new StoreTransmitBatchSearchModel();
            getStoreBatchSearch().setStoreTransmitBatchSearch(modelStoreTransmitBatchSearch.getStoreTransmitBatchSearch());
        }
        return modelStoreTransmitBatchSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses StoreBatchSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<StoreBatch> sel = getStoreBatchSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(StoreBatch storeBatch, Hub<StoreBatch> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<StoreBatch> hub) {
    }
}

