// Generated by OABuilder
package com.corptostore.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.StoreModel;
import com.corptostore.model.TransmitBatchModel;
import com.corptostore.model.oa.Store;
import com.corptostore.model.oa.StoreTransmitBatch;
import com.corptostore.model.oa.TransmitBatch;
import com.corptostore.model.oa.search.StoreTransmitBatchSearch;
import com.corptostore.model.search.StoreSearchModel;
import com.corptostore.model.search.StoreTransmitBatchSearchModel;
import com.corptostore.model.search.TransmitBatchSearchModel;
import com.viaoa.datasource.*;

public class StoreTransmitBatchSearchModel {
    private static Logger LOG = Logger.getLogger(StoreTransmitBatchSearchModel.class.getName());
    
    protected Hub<StoreTransmitBatch> hub;  // search results
    protected Hub<StoreTransmitBatch> hubMultiSelect;
    protected Hub<StoreTransmitBatch> hubSearchFrom;  // hub (optional) to search from
    protected Hub<StoreTransmitBatchSearch> hubStoreTransmitBatchSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Store> hubStore;
    protected Hub<TransmitBatch> hubTransmitBatch;
    
    // finder used to find objects in a path
    protected OAFinder<?, StoreTransmitBatch> finder;
    
    // ObjectModels
    protected StoreModel modelStore;
    protected TransmitBatchModel modelTransmitBatch;
    
    // SearchModels
    protected StoreSearchModel modelStoreSearch;
    protected TransmitBatchSearchModel modelTransmitBatchSearch;
    
    // object used for search data
    protected StoreTransmitBatchSearch storeTransmitBatchSearch;
    
    public StoreTransmitBatchSearchModel() {
    }
    
    public StoreTransmitBatchSearchModel(Hub<StoreTransmitBatch> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<StoreTransmitBatch> getHub() {
        if (hub == null) {
            hub = new Hub<StoreTransmitBatch>(StoreTransmitBatch.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<StoreTransmitBatch> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<StoreTransmitBatch> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    StoreTransmitBatchSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<StoreTransmitBatch> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(StoreTransmitBatch.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, StoreTransmitBatch> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, StoreTransmitBatch> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public StoreTransmitBatchSearch getStoreTransmitBatchSearch() {
        if (storeTransmitBatchSearch != null) return storeTransmitBatchSearch;
        storeTransmitBatchSearch = new StoreTransmitBatchSearch();
        return storeTransmitBatchSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<StoreTransmitBatchSearch> getStoreTransmitBatchSearchHub() {
        if (hubStoreTransmitBatchSearch == null) {
            hubStoreTransmitBatchSearch = new Hub<StoreTransmitBatchSearch>(StoreTransmitBatchSearch.class);
            hubStoreTransmitBatchSearch.add(getStoreTransmitBatchSearch());
            hubStoreTransmitBatchSearch.setPos(0);
        }
        return hubStoreTransmitBatchSearch;
    }
    public Hub<Store> getStoreHub() {
        if (hubStore != null) return hubStore;
        hubStore = getStoreTransmitBatchSearchHub().getDetailHub(StoreTransmitBatchSearch.P_Store);
        return hubStore;
    }
    public Hub<TransmitBatch> getTransmitBatchHub() {
        if (hubTransmitBatch != null) return hubTransmitBatch;
        hubTransmitBatch = getStoreTransmitBatchSearchHub().getDetailHub(StoreTransmitBatchSearch.P_TransmitBatch);
        return hubTransmitBatch;
    }
    
    public StoreModel getStoreModel() {
        if (modelStore != null) return modelStore;
        modelStore = new StoreModel(getStoreHub());
        modelStore.setDisplayName("Store");
        modelStore.setPluralDisplayName("Stores");
        modelStore.setAllowNew(false);
        modelStore.setAllowSave(true);
        modelStore.setAllowAdd(false);
        modelStore.setAllowRemove(false);
        modelStore.setAllowClear(true);
        modelStore.setAllowDelete(false);
        modelStore.setAllowSearch(true);
        modelStore.setAllowHubSearch(false);
        modelStore.setAllowGotoEdit(true);
        return modelStore;
    }
    public TransmitBatchModel getTransmitBatchModel() {
        if (modelTransmitBatch != null) return modelTransmitBatch;
        modelTransmitBatch = new TransmitBatchModel(getTransmitBatchHub());
        modelTransmitBatch.setDisplayName("Transmit Batch");
        modelTransmitBatch.setPluralDisplayName("Transmit Batches");
        modelTransmitBatch.setAllowNew(false);
        modelTransmitBatch.setAllowSave(true);
        modelTransmitBatch.setAllowAdd(false);
        modelTransmitBatch.setAllowRemove(false);
        modelTransmitBatch.setAllowClear(true);
        modelTransmitBatch.setAllowDelete(false);
        modelTransmitBatch.setAllowSearch(true);
        modelTransmitBatch.setAllowHubSearch(false);
        modelTransmitBatch.setAllowGotoEdit(true);
        return modelTransmitBatch;
    }
    
    public StoreSearchModel getStoreSearchModel() {
        if (modelStoreSearch == null) {
            modelStoreSearch = new StoreSearchModel();
            getStoreTransmitBatchSearch().setStoreSearch(modelStoreSearch.getStoreSearch());
        }
        return modelStoreSearch;
    }
    public TransmitBatchSearchModel getTransmitBatchSearchModel() {
        if (modelTransmitBatchSearch == null) {
            modelTransmitBatchSearch = new TransmitBatchSearchModel();
            getStoreTransmitBatchSearch().setTransmitBatchSearch(modelTransmitBatchSearch.getTransmitBatchSearch());
        }
        return modelTransmitBatchSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses StoreTransmitBatchSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<StoreTransmitBatch> sel = getStoreTransmitBatchSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(StoreTransmitBatch storeTransmitBatch, Hub<StoreTransmitBatch> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<StoreTransmitBatch> hub) {
    }
}

