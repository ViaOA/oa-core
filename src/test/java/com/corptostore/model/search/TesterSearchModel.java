// Generated by OABuilder
package com.corptostore.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.EnvironmentModel;
import com.corptostore.model.oa.Environment;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.filter.EnvironmentNonProdFilter;
import com.corptostore.model.oa.search.TesterSearch;
import com.corptostore.model.search.EnvironmentSearchModel;
import com.corptostore.model.search.TesterSearchModel;
import com.viaoa.datasource.*;

public class TesterSearchModel {
    private static Logger LOG = Logger.getLogger(TesterSearchModel.class.getName());
    
    protected Hub<Tester> hub;  // search results
    protected Hub<Tester> hubMultiSelect;
    protected Hub<Tester> hubSearchFrom;  // hub (optional) to search from
    protected Hub<TesterSearch> hubTesterSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Environment> hubEnvironment;
    
    // finder used to find objects in a path
    protected OAFinder<?, Tester> finder;
    
    // ObjectModels
    protected EnvironmentModel modelEnvironment;
    
    // SearchModels
    protected EnvironmentSearchModel modelEnvironmentSearch;
    
    // object used for search data
    protected TesterSearch testerSearch;
    
    public TesterSearchModel() {
    }
    
    public TesterSearchModel(Hub<Tester> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Tester> getHub() {
        if (hub == null) {
            hub = new Hub<Tester>(Tester.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Tester> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Tester> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    TesterSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Tester> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Tester.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Tester> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Tester> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public TesterSearch getTesterSearch() {
        if (testerSearch != null) return testerSearch;
        testerSearch = new TesterSearch();
        return testerSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<TesterSearch> getTesterSearchHub() {
        if (hubTesterSearch == null) {
            hubTesterSearch = new Hub<TesterSearch>(TesterSearch.class);
            hubTesterSearch.add(getTesterSearch());
            hubTesterSearch.setPos(0);
        }
        return hubTesterSearch;
    }
    public Hub<Environment> getEnvironmentHub() {
        if (hubEnvironment != null) return hubEnvironment;
        Hub<Environment> hub = new Hub<>(Environment.class);
        EnvironmentNonProdFilter filter = new EnvironmentNonProdFilter(ModelDelegate.getEnvironments(), hub);
        hubEnvironment = new Hub<>(Environment.class);
        HubCopy<Environment> hc = new HubCopy<>(hub, hubEnvironment, false);
        hubEnvironment.setLinkHub(getTesterSearchHub(), TesterSearch.P_Environment); 
        return hubEnvironment;
    }
    
    public EnvironmentModel getEnvironmentModel() {
        if (modelEnvironment != null) return modelEnvironment;
        modelEnvironment = new EnvironmentModel(getEnvironmentHub());
        modelEnvironment.setDisplayName("Environment");
        modelEnvironment.setPluralDisplayName("Environments");
        modelEnvironment.setAllowNew(false);
        modelEnvironment.setAllowSave(true);
        modelEnvironment.setAllowAdd(false);
        modelEnvironment.setAllowRemove(false);
        modelEnvironment.setAllowClear(true);
        modelEnvironment.setAllowDelete(false);
        modelEnvironment.setAllowSearch(true);
        modelEnvironment.setAllowHubSearch(false);
        modelEnvironment.setAllowGotoEdit(true);
        modelEnvironment.setViewOnly(true);
        return modelEnvironment;
    }
    
    public EnvironmentSearchModel getEnvironmentSearchModel() {
        if (modelEnvironmentSearch == null) {
            modelEnvironmentSearch = new EnvironmentSearchModel();
            getTesterSearch().setEnvironmentSearch(modelEnvironmentSearch.getEnvironmentSearch());
        }
        return modelEnvironmentSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses TesterSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Tester> sel = getTesterSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Tester tester, Hub<Tester> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Tester> hub) {
    }
}

