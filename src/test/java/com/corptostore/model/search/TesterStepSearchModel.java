// Generated by OABuilder
package com.corptostore.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.corptostore.delegate.ModelDelegate;
import com.corptostore.model.*;
import com.corptostore.model.oa.*;
import com.corptostore.model.oa.filter.*;
import com.corptostore.model.oa.propertypath.*;
import com.corptostore.model.oa.search.*;
import com.corptostore.resource.Resource;
import com.corptostore.model.TesterModel;
import com.corptostore.model.TesterStepTypeModel;
import com.corptostore.model.oa.Tester;
import com.corptostore.model.oa.TesterStep;
import com.corptostore.model.oa.TesterStepType;
import com.corptostore.model.oa.search.TesterStepSearch;
import com.corptostore.model.search.TesterSearchModel;
import com.corptostore.model.search.TesterStepSearchModel;
import com.corptostore.model.search.TesterStepTypeSearchModel;
import com.viaoa.datasource.*;

public class TesterStepSearchModel {
    private static Logger LOG = Logger.getLogger(TesterStepSearchModel.class.getName());
    
    protected Hub<TesterStep> hub;  // search results
    protected Hub<TesterStep> hubMultiSelect;
    protected Hub<TesterStep> hubSearchFrom;  // hub (optional) to search from
    protected Hub<TesterStepSearch> hubTesterStepSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<TesterStepType> hubTesterStepType;
    protected Hub<Tester> hubTester;
    
    // finder used to find objects in a path
    protected OAFinder<?, TesterStep> finder;
    
    // ObjectModels
    protected TesterStepTypeModel modelTesterStepType;
    protected TesterModel modelTester;
    
    // SearchModels
    protected TesterStepTypeSearchModel modelTesterStepTypeSearch;
    protected TesterSearchModel modelTesterSearch;
    
    // object used for search data
    protected TesterStepSearch testerStepSearch;
    
    public TesterStepSearchModel() {
    }
    
    public TesterStepSearchModel(Hub<TesterStep> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<TesterStep> getHub() {
        if (hub == null) {
            hub = new Hub<TesterStep>(TesterStep.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<TesterStep> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<TesterStep> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    TesterStepSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<TesterStep> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(TesterStep.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, TesterStep> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, TesterStep> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public TesterStepSearch getTesterStepSearch() {
        if (testerStepSearch != null) return testerStepSearch;
        testerStepSearch = new TesterStepSearch();
        return testerStepSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<TesterStepSearch> getTesterStepSearchHub() {
        if (hubTesterStepSearch == null) {
            hubTesterStepSearch = new Hub<TesterStepSearch>(TesterStepSearch.class);
            hubTesterStepSearch.add(getTesterStepSearch());
            hubTesterStepSearch.setPos(0);
        }
        return hubTesterStepSearch;
    }
    public Hub<TesterStepType> getTesterStepTypeHub() {
        if (hubTesterStepType != null) return hubTesterStepType;
        hubTesterStepType = new Hub<>(TesterStepType.class);
        Hub<TesterStepType> hub = ModelDelegate.getTesterStepTypes();
        HubCopy<TesterStepType> hc = new HubCopy<>(hub, hubTesterStepType, false);
        hubTesterStepType.setLinkHub(getTesterStepSearchHub(), TesterStepSearch.P_TesterStepType); 
        return hubTesterStepType;
    }
    public Hub<Tester> getTesterHub() {
        if (hubTester != null) return hubTester;
        hubTester = getTesterStepSearchHub().getDetailHub(TesterStepSearch.P_Tester);
        return hubTester;
    }
    
    public TesterStepTypeModel getTesterStepTypeModel() {
        if (modelTesterStepType != null) return modelTesterStepType;
        modelTesterStepType = new TesterStepTypeModel(getTesterStepTypeHub());
        modelTesterStepType.setDisplayName("Tester Step Type");
        modelTesterStepType.setPluralDisplayName("Tester Step Types");
        modelTesterStepType.setAllowNew(false);
        modelTesterStepType.setAllowSave(true);
        modelTesterStepType.setAllowAdd(false);
        modelTesterStepType.setAllowRemove(false);
        modelTesterStepType.setAllowClear(true);
        modelTesterStepType.setAllowDelete(false);
        modelTesterStepType.setAllowSearch(true);
        modelTesterStepType.setAllowHubSearch(false);
        modelTesterStepType.setAllowGotoEdit(true);
        modelTesterStepType.setViewOnly(true);
        return modelTesterStepType;
    }
    public TesterModel getTesterModel() {
        if (modelTester != null) return modelTester;
        modelTester = new TesterModel(getTesterHub());
        modelTester.setDisplayName("Tester");
        modelTester.setPluralDisplayName("Testers");
        modelTester.setAllowNew(false);
        modelTester.setAllowSave(true);
        modelTester.setAllowAdd(false);
        modelTester.setAllowRemove(false);
        modelTester.setAllowClear(true);
        modelTester.setAllowDelete(false);
        modelTester.setAllowSearch(true);
        modelTester.setAllowHubSearch(false);
        modelTester.setAllowGotoEdit(true);
        return modelTester;
    }
    
    public TesterStepTypeSearchModel getTesterStepTypeSearchModel() {
        if (modelTesterStepTypeSearch == null) {
            modelTesterStepTypeSearch = new TesterStepTypeSearchModel();
            getTesterStepSearch().setTesterStepTypeSearch(modelTesterStepTypeSearch.getTesterStepTypeSearch());
        }
        return modelTesterStepTypeSearch;
    }
    public TesterSearchModel getTesterSearchModel() {
        if (modelTesterSearch == null) {
            modelTesterSearch = new TesterSearchModel();
            getTesterStepSearch().setTesterSearch(modelTesterSearch.getTesterSearch());
        }
        return modelTesterSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses TesterStepSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<TesterStep> sel = getTesterStepSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(TesterStep testerStep, Hub<TesterStep> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<TesterStep> hub) {
    }
}

