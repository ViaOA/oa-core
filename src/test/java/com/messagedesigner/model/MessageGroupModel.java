// Generated by OABuilder

package com.messagedesigner.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.messagedesigner.delegate.ModelDelegate;
import com.messagedesigner.model.filter.*;
import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.filter.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.search.*;
import com.messagedesigner.model.search.*;
import com.messagedesigner.resource.Resource;
import com.messagedesigner.model.MessageGroupModel;
import com.messagedesigner.model.MessageRecordModel;
import com.messagedesigner.model.MessageTypeModel;
import com.messagedesigner.model.oa.MessageGroup;
import com.messagedesigner.model.oa.MessageRecord;
import com.messagedesigner.model.oa.MessageType;
import com.messagedesigner.model.oa.propertypath.MessageGroupPP;
import com.messagedesigner.model.search.MessageRecordSearchModel;
import com.messagedesigner.model.search.MessageTypeSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class MessageGroupModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(MessageGroupModel.class.getName());
    
    // Hubs
    protected Hub<MessageGroup> hub;
    // selected messageGroups
    protected Hub<MessageGroup> hubMultiSelect;
    // detail hubs
    protected Hub<MessageType> hubMessageType;
    protected Hub<MessageRecord> hubMessageRecords;
    
    // selectFrom
    protected Hub<MessageRecord> hubMessageRecordsSelectFrom;
    
    // ObjectModels
    protected MessageTypeModel modelMessageType;
    protected MessageRecordModel modelMessageRecords;
    
    // selectFrom
    protected MessageRecordModel modelMessageRecordsSelectFrom;
    
    // SearchModels used for references
    protected MessageTypeSearchModel modelMessageTypeSearch;
    protected MessageRecordSearchModel modelMessageRecordsSearch;
    
    public MessageGroupModel() {
        setDisplayName("Message Group");
        setPluralDisplayName("Message Groups");
    }
    
    public MessageGroupModel(Hub<MessageGroup> hubMessageGroup) {
        this();
        if (hubMessageGroup != null) HubDelegate.setObjectClass(hubMessageGroup, MessageGroup.class);
        this.hub = hubMessageGroup;
    }
    public MessageGroupModel(MessageGroup messageGroup) {
        this();
        getHub().add(messageGroup);
        getHub().setPos(0);
    }
    
    public Hub<MessageGroup> getOriginalHub() {
        return getHub();
    }
    
    public Hub<MessageType> getMessageTypeHub() {
        if (hubMessageType != null) return hubMessageType;
        // this is the owner, use detailHub
        hubMessageType = getHub().getDetailHub(MessageGroup.P_MessageType);
        return hubMessageType;
    }
    public Hub<MessageRecord> getMessageRecords() {
        if (hubMessageRecords == null) {
            hubMessageRecords = getHub().getDetailHub(MessageGroup.P_MessageRecords);
        }
        return hubMessageRecords;
    }
    public Hub<MessageRecord> getMessageRecordsSelectFromHub() {
        if (hubMessageRecordsSelectFrom != null) return hubMessageRecordsSelectFrom;
        hubMessageRecordsSelectFrom = new Hub(MessageRecord.class);
        new HubMerger(getHub(), hubMessageRecordsSelectFrom, MessageGroupPP.messageType().messageRecords().pp);
        return hubMessageRecordsSelectFrom;
    }
    public MessageGroup getMessageGroup() {
        return getHub().getAO();
    }
    
    public Hub<MessageGroup> getHub() {
        if (hub == null) {
            hub = new Hub<MessageGroup>(MessageGroup.class);
        }
        return hub;
    }
    
    public Hub<MessageGroup> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<MessageGroup>(MessageGroup.class);
        }
        return hubMultiSelect;
    }
    
    public MessageTypeModel getMessageTypeModel() {
        if (modelMessageType != null) return modelMessageType;
        modelMessageType = new MessageTypeModel(getMessageTypeHub());
        modelMessageType.setDisplayName("Message Type");
        modelMessageType.setPluralDisplayName("Message Types");
        modelMessageType.setForJfc(getForJfc());
        modelMessageType.setAllowNew(false);
        modelMessageType.setAllowSave(true);
        modelMessageType.setAllowAdd(false);
        modelMessageType.setAllowRemove(false);
        modelMessageType.setAllowClear(false);
        modelMessageType.setAllowDelete(false);
        modelMessageType.setAllowSearch(true);
        modelMessageType.setAllowHubSearch(true);
        modelMessageType.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelMessageType.setCreateUI(li == null || !MessageGroup.P_MessageType.equals(li.getName()) );
        modelMessageType.setViewOnly(getViewOnly());
        // call MessageGroup.messageTypeModelCallback(MessageTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageGroup.class, MessageGroup.P_MessageType, modelMessageType);
    
        return modelMessageType;
    }
    public MessageRecordModel getMessageRecordsModel() {
        if (modelMessageRecords != null) return modelMessageRecords;
        modelMessageRecords = new MessageRecordModel(getMessageRecords());
        modelMessageRecords.setDisplayName("Message Record");
        modelMessageRecords.setPluralDisplayName("Message Records");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getMessageRecords())) {
            modelMessageRecords.setCreateUI(false);
        }
        modelMessageRecords.setForJfc(getForJfc());
        modelMessageRecords.setAllowNew(false);
        modelMessageRecords.setAllowSave(true);
        modelMessageRecords.setAllowAdd(true);
        modelMessageRecords.setAllowMove(false);
        modelMessageRecords.setAllowRemove(true);
        modelMessageRecords.setAllowDelete(false);
        modelMessageRecords.setAllowSearch(false);
        modelMessageRecords.setAllowHubSearch(true);
        modelMessageRecords.setAllowGotoEdit(true);
        modelMessageRecords.setViewOnly(getViewOnly());
        modelMessageRecords.setAllowNew(false);
        modelMessageRecords.setAllowTableFilter(true);
        modelMessageRecords.setAllowTableSorting(true);
        modelMessageRecords.setAllowMultiSelect(false);
        modelMessageRecords.setAllowCopy(false);
        modelMessageRecords.setAllowCut(false);
        modelMessageRecords.setAllowPaste(false);
        // call MessageGroup.messageRecordsModelCallback(MessageRecordModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageGroup.class, MessageGroup.P_MessageRecords, modelMessageRecords);
    
        return modelMessageRecords;
    }
    
    public MessageRecordModel getMessageRecordsSelectFromModel() {
        if (modelMessageRecordsSelectFrom != null) return modelMessageRecordsSelectFrom;
        modelMessageRecordsSelectFrom = new MessageRecordModel(getMessageRecordsSelectFromHub());
        modelMessageRecordsSelectFrom.setDisplayName("Message Record");
        modelMessageRecordsSelectFrom.setPluralDisplayName("Message Records");
        modelMessageRecordsSelectFrom.setForJfc(getForJfc());
        modelMessageRecordsSelectFrom.setAllowNew(false);
        modelMessageRecordsSelectFrom.setAllowSave(true);
        modelMessageRecordsSelectFrom.setAllowAdd(false);
        modelMessageRecordsSelectFrom.setAllowMove(false);
        modelMessageRecordsSelectFrom.setAllowRemove(false);
        modelMessageRecordsSelectFrom.setAllowDelete(false);
        modelMessageRecordsSelectFrom.setAllowSearch(true);
        modelMessageRecordsSelectFrom.setAllowHubSearch(true);
        modelMessageRecordsSelectFrom.setAllowGotoEdit(true);
        modelMessageRecordsSelectFrom.setViewOnly(getViewOnly());
        modelMessageRecordsSelectFrom.setAllowNew(false);
        modelMessageRecordsSelectFrom.setAllowTableFilter(true);
        modelMessageRecordsSelectFrom.setAllowTableSorting(true);
        modelMessageRecordsSelectFrom.setAllowCut(false);
        modelMessageRecordsSelectFrom.setAllowCopy(false);
        modelMessageRecordsSelectFrom.setAllowPaste(false);
        modelMessageRecordsSelectFrom.setAllowMultiSelect(true);
        new HubMakeCopy(getMessageRecords(), modelMessageRecordsSelectFrom.getMultiSelectHub());
        return modelMessageRecordsSelectFrom;
    }
    public MessageTypeSearchModel getMessageTypeSearchModel() {
        if (modelMessageTypeSearch != null) return modelMessageTypeSearch;
        modelMessageTypeSearch = new MessageTypeSearchModel();
        HubSelectDelegate.adoptWhereHub(modelMessageTypeSearch.getHub(), MessageGroup.P_MessageType, getHub());
        return modelMessageTypeSearch;
    }
    public MessageRecordSearchModel getMessageRecordsSearchModel() {
        if (modelMessageRecordsSearch != null) return modelMessageRecordsSearch;
        modelMessageRecordsSearch = new MessageRecordSearchModel();
        OAFilter filter = new OAInFilter(MessageGroupModel.this.getHub(), MessageGroupPP.messageType().messageRecords().pp);
        modelMessageRecordsSearch.getMessageRecordSearch().setExtraWhereFilter(filter);
        return modelMessageRecordsSearch;
    }
    
    public HubCopy<MessageGroup> createHubCopy() {
        Hub<MessageGroup> hubMessageGroupx = new Hub<>(MessageGroup.class);
        HubCopy<MessageGroup> hc = new HubCopy<>(getHub(), hubMessageGroupx, true);
        return hc;
    }
    public MessageGroupModel createCopy() {
        MessageGroupModel mod = new MessageGroupModel(createHubCopy().getHub());
        return mod;
    }
}

