// Generated by OABuilder

package com.messagedesigner.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.messagedesigner.delegate.ModelDelegate;
import com.messagedesigner.model.filter.*;
import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.filter.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.search.*;
import com.messagedesigner.model.search.*;
import com.messagedesigner.resource.Resource;
import com.messagedesigner.model.MessageGroupModel;
import com.messagedesigner.model.MessageRecordModel;
import com.messagedesigner.model.MessageTypeModel;
import com.messagedesigner.model.MessageTypeRecordModel;
import com.messagedesigner.model.oa.MessageGroup;
import com.messagedesigner.model.oa.MessageRecord;
import com.messagedesigner.model.oa.MessageType;
import com.messagedesigner.model.oa.MessageTypeRecord;
import com.messagedesigner.model.oa.propertypath.MessageRecordPP;
import com.messagedesigner.model.search.MessageGroupSearchModel;
import com.messagedesigner.model.search.MessageTypeRecordSearchModel;
import com.messagedesigner.model.search.MessageTypeSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class MessageRecordModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(MessageRecordModel.class.getName());
    
    // Hubs
    protected Hub<MessageRecord> hub;
    // selected messageRecords
    protected Hub<MessageRecord> hubMultiSelect;
    // detail hubs
    protected Hub<MessageGroup> hubMessageGroup;
    protected Hub<MessageType> hubMessageType;
    protected Hub<MessageTypeRecord> hubMessageTypeRecord;
    
    // AddHubs used for references
    protected Hub<MessageGroup> hubMessageGroupSelectFrom;
    protected Hub<MessageTypeRecord> hubMessageTypeRecordSelectFrom;
    
    // ObjectModels
    protected MessageGroupModel modelMessageGroup;
    protected MessageTypeModel modelMessageType;
    protected MessageTypeRecordModel modelMessageTypeRecord;
    
    // selectFrom
    protected MessageGroupModel modelMessageGroupSelectFrom;
    protected MessageTypeRecordModel modelMessageTypeRecordSelectFrom;
    
    // SearchModels used for references
    protected MessageGroupSearchModel modelMessageGroupSearch;
    protected MessageTypeSearchModel modelMessageTypeSearch;
    protected MessageTypeRecordSearchModel modelMessageTypeRecordSearch;
    
    public MessageRecordModel() {
        setDisplayName("Message Record");
        setPluralDisplayName("Message Records");
    }
    
    public MessageRecordModel(Hub<MessageRecord> hubMessageRecord) {
        this();
        if (hubMessageRecord != null) HubDelegate.setObjectClass(hubMessageRecord, MessageRecord.class);
        this.hub = hubMessageRecord;
    }
    public MessageRecordModel(MessageRecord messageRecord) {
        this();
        getHub().add(messageRecord);
        getHub().setPos(0);
    }
    
    public Hub<MessageRecord> getOriginalHub() {
        return getHub();
    }
    
    public Hub<MessageGroup> getMessageGroupHub() {
        if (hubMessageGroup != null) return hubMessageGroup;
        hubMessageGroup = getHub().getDetailHub(MessageRecord.P_MessageGroup);
        return hubMessageGroup;
    }
    public Hub<MessageType> getMessageTypeHub() {
        if (hubMessageType != null) return hubMessageType;
        // this is the owner, use detailHub
        hubMessageType = getHub().getDetailHub(MessageRecord.P_MessageType);
        return hubMessageType;
    }
    public Hub<MessageTypeRecord> getMessageTypeRecordHub() {
        if (hubMessageTypeRecord != null) return hubMessageTypeRecord;
        hubMessageTypeRecord = getHub().getDetailHub(MessageRecord.P_MessageTypeRecord);
        return hubMessageTypeRecord;
    }
    public Hub<MessageGroup> getMessageGroupSelectFromHub() {
        if (hubMessageGroupSelectFrom != null) return hubMessageGroupSelectFrom;
        hubMessageGroupSelectFrom = new Hub<MessageGroup>(MessageGroup.class);
        Hub<MessageGroup>hubMessageGroupSelectFrom1 = new Hub<MessageGroup>(MessageGroup.class);
        new HubMerger(getHub(), hubMessageGroupSelectFrom1, MessageRecordPP.messageType().messageGroups().pp, false);
        HubCombined<MessageGroup> hubCombined = new HubCombined(hubMessageGroupSelectFrom, hubMessageGroupSelectFrom1, getMessageGroupHub());
        hubMessageGroupSelectFrom.setLinkHub(getHub(), MessageRecord.P_MessageGroup); 
        return hubMessageGroupSelectFrom;
    }
    public Hub<MessageTypeRecord> getMessageTypeRecordSelectFromHub() {
        if (hubMessageTypeRecordSelectFrom != null) return hubMessageTypeRecordSelectFrom;
        hubMessageTypeRecordSelectFrom = new Hub<MessageTypeRecord>(MessageTypeRecord.class);
        Hub<MessageTypeRecord>hubMessageTypeRecordSelectFrom1 = new Hub<MessageTypeRecord>(MessageTypeRecord.class);
        new HubMerger(getHub(), hubMessageTypeRecordSelectFrom1, MessageRecordPP.messageType().messageSource().messageTypeRecords().pp, false);
        HubCombined<MessageTypeRecord> hubCombined = new HubCombined(hubMessageTypeRecordSelectFrom, hubMessageTypeRecordSelectFrom1, getMessageTypeRecordHub());
        hubMessageTypeRecordSelectFrom.setLinkHub(getHub(), MessageRecord.P_MessageTypeRecord); 
        return hubMessageTypeRecordSelectFrom;
    }
    public MessageRecord getMessageRecord() {
        return getHub().getAO();
    }
    
    public Hub<MessageRecord> getHub() {
        if (hub == null) {
            hub = new Hub<MessageRecord>(MessageRecord.class);
        }
        return hub;
    }
    
    public Hub<MessageRecord> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<MessageRecord>(MessageRecord.class);
        }
        return hubMultiSelect;
    }
    
    public MessageGroupModel getMessageGroupModel() {
        if (modelMessageGroup != null) return modelMessageGroup;
        modelMessageGroup = new MessageGroupModel(getMessageGroupHub());
        modelMessageGroup.setDisplayName("Message Group");
        modelMessageGroup.setPluralDisplayName("Message Groups");
        modelMessageGroup.setForJfc(getForJfc());
        modelMessageGroup.setAllowNew(false);
        modelMessageGroup.setAllowSave(true);
        modelMessageGroup.setAllowAdd(false);
        modelMessageGroup.setAllowRemove(true);
        modelMessageGroup.setAllowClear(true);
        modelMessageGroup.setAllowDelete(false);
        modelMessageGroup.setAllowSearch(true);
        modelMessageGroup.setAllowHubSearch(false);
        modelMessageGroup.setAllowGotoEdit(true);
        modelMessageGroup.setViewOnly(true);
        // call MessageRecord.messageGroupModelCallback(MessageGroupModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageRecord.class, MessageRecord.P_MessageGroup, modelMessageGroup);
    
        return modelMessageGroup;
    }
    public MessageTypeModel getMessageTypeModel() {
        if (modelMessageType != null) return modelMessageType;
        modelMessageType = new MessageTypeModel(getMessageTypeHub());
        modelMessageType.setDisplayName("Message Type");
        modelMessageType.setPluralDisplayName("Message Types");
        modelMessageType.setForJfc(getForJfc());
        modelMessageType.setAllowNew(false);
        modelMessageType.setAllowSave(true);
        modelMessageType.setAllowAdd(false);
        modelMessageType.setAllowRemove(false);
        modelMessageType.setAllowClear(false);
        modelMessageType.setAllowDelete(false);
        modelMessageType.setAllowSearch(true);
        modelMessageType.setAllowHubSearch(true);
        modelMessageType.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelMessageType.setCreateUI(li == null || !MessageRecord.P_MessageType.equals(li.getName()) );
        modelMessageType.setViewOnly(getViewOnly());
        // call MessageRecord.messageTypeModelCallback(MessageTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageRecord.class, MessageRecord.P_MessageType, modelMessageType);
    
        return modelMessageType;
    }
    public MessageTypeRecordModel getMessageTypeRecordModel() {
        if (modelMessageTypeRecord != null) return modelMessageTypeRecord;
        modelMessageTypeRecord = new MessageTypeRecordModel(getMessageTypeRecordHub());
        modelMessageTypeRecord.setDisplayName("Message Type Record");
        modelMessageTypeRecord.setPluralDisplayName("Message Type Records");
        modelMessageTypeRecord.setForJfc(getForJfc());
        modelMessageTypeRecord.setAllowNew(false);
        modelMessageTypeRecord.setAllowSave(true);
        modelMessageTypeRecord.setAllowAdd(false);
        modelMessageTypeRecord.setAllowRemove(false);
        modelMessageTypeRecord.setAllowClear(false);
        modelMessageTypeRecord.setAllowDelete(false);
        modelMessageTypeRecord.setAllowSearch(true);
        modelMessageTypeRecord.setAllowHubSearch(true);
        modelMessageTypeRecord.setAllowGotoEdit(true);
        modelMessageTypeRecord.setViewOnly(getViewOnly());
        // call MessageRecord.messageTypeRecordModelCallback(MessageTypeRecordModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageRecord.class, MessageRecord.P_MessageTypeRecord, modelMessageTypeRecord);
    
        return modelMessageTypeRecord;
    }
    
    public MessageGroupModel getMessageGroupSelectFromModel() {
        if (modelMessageGroupSelectFrom != null) return modelMessageGroupSelectFrom;
        modelMessageGroupSelectFrom = new MessageGroupModel(getMessageGroupSelectFromHub());
        modelMessageGroupSelectFrom.setDisplayName("Message Group");
        modelMessageGroupSelectFrom.setPluralDisplayName("Message Groups");
        modelMessageGroupSelectFrom.setForJfc(getForJfc());
        modelMessageGroupSelectFrom.setAllowNew(false);
        modelMessageGroupSelectFrom.setAllowSave(true);
        modelMessageGroupSelectFrom.setAllowAdd(false);
        modelMessageGroupSelectFrom.setAllowMove(false);
        modelMessageGroupSelectFrom.setAllowRemove(false);
        modelMessageGroupSelectFrom.setAllowDelete(false);
        modelMessageGroupSelectFrom.setAllowSearch(true);
        modelMessageGroupSelectFrom.setAllowHubSearch(true);
        modelMessageGroupSelectFrom.setAllowGotoEdit(true);
        modelMessageGroupSelectFrom.setViewOnly(getViewOnly());
        modelMessageGroupSelectFrom.setAllowNew(false);
        modelMessageGroupSelectFrom.setAllowTableFilter(true);
        modelMessageGroupSelectFrom.setAllowTableSorting(true);
        modelMessageGroupSelectFrom.setAllowCut(false);
        modelMessageGroupSelectFrom.setAllowCopy(false);
        modelMessageGroupSelectFrom.setAllowPaste(false);
        modelMessageGroupSelectFrom.setAllowMultiSelect(false);
        return modelMessageGroupSelectFrom;
    }
    public MessageTypeRecordModel getMessageTypeRecordSelectFromModel() {
        if (modelMessageTypeRecordSelectFrom != null) return modelMessageTypeRecordSelectFrom;
        modelMessageTypeRecordSelectFrom = new MessageTypeRecordModel(getMessageTypeRecordSelectFromHub());
        modelMessageTypeRecordSelectFrom.setDisplayName("Message Type Record");
        modelMessageTypeRecordSelectFrom.setPluralDisplayName("Message Type Records");
        modelMessageTypeRecordSelectFrom.setForJfc(getForJfc());
        modelMessageTypeRecordSelectFrom.setAllowNew(false);
        modelMessageTypeRecordSelectFrom.setAllowSave(true);
        modelMessageTypeRecordSelectFrom.setAllowAdd(false);
        modelMessageTypeRecordSelectFrom.setAllowMove(false);
        modelMessageTypeRecordSelectFrom.setAllowRemove(false);
        modelMessageTypeRecordSelectFrom.setAllowDelete(false);
        modelMessageTypeRecordSelectFrom.setAllowSearch(true);
        modelMessageTypeRecordSelectFrom.setAllowHubSearch(true);
        modelMessageTypeRecordSelectFrom.setAllowGotoEdit(true);
        modelMessageTypeRecordSelectFrom.setViewOnly(getViewOnly());
        modelMessageTypeRecordSelectFrom.setAllowNew(false);
        modelMessageTypeRecordSelectFrom.setAllowTableFilter(true);
        modelMessageTypeRecordSelectFrom.setAllowTableSorting(true);
        modelMessageTypeRecordSelectFrom.setAllowCut(false);
        modelMessageTypeRecordSelectFrom.setAllowCopy(false);
        modelMessageTypeRecordSelectFrom.setAllowPaste(false);
        modelMessageTypeRecordSelectFrom.setAllowMultiSelect(false);
        return modelMessageTypeRecordSelectFrom;
    }
    public MessageGroupSearchModel getMessageGroupSearchModel() {
        if (modelMessageGroupSearch != null) return modelMessageGroupSearch;
        modelMessageGroupSearch = new MessageGroupSearchModel();
        OAFilter filter = new OAInFilter(MessageRecordModel.this.getHub(), MessageRecordPP.messageType().messageGroups().pp);
        modelMessageGroupSearch.getMessageGroupSearch().setExtraWhereFilter(filter);
        return modelMessageGroupSearch;
    }
    public MessageTypeSearchModel getMessageTypeSearchModel() {
        if (modelMessageTypeSearch != null) return modelMessageTypeSearch;
        modelMessageTypeSearch = new MessageTypeSearchModel();
        HubSelectDelegate.adoptWhereHub(modelMessageTypeSearch.getHub(), MessageRecord.P_MessageType, getHub());
        return modelMessageTypeSearch;
    }
    public MessageTypeRecordSearchModel getMessageTypeRecordSearchModel() {
        if (modelMessageTypeRecordSearch != null) return modelMessageTypeRecordSearch;
        modelMessageTypeRecordSearch = new MessageTypeRecordSearchModel();
        OAFilter filter = new OAInFilter(MessageRecordModel.this.getHub(), MessageRecordPP.messageType().messageSource().messageTypeRecords().pp);
        modelMessageTypeRecordSearch.getMessageTypeRecordSearch().setExtraWhereFilter(filter);
        return modelMessageTypeRecordSearch;
    }
    
    public HubCopy<MessageRecord> createHubCopy() {
        Hub<MessageRecord> hubMessageRecordx = new Hub<>(MessageRecord.class);
        HubCopy<MessageRecord> hc = new HubCopy<>(getHub(), hubMessageRecordx, true);
        return hc;
    }
    public MessageRecordModel createCopy() {
        MessageRecordModel mod = new MessageRecordModel(createHubCopy().getHub());
        return mod;
    }
}

