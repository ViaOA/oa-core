// Generated by OABuilder

package com.messagedesigner.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.messagedesigner.delegate.ModelDelegate;
import com.messagedesigner.model.filter.*;
import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.filter.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.search.*;
import com.messagedesigner.model.search.*;
import com.messagedesigner.resource.Resource;
import com.messagedesigner.model.MessageTypeChangeModel;
import com.messagedesigner.model.MessageTypeModel;
import com.messagedesigner.model.oa.MessageType;
import com.messagedesigner.model.oa.MessageTypeChange;
import com.messagedesigner.model.search.MessageTypeSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class MessageTypeChangeModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(MessageTypeChangeModel.class.getName());
    
    // Hubs
    protected Hub<MessageTypeChange> hub;
    // selected messageTypeChanges
    protected Hub<MessageTypeChange> hubMultiSelect;
    // detail hubs
    protected Hub<MessageType> hubMessageType;
    
    // ObjectModels
    protected MessageTypeModel modelMessageType;
    
    // SearchModels used for references
    protected MessageTypeSearchModel modelMessageTypeSearch;
    
    public MessageTypeChangeModel() {
        setDisplayName("Message Type Change");
        setPluralDisplayName("Message Type Changes");
    }
    
    public MessageTypeChangeModel(Hub<MessageTypeChange> hubMessageTypeChange) {
        this();
        if (hubMessageTypeChange != null) HubDelegate.setObjectClass(hubMessageTypeChange, MessageTypeChange.class);
        this.hub = hubMessageTypeChange;
    }
    public MessageTypeChangeModel(MessageTypeChange messageTypeChange) {
        this();
        getHub().add(messageTypeChange);
        getHub().setPos(0);
    }
    
    public Hub<MessageTypeChange> getOriginalHub() {
        return getHub();
    }
    
    public Hub<MessageType> getMessageTypeHub() {
        if (hubMessageType != null) return hubMessageType;
        hubMessageType = getHub().getDetailHub(MessageTypeChange.P_MessageType);
        return hubMessageType;
    }
    public MessageTypeChange getMessageTypeChange() {
        return getHub().getAO();
    }
    
    public Hub<MessageTypeChange> getHub() {
        if (hub == null) {
            hub = new Hub<MessageTypeChange>(MessageTypeChange.class);
        }
        return hub;
    }
    
    public Hub<MessageTypeChange> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<MessageTypeChange>(MessageTypeChange.class);
        }
        return hubMultiSelect;
    }
    
    public MessageTypeModel getMessageTypeModel() {
        if (modelMessageType != null) return modelMessageType;
        modelMessageType = new MessageTypeModel(getMessageTypeHub());
        modelMessageType.setDisplayName("Message Type");
        modelMessageType.setPluralDisplayName("Message Types");
        modelMessageType.setForJfc(getForJfc());
        modelMessageType.setAllowNew(false);
        modelMessageType.setAllowSave(true);
        modelMessageType.setAllowAdd(false);
        modelMessageType.setAllowRemove(false);
        modelMessageType.setAllowClear(false);
        modelMessageType.setAllowDelete(false);
        modelMessageType.setAllowSearch(true);
        modelMessageType.setAllowHubSearch(true);
        modelMessageType.setAllowGotoEdit(true);
        modelMessageType.setViewOnly(true);
        // call MessageTypeChange.messageTypeModelCallback(MessageTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageTypeChange.class, MessageTypeChange.P_MessageType, modelMessageType);
    
        return modelMessageType;
    }
    
    public MessageTypeSearchModel getMessageTypeSearchModel() {
        if (modelMessageTypeSearch != null) return modelMessageTypeSearch;
        modelMessageTypeSearch = new MessageTypeSearchModel();
        HubSelectDelegate.adoptWhereHub(modelMessageTypeSearch.getHub(), MessageTypeChange.P_MessageType, getHub());
        return modelMessageTypeSearch;
    }
    
    public HubCopy<MessageTypeChange> createHubCopy() {
        Hub<MessageTypeChange> hubMessageTypeChangex = new Hub<>(MessageTypeChange.class);
        HubCopy<MessageTypeChange> hc = new HubCopy<>(getHub(), hubMessageTypeChangex, true);
        return hc;
    }
    public MessageTypeChangeModel createCopy() {
        MessageTypeChangeModel mod = new MessageTypeChangeModel(createHubCopy().getHub());
        return mod;
    }
}

