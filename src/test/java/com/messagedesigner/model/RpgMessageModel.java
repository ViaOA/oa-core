// Generated by OABuilder

package com.messagedesigner.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.messagedesigner.delegate.ModelDelegate;
import com.messagedesigner.model.filter.*;
import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.filter.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.search.*;
import com.messagedesigner.model.search.*;
import com.messagedesigner.resource.Resource;
import com.messagedesigner.model.MessageModel;
import com.messagedesigner.model.MessageTypeRecordModel;
import com.messagedesigner.model.RpgMessageModel;
import com.messagedesigner.model.filter.RpgMessageErrorFilterModel;
import com.messagedesigner.model.filter.RpgMessageOpenFilterModel;
import com.messagedesigner.model.oa.Message;
import com.messagedesigner.model.oa.MessageTypeRecord;
import com.messagedesigner.model.oa.RpgMessage;
import com.messagedesigner.model.search.MessageSearchModel;
import com.messagedesigner.model.search.MessageTypeRecordSearchModel;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class RpgMessageModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(RpgMessageModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      openFilteredHub;
      errorFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<RpgMessage> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<RpgMessage> hubUnfiltered;
    protected Hub<RpgMessage> hubOpenFilteredHub;
    protected Hub<RpgMessage> hubErrorFilteredHub;
    // main hub that points to hubUnfiltered, hubOpenFilteredHub, hubErrorFilteredHub
    protected Hub<RpgMessage> hub;
    // selected rpgMessages
    protected Hub<RpgMessage> hubMultiSelect;
    // detail hubs
    protected Hub<Message> hubMessage;
    protected Hub<MessageTypeRecord> hubMessageTypeRecord;
    
    // ObjectModels
    protected MessageModel modelMessage;
    protected MessageTypeRecordModel modelMessageTypeRecord;
    
    // SearchModels used for references
    protected MessageSearchModel modelMessageSearch;
    protected MessageTypeRecordSearchModel modelMessageTypeRecordSearch;
    
    // FilterModels
    protected RpgMessageOpenFilterModel modelRpgMessageOpenFilter;
    protected RpgMessageErrorFilterModel modelRpgMessageErrorFilter;
    
    public RpgMessageModel() {
        setDisplayName("Rpg Message");
        setPluralDisplayName("Rpg Messages");
    }
    
    public RpgMessageModel(Hub<RpgMessage> hubRpgMessage) {
        this();
        if (hubRpgMessage != null) HubDelegate.setObjectClass(hubRpgMessage, RpgMessage.class);
        this.hubOriginal = hubRpgMessage;
    }
    public RpgMessageModel(RpgMessage rpgMessage) {
        this();
        getHub().add(rpgMessage);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useOpenFilteredHub() {
        getHub().setSharedHub(getOpenFilteredHub(), true);
    }
    public void useErrorFilteredHub() {
        getHub().setSharedHub(getErrorFilteredHub(), true);
    }
    
    public Hub<RpgMessage> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<RpgMessage>(RpgMessage.class);
        }
        return hubOriginal;
    }
    
    public Hub<Message> getMessageHub() {
        if (hubMessage != null) return hubMessage;
        hubMessage = getHub().getDetailHub(RpgMessage.P_Message);
        return hubMessage;
    }
    public Hub<MessageTypeRecord> getMessageTypeRecordHub() {
        if (hubMessageTypeRecord != null) return hubMessageTypeRecord;
        hubMessageTypeRecord = getHub().getDetailHub(RpgMessage.P_MessageTypeRecord);
        return hubMessageTypeRecord;
    }
    public Hub<RpgMessage> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<RpgMessage>(RpgMessage.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<RpgMessage> getOpenFilteredHub() {
        if (hubOpenFilteredHub == null) {
            hubOpenFilteredHub = new Hub<RpgMessage>(RpgMessage.class);
        }
        return hubOpenFilteredHub;
    }
    public Hub<RpgMessage> getErrorFilteredHub() {
        if (hubErrorFilteredHub == null) {
            hubErrorFilteredHub = new Hub<RpgMessage>(RpgMessage.class);
        }
        return hubErrorFilteredHub;
    }
    
    public RpgMessage getRpgMessage() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<RpgMessage> getHub() {
        if (hub == null) {
            hub = new Hub<RpgMessage>(RpgMessage.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<RpgMessage> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<RpgMessage>(RpgMessage.class);
        }
        return hubMultiSelect;
    }
    
    public MessageModel getMessageModel() {
        if (modelMessage != null) return modelMessage;
        modelMessage = new MessageModel(getMessageHub());
        modelMessage.setDisplayName("Message");
        modelMessage.setPluralDisplayName("Messages");
        modelMessage.setForJfc(getForJfc());
        modelMessage.setAllowNew(false);
        modelMessage.setAllowSave(true);
        modelMessage.setAllowAdd(false);
        modelMessage.setAllowRemove(false);
        modelMessage.setAllowClear(false);
        modelMessage.setAllowDelete(false);
        modelMessage.setAllowSearch(true);
        modelMessage.setAllowHubSearch(true);
        modelMessage.setAllowGotoEdit(true);
        modelMessage.setViewOnly(true);
        // call RpgMessage.messageModelCallback(MessageModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(RpgMessage.class, RpgMessage.P_Message, modelMessage);
    
        return modelMessage;
    }
    public MessageTypeRecordModel getMessageTypeRecordModel() {
        if (modelMessageTypeRecord != null) return modelMessageTypeRecord;
        modelMessageTypeRecord = new MessageTypeRecordModel(getMessageTypeRecordHub());
        modelMessageTypeRecord.setDisplayName("Message Type Record");
        modelMessageTypeRecord.setPluralDisplayName("Message Type Records");
        modelMessageTypeRecord.setForJfc(getForJfc());
        modelMessageTypeRecord.setAllowNew(false);
        modelMessageTypeRecord.setAllowSave(true);
        modelMessageTypeRecord.setAllowAdd(false);
        modelMessageTypeRecord.setAllowRemove(true);
        modelMessageTypeRecord.setAllowClear(true);
        modelMessageTypeRecord.setAllowDelete(false);
        modelMessageTypeRecord.setAllowSearch(true);
        modelMessageTypeRecord.setAllowHubSearch(true);
        modelMessageTypeRecord.setAllowGotoEdit(true);
        modelMessageTypeRecord.setViewOnly(true);
        // call RpgMessage.messageTypeRecordModelCallback(MessageTypeRecordModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(RpgMessage.class, RpgMessage.P_MessageTypeRecord, modelMessageTypeRecord);
    
        return modelMessageTypeRecord;
    }
    
    public MessageSearchModel getMessageSearchModel() {
        if (modelMessageSearch != null) return modelMessageSearch;
        modelMessageSearch = new MessageSearchModel();
        HubSelectDelegate.adoptWhereHub(modelMessageSearch.getHub(), RpgMessage.P_Message, getHub());
        return modelMessageSearch;
    }
    public MessageTypeRecordSearchModel getMessageTypeRecordSearchModel() {
        if (modelMessageTypeRecordSearch != null) return modelMessageTypeRecordSearch;
        modelMessageTypeRecordSearch = new MessageTypeRecordSearchModel();
        HubSelectDelegate.adoptWhereHub(modelMessageTypeRecordSearch.getHub(), RpgMessage.P_MessageTypeRecord, getHub());
        return modelMessageTypeRecordSearch;
    }
    
    public RpgMessageOpenFilterModel getRpgMessageOpenFilterModel() {
        if (modelRpgMessageOpenFilter == null) {
            modelRpgMessageOpenFilter = new RpgMessageOpenFilterModel(getUnfilteredHub(), getOpenFilteredHub());
            new HubShareAO(getUnfilteredHub(), getOpenFilteredHub());
        }
        return modelRpgMessageOpenFilter;
    }
    public RpgMessageErrorFilterModel getRpgMessageErrorFilterModel() {
        if (modelRpgMessageErrorFilter == null) {
            modelRpgMessageErrorFilter = new RpgMessageErrorFilterModel(getUnfilteredHub(), getErrorFilteredHub());
            new HubShareAO(getUnfilteredHub(), getErrorFilteredHub());
        }
        return modelRpgMessageErrorFilter;
    }
    
    public HubCopy<RpgMessage> createHubCopy() {
        Hub<RpgMessage> hubRpgMessagex = new Hub<>(RpgMessage.class);
        HubCopy<RpgMessage> hc = new HubCopy<>(getHub(), hubRpgMessagex, true);
        return hc;
    }
    public RpgMessageModel createCopy() {
        RpgMessageModel mod = new RpgMessageModel(createHubCopy().getHub());
        return mod;
    }
}

