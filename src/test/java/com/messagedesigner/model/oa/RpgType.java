// Generated by OABuilder
package com.messagedesigner.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.messagedesigner.delegate.oa.*;
import com.messagedesigner.model.oa.filter.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.JsonType;
import com.messagedesigner.model.oa.MessageTypeColumn;
import com.messagedesigner.model.oa.RpgType;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "rpgType",
    pluralName = "RpgTypes",
    shortName = "rpt",
    displayName = "Rpg Type",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name",
    sortProperty = "seq"
)
@OATable(
    indexes = {
        @OAIndex(name = "RpgTypeJsonType", fkey = true, columns = { @OAIndexColumn(name = "JsonTypeId") })
    }
)
public class RpgType extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(RpgType.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_Name = "name";
    public static final String P_EncodeType = "encodeType";
    public static final String P_EncodeTypeAsString = "encodeTypeString";
    public static final String P_DefaultSize = "defaultSize";
    public static final String P_DefaultFormat = "defaultFormat";
    public static final String P_NullValueType = "nullValueType";
    public static final String P_NullValueTypeAsString = "nullValueTypeString";
    public static final String P_Note = "note";
    public static final String P_Samples = "samples";
    public static final String P_Seq = "seq";
     
     
    public static final String P_JsonType = "jsonType";
    public static final String P_MessageTypeColumns = "messageTypeColumns";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile int encodeType;
    public static enum EncodeType {
        None("None"),
        PackedDecimal("Packed Decimal"),
        ZonedDecimal("Zoned Decimal"),
        Integer("Integer"),
        Float("Float");

        private String display;
        EncodeType(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int ENCODETYPE_None = 0;
    public static final int ENCODETYPE_PackedDecimal = 1;
    public static final int ENCODETYPE_ZonedDecimal = 2;
    public static final int ENCODETYPE_Integer = 3;
    public static final int ENCODETYPE_Float = 4;
    public static final Hub<String> hubEncodeType;
    static {
        hubEncodeType = new Hub<String>(String.class);
        hubEncodeType.addElement("None");
        hubEncodeType.addElement("Packed Decimal");
        hubEncodeType.addElement("Zoned Decimal");
        hubEncodeType.addElement("Integer");
        hubEncodeType.addElement("Float");
    }
    protected volatile int defaultSize;
    protected volatile String defaultFormat;
    protected volatile int nullValueType;
    public static enum NullValueType {
        Default("Default"),
        Zero("Zero"),
        Empty("Empty");

        private String display;
        NullValueType(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int NULLVALUETYPE_Default = 0;
    public static final int NULLVALUETYPE_Zero = 1;
    public static final int NULLVALUETYPE_Empty = 2;
    public static final Hub<String> hubNullValueType;
    static {
        hubNullValueType = new Hub<String>(String.class);
        hubNullValueType.addElement("Default");
        hubNullValueType.addElement("Zero");
        hubNullValueType.addElement("Empty");
    }
    protected volatile String note;
    protected volatile String samples;
    protected volatile int seq;
     
    // Links to other objects.
    protected volatile transient JsonType jsonType;
     
    public RpgType() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public RpgType(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 25, displayLength = 10, columnLength = 12)
    @OAColumn(maxLength = 25)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayName = "Encode Type", trackPrimitiveNull = false, displayLength = 6, columnLength = 13, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getEncodeType() {
        return encodeType;
    }
    public void setEncodeType(int newValue) {
        int old = encodeType;
        fireBeforePropertyChange(P_EncodeType, old, newValue);
        this.encodeType = newValue;
        firePropertyChange(P_EncodeType, old, this.encodeType);
        firePropertyChange(P_EncodeType + "String");
        firePropertyChange(P_EncodeType + "Enum");
    }

    public String getEncodeTypeString() {
        EncodeType encodeType = getEncodeTypeEnum();
        if (encodeType == null) return null;
        return encodeType.name();
    }
    public void setEncodeTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            EncodeType encodeType = EncodeType.valueOf(val);
            if (encodeType != null) x = encodeType.ordinal();
        }
        if (x < 0) setNull(P_EncodeType);
        else setEncodeType(x);
    }


    public EncodeType getEncodeTypeEnum() {
        if (isNull(P_EncodeType)) return null;
        final int val = getEncodeType();
        if (val < 0 || val >= EncodeType.values().length) return null;
        return EncodeType.values()[val];
    }

    public void setEncodeTypeEnum(EncodeType val) {
        if (val == null) {
            setNull(P_EncodeType);
        }
        else {
            setEncodeType(val.ordinal());
        }
    }
    @OAProperty(displayName = "Default Size", displayLength = 6, columnLength = 12)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getDefaultSize() {
        return defaultSize;
    }
    public void setDefaultSize(int newValue) {
        int old = defaultSize;
        fireBeforePropertyChange(P_DefaultSize, old, newValue);
        this.defaultSize = newValue;
        firePropertyChange(P_DefaultSize, old, this.defaultSize);
    }
    @OAProperty(displayName = "Default Format", maxLength = 30, displayLength = 15, columnLength = 16)
    @OAColumn(maxLength = 30)
    public String getDefaultFormat() {
        return defaultFormat;
    }
    public void setDefaultFormat(String newValue) {
        String old = defaultFormat;
        fireBeforePropertyChange(P_DefaultFormat, old, newValue);
        this.defaultFormat = newValue;
        firePropertyChange(P_DefaultFormat, old, this.defaultFormat);
    }
    @OAProperty(displayName = "Null Value Type", trackPrimitiveNull = false, displayLength = 6, columnLength = 15, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getNullValueType() {
        return nullValueType;
    }
    public void setNullValueType(int newValue) {
        int old = nullValueType;
        fireBeforePropertyChange(P_NullValueType, old, newValue);
        this.nullValueType = newValue;
        firePropertyChange(P_NullValueType, old, this.nullValueType);
        firePropertyChange(P_NullValueType + "String");
        firePropertyChange(P_NullValueType + "Enum");
    }

    public String getNullValueTypeString() {
        NullValueType nullValueType = getNullValueTypeEnum();
        if (nullValueType == null) return null;
        return nullValueType.name();
    }
    public void setNullValueTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            NullValueType nullValueType = NullValueType.valueOf(val);
            if (nullValueType != null) x = nullValueType.ordinal();
        }
        if (x < 0) setNull(P_NullValueType);
        else setNullValueType(x);
    }


    public NullValueType getNullValueTypeEnum() {
        if (isNull(P_NullValueType)) return null;
        final int val = getNullValueType();
        if (val < 0 || val >= NullValueType.values().length) return null;
        return NullValueType.values()[val];
    }

    public void setNullValueTypeEnum(NullValueType val) {
        if (val == null) {
            setNull(P_NullValueType);
        }
        else {
            setNullValueType(val.ordinal());
        }
    }
    @OAProperty(displayLength = 30, columnLength = 20)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNote() {
        return note;
    }
    public void setNote(String newValue) {
        String old = note;
        fireBeforePropertyChange(P_Note, old, newValue);
        this.note = newValue;
        firePropertyChange(P_Note, old, this.note);
    }
    @OAProperty(displayLength = 30, columnLength = 20)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getSamples() {
        return samples;
    }
    public void setSamples(String newValue) {
        String old = samples;
        fireBeforePropertyChange(P_Samples, old, newValue);
        this.samples = newValue;
        firePropertyChange(P_Samples, old, this.samples);
    }
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OAOne(
        displayName = "Json Type", 
        reverseName = JsonType.P_RpgTypes, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"JsonTypeId"})
    public JsonType getJsonType() {
        if (jsonType == null) {
            jsonType = (JsonType) getObject(P_JsonType);
        }
        return jsonType;
    }
    public void setJsonType(JsonType newValue) {
        JsonType old = this.jsonType;
        fireBeforePropertyChange(P_JsonType, old, newValue);
        this.jsonType = newValue;
        firePropertyChange(P_JsonType, old, this.jsonType);
    }
    @OAMany(
        displayName = "Message Type Columns", 
        toClass = MessageTypeColumn.class, 
        reverseName = MessageTypeColumn.P_RpgType, 
        createMethod = false
    )
    private Hub<MessageTypeColumn> getMessageTypeColumns() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.encodeType = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RpgType.P_EncodeType, true);
        }
        this.defaultSize = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RpgType.P_DefaultSize, true);
        }
        this.defaultFormat = rs.getString(6);
        this.nullValueType = (int) rs.getInt(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RpgType.P_NullValueType, true);
        }
        this.note = rs.getString(8);
        this.samples = rs.getString(9);
        this.seq = (int) rs.getInt(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RpgType.P_Seq, true);
        }
        int jsonTypeFkey = rs.getInt(11);
        if (!rs.wasNull() && jsonTypeFkey > 0) {
            setProperty(P_JsonType, new OAObjectKey(jsonTypeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 11) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
