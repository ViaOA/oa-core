// Generated by OABuilder
package com.messagedesigner.model.oa.propertypath;
 
import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.MessageTypeRecord;
import com.messagedesigner.model.oa.propertypath.MessageRecordPPx;
import com.messagedesigner.model.oa.propertypath.MessageSourcePPx;
import com.messagedesigner.model.oa.propertypath.MessageTypeColumnPPx;
import com.messagedesigner.model.oa.propertypath.RpgMessagePPx;
import com.messagedesigner.model.oa.propertypath.RpgProgramPPx;
 
public class MessageTypeRecordPP {
    private static MessageRecordPPx messageRecords;
    private static MessageSourcePPx messageSource;
    private static MessageTypeColumnPPx messageTypeColumns;
    private static RpgMessagePPx rpgMessages2;
    private static RpgProgramPPx rpgPrograms;
    private static MessageTypeColumnPPx subCodeColumn;
     

    public static MessageRecordPPx messageRecords() {
        if (messageRecords == null) messageRecords = new MessageRecordPPx(MessageTypeRecord.P_MessageRecords);
        return messageRecords;
    }

    public static MessageSourcePPx messageSource() {
        if (messageSource == null) messageSource = new MessageSourcePPx(MessageTypeRecord.P_MessageSource);
        return messageSource;
    }

    public static MessageTypeColumnPPx messageTypeColumns() {
        if (messageTypeColumns == null) messageTypeColumns = new MessageTypeColumnPPx(MessageTypeRecord.P_MessageTypeColumns);
        return messageTypeColumns;
    }

    public static RpgMessagePPx rpgMessages2() {
        if (rpgMessages2 == null) rpgMessages2 = new RpgMessagePPx(MessageTypeRecord.P_RpgMessages2);
        return rpgMessages2;
    }

    public static RpgProgramPPx rpgPrograms() {
        if (rpgPrograms == null) rpgPrograms = new RpgProgramPPx(MessageTypeRecord.P_RpgPrograms);
        return rpgPrograms;
    }

    public static MessageTypeColumnPPx subCodeColumn() {
        if (subCodeColumn == null) subCodeColumn = new MessageTypeColumnPPx(MessageTypeRecord.P_SubCodeColumn);
        return subCodeColumn;
    }

    public static String id() {
        String s = MessageTypeRecord.P_Id;
        return s;
    }

    public static String created() {
        String s = MessageTypeRecord.P_Created;
        return s;
    }

    public static String code() {
        String s = MessageTypeRecord.P_Code;
        return s;
    }

    public static String subCode() {
        String s = MessageTypeRecord.P_SubCode;
        return s;
    }

    public static String name() {
        String s = MessageTypeRecord.P_Name;
        return s;
    }

    public static String description() {
        String s = MessageTypeRecord.P_Description;
        return s;
    }

    public static String repeatingCount() {
        String s = MessageTypeRecord.P_RepeatingCount;
        return s;
    }

    public static String statusType() {
        String s = MessageTypeRecord.P_StatusType;
        return s;
    }

    public static String notes() {
        String s = MessageTypeRecord.P_Notes;
        return s;
    }

    public static String disable() {
        String s = MessageTypeRecord.P_Disable;
        return s;
    }

    public static String seq() {
        String s = MessageTypeRecord.P_Seq;
        return s;
    }

    public static String layout() {
        String s = MessageTypeRecord.P_Layout;
        return s;
    }

    public static String layoutLoaded() {
        String s = MessageTypeRecord.P_LayoutLoaded;
        return s;
    }

    public static String followUp() {
        String s = MessageTypeRecord.P_FollowUp;
        return s;
    }

    public static String lock() {
        String s = MessageTypeRecord.P_Lock;
        return s;
    }

    public static String enableLoadLayout() {
        String s = MessageTypeRecord.P_EnableLoadLayout;
        return s;
    }

    public static String isDefined() {
        String s = MessageTypeRecord.P_IsDefined;
        return s;
    }

    public static String pojoCode() {
        String s = MessageTypeRecord.P_PojoCode;
        return s;
    }

    public static String display() {
        String s = MessageTypeRecord.P_Display;
        return s;
    }

    public static String fixLoadEnabled() {
        String s = MessageTypeRecord.P_FixLoadEnabled;
        return s;
    }

    public static String createFromLayoutEnabled() {
        String s = MessageTypeRecord.P_CreateFromLayoutEnabled;
        return s;
    }

    public static String update() {
        String s = "update";
        return s;
    }

    public static String fixLayout() {
        String s = "fixLayout";
        return s;
    }

    public static String createFromLayout() {
        String s = "createFromLayout";
        return s;
    }

    public static String unlock() {
        String s = "unlock";
        return s;
    }

    public static String pp() {
        return ""; // this
    }
}
 
