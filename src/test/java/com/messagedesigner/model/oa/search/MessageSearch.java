// Generated by OABuilder
package com.messagedesigner.model.oa.search;

import java.util.logging.*;

import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.Message;
import com.messagedesigner.model.oa.MessageType;
import com.messagedesigner.model.oa.propertypath.MessagePP;
import com.messagedesigner.model.oa.search.MessageSearch;
import com.messagedesigner.model.oa.search.MessageTypeSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class MessageSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MessageSearch.class.getName());
    public static final String P_MessageTypeMessageRecordsMessageTypeRecordCode = "MessageTypeMessageRecordsMessageTypeRecordCode";
    public static final String P_Processed = "Processed";
    public static final String P_Processed2 = "Processed2";
    public static final String P_ProcessedUseNull = "ProcessedUseNull";
    public static final String P_ProcessedUseNotNull = "ProcessedUseNotNull";
    public static final String P_Cancelled = "Cancelled";
    public static final String P_Cancelled2 = "Cancelled2";
    public static final String P_CancelledUseNull = "CancelledUseNull";
    public static final String P_CancelledUseNotNull = "CancelledUseNotNull";
    public static final String P_SeqNumber = "SeqNumber";
    public static final String P_SeqNumber2 = "SeqNumber2";
    public static final String P_SeqNumberUseNull = "SeqNumberUseNull";
    public static final String P_SeqNumberUseNotNull = "SeqNumberUseNotNull";
    public static final String P_Created = "Created";
    public static final String P_Created2 = "Created2";
    public static final String P_Json = "Json";
    public static final String P_JsonUseNull = "JsonUseNull";
    public static final String P_JsonUseNotNull = "JsonUseNotNull";
    public static final String P_MessageType = "MessageType";
    public static final String P_MessageTypeUseNull = "MessageTypeUseNull";
    public static final String P_MessageTypeUseNotNull = "MessageTypeUseNotNull";
    public static final String P_UseMessageTypeSearch = "UseMessageTypeSearch";
    public static final String P_MaxResults = "MaxResults";

    protected String messageTypeMessageRecordsMessageTypeRecordCode;
    protected OADateTime processed;
    protected OADateTime processed2;
    protected boolean processedUseNull;
    protected boolean processedUseNotNull;
    protected OADateTime cancelled;
    protected OADateTime cancelled2;
    protected boolean cancelledUseNull;
    protected boolean cancelledUseNotNull;
    protected long seqNumber;
    protected long seqNumber2;
    protected boolean seqNumberUseNull;
    protected boolean seqNumberUseNotNull;
    protected OADateTime created;
    protected OADateTime created2;
    protected String json;
    protected boolean jsonUseNull;
    protected boolean jsonUseNotNull;
    protected MessageType messageType;
    protected boolean messageTypeUseNull;
    protected boolean messageTypeUseNotNull;
    protected boolean useMessageTypeSearch;
    protected MessageTypeSearch searchMessageType;
    protected int maxResults;

    public String getMessageTypeMessageRecordsMessageTypeRecordCode() {
        return messageTypeMessageRecordsMessageTypeRecordCode;
    }
    public void setMessageTypeMessageRecordsMessageTypeRecordCode(String newValue) {
        String old = messageTypeMessageRecordsMessageTypeRecordCode;
        fireBeforePropertyChange(P_MessageTypeMessageRecordsMessageTypeRecordCode, old, newValue);
        this.messageTypeMessageRecordsMessageTypeRecordCode = newValue;
        firePropertyChange(P_MessageTypeMessageRecordsMessageTypeRecordCode, old, this.messageTypeMessageRecordsMessageTypeRecordCode);
    }
      

    public OADateTime getProcessed() {
        return processed;
    }
    public void setProcessed(OADateTime newValue) {
        OADateTime old = processed;
        fireBeforePropertyChange(P_Processed, old, newValue);
        this.processed = newValue;
        firePropertyChange(P_Processed, old, this.processed);
        if (isLoading()) return;
        if (processed != null) {
            if (processed2 == null) setProcessed2(this.processed.addDays(1));
            else if (processed.compareTo(processed2) > 0) setProcessed2(this.processed.addDays(1));
        }
    } 
    public OADateTime getProcessed2() {
        return processed2;
    }
    public void setProcessed2(OADateTime newValue) {
        OADateTime old = processed2;
        fireBeforePropertyChange(P_Processed2, old, newValue);
        this.processed2 = newValue;
        firePropertyChange(P_Processed2, old, this.processed2);
        if (processed != null && processed2 != null) {
            if (processed.compareTo(processed2) > 0) setProcessed(this.processed2);
        }
    }
    public boolean getProcessedUseNull() {
        return processedUseNull;
    }
    public void setProcessedUseNull(boolean newValue) {
        boolean old = this.processedUseNull;
        this.processedUseNull = newValue;
        firePropertyChange(P_ProcessedUseNull, old, this.processedUseNull);
    }
    public boolean getProcessedUseNotNull() {
        return processedUseNotNull;
    }
    public void setProcessedUseNotNull(boolean newValue) {
        boolean old = this.processedUseNotNull;
        this.processedUseNotNull = newValue;
        firePropertyChange(P_ProcessedUseNotNull, old, this.processedUseNotNull);
    }

    public OADateTime getCancelled() {
        return cancelled;
    }
    public void setCancelled(OADateTime newValue) {
        OADateTime old = cancelled;
        fireBeforePropertyChange(P_Cancelled, old, newValue);
        this.cancelled = newValue;
        firePropertyChange(P_Cancelled, old, this.cancelled);
        if (isLoading()) return;
        if (cancelled != null) {
            if (cancelled2 == null) setCancelled2(this.cancelled.addDays(1));
            else if (cancelled.compareTo(cancelled2) > 0) setCancelled2(this.cancelled.addDays(1));
        }
    } 
    public OADateTime getCancelled2() {
        return cancelled2;
    }
    public void setCancelled2(OADateTime newValue) {
        OADateTime old = cancelled2;
        fireBeforePropertyChange(P_Cancelled2, old, newValue);
        this.cancelled2 = newValue;
        firePropertyChange(P_Cancelled2, old, this.cancelled2);
        if (cancelled != null && cancelled2 != null) {
            if (cancelled.compareTo(cancelled2) > 0) setCancelled(this.cancelled2);
        }
    }
    public boolean getCancelledUseNull() {
        return cancelledUseNull;
    }
    public void setCancelledUseNull(boolean newValue) {
        boolean old = this.cancelledUseNull;
        this.cancelledUseNull = newValue;
        firePropertyChange(P_CancelledUseNull, old, this.cancelledUseNull);
    }
    public boolean getCancelledUseNotNull() {
        return cancelledUseNotNull;
    }
    public void setCancelledUseNotNull(boolean newValue) {
        boolean old = this.cancelledUseNotNull;
        this.cancelledUseNotNull = newValue;
        firePropertyChange(P_CancelledUseNotNull, old, this.cancelledUseNotNull);
    }

    public long getSeqNumber() {
        return seqNumber;
    }
    public void setSeqNumber(long newValue) {
        long old = seqNumber;
        fireBeforePropertyChange(P_SeqNumber, old, newValue);
        this.seqNumber = newValue;
        firePropertyChange(P_SeqNumber, old, this.seqNumber);
        if (isLoading()) return;
        if (seqNumber > seqNumber2) setSeqNumber2(this.seqNumber);
    } 
    public long getSeqNumber2() {
        return seqNumber2;
    }
    public void setSeqNumber2(long newValue) {
        long old = seqNumber2;
        fireBeforePropertyChange(P_SeqNumber2, old, newValue);
        this.seqNumber2 = newValue;
        firePropertyChange(P_SeqNumber2, old, this.seqNumber2);
        if (isLoading()) return;
        if (seqNumber > seqNumber2) setSeqNumber(this.seqNumber2);
    }
    public boolean getSeqNumberUseNull() {
        return seqNumberUseNull;
    }
    public void setSeqNumberUseNull(boolean newValue) {
        boolean old = this.seqNumberUseNull;
        this.seqNumberUseNull = newValue;
        firePropertyChange(P_SeqNumberUseNull, old, this.seqNumberUseNull);
    }
    public boolean getSeqNumberUseNotNull() {
        return seqNumberUseNotNull;
    }
    public void setSeqNumberUseNotNull(boolean newValue) {
        boolean old = this.seqNumberUseNotNull;
        this.seqNumberUseNotNull = newValue;
        firePropertyChange(P_SeqNumberUseNotNull, old, this.seqNumberUseNotNull);
    }

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
        if (isLoading()) return;
        if (created != null) {
            if (created2 == null) setCreated2(this.created.addDays(1));
            else if (created.compareTo(created2) > 0) setCreated2(this.created.addDays(1));
        }
    } 
    public OADateTime getCreated2() {
        return created2;
    }
    public void setCreated2(OADateTime newValue) {
        OADateTime old = created2;
        fireBeforePropertyChange(P_Created2, old, newValue);
        this.created2 = newValue;
        firePropertyChange(P_Created2, old, this.created2);
        if (created != null && created2 != null) {
            if (created.compareTo(created2) > 0) setCreated(this.created2);
        }
    }

    public String getJson() {
        return json;
    }
    public void setJson(String newValue) {
        String old = json;
        fireBeforePropertyChange(P_Json, old, newValue);
        this.json = newValue;
        firePropertyChange(P_Json, old, this.json);
    }
      
    public boolean getJsonUseNull() {
        return jsonUseNull;
    }
    public void setJsonUseNull(boolean newValue) {
        boolean old = this.jsonUseNull;
        this.jsonUseNull = newValue;
        firePropertyChange(P_JsonUseNull, old, this.jsonUseNull);
    }
    public boolean getJsonUseNotNull() {
        return jsonUseNotNull;
    }
    public void setJsonUseNotNull(boolean newValue) {
        boolean old = this.jsonUseNotNull;
        this.jsonUseNotNull = newValue;
        firePropertyChange(P_JsonUseNotNull, old, this.jsonUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public MessageType getMessageType() {
        if (messageType == null) {
            messageType = (MessageType) getObject(P_MessageType);
        }
        return messageType;
    }
    public void setMessageType(MessageType newValue) {
        MessageType old = this.messageType;
        this.messageType = newValue;
        firePropertyChange(P_MessageType, old, this.messageType);
    }
    public boolean getMessageTypeUseNull() {
        return messageTypeUseNull;
    }
    public void setMessageTypeUseNull(boolean newValue) {
        boolean old = this.messageTypeUseNull;
        this.messageTypeUseNull = newValue;
        firePropertyChange(P_MessageTypeUseNull, old, this.messageTypeUseNull);
    }
    public boolean getMessageTypeUseNotNull() {
        return messageTypeUseNotNull;
    }
    public void setMessageTypeUseNotNull(boolean newValue) {
        boolean old = this.messageTypeUseNotNull;
        this.messageTypeUseNotNull = newValue;
        firePropertyChange(P_MessageTypeUseNotNull, old, this.messageTypeUseNotNull);
    }
    public boolean getUseMessageTypeSearch() {
        return useMessageTypeSearch;
    }
    public void setUseMessageTypeSearch(boolean newValue) {
        boolean old = this.useMessageTypeSearch;
        this.useMessageTypeSearch = newValue;
        firePropertyChange(P_UseMessageTypeSearch, old, this.useMessageTypeSearch);
    }
    public MessageTypeSearch getMessageTypeSearch() {
        return this.searchMessageType;
    }
    public void setMessageTypeSearch(MessageTypeSearch newValue) {
        this.searchMessageType = newValue;
    }

    public void reset() {
        setMessageTypeMessageRecordsMessageTypeRecordCode(null);
        setProcessed(null);
        setProcessed2(null);
        setProcessedUseNull(false);
        setProcessedUseNotNull(false);
        setCancelled(null);
        setCancelled2(null);
        setCancelledUseNull(false);
        setCancelledUseNotNull(false);
        setSeqNumber(0);
        setNull(P_SeqNumber);
        setSeqNumber2(0);
        setNull(P_SeqNumber2);
        setSeqNumberUseNull(false);
        setSeqNumberUseNotNull(false);
        setCreated(null);
        setCreated2(null);
        setJson(null);
        setJsonUseNull(false);
        setJsonUseNotNull(false);
        setMessageType(null);
        setMessageTypeUseNull(false);
        setMessageTypeUseNotNull(false);
        setUseMessageTypeSearch(false);
    }

    public boolean isDataEntered() {
        if (getMessageTypeMessageRecordsMessageTypeRecordCode() != null) return true;
        if (getProcessed() != null) return true;
        if (getProcessedUseNull()) return true;
        if (getProcessedUseNull()) return true;
        if (getCancelled() != null) return true;
        if (getCancelledUseNull()) return true;
        if (getCancelledUseNull()) return true;
        if (!isNull(P_SeqNumber)) return true;
        if (getSeqNumberUseNull()) return true;
        if (getSeqNumberUseNotNull()) return true;
        if (getCreated() != null) return true;
        if (getJson() != null) return true;
        if (getJsonUseNull()) return true;
        if (getJsonUseNotNull()) return true;
        if (getMessageType() != null) return true;
        if (getMessageTypeUseNull()) return true;
        if (getMessageTypeUseNotNull()) return true;
        if (getUseMessageTypeSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Message> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Message> f = new OAQueryFilter<Message>(Message.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Message> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Message> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Message> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (OAString.isNotEmpty(this.messageTypeMessageRecordsMessageTypeRecordCode)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(messageTypeMessageRecordsMessageTypeRecordCode);
            if (value.indexOf("%") >= 0) {
                sql += MessagePP.messageType().messageRecords().messageTypeRecord().code() + " LIKE ?";
            }
            else {
                sql += MessagePP.messageType().messageRecords().messageTypeRecord().code() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (processedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Message.P_Processed + " = null";
        }
        else if (processedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Message.P_Processed + " != null";
        }
        else if (processed != null) {
            if (sql.length() > 0) sql += " AND ";
            if (processed2 != null && !processed.equals(processed2)) {
                sql += Message.P_Processed + " >= ?";
                args = OAArray.add(Object.class, args, this.processed);
                sql += " AND " + Message.P_Processed + " <= ?";
                args = OAArray.add(Object.class, args, this.processed2);
            }
            else {
                sql += Message.P_Processed + " = ?";
                args = OAArray.add(Object.class, args, this.processed);
            }
        }
        if (cancelledUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Message.P_Cancelled + " = null";
        }
        else if (cancelledUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Message.P_Cancelled + " != null";
        }
        else if (cancelled != null) {
            if (sql.length() > 0) sql += " AND ";
            if (cancelled2 != null && !cancelled.equals(cancelled2)) {
                sql += Message.P_Cancelled + " >= ?";
                args = OAArray.add(Object.class, args, this.cancelled);
                sql += " AND " + Message.P_Cancelled + " <= ?";
                args = OAArray.add(Object.class, args, this.cancelled2);
            }
            else {
                sql += Message.P_Cancelled + " = ?";
                args = OAArray.add(Object.class, args, this.cancelled);
            }
        }
        if (seqNumberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Message.P_SeqNumber + " = null";
        }
        else if (seqNumberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Message.P_SeqNumber + " != null";
        }
        else if (!isNull(P_SeqNumber)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_SeqNumber2) && seqNumber != seqNumber2) {
                sql += Message.P_SeqNumber + " >= ?";
                args = OAArray.add(Object.class, args, getSeqNumber());
                sql += " AND " + Message.P_SeqNumber + " <= ?";
                args = OAArray.add(Object.class, args, getSeqNumber2());
            }
            else {
                sql += Message.P_SeqNumber + " = ?";
                args = OAArray.add(Object.class, args, getSeqNumber());
            }
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            if (created2 != null && !created.equals(created2)) {
                sql += Message.P_Created + " >= ?";
                args = OAArray.add(Object.class, args, this.created);
                sql += " AND " + Message.P_Created + " <= ?";
                args = OAArray.add(Object.class, args, this.created2);
            }
            else {
                sql += Message.P_Created + " = ?";
                args = OAArray.add(Object.class, args, this.created);
            }
        }
        if (jsonUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + Message.P_Json + " = null OR " + Message.P_Json + " == '')";
        }
        else if (jsonUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Message.P_Json + " != null";
        }
        else if (OAString.isNotEmpty(this.json)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(json);
            if (value.indexOf("%") >= 0) {
                sql += Message.P_Json + " LIKE ?";
            }
            else {
                sql += Message.P_Json + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (messageTypeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessagePP.messageType().pp + " = null";
        }
        if (messageTypeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessagePP.messageType().pp + " != null";
        }
        else if (!useMessageTypeSearch && getMessageType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessagePP.messageType().pp + " = ?";
            args = OAArray.add(Object.class, args, getMessageType());
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Message> select = new OASelect<Message>(Message.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useMessageTypeSearch && getMessageTypeSearch() != null) {
            getMessageTypeSearch().appendSelect(MessagePP.messageType().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (OAString.isNotEmpty(this.messageTypeMessageRecordsMessageTypeRecordCode)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(messageTypeMessageRecordsMessageTypeRecordCode);
            if (value.indexOf("%") >= 0) {
                sql += prefix + MessagePP.messageType().messageRecords().messageTypeRecord().code() + " LIKE ?";
            }
            else {
                sql += prefix + MessagePP.messageType().messageRecords().messageTypeRecord().code() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (processedUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Message.P_Processed + " = null";
        }
        else if (processedUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Message.P_Processed + " != null";
        }
        else if (processed != null) {
            if (sql.length() > 0) sql += " AND ";
            if (processed2 != null && !processed.equals(processed2)) {
                sql += prefix + Message.P_Processed + " >= ?";
                args = OAArray.add(Object.class, args, this.processed);
                sql += " AND " + prefix + Message.P_Processed + " <= ?";
                args = OAArray.add(Object.class, args, this.processed2);
            }
            else {
                sql += prefix + Message.P_Processed + " = ?";
                args = OAArray.add(Object.class, args, this.processed);
            }
        }
        if (cancelledUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Message.P_Cancelled + " = null";
        }
        else if (cancelledUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Message.P_Cancelled + " != null";
        }
        else if (cancelled != null) {
            if (sql.length() > 0) sql += " AND ";
            if (cancelled2 != null && !cancelled.equals(cancelled2)) {
                sql += prefix + Message.P_Cancelled + " >= ?";
                args = OAArray.add(Object.class, args, this.cancelled);
                sql += " AND " + prefix + Message.P_Cancelled + " <= ?";
                args = OAArray.add(Object.class, args, this.cancelled2);
            }
            else {
                sql += prefix + Message.P_Cancelled + " = ?";
                args = OAArray.add(Object.class, args, this.cancelled);
            }
        }
        if (seqNumberUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Message.P_SeqNumber + " = null";
        }
        else if (seqNumberUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Message.P_SeqNumber + " != null";
        }
        else if (!isNull(P_SeqNumber)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_SeqNumber2) && seqNumber != seqNumber2) {
                sql += prefix + Message.P_SeqNumber + " >= ?";
                args = OAArray.add(Object.class, args, getSeqNumber());
                sql += " AND " + prefix + Message.P_SeqNumber + " <= ?";
                args = OAArray.add(Object.class, args, getSeqNumber2());
            }
            else {
                sql += prefix + Message.P_SeqNumber + " = ?";
                args = OAArray.add(Object.class, args, getSeqNumber());
            }
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            if (created2 != null && !created.equals(created2)) {
                sql += prefix + Message.P_Created + " >= ?";
                args = OAArray.add(Object.class, args, this.created);
                sql += " AND " + prefix + Message.P_Created + " <= ?";
                args = OAArray.add(Object.class, args, this.created2);
            }
            else {
                sql += prefix + Message.P_Created + " = ?";
                args = OAArray.add(Object.class, args, this.created);
            }
        }
        if (jsonUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + prefix + Message.P_Json + " = null OR " + prefix + Message.P_Json + " == '')";
        }
        else if (jsonUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Message.P_Json + " != null";
        }
        else if (OAString.isNotEmpty(this.json)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(json);
            if (value.indexOf("%") >= 0) {
                sql += prefix + Message.P_Json + " LIKE ?";
            }
            else {
                sql += prefix + Message.P_Json + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (messageTypeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessagePP.messageType().pp + " = null";
        }
        if (messageTypeUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessagePP.messageType().pp + " != null";
        }
        else if (!useMessageTypeSearch && getMessageType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessagePP.messageType().pp + " = ?";
            args = OAArray.add(Object.class, args, getMessageType());
        }
        if (useMessageTypeSearch && getMessageTypeSearch() != null) {
            getMessageTypeSearch().appendSelect(prefix + MessagePP.messageType().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Message> filterDataSourceFilter;
    public OAFilter<Message> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Message>() {
            @Override
            public boolean isUsed(Message message) {
                return MessageSearch.this.isUsedForDataSourceFilter(message);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Message> filterCustomFilter;
    public OAFilter<Message> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Message>() {
            @Override
            public boolean isUsed(Message message) {
                boolean b = MessageSearch.this.isUsedForCustomFilter(message);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Message searchMessage) {
        return true;
    }
    public boolean isUsedForCustomFilter(Message searchMessage) {
        return true;
    }
}
