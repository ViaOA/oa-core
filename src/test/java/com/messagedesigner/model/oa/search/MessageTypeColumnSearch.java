// Generated by OABuilder
package com.messagedesigner.model.oa.search;

import java.util.logging.*;

import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.MessageSource;
import com.messagedesigner.model.oa.MessageTypeColumn;
import com.messagedesigner.model.oa.MessageTypeRecord;
import com.messagedesigner.model.oa.RpgType;
import com.messagedesigner.model.oa.propertypath.MessageSourcePP;
import com.messagedesigner.model.oa.propertypath.MessageTypeColumnPP;
import com.messagedesigner.model.oa.search.MessageSourceSearch;
import com.messagedesigner.model.oa.search.MessageTypeColumnSearch;
import com.messagedesigner.model.oa.search.MessageTypeRecordSearch;
import com.messagedesigner.model.oa.search.RpgTypeSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class MessageTypeColumnSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MessageTypeColumnSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Id2 = "Id2";
    public static final String P_Created = "Created";
    public static final String P_Name = "Name";
    public static final String P_ShortName = "ShortName";
    public static final String P_KeyPos = "KeyPos";
    public static final String P_KeyPos2 = "KeyPos2";
    public static final String P_MessageType = "MessageType";
    public static final String P_MessageTypeUseNull = "MessageTypeUseNull";
    public static final String P_UseMessageTypeSearch = "UseMessageTypeSearch";
    public static final String P_RpgType = "RpgType";
    public static final String P_RpgTypeUseNull = "RpgTypeUseNull";
    public static final String P_UseRpgTypeSearch = "UseRpgTypeSearch";
    public static final String P_MessageTypeRecordMessageSource = "MessageTypeRecordMessageSource";
    public static final String P_UseMessageTypeRecordMessageSourceSearch = "UseMessageTypeRecordMessageSourceSearch";
    public static final String P_MaxResults = "MaxResults";

    protected int id;
    protected int id2;
    protected OADateTime created;
    protected String name;
    protected String shortName;
    protected int keyPos;
    protected int keyPos2;
    protected MessageTypeRecord messageType;
    protected boolean messageTypeUseNull;
    protected boolean useMessageTypeSearch;
    protected MessageTypeRecordSearch searchMessageType;
    protected RpgType rpgType;
    protected boolean rpgTypeUseNull;
    protected boolean useRpgTypeSearch;
    protected RpgTypeSearch searchRpgType;
    protected MessageSource messageTypeRecordMessageSource;
    protected boolean useMessageTypeRecordMessageSourceSearch;
    protected MessageSourceSearch searchMessageTypeRecordMessageSource;
    protected int maxResults;

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
        if (isLoading()) return;
        if (id > id2) setId2(this.id);
    } 
    public int getId2() {
        return id2;
    }
    public void setId2(int newValue) {
        int old = id2;
        fireBeforePropertyChange(P_Id2, old, newValue);
        this.id2 = newValue;
        firePropertyChange(P_Id2, old, this.id2);
        if (isLoading()) return;
        if (id > id2) setId(this.id2);
    }

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      

    public String getShortName() {
        return shortName;
    }
    public void setShortName(String newValue) {
        String old = shortName;
        fireBeforePropertyChange(P_ShortName, old, newValue);
        this.shortName = newValue;
        firePropertyChange(P_ShortName, old, this.shortName);
    }
      

    public int getKeyPos() {
        return keyPos;
    }
    public void setKeyPos(int newValue) {
        int old = keyPos;
        fireBeforePropertyChange(P_KeyPos, old, newValue);
        this.keyPos = newValue;
        firePropertyChange(P_KeyPos, old, this.keyPos);
        if (isLoading()) return;
        if (keyPos > keyPos2) setKeyPos2(this.keyPos);
    } 
    public int getKeyPos2() {
        return keyPos2;
    }
    public void setKeyPos2(int newValue) {
        int old = keyPos2;
        fireBeforePropertyChange(P_KeyPos2, old, newValue);
        this.keyPos2 = newValue;
        firePropertyChange(P_KeyPos2, old, this.keyPos2);
        if (isLoading()) return;
        if (keyPos > keyPos2) setKeyPos(this.keyPos2);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public MessageTypeRecord getMessageType() {
        if (messageType == null) {
            messageType = (MessageTypeRecord) getObject(P_MessageType);
        }
        return messageType;
    }
    public void setMessageType(MessageTypeRecord newValue) {
        MessageTypeRecord old = this.messageType;
        this.messageType = newValue;
        firePropertyChange(P_MessageType, old, this.messageType);
    }
    public boolean getMessageTypeUseNull() {
        return messageTypeUseNull;
    }
    public void setMessageTypeUseNull(boolean newValue) {
        boolean old = this.messageTypeUseNull;
        this.messageTypeUseNull = newValue;
        firePropertyChange(P_MessageTypeUseNull, old, this.messageTypeUseNull);
    }
    public boolean getUseMessageTypeSearch() {
        return useMessageTypeSearch;
    }
    public void setUseMessageTypeSearch(boolean newValue) {
        boolean old = this.useMessageTypeSearch;
        this.useMessageTypeSearch = newValue;
        firePropertyChange(P_UseMessageTypeSearch, old, this.useMessageTypeSearch);
    }
    public MessageTypeRecordSearch getMessageTypeSearch() {
        return this.searchMessageType;
    }
    public void setMessageTypeSearch(MessageTypeRecordSearch newValue) {
        this.searchMessageType = newValue;
    }

    @OAOne
    public RpgType getRpgType() {
        if (rpgType == null) {
            rpgType = (RpgType) getObject(P_RpgType);
        }
        return rpgType;
    }
    public void setRpgType(RpgType newValue) {
        RpgType old = this.rpgType;
        this.rpgType = newValue;
        firePropertyChange(P_RpgType, old, this.rpgType);
    }
    public boolean getRpgTypeUseNull() {
        return rpgTypeUseNull;
    }
    public void setRpgTypeUseNull(boolean newValue) {
        boolean old = this.rpgTypeUseNull;
        this.rpgTypeUseNull = newValue;
        firePropertyChange(P_RpgTypeUseNull, old, this.rpgTypeUseNull);
    }
    public boolean getUseRpgTypeSearch() {
        return useRpgTypeSearch;
    }
    public void setUseRpgTypeSearch(boolean newValue) {
        boolean old = this.useRpgTypeSearch;
        this.useRpgTypeSearch = newValue;
        firePropertyChange(P_UseRpgTypeSearch, old, this.useRpgTypeSearch);
    }
    public RpgTypeSearch getRpgTypeSearch() {
        return this.searchRpgType;
    }
    public void setRpgTypeSearch(RpgTypeSearch newValue) {
        this.searchRpgType = newValue;
    }

    @OAOne
    public MessageSource getMessageTypeRecordMessageSource() {
        if (messageTypeRecordMessageSource == null) {
            messageTypeRecordMessageSource = (MessageSource) getObject(P_MessageTypeRecordMessageSource);
        }
        return messageTypeRecordMessageSource;
    }
    public void setMessageTypeRecordMessageSource(MessageSource newValue) {
        MessageSource old = this.messageTypeRecordMessageSource;
        this.messageTypeRecordMessageSource = newValue;
        firePropertyChange(P_MessageTypeRecordMessageSource, old, this.messageTypeRecordMessageSource);
    }
    public boolean getUseMessageTypeRecordMessageSourceSearch() {
        return useMessageTypeRecordMessageSourceSearch;
    }
    public void setUseMessageTypeRecordMessageSourceSearch(boolean newValue) {
        boolean old = this.useMessageTypeRecordMessageSourceSearch;
        this.useMessageTypeRecordMessageSourceSearch = newValue;
        firePropertyChange(P_UseMessageTypeRecordMessageSourceSearch, old, this.useMessageTypeRecordMessageSourceSearch);
    }
    public MessageSourceSearch getMessageTypeRecordMessageSourceSearch() {
        return this.searchMessageTypeRecordMessageSource;
    }
    public void setMessageTypeRecordMessageSourceSearch(MessageSourceSearch newValue) {
        this.searchMessageTypeRecordMessageSource = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setId2(0);
        setNull(P_Id2);
        setCreated(null);
        setName(null);
        setShortName(null);
        setKeyPos(0);
        setNull(P_KeyPos);
        setKeyPos2(0);
        setNull(P_KeyPos2);
        setMessageType(null);
        setMessageTypeUseNull(false);
        setUseMessageTypeSearch(false);
        setRpgType(null);
        setRpgTypeUseNull(false);
        setUseRpgTypeSearch(false);
        setMessageTypeRecordMessageSource(null);
        setUseMessageTypeRecordMessageSourceSearch(false);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getCreated() != null) return true;
        if (getName() != null) return true;
        if (getShortName() != null) return true;
        if (!isNull(P_KeyPos)) return true;
        if (getMessageType() != null) return true;
        if (getMessageTypeUseNull()) return true;
        if (getUseMessageTypeSearch()) return true;
        if (getRpgType() != null) return true;
        if (getRpgTypeUseNull()) return true;
        if (getUseRpgTypeSearch()) return true;
        if (getMessageTypeRecordMessageSource() != null) return true;
        if (getUseMessageTypeRecordMessageSourceSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<MessageTypeColumn> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<MessageTypeColumn> f = new OAQueryFilter<MessageTypeColumn>(MessageTypeColumn.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<MessageTypeColumn> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<MessageTypeColumn> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<MessageTypeColumn> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += MessageTypeColumn.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + MessageTypeColumn.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += MessageTypeColumn.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageTypeColumn.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += MessageTypeColumn.P_Name + " LIKE ?";
            }
            else {
                sql += MessageTypeColumn.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.shortName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(shortName);
            if (value.indexOf("%") >= 0) {
                sql += MessageTypeColumn.P_RpgName + " LIKE ?";
            }
            else {
                sql += MessageTypeColumn.P_RpgName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_KeyPos)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_KeyPos2) && keyPos != keyPos2) {
                sql += MessageTypeColumn.P_KeyPos + " >= ?";
                args = OAArray.add(Object.class, args, getKeyPos());
                sql += " AND " + MessageTypeColumn.P_KeyPos + " <= ?";
                args = OAArray.add(Object.class, args, getKeyPos2());
            }
            else {
                sql += MessageTypeColumn.P_KeyPos + " = ?";
                args = OAArray.add(Object.class, args, getKeyPos());
            }
        }
        if (messageTypeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageTypeColumnPP.messageTypeRecord().pp + " = null";
        }
        else if (!useMessageTypeSearch && getMessageType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageTypeColumnPP.messageTypeRecord().pp + " = ?";
            args = OAArray.add(Object.class, args, getMessageType());
            finder = new OAFinder<MessageTypeRecord, MessageTypeColumn>(getMessageType(), MessageTypeRecord.P_MessageTypeColumns);
        }
        if (rpgTypeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageTypeColumnPP.rpgType().pp + " = null";
        }
        else if (!useRpgTypeSearch && getRpgType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageTypeColumnPP.rpgType().pp + " = ?";
            args = OAArray.add(Object.class, args, getRpgType());
        }
        if (!useMessageTypeRecordMessageSourceSearch && getMessageTypeRecordMessageSource() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageTypeColumnPP.messageTypeRecord().messageSource().pp + " = ?";
            args = OAArray.add(Object.class, args, getMessageTypeRecordMessageSource());
            String pp = MessageSourcePP.messageTypeRecords().messageTypeColumns().pp;
            finder = new OAFinder<MessageSource, MessageTypeColumn>(getMessageTypeRecordMessageSource(), pp);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<MessageTypeColumn> select = new OASelect<MessageTypeColumn>(MessageTypeColumn.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useMessageTypeSearch && getMessageTypeSearch() != null) {
            getMessageTypeSearch().appendSelect(MessageTypeColumnPP.messageTypeRecord().pp, select);
        }
        if (useRpgTypeSearch && getRpgTypeSearch() != null) {
            getRpgTypeSearch().appendSelect(MessageTypeColumnPP.rpgType().pp, select);
        }
        if (useMessageTypeRecordMessageSourceSearch && getMessageTypeRecordMessageSourceSearch() != null) {
            getMessageTypeRecordMessageSourceSearch().appendSelect(MessageTypeColumnPP.messageTypeRecord().messageSource().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += prefix + MessageTypeColumn.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + prefix + MessageTypeColumn.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += prefix + MessageTypeColumn.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageTypeColumn.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += prefix + MessageTypeColumn.P_Name + " LIKE ?";
            }
            else {
                sql += prefix + MessageTypeColumn.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.shortName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(shortName);
            if (value.indexOf("%") >= 0) {
                sql += prefix + MessageTypeColumn.P_RpgName + " LIKE ?";
            }
            else {
                sql += prefix + MessageTypeColumn.P_RpgName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_KeyPos)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_KeyPos2) && keyPos != keyPos2) {
                sql += prefix + MessageTypeColumn.P_KeyPos + " >= ?";
                args = OAArray.add(Object.class, args, getKeyPos());
                sql += " AND " + prefix + MessageTypeColumn.P_KeyPos + " <= ?";
                args = OAArray.add(Object.class, args, getKeyPos2());
            }
            else {
                sql += prefix + MessageTypeColumn.P_KeyPos + " = ?";
                args = OAArray.add(Object.class, args, getKeyPos());
            }
        }
        if (messageTypeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageTypeColumnPP.messageTypeRecord().pp + " = null";
        }
        else if (!useMessageTypeSearch && getMessageType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageTypeColumnPP.messageTypeRecord().pp + " = ?";
            args = OAArray.add(Object.class, args, getMessageType());
        }
        if (useMessageTypeSearch && getMessageTypeSearch() != null) {
            getMessageTypeSearch().appendSelect(prefix + MessageTypeColumnPP.messageTypeRecord().pp, select);
        }
        if (rpgTypeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageTypeColumnPP.rpgType().pp + " = null";
        }
        else if (!useRpgTypeSearch && getRpgType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageTypeColumnPP.rpgType().pp + " = ?";
            args = OAArray.add(Object.class, args, getRpgType());
        }
        if (useRpgTypeSearch && getRpgTypeSearch() != null) {
            getRpgTypeSearch().appendSelect(prefix + MessageTypeColumnPP.rpgType().pp, select);
        }
        if (!useMessageTypeRecordMessageSourceSearch && getMessageTypeRecordMessageSource() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageTypeColumnPP.messageTypeRecord().messageSource().pp + " = ?";
            args = OAArray.add(Object.class, args, getMessageTypeRecordMessageSource());
        }
        if (useMessageTypeRecordMessageSourceSearch && getMessageTypeRecordMessageSourceSearch() != null) {
            getMessageTypeRecordMessageSourceSearch().appendSelect(prefix + MessageTypeColumnPP.messageTypeRecord().messageSource().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<MessageTypeColumn> filterDataSourceFilter;
    public OAFilter<MessageTypeColumn> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<MessageTypeColumn>() {
            @Override
            public boolean isUsed(MessageTypeColumn messageTypeColumn) {
                return MessageTypeColumnSearch.this.isUsedForDataSourceFilter(messageTypeColumn);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<MessageTypeColumn> filterCustomFilter;
    public OAFilter<MessageTypeColumn> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<MessageTypeColumn>() {
            @Override
            public boolean isUsed(MessageTypeColumn messageTypeColumn) {
                boolean b = MessageTypeColumnSearch.this.isUsedForCustomFilter(messageTypeColumn);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(MessageTypeColumn searchMessageTypeColumn) {
        return true;
    }
    public boolean isUsedForCustomFilter(MessageTypeColumn searchMessageTypeColumn) {
        return true;
    }
}
