// Generated by OABuilder
package com.messagedesigner.model.oa.search;

import java.util.logging.*;

import com.messagedesigner.delegate.*;
import com.messagedesigner.delegate.oa.*;
import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.MessageTypeColumn;
import com.messagedesigner.model.oa.MessageTypeRecord;
import com.messagedesigner.model.oa.propertypath.MessageTypeRecordPP;
import com.messagedesigner.model.oa.search.MessageTypeColumnSearch;
import com.messagedesigner.model.oa.search.MessageTypeRecordSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;
import java.io.*;

@OAClass(useDataSource=false, localOnly=true)
public class MessageTypeRecordSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MessageTypeRecordSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Id2 = "Id2";
    public static final String P_Created = "Created";
    public static final String P_Code = "Code";
    public static final String P_Name = "Name";
    public static final String P_RepeatingCount = "RepeatingCount";
    public static final String P_RepeatingCount2 = "RepeatingCount2";
    public static final String P_Description = "Description";
    public static final String P_IsDefined = "IsDefined";
    public static final String P_MessageTypeColumn = "MessageTypeColumn";
    public static final String P_UseMessageTypeColumnSearch = "UseMessageTypeColumnSearch";
    public static final String P_MaxResults = "MaxResults";

    protected int id;
    protected int id2;
    protected OADateTime created;
    protected String code;
    protected String name;
    protected int repeatingCount;
    protected int repeatingCount2;
    protected String description;
    protected boolean isDefined;
    protected MessageTypeColumn messageTypeColumn;
    protected boolean useMessageTypeColumnSearch;
    protected MessageTypeColumnSearch searchMessageTypeColumn;
    protected int maxResults;

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
        if (isLoading()) return;
        if (id > id2) setId2(this.id);
    } 
    public int getId2() {
        return id2;
    }
    public void setId2(int newValue) {
        int old = id2;
        fireBeforePropertyChange(P_Id2, old, newValue);
        this.id2 = newValue;
        firePropertyChange(P_Id2, old, this.id2);
        if (isLoading()) return;
        if (id > id2) setId(this.id2);
    }

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      

    public String getCode() {
        return code;
    }
    public void setCode(String newValue) {
        String old = code;
        fireBeforePropertyChange(P_Code, old, newValue);
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
      

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      

    public int getRepeatingCount() {
        return repeatingCount;
    }
    public void setRepeatingCount(int newValue) {
        int old = repeatingCount;
        fireBeforePropertyChange(P_RepeatingCount, old, newValue);
        this.repeatingCount = newValue;
        firePropertyChange(P_RepeatingCount, old, this.repeatingCount);
        if (isLoading()) return;
        if (repeatingCount > repeatingCount2) setRepeatingCount2(this.repeatingCount);
    } 
    public int getRepeatingCount2() {
        return repeatingCount2;
    }
    public void setRepeatingCount2(int newValue) {
        int old = repeatingCount2;
        fireBeforePropertyChange(P_RepeatingCount2, old, newValue);
        this.repeatingCount2 = newValue;
        firePropertyChange(P_RepeatingCount2, old, this.repeatingCount2);
        if (isLoading()) return;
        if (repeatingCount > repeatingCount2) setRepeatingCount(this.repeatingCount2);
    }

    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public boolean getIsDefined() {
        return isDefined;
    }
    public boolean isIsDefined() {
        return getIsDefined();
    }
    public void setIsDefined(boolean newValue) {
        boolean old = isDefined;
        fireBeforePropertyChange(P_IsDefined, old, newValue);
        this.isDefined = newValue;
        firePropertyChange(P_IsDefined, old, this.isDefined);
    }
      

    @OAOne
    public MessageTypeColumn getMessageTypeColumn() {
        if (messageTypeColumn == null) {
            messageTypeColumn = (MessageTypeColumn) getObject(P_MessageTypeColumn);
        }
        return messageTypeColumn;
    }
    public void setMessageTypeColumn(MessageTypeColumn newValue) {
        MessageTypeColumn old = this.messageTypeColumn;
        this.messageTypeColumn = newValue;
        firePropertyChange(P_MessageTypeColumn, old, this.messageTypeColumn);
    }
    public boolean getUseMessageTypeColumnSearch() {
        return useMessageTypeColumnSearch;
    }
    public void setUseMessageTypeColumnSearch(boolean newValue) {
        boolean old = this.useMessageTypeColumnSearch;
        this.useMessageTypeColumnSearch = newValue;
        firePropertyChange(P_UseMessageTypeColumnSearch, old, this.useMessageTypeColumnSearch);
    }
    public MessageTypeColumnSearch getMessageTypeColumnSearch() {
        return this.searchMessageTypeColumn;
    }
    public void setMessageTypeColumnSearch(MessageTypeColumnSearch newValue) {
        this.searchMessageTypeColumn = newValue;
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setId2(0);
        setNull(P_Id2);
        setCreated(null);
        setCode(null);
        setName(null);
        setRepeatingCount(0);
        setNull(P_RepeatingCount);
        setRepeatingCount2(0);
        setNull(P_RepeatingCount2);
        setDescription(null);
        setIsDefined(false);
        setNull(P_IsDefined);
        setMessageTypeColumn(null);
        setUseMessageTypeColumnSearch(false);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getCreated() != null) return true;
        if (getCode() != null) return true;
        if (getName() != null) return true;
        if (!isNull(P_RepeatingCount)) return true;
        if (getDescription() != null) return true;
        if (!isNull(P_IsDefined)) return true;
        if (getMessageTypeColumn() != null) return true;
        if (getUseMessageTypeColumnSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<MessageTypeRecord> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<MessageTypeRecord> f = new OAQueryFilter<MessageTypeRecord>(MessageTypeRecord.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<MessageTypeRecord> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<MessageTypeRecord> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<MessageTypeRecord> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += MessageTypeRecord.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + MessageTypeRecord.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += MessageTypeRecord.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageTypeRecord.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (OAString.isNotEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(code);
            if (value.indexOf("%") >= 0) {
                sql += MessageTypeRecord.P_Code + " LIKE ?";
            }
            else {
                sql += MessageTypeRecord.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += MessageTypeRecord.P_Name + " LIKE ?";
            }
            else {
                sql += MessageTypeRecord.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_RepeatingCount)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_RepeatingCount2) && repeatingCount != repeatingCount2) {
                sql += MessageTypeRecord.P_RepeatingCount + " >= ?";
                args = OAArray.add(Object.class, args, getRepeatingCount());
                sql += " AND " + MessageTypeRecord.P_RepeatingCount + " <= ?";
                args = OAArray.add(Object.class, args, getRepeatingCount2());
            }
            else {
                sql += MessageTypeRecord.P_RepeatingCount + " = ?";
                args = OAArray.add(Object.class, args, getRepeatingCount());
            }
        }
        if (OAString.isNotEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(description);
            if (value.indexOf("%") >= 0) {
                sql += MessageTypeRecord.P_Description + " LIKE ?";
            }
            else {
                sql += MessageTypeRecord.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useMessageTypeColumnSearch && getMessageTypeColumn() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageTypeRecordPP.messageTypeColumns().pp + " = ?";
            args = OAArray.add(Object.class, args, getMessageTypeColumn());
            finder = new OAFinder<MessageTypeColumn, MessageTypeRecord>(getMessageTypeColumn(), MessageTypeColumn.P_MessageTypeRecord);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<MessageTypeRecord> select = new OASelect<MessageTypeRecord>(MessageTypeRecord.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useMessageTypeColumnSearch && getMessageTypeColumnSearch() != null) {
            getMessageTypeColumnSearch().appendSelect(MessageTypeRecordPP.messageTypeColumns().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += prefix + MessageTypeRecord.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + prefix + MessageTypeRecord.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += prefix + MessageTypeRecord.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageTypeRecord.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (OAString.isNotEmpty(this.code)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(code);
            if (value.indexOf("%") >= 0) {
                sql += prefix + MessageTypeRecord.P_Code + " LIKE ?";
            }
            else {
                sql += prefix + MessageTypeRecord.P_Code + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += prefix + MessageTypeRecord.P_Name + " LIKE ?";
            }
            else {
                sql += prefix + MessageTypeRecord.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_RepeatingCount)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_RepeatingCount2) && repeatingCount != repeatingCount2) {
                sql += prefix + MessageTypeRecord.P_RepeatingCount + " >= ?";
                args = OAArray.add(Object.class, args, getRepeatingCount());
                sql += " AND " + prefix + MessageTypeRecord.P_RepeatingCount + " <= ?";
                args = OAArray.add(Object.class, args, getRepeatingCount2());
            }
            else {
                sql += prefix + MessageTypeRecord.P_RepeatingCount + " = ?";
                args = OAArray.add(Object.class, args, getRepeatingCount());
            }
        }
        if (OAString.isNotEmpty(this.description)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(description);
            if (value.indexOf("%") >= 0) {
                sql += prefix + MessageTypeRecord.P_Description + " LIKE ?";
            }
            else {
                sql += prefix + MessageTypeRecord.P_Description + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useMessageTypeColumnSearch && getMessageTypeColumn() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageTypeRecordPP.messageTypeColumns().pp + " = ?";
            args = OAArray.add(Object.class, args, getMessageTypeColumn());
        }
        if (useMessageTypeColumnSearch && getMessageTypeColumnSearch() != null) {
            getMessageTypeColumnSearch().appendSelect(prefix + MessageTypeRecordPP.messageTypeColumns().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<MessageTypeRecord> filterDataSourceFilter;
    public OAFilter<MessageTypeRecord> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<MessageTypeRecord>() {
            @Override
            public boolean isUsed(MessageTypeRecord messageTypeRecord) {
                return MessageTypeRecordSearch.this.isUsedForDataSourceFilter(messageTypeRecord);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<MessageTypeRecord> filterCustomFilter;
    public OAFilter<MessageTypeRecord> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<MessageTypeRecord>() {
            @Override
            public boolean isUsed(MessageTypeRecord messageTypeRecord) {
                boolean b = MessageTypeRecordSearch.this.isUsedForCustomFilter(messageTypeRecord);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(MessageTypeRecord searchMessageTypeRecord) {
        return true;
    }
    public boolean isUsedForCustomFilter(MessageTypeRecord searchMessageTypeRecord) {
        if (!isNull(P_IsDefined)) {
            if (!OACompare.isEqual(searchMessageTypeRecord.getIsDefined(), isDefined)) return false;
        }
        return true;
    }
}
