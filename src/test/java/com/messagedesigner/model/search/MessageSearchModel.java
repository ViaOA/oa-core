// Generated by OABuilder
package com.messagedesigner.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.messagedesigner.delegate.ModelDelegate;
import com.messagedesigner.model.*;
import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.filter.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.search.*;
import com.messagedesigner.resource.Resource;
import com.messagedesigner.model.MessageTypeModel;
import com.messagedesigner.model.oa.Message;
import com.messagedesigner.model.oa.MessageType;
import com.messagedesigner.model.oa.search.MessageSearch;
import com.messagedesigner.model.search.MessageSearchModel;
import com.messagedesigner.model.search.MessageTypeSearchModel;
import com.viaoa.datasource.*;

public class MessageSearchModel {
    private static Logger LOG = Logger.getLogger(MessageSearchModel.class.getName());
    
    protected Hub<Message> hub;  // search results
    protected Hub<Message> hubMultiSelect;
    protected Hub<Message> hubSearchFrom;  // hub (optional) to search from
    protected Hub<MessageSearch> hubMessageSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<MessageType> hubMessageType;
    
    // finder used to find objects in a path
    protected OAFinder<?, Message> finder;
    
    // ObjectModels
    protected MessageTypeModel modelMessageType;
    
    // SearchModels
    protected MessageTypeSearchModel modelMessageTypeSearch;
    
    // object used for search data
    protected MessageSearch messageSearch;
    
    public MessageSearchModel() {
    }
    
    public MessageSearchModel(Hub<Message> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Message> getHub() {
        if (hub == null) {
            hub = new Hub<Message>(Message.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Message> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Message> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    MessageSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Message> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Message.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Message> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Message> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public MessageSearch getMessageSearch() {
        if (messageSearch != null) return messageSearch;
        messageSearch = new MessageSearch();
        return messageSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<MessageSearch> getMessageSearchHub() {
        if (hubMessageSearch == null) {
            hubMessageSearch = new Hub<MessageSearch>(MessageSearch.class);
            hubMessageSearch.add(getMessageSearch());
            hubMessageSearch.setPos(0);
        }
        return hubMessageSearch;
    }
    public Hub<MessageType> getMessageTypeHub() {
        if (hubMessageType != null) return hubMessageType;
        hubMessageType = getMessageSearchHub().getDetailHub(MessageSearch.P_MessageType);
        return hubMessageType;
    }
    
    public MessageTypeModel getMessageTypeModel() {
        if (modelMessageType != null) return modelMessageType;
        modelMessageType = new MessageTypeModel(getMessageTypeHub());
        modelMessageType.setDisplayName("Message Type");
        modelMessageType.setPluralDisplayName("Message Types");
        modelMessageType.setAllowNew(false);
        modelMessageType.setAllowSave(true);
        modelMessageType.setAllowAdd(false);
        modelMessageType.setAllowRemove(false);
        modelMessageType.setAllowClear(true);
        modelMessageType.setAllowDelete(false);
        modelMessageType.setAllowSearch(true);
        modelMessageType.setAllowHubSearch(false);
        modelMessageType.setAllowGotoEdit(true);
        modelMessageType.setViewOnly(true);
        return modelMessageType;
    }
    
    public MessageTypeSearchModel getMessageTypeSearchModel() {
        if (modelMessageTypeSearch == null) {
            modelMessageTypeSearch = new MessageTypeSearchModel();
            getMessageSearch().setMessageTypeSearch(modelMessageTypeSearch.getMessageTypeSearch());
        }
        return modelMessageTypeSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses MessageSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Message> sel = getMessageSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Message message, Hub<Message> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Message> hub) {
    }
}

