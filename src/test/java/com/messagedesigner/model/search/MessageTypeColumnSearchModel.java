// Generated by OABuilder
package com.messagedesigner.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.messagedesigner.delegate.ModelDelegate;
import com.messagedesigner.model.*;
import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.filter.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.search.*;
import com.messagedesigner.resource.Resource;
import com.messagedesigner.model.MessageSourceModel;
import com.messagedesigner.model.MessageTypeRecordModel;
import com.messagedesigner.model.RpgTypeModel;
import com.messagedesigner.model.oa.MessageSource;
import com.messagedesigner.model.oa.MessageTypeColumn;
import com.messagedesigner.model.oa.MessageTypeRecord;
import com.messagedesigner.model.oa.RpgType;
import com.messagedesigner.model.oa.search.MessageTypeColumnSearch;
import com.messagedesigner.model.search.MessageSourceSearchModel;
import com.messagedesigner.model.search.MessageTypeColumnSearchModel;
import com.messagedesigner.model.search.MessageTypeRecordSearchModel;
import com.messagedesigner.model.search.RpgTypeSearchModel;
import com.viaoa.datasource.*;

public class MessageTypeColumnSearchModel {
    private static Logger LOG = Logger.getLogger(MessageTypeColumnSearchModel.class.getName());
    
    protected Hub<MessageTypeColumn> hub;  // search results
    protected Hub<MessageTypeColumn> hubMultiSelect;
    protected Hub<MessageTypeColumn> hubSearchFrom;  // hub (optional) to search from
    protected Hub<MessageTypeColumnSearch> hubMessageTypeColumnSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<MessageTypeRecord> hubMessageType;
    protected Hub<RpgType> hubRpgType;
    protected Hub<MessageSource> hubMessageTypeRecordMessageSource;
    
    // finder used to find objects in a path
    protected OAFinder<?, MessageTypeColumn> finder;
    
    // ObjectModels
    protected MessageTypeRecordModel modelMessageType;
    protected RpgTypeModel modelRpgType;
    protected MessageSourceModel modelMessageTypeRecordMessageSource;
    
    // SearchModels
    protected MessageTypeRecordSearchModel modelMessageTypeSearch;
    protected RpgTypeSearchModel modelRpgTypeSearch;
    protected MessageSourceSearchModel modelMessageTypeRecordMessageSourceSearch;
    
    // object used for search data
    protected MessageTypeColumnSearch messageTypeColumnSearch;
    
    public MessageTypeColumnSearchModel() {
    }
    
    public MessageTypeColumnSearchModel(Hub<MessageTypeColumn> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<MessageTypeColumn> getHub() {
        if (hub == null) {
            hub = new Hub<MessageTypeColumn>(MessageTypeColumn.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<MessageTypeColumn> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<MessageTypeColumn> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    MessageTypeColumnSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<MessageTypeColumn> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(MessageTypeColumn.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, MessageTypeColumn> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, MessageTypeColumn> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public MessageTypeColumnSearch getMessageTypeColumnSearch() {
        if (messageTypeColumnSearch != null) return messageTypeColumnSearch;
        messageTypeColumnSearch = new MessageTypeColumnSearch();
        return messageTypeColumnSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<MessageTypeColumnSearch> getMessageTypeColumnSearchHub() {
        if (hubMessageTypeColumnSearch == null) {
            hubMessageTypeColumnSearch = new Hub<MessageTypeColumnSearch>(MessageTypeColumnSearch.class);
            hubMessageTypeColumnSearch.add(getMessageTypeColumnSearch());
            hubMessageTypeColumnSearch.setPos(0);
        }
        return hubMessageTypeColumnSearch;
    }
    public Hub<MessageTypeRecord> getMessageTypeHub() {
        if (hubMessageType != null) return hubMessageType;
        hubMessageType = getMessageTypeColumnSearchHub().getDetailHub(MessageTypeColumnSearch.P_MessageType);
        return hubMessageType;
    }
    public Hub<RpgType> getRpgTypeHub() {
        if (hubRpgType != null) return hubRpgType;
        hubRpgType = new Hub<>(RpgType.class);
        Hub<RpgType> hub = ModelDelegate.getRpgTypes();
        HubCopy<RpgType> hc = new HubCopy<>(hub, hubRpgType, false);
        hubRpgType.setLinkHub(getMessageTypeColumnSearchHub(), MessageTypeColumnSearch.P_RpgType); 
        return hubRpgType;
    }
    public Hub<MessageSource> getMessageTypeRecordMessageSourceHub() {
        if (hubMessageTypeRecordMessageSource != null) return hubMessageTypeRecordMessageSource;
        hubMessageTypeRecordMessageSource = new Hub<>(MessageSource.class);
        Hub<MessageSource> hub = ModelDelegate.getMessageSources();
        HubCopy<MessageSource> hc = new HubCopy<>(hub, hubMessageTypeRecordMessageSource, false);
        hubMessageTypeRecordMessageSource.setLinkHub(getMessageTypeColumnSearchHub(), MessageTypeColumnSearch.P_MessageTypeRecordMessageSource); 
        return hubMessageTypeRecordMessageSource;
    }
    
    public MessageTypeRecordModel getMessageTypeModel() {
        if (modelMessageType != null) return modelMessageType;
        modelMessageType = new MessageTypeRecordModel(getMessageTypeHub());
        modelMessageType.setDisplayName("Message Type Record");
        modelMessageType.setPluralDisplayName("Message Type Records");
        modelMessageType.setAllowNew(false);
        modelMessageType.setAllowSave(true);
        modelMessageType.setAllowAdd(false);
        modelMessageType.setAllowRemove(false);
        modelMessageType.setAllowClear(true);
        modelMessageType.setAllowDelete(false);
        modelMessageType.setAllowSearch(true);
        modelMessageType.setAllowHubSearch(false);
        modelMessageType.setAllowGotoEdit(true);
        return modelMessageType;
    }
    public RpgTypeModel getRpgTypeModel() {
        if (modelRpgType != null) return modelRpgType;
        modelRpgType = new RpgTypeModel(getRpgTypeHub());
        modelRpgType.setDisplayName("Rpg Type");
        modelRpgType.setPluralDisplayName("Rpg Types");
        modelRpgType.setAllowNew(false);
        modelRpgType.setAllowSave(true);
        modelRpgType.setAllowAdd(false);
        modelRpgType.setAllowRemove(false);
        modelRpgType.setAllowClear(true);
        modelRpgType.setAllowDelete(false);
        modelRpgType.setAllowSearch(true);
        modelRpgType.setAllowHubSearch(false);
        modelRpgType.setAllowGotoEdit(true);
        modelRpgType.setViewOnly(true);
        return modelRpgType;
    }
    public MessageSourceModel getMessageTypeRecordMessageSourceModel() {
        if (modelMessageTypeRecordMessageSource != null) return modelMessageTypeRecordMessageSource;
        modelMessageTypeRecordMessageSource = new MessageSourceModel(getMessageTypeRecordMessageSourceHub());
        modelMessageTypeRecordMessageSource.setDisplayName("Message Source");
        modelMessageTypeRecordMessageSource.setPluralDisplayName("Message Sources");
        modelMessageTypeRecordMessageSource.setAllowNew(false);
        modelMessageTypeRecordMessageSource.setAllowSave(true);
        modelMessageTypeRecordMessageSource.setAllowAdd(false);
        modelMessageTypeRecordMessageSource.setAllowRemove(false);
        modelMessageTypeRecordMessageSource.setAllowClear(true);
        modelMessageTypeRecordMessageSource.setAllowDelete(false);
        modelMessageTypeRecordMessageSource.setAllowSearch(true);
        modelMessageTypeRecordMessageSource.setAllowHubSearch(false);
        modelMessageTypeRecordMessageSource.setAllowGotoEdit(true);
        return modelMessageTypeRecordMessageSource;
    }
    
    public MessageTypeRecordSearchModel getMessageTypeSearchModel() {
        if (modelMessageTypeSearch == null) {
            modelMessageTypeSearch = new MessageTypeRecordSearchModel();
            getMessageTypeColumnSearch().setMessageTypeSearch(modelMessageTypeSearch.getMessageTypeRecordSearch());
        }
        return modelMessageTypeSearch;
    }
    public RpgTypeSearchModel getRpgTypeSearchModel() {
        if (modelRpgTypeSearch == null) {
            modelRpgTypeSearch = new RpgTypeSearchModel();
            getMessageTypeColumnSearch().setRpgTypeSearch(modelRpgTypeSearch.getRpgTypeSearch());
        }
        return modelRpgTypeSearch;
    }
    public MessageSourceSearchModel getMessageTypeRecordMessageSourceSearchModel() {
        if (modelMessageTypeRecordMessageSourceSearch == null) {
            modelMessageTypeRecordMessageSourceSearch = new MessageSourceSearchModel();
            getMessageTypeColumnSearch().setMessageTypeRecordMessageSourceSearch(modelMessageTypeRecordMessageSourceSearch.getMessageSourceSearch());
        }
        return modelMessageTypeRecordMessageSourceSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses MessageTypeColumnSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<MessageTypeColumn> sel = getMessageTypeColumnSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(MessageTypeColumn messageTypeColumn, Hub<MessageTypeColumn> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<MessageTypeColumn> hub) {
    }
}

