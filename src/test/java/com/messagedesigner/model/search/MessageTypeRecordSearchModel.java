// Generated by OABuilder
package com.messagedesigner.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.messagedesigner.delegate.ModelDelegate;
import com.messagedesigner.model.*;
import com.messagedesigner.model.oa.*;
import com.messagedesigner.model.oa.filter.*;
import com.messagedesigner.model.oa.propertypath.*;
import com.messagedesigner.model.oa.search.*;
import com.messagedesigner.resource.Resource;
import com.messagedesigner.model.MessageTypeColumnModel;
import com.messagedesigner.model.oa.MessageTypeColumn;
import com.messagedesigner.model.oa.MessageTypeRecord;
import com.messagedesigner.model.oa.search.MessageTypeRecordSearch;
import com.messagedesigner.model.search.MessageTypeColumnSearchModel;
import com.messagedesigner.model.search.MessageTypeRecordSearchModel;
import com.viaoa.datasource.*;

public class MessageTypeRecordSearchModel {
    private static Logger LOG = Logger.getLogger(MessageTypeRecordSearchModel.class.getName());
    
    protected Hub<MessageTypeRecord> hub;  // search results
    protected Hub<MessageTypeRecord> hubMultiSelect;
    protected Hub<MessageTypeRecord> hubSearchFrom;  // hub (optional) to search from
    protected Hub<MessageTypeRecordSearch> hubMessageTypeRecordSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<MessageTypeColumn> hubMessageTypeColumn;
    
    // finder used to find objects in a path
    protected OAFinder<?, MessageTypeRecord> finder;
    
    // ObjectModels
    protected MessageTypeColumnModel modelMessageTypeColumn;
    
    // SearchModels
    protected MessageTypeColumnSearchModel modelMessageTypeColumnSearch;
    
    // object used for search data
    protected MessageTypeRecordSearch messageTypeRecordSearch;
    
    public MessageTypeRecordSearchModel() {
    }
    
    public MessageTypeRecordSearchModel(Hub<MessageTypeRecord> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<MessageTypeRecord> getHub() {
        if (hub == null) {
            hub = new Hub<MessageTypeRecord>(MessageTypeRecord.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<MessageTypeRecord> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<MessageTypeRecord> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    MessageTypeRecordSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<MessageTypeRecord> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(MessageTypeRecord.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, MessageTypeRecord> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, MessageTypeRecord> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public MessageTypeRecordSearch getMessageTypeRecordSearch() {
        if (messageTypeRecordSearch != null) return messageTypeRecordSearch;
        messageTypeRecordSearch = new MessageTypeRecordSearch();
        return messageTypeRecordSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<MessageTypeRecordSearch> getMessageTypeRecordSearchHub() {
        if (hubMessageTypeRecordSearch == null) {
            hubMessageTypeRecordSearch = new Hub<MessageTypeRecordSearch>(MessageTypeRecordSearch.class);
            hubMessageTypeRecordSearch.add(getMessageTypeRecordSearch());
            hubMessageTypeRecordSearch.setPos(0);
        }
        return hubMessageTypeRecordSearch;
    }
    public Hub<MessageTypeColumn> getMessageTypeColumnHub() {
        if (hubMessageTypeColumn != null) return hubMessageTypeColumn;
        hubMessageTypeColumn = getMessageTypeRecordSearchHub().getDetailHub(MessageTypeRecordSearch.P_MessageTypeColumn);
        return hubMessageTypeColumn;
    }
    
    public MessageTypeColumnModel getMessageTypeColumnModel() {
        if (modelMessageTypeColumn != null) return modelMessageTypeColumn;
        modelMessageTypeColumn = new MessageTypeColumnModel(getMessageTypeColumnHub());
        modelMessageTypeColumn.setDisplayName("Message Type Columns");
        modelMessageTypeColumn.setPluralDisplayName("Message Type Columns");
        modelMessageTypeColumn.setAllowNew(false);
        modelMessageTypeColumn.setAllowSave(true);
        modelMessageTypeColumn.setAllowAdd(false);
        modelMessageTypeColumn.setAllowRemove(false);
        modelMessageTypeColumn.setAllowClear(true);
        modelMessageTypeColumn.setAllowDelete(false);
        modelMessageTypeColumn.setAllowSearch(true);
        modelMessageTypeColumn.setAllowHubSearch(false);
        modelMessageTypeColumn.setAllowGotoEdit(true);
        return modelMessageTypeColumn;
    }
    
    public MessageTypeColumnSearchModel getMessageTypeColumnSearchModel() {
        if (modelMessageTypeColumnSearch == null) {
            modelMessageTypeColumnSearch = new MessageTypeColumnSearchModel();
            getMessageTypeRecordSearch().setMessageTypeColumnSearch(modelMessageTypeColumnSearch.getMessageTypeColumnSearch());
        }
        return modelMessageTypeColumnSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses MessageTypeRecordSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<MessageTypeRecord> sel = getMessageTypeRecordSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(MessageTypeRecord messageTypeRecord, Hub<MessageTypeRecord> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<MessageTypeRecord> hub) {
    }
}

