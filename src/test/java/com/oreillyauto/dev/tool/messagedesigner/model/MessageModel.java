// Generated by OABuilder

package com.oreillyauto.dev.tool.messagedesigner.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.model.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.delegate.ModelDelegate;
import com.oreillyauto.dev.tool.messagedesigner.resource.Resource;

public class MessageModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(MessageModel.class.getName());
    
    // Hubs
    protected Hub<Message> hub;
    // selected messages
    protected Hub<Message> hubMultiSelect;
    // detail hubs
    protected Hub<MessageType> hubMessageType;
    protected Hub<RpgMessage> hubRpgMessages;
    
    // ObjectModels
    protected MessageTypeModel modelMessageType;
    protected RpgMessageModel modelRpgMessages;
    
    // SearchModels used for references
    protected MessageTypeSearchModel modelMessageTypeSearch;
    protected RpgMessageSearchModel modelRpgMessagesSearch;
    
    public MessageModel() {
        setDisplayName("Message");
        setPluralDisplayName("Messages");
    }
    
    public MessageModel(Hub<Message> hubMessage) {
        this();
        if (hubMessage != null) HubDelegate.setObjectClass(hubMessage, Message.class);
        this.hub = hubMessage;
    }
    public MessageModel(Message message) {
        this();
        getHub().add(message);
        getHub().setPos(0);
    }
    
    public Hub<Message> getOriginalHub() {
        return getHub();
    }
    
    public Hub<MessageType> getMessageTypeHub() {
        if (hubMessageType != null) return hubMessageType;
        hubMessageType = getHub().getDetailHub(Message.P_MessageType);
        return hubMessageType;
    }
    public Hub<RpgMessage> getRpgMessages() {
        if (hubRpgMessages == null) {
            hubRpgMessages = getHub().getDetailHub(Message.P_RpgMessages);
        }
        return hubRpgMessages;
    }
    public Message getMessage() {
        return getHub().getAO();
    }
    
    public Hub<Message> getHub() {
        if (hub == null) {
            hub = new Hub<Message>(Message.class);
        }
        return hub;
    }
    
    public Hub<Message> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Message>(Message.class);
        }
        return hubMultiSelect;
    }
    
    public MessageTypeModel getMessageTypeModel() {
        if (modelMessageType != null) return modelMessageType;
        modelMessageType = new MessageTypeModel(getMessageTypeHub());
        modelMessageType.setDisplayName("Message Type");
        modelMessageType.setPluralDisplayName("Message Types");
        modelMessageType.setForJfc(getForJfc());
        modelMessageType.setAllowNew(false);
        modelMessageType.setAllowSave(true);
        modelMessageType.setAllowAdd(false);
        modelMessageType.setAllowRemove(true);
        modelMessageType.setAllowClear(true);
        modelMessageType.setAllowDelete(false);
        modelMessageType.setAllowSearch(true);
        modelMessageType.setAllowHubSearch(true);
        modelMessageType.setAllowGotoEdit(true);
        modelMessageType.setViewOnly(true);
        // call Message.messageTypeModelCallback(MessageTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Message.class, Message.P_MessageType, modelMessageType);
    
        return modelMessageType;
    }
    public RpgMessageModel getRpgMessagesModel() {
        if (modelRpgMessages != null) return modelRpgMessages;
        modelRpgMessages = new RpgMessageModel(getRpgMessages());
        modelRpgMessages.setDisplayName("Rpg Message");
        modelRpgMessages.setPluralDisplayName("Rpg Messages");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getRpgMessages())) {
            modelRpgMessages.setCreateUI(false);
        }
        modelRpgMessages.setForJfc(getForJfc());
        modelRpgMessages.setAllowNew(false);
        modelRpgMessages.setAllowSave(true);
        modelRpgMessages.setAllowAdd(false);
        modelRpgMessages.setAllowMove(false);
        modelRpgMessages.setAllowRemove(false);
        modelRpgMessages.setAllowDelete(true);
        modelRpgMessages.setAllowSearch(false);
        modelRpgMessages.setAllowHubSearch(true);
        modelRpgMessages.setAllowGotoEdit(true);
        modelRpgMessages.setViewOnly(getViewOnly());
        modelRpgMessages.setAllowNew(false);
        modelRpgMessages.setAllowTableFilter(true);
        modelRpgMessages.setAllowTableSorting(true);
        modelRpgMessages.setAllowMultiSelect(false);
        modelRpgMessages.setAllowCopy(false);
        modelRpgMessages.setAllowCut(false);
        modelRpgMessages.setAllowPaste(false);
        // call Message.rpgMessagesModelCallback(RpgMessageModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Message.class, Message.P_RpgMessages, modelRpgMessages);
    
        return modelRpgMessages;
    }
    
    public MessageTypeSearchModel getMessageTypeSearchModel() {
        if (modelMessageTypeSearch != null) return modelMessageTypeSearch;
        modelMessageTypeSearch = new MessageTypeSearchModel();
        HubSelectDelegate.adoptWhereHub(modelMessageTypeSearch.getHub(), Message.P_MessageType, getHub());
        return modelMessageTypeSearch;
    }
    public RpgMessageSearchModel getRpgMessagesSearchModel() {
        if (modelRpgMessagesSearch != null) return modelRpgMessagesSearch;
        modelRpgMessagesSearch = new RpgMessageSearchModel();
        return modelRpgMessagesSearch;
    }
    
    public HubCopy<Message> createHubCopy() {
        Hub<Message> hubMessagex = new Hub<>(Message.class);
        HubCopy<Message> hc = new HubCopy<>(getHub(), hubMessagex, true);
        return hc;
    }
    public MessageModel createCopy() {
        MessageModel mod = new MessageModel(createHubCopy().getHub());
        return mod;
    }
}

