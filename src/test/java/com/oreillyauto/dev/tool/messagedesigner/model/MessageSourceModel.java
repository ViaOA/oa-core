// Generated by OABuilder

package com.oreillyauto.dev.tool.messagedesigner.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.model.tableconfig.*;
import com.oreillyauto.dev.tool.messagedesigner.model.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.delegate.ModelDelegate;
import com.oreillyauto.dev.tool.messagedesigner.resource.Resource;

public class MessageSourceModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(MessageSourceModel.class.getName());
    
    // Hubs
    protected Hub<MessageSource> hub;
    // selected messageSources
    protected Hub<MessageSource> hubMultiSelect;
    // detail hubs
    protected Hub<MessageTypeRecord> hubMessageTypeRecords;
    protected Hub<MessageType> hubMessageTypes;
    
    // ObjectModels
    protected MessageTypeRecordModel modelMessageTypeRecords;
    protected MessageTypeModel modelMessageTypes;
    protected MessageSourceTableConfigModel modelTableConfig;
    
    // SearchModels used for references
    protected MessageTypeRecordSearchModel modelMessageTypeRecordsSearch;
    protected MessageTypeSearchModel modelMessageTypesSearch;
    
    public MessageSourceModel() {
        setDisplayName("Message Source");
        setPluralDisplayName("Message Sources");
    }
    
    public MessageSourceModel(Hub<MessageSource> hubMessageSource) {
        this();
        if (hubMessageSource != null) HubDelegate.setObjectClass(hubMessageSource, MessageSource.class);
        this.hub = hubMessageSource;
    }
    public MessageSourceModel(MessageSource messageSource) {
        this();
        getHub().add(messageSource);
        getHub().setPos(0);
    }
    
    public Hub<MessageSource> getOriginalHub() {
        return getHub();
    }
    
    public Hub<MessageTypeRecord> getMessageTypeRecords() {
        if (hubMessageTypeRecords == null) {
            hubMessageTypeRecords = getHub().getDetailHub(MessageSource.P_MessageTypeRecords);
        }
        return hubMessageTypeRecords;
    }
    public Hub<MessageType> getMessageTypes() {
        if (hubMessageTypes == null) {
            hubMessageTypes = getHub().getDetailHub(MessageSource.P_MessageTypes);
        }
        return hubMessageTypes;
    }
    public MessageSource getMessageSource() {
        return getHub().getAO();
    }
    
    public Hub<MessageSource> getHub() {
        if (hub == null) {
            hub = new Hub<MessageSource>(MessageSource.class);
        }
        return hub;
    }
    
    public Hub<MessageSource> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<MessageSource>(MessageSource.class);
        }
        return hubMultiSelect;
    }
    
    public MessageTypeRecordModel getMessageTypeRecordsModel() {
        if (modelMessageTypeRecords != null) return modelMessageTypeRecords;
        modelMessageTypeRecords = new MessageTypeRecordModel(getMessageTypeRecords());
        modelMessageTypeRecords.setDisplayName("Message Type Record");
        modelMessageTypeRecords.setPluralDisplayName("Message Type Records");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getMessageTypeRecords())) {
            modelMessageTypeRecords.setCreateUI(false);
        }
        modelMessageTypeRecords.setForJfc(getForJfc());
        modelMessageTypeRecords.setAllowNew(true);
        modelMessageTypeRecords.setAllowSave(true);
        modelMessageTypeRecords.setAllowAdd(false);
        modelMessageTypeRecords.setAllowMove(false);
        modelMessageTypeRecords.setAllowRemove(false);
        modelMessageTypeRecords.setAllowDelete(true);
        modelMessageTypeRecords.setAllowSearch(false);
        modelMessageTypeRecords.setAllowHubSearch(true);
        modelMessageTypeRecords.setAllowGotoEdit(true);
        modelMessageTypeRecords.setViewOnly(getViewOnly());
        modelMessageTypeRecords.setAllowNew(true);
        modelMessageTypeRecords.setAllowTableFilter(true);
        modelMessageTypeRecords.setAllowTableSorting(true);
        modelMessageTypeRecords.setAllowMultiSelect(false);
        modelMessageTypeRecords.setAllowCopy(false);
        modelMessageTypeRecords.setAllowCut(false);
        modelMessageTypeRecords.setAllowPaste(false);
        // call MessageSource.messageTypeRecordsModelCallback(MessageTypeRecordModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageSource.class, MessageSource.P_MessageTypeRecords, modelMessageTypeRecords);
    
        return modelMessageTypeRecords;
    }
    public MessageTypeModel getMessageTypesModel() {
        if (modelMessageTypes != null) return modelMessageTypes;
        modelMessageTypes = new MessageTypeModel(getMessageTypes());
        modelMessageTypes.setDisplayName("Message Type");
        modelMessageTypes.setPluralDisplayName("Message Types");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getMessageTypes())) {
            modelMessageTypes.setCreateUI(false);
        }
        modelMessageTypes.setForJfc(getForJfc());
        modelMessageTypes.setAllowNew(true);
        modelMessageTypes.setAllowSave(true);
        modelMessageTypes.setAllowAdd(false);
        modelMessageTypes.setAllowMove(true);
        modelMessageTypes.setAllowRemove(false);
        modelMessageTypes.setAllowDelete(true);
        modelMessageTypes.setAllowSearch(false);
        modelMessageTypes.setAllowHubSearch(true);
        modelMessageTypes.setAllowGotoEdit(true);
        modelMessageTypes.setViewOnly(getViewOnly());
        modelMessageTypes.setAllowNew(true);
        modelMessageTypes.setAllowTableFilter(false);
        modelMessageTypes.setAllowTableSorting(false);
        modelMessageTypes.setAllowMultiSelect(false);
        modelMessageTypes.setAllowCopy(false);
        modelMessageTypes.setAllowCut(false);
        modelMessageTypes.setAllowPaste(false);
        // call MessageSource.messageTypesModelCallback(MessageTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageSource.class, MessageSource.P_MessageTypes, modelMessageTypes);
    
        return modelMessageTypes;
    }
    
    public MessageTypeRecordSearchModel getMessageTypeRecordsSearchModel() {
        if (modelMessageTypeRecordsSearch != null) return modelMessageTypeRecordsSearch;
        modelMessageTypeRecordsSearch = new MessageTypeRecordSearchModel();
        return modelMessageTypeRecordsSearch;
    }
    public MessageTypeSearchModel getMessageTypesSearchModel() {
        if (modelMessageTypesSearch != null) return modelMessageTypesSearch;
        modelMessageTypesSearch = new MessageTypeSearchModel();
        return modelMessageTypesSearch;
    }
    
    public HubCopy<MessageSource> createHubCopy() {
        Hub<MessageSource> hubMessageSourcex = new Hub<>(MessageSource.class);
        HubCopy<MessageSource> hc = new HubCopy<>(getHub(), hubMessageSourcex, true);
        return hc;
    }
    public MessageSourceModel createCopy() {
        MessageSourceModel mod = new MessageSourceModel(createHubCopy().getHub());
        return mod;
    }
    
    public MessageSourceTableConfigModel getTableConfigModel() {
        if (modelTableConfig == null) {
            modelTableConfig = new MessageSourceTableConfigModel();
        }
        return modelTableConfig;
    }
}

