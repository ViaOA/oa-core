// Generated by OABuilder

package com.oreillyauto.dev.tool.messagedesigner.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.model.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.delegate.ModelDelegate;
import com.oreillyauto.dev.tool.messagedesigner.resource.Resource;

public class MessageTypeModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(MessageTypeModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      changedFilteredHub;
      notVerifiedFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<MessageType> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<MessageType> hubUnfiltered;
    protected Hub<MessageType> hubChangedFilteredHub;
    protected Hub<MessageType> hubNotVerifiedFilteredHub;
    // main hub that points to hubUnfiltered, hubChangedFilteredHub, hubNotVerifiedFilteredHub
    protected Hub<MessageType> hub;
    // selected messageTypes
    protected Hub<MessageType> hubMultiSelect;
    // detail hubs
    protected Hub<MessageSource> hubMessageSource;
    protected Hub<MessageGroup> hubMessageGroups;
    protected Hub<MessageRecord> hubMessageRecords;
    protected Hub<MessageTypeChange> hubMessageTypeChanges;
    
    // AddHubs used for references
    protected Hub<MessageSource> hubMessageSourceSelectFrom;
    
    // pickFrom
    protected Hub<MessageTypeRecord> hubMessageRecordsPickFromMessageTypeRecord;
    
    // ObjectModels
    protected MessageSourceModel modelMessageSource;
    protected MessageGroupModel modelMessageGroups;
    protected MessageRecordModel modelMessageRecords;
    protected MessageTypeChangeModel modelMessageTypeChanges;
    
    // selectFrom
    protected MessageSourceModel modelMessageSourceSelectFrom;
    
    // pickFrom
    protected MessageTypeRecordModel modelMessageRecordsPickFromMessageTypeRecord;
    protected MessageTypeRecordSearchModel modelMessageRecordsPickFromMessageTypeRecordSearch;
    
    // SearchModels used for references
    protected MessageSourceSearchModel modelMessageSourceSearch;
    protected MessageRecordSearchModel modelMessageRecordsSearch;
    
    // FilterModels
    protected MessageTypeChangedFilterModel modelMessageTypeChangedFilter;
    protected MessageTypeNotVerifiedFilterModel modelMessageTypeNotVerifiedFilter;
    
    public MessageTypeModel() {
        setDisplayName("Message Type");
        setPluralDisplayName("Message Types");
    }
    
    public MessageTypeModel(Hub<MessageType> hubMessageType) {
        this();
        if (hubMessageType != null) HubDelegate.setObjectClass(hubMessageType, MessageType.class);
        this.hubOriginal = hubMessageType;
    }
    public MessageTypeModel(MessageType messageType) {
        this();
        getHub().add(messageType);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void useChangedFilteredHub() {
        getHub().setSharedHub(getChangedFilteredHub(), true);
    }
    public void useNotVerifiedFilteredHub() {
        getHub().setSharedHub(getNotVerifiedFilteredHub(), true);
    }
    
    public Hub<MessageType> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<MessageType>(MessageType.class);
        }
        return hubOriginal;
    }
    
    public Hub<MessageSource> getMessageSourceHub() {
        if (hubMessageSource != null) return hubMessageSource;
        // this is the owner, use detailHub
        hubMessageSource = getHub().getDetailHub(MessageType.P_MessageSource);
        return hubMessageSource;
    }
    public Hub<MessageGroup> getMessageGroups() {
        if (hubMessageGroups == null) {
            hubMessageGroups = getHub().getDetailHub(MessageType.P_MessageGroups);
        }
        return hubMessageGroups;
    }
    public Hub<MessageRecord> getMessageRecords() {
        if (hubMessageRecords == null) {
            hubMessageRecords = getHub().getDetailHub(MessageType.P_MessageRecords);
        }
        return hubMessageRecords;
    }
    public Hub<MessageTypeChange> getMessageTypeChanges() {
        if (hubMessageTypeChanges == null) {
            hubMessageTypeChanges = getHub().getDetailHub(MessageType.P_MessageTypeChanges);
        }
        return hubMessageTypeChanges;
    }
    public Hub<MessageSource> getMessageSourceSelectFromHub() {
        if (hubMessageSourceSelectFrom != null) return hubMessageSourceSelectFrom;
        hubMessageSourceSelectFrom = new Hub<MessageSource>(MessageSource.class);
        Hub<MessageSource> hubMessageSourceSelectFrom1 = ModelDelegate.getMessageSources().createSharedHub();
        HubCombined<MessageSource> hubCombined = new HubCombined(hubMessageSourceSelectFrom, hubMessageSourceSelectFrom1, getMessageSourceHub());
        hubMessageSourceSelectFrom.setLinkHub(getHub(), MessageType.P_MessageSource); 
        return hubMessageSourceSelectFrom;
    }
    public Hub<MessageTypeRecord> getMessageRecordsPickFromMessageTypeRecordHub() {
        if (hubMessageRecordsPickFromMessageTypeRecord != null) return hubMessageRecordsPickFromMessageTypeRecord;
        hubMessageRecordsPickFromMessageTypeRecord = new Hub<MessageTypeRecord>(MessageTypeRecord.class);
        new HubMerger(getHub(), hubMessageRecordsPickFromMessageTypeRecord, MessageTypePP.messageSource().messageTypeRecords().pp, false);
        return hubMessageRecordsPickFromMessageTypeRecord;
    }
    public Hub<MessageType> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<MessageType>(MessageType.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<MessageType> getChangedFilteredHub() {
        if (hubChangedFilteredHub == null) {
            hubChangedFilteredHub = new Hub<MessageType>(MessageType.class);
        }
        return hubChangedFilteredHub;
    }
    public Hub<MessageType> getNotVerifiedFilteredHub() {
        if (hubNotVerifiedFilteredHub == null) {
            hubNotVerifiedFilteredHub = new Hub<MessageType>(MessageType.class);
        }
        return hubNotVerifiedFilteredHub;
    }
    
    public MessageType getMessageType() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<MessageType> getHub() {
        if (hub == null) {
            hub = new Hub<MessageType>(MessageType.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<MessageType> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<MessageType>(MessageType.class);
        }
        return hubMultiSelect;
    }
    
    public MessageSourceModel getMessageSourceModel() {
        if (modelMessageSource != null) return modelMessageSource;
        modelMessageSource = new MessageSourceModel(getMessageSourceHub());
        modelMessageSource.setDisplayName("Message Source");
        modelMessageSource.setPluralDisplayName("Message Sources");
        modelMessageSource.setForJfc(getForJfc());
        modelMessageSource.setAllowNew(false);
        modelMessageSource.setAllowSave(true);
        modelMessageSource.setAllowAdd(false);
        modelMessageSource.setAllowRemove(false);
        modelMessageSource.setAllowClear(false);
        modelMessageSource.setAllowDelete(false);
        modelMessageSource.setAllowSearch(true);
        modelMessageSource.setAllowHubSearch(true);
        modelMessageSource.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelMessageSource.setCreateUI(li == null || !MessageType.P_MessageSource.equals(li.getName()) );
        modelMessageSource.setViewOnly(getViewOnly());
        // call MessageType.messageSourceModelCallback(MessageSourceModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageType.class, MessageType.P_MessageSource, modelMessageSource);
    
        return modelMessageSource;
    }
    public MessageGroupModel getMessageGroupsModel() {
        if (modelMessageGroups != null) return modelMessageGroups;
        modelMessageGroups = new MessageGroupModel(getMessageGroups());
        modelMessageGroups.setDisplayName("Message Group");
        modelMessageGroups.setPluralDisplayName("Message Groups");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getMessageGroups())) {
            modelMessageGroups.setCreateUI(false);
        }
        modelMessageGroups.setForJfc(getForJfc());
        modelMessageGroups.setAllowNew(true);
        modelMessageGroups.setAllowSave(true);
        modelMessageGroups.setAllowAdd(false);
        modelMessageGroups.setAllowMove(false);
        modelMessageGroups.setAllowRemove(false);
        modelMessageGroups.setAllowDelete(true);
        modelMessageGroups.setAllowSearch(false);
        modelMessageGroups.setAllowHubSearch(false);
        modelMessageGroups.setAllowGotoEdit(true);
        modelMessageGroups.setViewOnly(getViewOnly());
        modelMessageGroups.setAllowNew(true);
        modelMessageGroups.setAllowTableFilter(true);
        modelMessageGroups.setAllowTableSorting(true);
        modelMessageGroups.setAllowMultiSelect(false);
        modelMessageGroups.setAllowCopy(false);
        modelMessageGroups.setAllowCut(false);
        modelMessageGroups.setAllowPaste(false);
        // call MessageType.messageGroupsModelCallback(MessageGroupModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageType.class, MessageType.P_MessageGroups, modelMessageGroups);
    
        return modelMessageGroups;
    }
    public MessageRecordModel getMessageRecordsModel() {
        if (modelMessageRecords != null) return modelMessageRecords;
        modelMessageRecords = new MessageRecordModel(getMessageRecords());
        modelMessageRecords.setDisplayName("Message Record");
        modelMessageRecords.setPluralDisplayName("Message Records");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getMessageRecords())) {
            modelMessageRecords.setCreateUI(false);
        }
        modelMessageRecords.setForJfc(getForJfc());
        modelMessageRecords.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick MessageTypeRecord
        modelMessageRecords.setAllowSave(true);
        modelMessageRecords.setAllowAdd(true); // Add is overwritten to create new MessageRecord by first selecting MessageTypeRecord
        modelMessageRecords.setAllowMove(true);
        modelMessageRecords.setAllowRemove(false);
        modelMessageRecords.setAllowDelete(true);
        modelMessageRecords.setAllowSearch(false);
        modelMessageRecords.setAllowHubSearch(true);
        modelMessageRecords.setAllowGotoEdit(true);
        modelMessageRecords.setViewOnly(getViewOnly());
        modelMessageRecords.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick MessageTypeRecord
        modelMessageRecords.setAllowTableFilter(false);
        modelMessageRecords.setAllowTableSorting(false);
        modelMessageRecords.setAllowMultiSelect(false);
        modelMessageRecords.setAllowCopy(false);
        modelMessageRecords.setAllowCut(false);
        modelMessageRecords.setAllowPaste(false);
        // call MessageType.messageRecordsModelCallback(MessageRecordModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageType.class, MessageType.P_MessageRecords, modelMessageRecords);
    
        return modelMessageRecords;
    }
    public MessageTypeChangeModel getMessageTypeChangesModel() {
        if (modelMessageTypeChanges != null) return modelMessageTypeChanges;
        modelMessageTypeChanges = new MessageTypeChangeModel(getMessageTypeChanges());
        modelMessageTypeChanges.setDisplayName("Message Type Change");
        modelMessageTypeChanges.setPluralDisplayName("Message Type Changes");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getMessageTypeChanges())) {
            modelMessageTypeChanges.setCreateUI(false);
        }
        modelMessageTypeChanges.setForJfc(getForJfc());
        modelMessageTypeChanges.setAllowNew(false);
        modelMessageTypeChanges.setAllowSave(true);
        modelMessageTypeChanges.setAllowAdd(false);
        modelMessageTypeChanges.setAllowMove(false);
        modelMessageTypeChanges.setAllowRemove(false);
        modelMessageTypeChanges.setAllowDelete(true);
        modelMessageTypeChanges.setAllowSearch(false);
        modelMessageTypeChanges.setAllowHubSearch(false);
        modelMessageTypeChanges.setAllowGotoEdit(true);
        modelMessageTypeChanges.setViewOnly(getViewOnly());
        modelMessageTypeChanges.setAllowNew(false);
        modelMessageTypeChanges.setAllowTableFilter(true);
        modelMessageTypeChanges.setAllowTableSorting(true);
        modelMessageTypeChanges.setAllowMultiSelect(false);
        modelMessageTypeChanges.setAllowCopy(false);
        modelMessageTypeChanges.setAllowCut(false);
        modelMessageTypeChanges.setAllowPaste(false);
        // call MessageType.messageTypeChangesModelCallback(MessageTypeChangeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageType.class, MessageType.P_MessageTypeChanges, modelMessageTypeChanges);
    
        return modelMessageTypeChanges;
    }
    
    public MessageSourceModel getMessageSourceSelectFromModel() {
        if (modelMessageSourceSelectFrom != null) return modelMessageSourceSelectFrom;
        modelMessageSourceSelectFrom = new MessageSourceModel(getMessageSourceSelectFromHub());
        modelMessageSourceSelectFrom.setDisplayName("Message Source");
        modelMessageSourceSelectFrom.setPluralDisplayName("Message Sources");
        modelMessageSourceSelectFrom.setForJfc(getForJfc());
        modelMessageSourceSelectFrom.setAllowNew(false);
        modelMessageSourceSelectFrom.setAllowSave(true);
        modelMessageSourceSelectFrom.setAllowAdd(false);
        modelMessageSourceSelectFrom.setAllowMove(false);
        modelMessageSourceSelectFrom.setAllowRemove(false);
        modelMessageSourceSelectFrom.setAllowDelete(false);
        modelMessageSourceSelectFrom.setAllowSearch(true);
        modelMessageSourceSelectFrom.setAllowHubSearch(true);
        modelMessageSourceSelectFrom.setAllowGotoEdit(true);
        modelMessageSourceSelectFrom.setViewOnly(getViewOnly());
        modelMessageSourceSelectFrom.setAllowNew(false);
        modelMessageSourceSelectFrom.setAllowTableFilter(true);
        modelMessageSourceSelectFrom.setAllowTableSorting(true);
        modelMessageSourceSelectFrom.setAllowCut(false);
        modelMessageSourceSelectFrom.setAllowCopy(false);
        modelMessageSourceSelectFrom.setAllowPaste(false);
        modelMessageSourceSelectFrom.setAllowMultiSelect(false);
        return modelMessageSourceSelectFrom;
    }
    public MessageTypeRecordModel getMessageRecordsPickFromMessageTypeRecordModel() {
        if (modelMessageRecordsPickFromMessageTypeRecord != null) return modelMessageRecordsPickFromMessageTypeRecord;
        modelMessageRecordsPickFromMessageTypeRecord = new MessageTypeRecordModel(getMessageRecordsPickFromMessageTypeRecordHub());
        modelMessageRecordsPickFromMessageTypeRecord.setDisplayName("Message Record");
        modelMessageRecordsPickFromMessageTypeRecord.setPluralDisplayName("Message Records");
        modelMessageRecordsPickFromMessageTypeRecord.setForJfc(getForJfc());
        modelMessageRecordsPickFromMessageTypeRecord.setAllowNew(false);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowSave(true);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowAdd(false);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowMove(false);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowRemove(false);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowDelete(false);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowSearch(true);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowHubSearch(true);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowGotoEdit(true);
        modelMessageRecordsPickFromMessageTypeRecord.setViewOnly(getViewOnly());
        modelMessageRecordsPickFromMessageTypeRecord.setAllowNew(false);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowTableFilter(true);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowTableSorting(true);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowCut(false);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowCopy(false);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowPaste(false);
        modelMessageRecordsPickFromMessageTypeRecord.setAllowMultiSelect(true);
        new HubMerger<MessageRecord, MessageTypeRecord>(getMessageRecords(), modelMessageRecordsPickFromMessageTypeRecord.getMultiSelectHub(), MessageRecord.P_MessageTypeRecord);
        return modelMessageRecordsPickFromMessageTypeRecord;
    }
    public MessageTypeRecordSearchModel getMessageRecordsPickFromMessageTypeRecordSearchModel() {
        if (modelMessageRecordsPickFromMessageTypeRecordSearch != null) return modelMessageRecordsPickFromMessageTypeRecordSearch;
        modelMessageRecordsPickFromMessageTypeRecordSearch = new MessageTypeRecordSearchModel();
        OAFilter filter = new OAInFilter(getMessageRecords(), MessageRecordPP.messageType().messageSource().messageTypeRecords().pp);
        modelMessageRecordsPickFromMessageTypeRecordSearch.getMessageTypeRecordSearch().setExtraWhereFilter(filter);
        return modelMessageRecordsPickFromMessageTypeRecordSearch;
    }
    public MessageSourceSearchModel getMessageSourceSearchModel() {
        if (modelMessageSourceSearch != null) return modelMessageSourceSearch;
        modelMessageSourceSearch = new MessageSourceSearchModel();
        HubSelectDelegate.adoptWhereHub(modelMessageSourceSearch.getHub(), MessageType.P_MessageSource, getHub());
        return modelMessageSourceSearch;
    }
    public MessageRecordSearchModel getMessageRecordsSearchModel() {
        if (modelMessageRecordsSearch != null) return modelMessageRecordsSearch;
        modelMessageRecordsSearch = new MessageRecordSearchModel();
        return modelMessageRecordsSearch;
    }
    
    public MessageTypeChangedFilterModel getMessageTypeChangedFilterModel() {
        if (modelMessageTypeChangedFilter == null) {
            modelMessageTypeChangedFilter = new MessageTypeChangedFilterModel(getUnfilteredHub(), getChangedFilteredHub());
            new HubShareAO(getUnfilteredHub(), getChangedFilteredHub());
        }
        return modelMessageTypeChangedFilter;
    }
    public MessageTypeNotVerifiedFilterModel getMessageTypeNotVerifiedFilterModel() {
        if (modelMessageTypeNotVerifiedFilter == null) {
            modelMessageTypeNotVerifiedFilter = new MessageTypeNotVerifiedFilterModel(getUnfilteredHub(), getNotVerifiedFilteredHub());
            new HubShareAO(getUnfilteredHub(), getNotVerifiedFilteredHub());
        }
        return modelMessageTypeNotVerifiedFilter;
    }
    
    public HubCopy<MessageType> createHubCopy() {
        Hub<MessageType> hubMessageTypex = new Hub<>(MessageType.class);
        HubCopy<MessageType> hc = new HubCopy<>(getHub(), hubMessageTypex, true);
        return hc;
    }
    public MessageTypeModel createCopy() {
        MessageTypeModel mod = new MessageTypeModel(createHubCopy().getHub());
        return mod;
    }
}

