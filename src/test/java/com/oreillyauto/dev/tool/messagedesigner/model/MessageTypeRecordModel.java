// Generated by OABuilder

package com.oreillyauto.dev.tool.messagedesigner.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.model.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.delegate.ModelDelegate;
import com.oreillyauto.dev.tool.messagedesigner.resource.Resource;

public class MessageTypeRecordModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(MessageTypeRecordModel.class.getName());
    
    // Hubs
    protected Hub<MessageTypeRecord> hub;
    // selected messageTypeRecords
    protected Hub<MessageTypeRecord> hubMultiSelect;
    // detail hubs
    protected Hub<MessageSource> hubMessageSource;
    protected Hub<MessageTypeColumn> hubSubCodeColumn;
    protected Hub<MessageRecord> hubMessageRecords;
    protected Hub<MessageTypeColumn> hubMessageTypeColumns;
    protected Hub<RpgProgram> hubRpgPrograms;
    
    // AddHubs used for references
    protected Hub<MessageSource> hubMessageSourceSelectFrom;
    protected Hub<MessageTypeColumn> hubSubCodeColumnSelectFrom;
    protected Hub<RpgProgram> hubRpgProgramsSelectFrom;
    
    // ObjectModels
    protected MessageSourceModel modelMessageSource;
    protected MessageTypeColumnModel modelSubCodeColumn;
    protected MessageRecordModel modelMessageRecords;
    protected MessageTypeColumnModel modelMessageTypeColumns;
    protected RpgProgramModel modelRpgPrograms;
    
    // selectFrom
    protected MessageSourceModel modelMessageSourceSelectFrom;
    protected MessageTypeColumnModel modelSubCodeColumnSelectFrom;
    protected RpgProgramModel modelRpgProgramsSelectFrom;
    
    // SearchModels used for references
    protected MessageSourceSearchModel modelMessageSourceSearch;
    protected MessageTypeColumnSearchModel modelSubCodeColumnSearch;
    protected MessageRecordSearchModel modelMessageRecordsSearch;
    protected MessageTypeColumnSearchModel modelMessageTypeColumnsSearch;
    protected RpgProgramSearchModel modelRpgProgramsSearch;
    
    public MessageTypeRecordModel() {
        setDisplayName("Message Type Record");
        setPluralDisplayName("Message Type Records");
    }
    
    public MessageTypeRecordModel(Hub<MessageTypeRecord> hubMessageTypeRecord) {
        this();
        if (hubMessageTypeRecord != null) HubDelegate.setObjectClass(hubMessageTypeRecord, MessageTypeRecord.class);
        this.hub = hubMessageTypeRecord;
    }
    public MessageTypeRecordModel(MessageTypeRecord messageTypeRecord) {
        this();
        getHub().add(messageTypeRecord);
        getHub().setPos(0);
    }
    
    public Hub<MessageTypeRecord> getOriginalHub() {
        return getHub();
    }
    
    public Hub<MessageSource> getMessageSourceHub() {
        if (hubMessageSource != null) return hubMessageSource;
        // this is the owner, use detailHub
        hubMessageSource = getHub().getDetailHub(MessageTypeRecord.P_MessageSource);
        return hubMessageSource;
    }
    public Hub<MessageTypeColumn> getSubCodeColumnHub() {
        if (hubSubCodeColumn != null) return hubSubCodeColumn;
        hubSubCodeColumn = getHub().getDetailHub(MessageTypeRecord.P_SubCodeColumn);
        return hubSubCodeColumn;
    }
    public Hub<MessageRecord> getMessageRecords() {
        if (hubMessageRecords == null) {
            hubMessageRecords = getHub().getDetailHub(MessageTypeRecord.P_MessageRecords);
        }
        return hubMessageRecords;
    }
    public Hub<MessageTypeColumn> getMessageTypeColumns() {
        if (hubMessageTypeColumns == null) {
            hubMessageTypeColumns = getHub().getDetailHub(MessageTypeRecord.P_MessageTypeColumns);
        }
        return hubMessageTypeColumns;
    }
    public Hub<RpgProgram> getRpgPrograms() {
        if (hubRpgPrograms == null) {
            hubRpgPrograms = getHub().getDetailHub(MessageTypeRecord.P_RpgPrograms);
        }
        return hubRpgPrograms;
    }
    public Hub<MessageSource> getMessageSourceSelectFromHub() {
        if (hubMessageSourceSelectFrom != null) return hubMessageSourceSelectFrom;
        hubMessageSourceSelectFrom = new Hub<MessageSource>(MessageSource.class);
        Hub<MessageSource> hubMessageSourceSelectFrom1 = ModelDelegate.getMessageSources().createSharedHub();
        HubCombined<MessageSource> hubCombined = new HubCombined(hubMessageSourceSelectFrom, hubMessageSourceSelectFrom1, getMessageSourceHub());
        hubMessageSourceSelectFrom.setLinkHub(getHub(), MessageTypeRecord.P_MessageSource); 
        return hubMessageSourceSelectFrom;
    }
    public Hub<MessageTypeColumn> getSubCodeColumnSelectFromHub() {
        if (hubSubCodeColumnSelectFrom != null) return hubSubCodeColumnSelectFrom;
        hubSubCodeColumnSelectFrom = new Hub<MessageTypeColumn>(MessageTypeColumn.class);
        Hub<MessageTypeColumn>hubSubCodeColumnSelectFrom1 = new Hub<MessageTypeColumn>(MessageTypeColumn.class);
        new HubMerger(getHub(), hubSubCodeColumnSelectFrom1, MessageTypeRecordPP.messageTypeColumns().pp, false);
        HubCombined<MessageTypeColumn> hubCombined = new HubCombined(hubSubCodeColumnSelectFrom, hubSubCodeColumnSelectFrom1, getSubCodeColumnHub());
        hubSubCodeColumnSelectFrom.setLinkHub(getHub(), MessageTypeRecord.P_SubCodeColumn); 
        return hubSubCodeColumnSelectFrom;
    }
    public Hub<RpgProgram> getRpgProgramsSelectFromHub() {
        if (hubRpgProgramsSelectFrom != null) return hubRpgProgramsSelectFrom;
        hubRpgProgramsSelectFrom = ModelDelegate.getRpgPrograms().createSharedHub();
        return hubRpgProgramsSelectFrom;
    }
    public MessageTypeRecord getMessageTypeRecord() {
        return getHub().getAO();
    }
    
    public Hub<MessageTypeRecord> getHub() {
        if (hub == null) {
            hub = new Hub<MessageTypeRecord>(MessageTypeRecord.class);
        }
        return hub;
    }
    
    public Hub<MessageTypeRecord> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<MessageTypeRecord>(MessageTypeRecord.class);
        }
        return hubMultiSelect;
    }
    
    public MessageSourceModel getMessageSourceModel() {
        if (modelMessageSource != null) return modelMessageSource;
        modelMessageSource = new MessageSourceModel(getMessageSourceHub());
        modelMessageSource.setDisplayName("Message Source");
        modelMessageSource.setPluralDisplayName("Message Sources");
        modelMessageSource.setForJfc(getForJfc());
        modelMessageSource.setAllowNew(false);
        modelMessageSource.setAllowSave(true);
        modelMessageSource.setAllowAdd(false);
        modelMessageSource.setAllowRemove(false);
        modelMessageSource.setAllowClear(false);
        modelMessageSource.setAllowDelete(false);
        modelMessageSource.setAllowSearch(true);
        modelMessageSource.setAllowHubSearch(true);
        modelMessageSource.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelMessageSource.setCreateUI(li == null || !MessageTypeRecord.P_MessageSource.equals(li.getName()) );
        modelMessageSource.setViewOnly(getViewOnly());
        // call MessageTypeRecord.messageSourceModelCallback(MessageSourceModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageTypeRecord.class, MessageTypeRecord.P_MessageSource, modelMessageSource);
    
        return modelMessageSource;
    }
    public MessageTypeColumnModel getSubCodeColumnModel() {
        if (modelSubCodeColumn != null) return modelSubCodeColumn;
        modelSubCodeColumn = new MessageTypeColumnModel(getSubCodeColumnHub());
        modelSubCodeColumn.setDisplayName("Sub Code Column");
        modelSubCodeColumn.setPluralDisplayName("Message Type Columns");
        modelSubCodeColumn.setForJfc(getForJfc());
        modelSubCodeColumn.setAllowNew(false);
        modelSubCodeColumn.setAllowSave(true);
        modelSubCodeColumn.setAllowAdd(false);
        modelSubCodeColumn.setAllowRemove(true);
        modelSubCodeColumn.setAllowClear(true);
        modelSubCodeColumn.setAllowDelete(false);
        modelSubCodeColumn.setAllowSearch(true);
        modelSubCodeColumn.setAllowHubSearch(true);
        modelSubCodeColumn.setAllowGotoEdit(true);
        modelSubCodeColumn.setViewOnly(true);
        // call MessageTypeRecord.subCodeColumnModelCallback(MessageTypeColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageTypeRecord.class, MessageTypeRecord.P_SubCodeColumn, modelSubCodeColumn);
    
        return modelSubCodeColumn;
    }
    public MessageRecordModel getMessageRecordsModel() {
        if (modelMessageRecords != null) return modelMessageRecords;
        modelMessageRecords = new MessageRecordModel(getMessageRecords());
        modelMessageRecords.setDisplayName("Message Record");
        modelMessageRecords.setPluralDisplayName("Message Records");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getMessageRecords())) {
            modelMessageRecords.setCreateUI(false);
        }
        modelMessageRecords.setForJfc(getForJfc());
        modelMessageRecords.setAllowNew(false);
        modelMessageRecords.setAllowSave(true);
        modelMessageRecords.setAllowAdd(false);
        modelMessageRecords.setAllowMove(false);
        modelMessageRecords.setAllowRemove(false);
        modelMessageRecords.setAllowDelete(true);
        modelMessageRecords.setAllowSearch(false);
        modelMessageRecords.setAllowHubSearch(true);
        modelMessageRecords.setAllowGotoEdit(true);
        modelMessageRecords.setViewOnly(getViewOnly());
        modelMessageRecords.setAllowNew(false);
        modelMessageRecords.setAllowTableFilter(true);
        modelMessageRecords.setAllowTableSorting(true);
        modelMessageRecords.setAllowMultiSelect(false);
        modelMessageRecords.setAllowCopy(false);
        modelMessageRecords.setAllowCut(false);
        modelMessageRecords.setAllowPaste(false);
        // call MessageTypeRecord.messageRecordsModelCallback(MessageRecordModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageTypeRecord.class, MessageTypeRecord.P_MessageRecords, modelMessageRecords);
    
        return modelMessageRecords;
    }
    public MessageTypeColumnModel getMessageTypeColumnsModel() {
        if (modelMessageTypeColumns != null) return modelMessageTypeColumns;
        modelMessageTypeColumns = new MessageTypeColumnModel(getMessageTypeColumns());
        modelMessageTypeColumns.setDisplayName("Message Type Column");
        modelMessageTypeColumns.setPluralDisplayName("Message Type Columns");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getMessageTypeColumns())) {
            modelMessageTypeColumns.setCreateUI(false);
        }
        modelMessageTypeColumns.setForJfc(getForJfc());
        modelMessageTypeColumns.setAllowNew(true);
        modelMessageTypeColumns.setAllowSave(true);
        modelMessageTypeColumns.setAllowAdd(false);
        modelMessageTypeColumns.setAllowMove(true);
        modelMessageTypeColumns.setAllowRemove(false);
        modelMessageTypeColumns.setAllowDelete(true);
        modelMessageTypeColumns.setAllowSearch(false);
        modelMessageTypeColumns.setAllowHubSearch(true);
        modelMessageTypeColumns.setAllowGotoEdit(true);
        modelMessageTypeColumns.setViewOnly(getViewOnly());
        modelMessageTypeColumns.setAllowNew(true);
        modelMessageTypeColumns.setAllowTableFilter(false);
        modelMessageTypeColumns.setAllowTableSorting(false);
        modelMessageTypeColumns.setAllowMultiSelect(false);
        modelMessageTypeColumns.setAllowCopy(false);
        modelMessageTypeColumns.setAllowCut(false);
        modelMessageTypeColumns.setAllowPaste(false);
        // call MessageTypeRecord.messageTypeColumnsModelCallback(MessageTypeColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageTypeRecord.class, MessageTypeRecord.P_MessageTypeColumns, modelMessageTypeColumns);
    
        return modelMessageTypeColumns;
    }
    public RpgProgramModel getRpgProgramsModel() {
        if (modelRpgPrograms != null) return modelRpgPrograms;
        modelRpgPrograms = new RpgProgramModel(getRpgPrograms());
        modelRpgPrograms.setDisplayName("Rpg Program");
        modelRpgPrograms.setPluralDisplayName("Rpg Programs");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getRpgPrograms())) {
            modelRpgPrograms.setCreateUI(false);
        }
        modelRpgPrograms.setForJfc(getForJfc());
        modelRpgPrograms.setAllowNew(true);
        modelRpgPrograms.setAllowSave(true);
        modelRpgPrograms.setAllowAdd(true);
        modelRpgPrograms.setAllowMove(false);
        modelRpgPrograms.setAllowRemove(true);
        modelRpgPrograms.setAllowDelete(false);
        modelRpgPrograms.setAllowSearch(false);
        modelRpgPrograms.setAllowHubSearch(true);
        modelRpgPrograms.setAllowGotoEdit(true);
        modelRpgPrograms.setViewOnly(getViewOnly());
        modelRpgPrograms.setAllowNew(true);
        modelRpgPrograms.setAllowTableFilter(true);
        modelRpgPrograms.setAllowTableSorting(true);
        modelRpgPrograms.setAllowMultiSelect(false);
        modelRpgPrograms.setAllowCopy(false);
        modelRpgPrograms.setAllowCut(false);
        modelRpgPrograms.setAllowPaste(false);
        // call MessageTypeRecord.rpgProgramsModelCallback(RpgProgramModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(MessageTypeRecord.class, MessageTypeRecord.P_RpgPrograms, modelRpgPrograms);
    
        return modelRpgPrograms;
    }
    
    public MessageSourceModel getMessageSourceSelectFromModel() {
        if (modelMessageSourceSelectFrom != null) return modelMessageSourceSelectFrom;
        modelMessageSourceSelectFrom = new MessageSourceModel(getMessageSourceSelectFromHub());
        modelMessageSourceSelectFrom.setDisplayName("Message Source");
        modelMessageSourceSelectFrom.setPluralDisplayName("Message Sources");
        modelMessageSourceSelectFrom.setForJfc(getForJfc());
        modelMessageSourceSelectFrom.setAllowNew(false);
        modelMessageSourceSelectFrom.setAllowSave(true);
        modelMessageSourceSelectFrom.setAllowAdd(false);
        modelMessageSourceSelectFrom.setAllowMove(false);
        modelMessageSourceSelectFrom.setAllowRemove(false);
        modelMessageSourceSelectFrom.setAllowDelete(false);
        modelMessageSourceSelectFrom.setAllowSearch(true);
        modelMessageSourceSelectFrom.setAllowHubSearch(true);
        modelMessageSourceSelectFrom.setAllowGotoEdit(true);
        modelMessageSourceSelectFrom.setViewOnly(getViewOnly());
        modelMessageSourceSelectFrom.setAllowNew(false);
        modelMessageSourceSelectFrom.setAllowTableFilter(true);
        modelMessageSourceSelectFrom.setAllowTableSorting(true);
        modelMessageSourceSelectFrom.setAllowCut(false);
        modelMessageSourceSelectFrom.setAllowCopy(false);
        modelMessageSourceSelectFrom.setAllowPaste(false);
        modelMessageSourceSelectFrom.setAllowMultiSelect(false);
        return modelMessageSourceSelectFrom;
    }
    public MessageTypeColumnModel getSubCodeColumnSelectFromModel() {
        if (modelSubCodeColumnSelectFrom != null) return modelSubCodeColumnSelectFrom;
        modelSubCodeColumnSelectFrom = new MessageTypeColumnModel(getSubCodeColumnSelectFromHub());
        modelSubCodeColumnSelectFrom.setDisplayName("Message Type Column");
        modelSubCodeColumnSelectFrom.setPluralDisplayName("Message Type Columns");
        modelSubCodeColumnSelectFrom.setForJfc(getForJfc());
        modelSubCodeColumnSelectFrom.setAllowNew(false);
        modelSubCodeColumnSelectFrom.setAllowSave(true);
        modelSubCodeColumnSelectFrom.setAllowAdd(false);
        modelSubCodeColumnSelectFrom.setAllowMove(false);
        modelSubCodeColumnSelectFrom.setAllowRemove(false);
        modelSubCodeColumnSelectFrom.setAllowDelete(false);
        modelSubCodeColumnSelectFrom.setAllowSearch(true);
        modelSubCodeColumnSelectFrom.setAllowHubSearch(true);
        modelSubCodeColumnSelectFrom.setAllowGotoEdit(true);
        modelSubCodeColumnSelectFrom.setViewOnly(getViewOnly());
        modelSubCodeColumnSelectFrom.setAllowNew(false);
        modelSubCodeColumnSelectFrom.setAllowTableFilter(true);
        modelSubCodeColumnSelectFrom.setAllowTableSorting(true);
        modelSubCodeColumnSelectFrom.setAllowCut(false);
        modelSubCodeColumnSelectFrom.setAllowCopy(false);
        modelSubCodeColumnSelectFrom.setAllowPaste(false);
        modelSubCodeColumnSelectFrom.setAllowMultiSelect(false);
        return modelSubCodeColumnSelectFrom;
    }
    public RpgProgramModel getRpgProgramsSelectFromModel() {
        if (modelRpgProgramsSelectFrom != null) return modelRpgProgramsSelectFrom;
        modelRpgProgramsSelectFrom = new RpgProgramModel(getRpgProgramsSelectFromHub());
        modelRpgProgramsSelectFrom.setDisplayName("Rpg Program");
        modelRpgProgramsSelectFrom.setPluralDisplayName("Rpg Programs");
        modelRpgProgramsSelectFrom.setForJfc(getForJfc());
        modelRpgProgramsSelectFrom.setAllowNew(false);
        modelRpgProgramsSelectFrom.setAllowSave(true);
        modelRpgProgramsSelectFrom.setAllowAdd(false);
        modelRpgProgramsSelectFrom.setAllowMove(false);
        modelRpgProgramsSelectFrom.setAllowRemove(false);
        modelRpgProgramsSelectFrom.setAllowDelete(false);
        modelRpgProgramsSelectFrom.setAllowSearch(true);
        modelRpgProgramsSelectFrom.setAllowHubSearch(true);
        modelRpgProgramsSelectFrom.setAllowGotoEdit(true);
        modelRpgProgramsSelectFrom.setViewOnly(getViewOnly());
        modelRpgProgramsSelectFrom.setAllowNew(false);
        modelRpgProgramsSelectFrom.setAllowTableFilter(true);
        modelRpgProgramsSelectFrom.setAllowTableSorting(true);
        modelRpgProgramsSelectFrom.setAllowCut(false);
        modelRpgProgramsSelectFrom.setAllowCopy(false);
        modelRpgProgramsSelectFrom.setAllowPaste(false);
        modelRpgProgramsSelectFrom.setAllowMultiSelect(true);
        new HubMakeCopy(getRpgPrograms(), modelRpgProgramsSelectFrom.getMultiSelectHub());
        return modelRpgProgramsSelectFrom;
    }
    public MessageSourceSearchModel getMessageSourceSearchModel() {
        if (modelMessageSourceSearch != null) return modelMessageSourceSearch;
        modelMessageSourceSearch = new MessageSourceSearchModel();
        HubSelectDelegate.adoptWhereHub(modelMessageSourceSearch.getHub(), MessageTypeRecord.P_MessageSource, getHub());
        return modelMessageSourceSearch;
    }
    public MessageTypeColumnSearchModel getSubCodeColumnSearchModel() {
        if (modelSubCodeColumnSearch != null) return modelSubCodeColumnSearch;
        modelSubCodeColumnSearch = new MessageTypeColumnSearchModel();
        OAFilter filter = new OAInFilter(MessageTypeRecordModel.this.getHub(), MessageTypeRecordPP.messageTypeColumns().pp);
        modelSubCodeColumnSearch.getMessageTypeColumnSearch().setExtraWhereFilter(filter);
        return modelSubCodeColumnSearch;
    }
    public MessageRecordSearchModel getMessageRecordsSearchModel() {
        if (modelMessageRecordsSearch != null) return modelMessageRecordsSearch;
        modelMessageRecordsSearch = new MessageRecordSearchModel();
        return modelMessageRecordsSearch;
    }
    public MessageTypeColumnSearchModel getMessageTypeColumnsSearchModel() {
        if (modelMessageTypeColumnsSearch != null) return modelMessageTypeColumnsSearch;
        modelMessageTypeColumnsSearch = new MessageTypeColumnSearchModel();
        return modelMessageTypeColumnsSearch;
    }
    public RpgProgramSearchModel getRpgProgramsSearchModel() {
        if (modelRpgProgramsSearch != null) return modelRpgProgramsSearch;
        modelRpgProgramsSearch = new RpgProgramSearchModel();
        return modelRpgProgramsSearch;
    }
    
    public HubCopy<MessageTypeRecord> createHubCopy() {
        Hub<MessageTypeRecord> hubMessageTypeRecordx = new Hub<>(MessageTypeRecord.class);
        HubCopy<MessageTypeRecord> hc = new HubCopy<>(getHub(), hubMessageTypeRecordx, true);
        return hc;
    }
    public MessageTypeRecordModel createCopy() {
        MessageTypeRecordModel mod = new MessageTypeRecordModel(createHubCopy().getHub());
        return mod;
    }
}

