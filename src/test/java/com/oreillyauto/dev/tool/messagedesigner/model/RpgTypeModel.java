// Generated by OABuilder

package com.oreillyauto.dev.tool.messagedesigner.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.model.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.delegate.ModelDelegate;
import com.oreillyauto.dev.tool.messagedesigner.resource.Resource;

public class RpgTypeModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(RpgTypeModel.class.getName());
    
    // Hubs
    protected Hub<RpgType> hub;
    // selected rpgTypes
    protected Hub<RpgType> hubMultiSelect;
    // detail hubs
    protected Hub<JsonType> hubJsonType;
    
    // AddHubs used for references
    protected Hub<JsonType> hubJsonTypeSelectFrom;
    
    // ObjectModels
    protected JsonTypeModel modelJsonType;
    
    // selectFrom
    protected JsonTypeModel modelJsonTypeSelectFrom;
    
    // SearchModels used for references
    protected JsonTypeSearchModel modelJsonTypeSearch;
    
    public RpgTypeModel() {
        setDisplayName("Rpg Type");
        setPluralDisplayName("Rpg Types");
    }
    
    public RpgTypeModel(Hub<RpgType> hubRpgType) {
        this();
        if (hubRpgType != null) HubDelegate.setObjectClass(hubRpgType, RpgType.class);
        this.hub = hubRpgType;
    }
    public RpgTypeModel(RpgType rpgType) {
        this();
        getHub().add(rpgType);
        getHub().setPos(0);
    }
    
    public Hub<RpgType> getOriginalHub() {
        return getHub();
    }
    
    public Hub<JsonType> getJsonTypeHub() {
        if (hubJsonType != null) return hubJsonType;
        hubJsonType = getHub().getDetailHub(RpgType.P_JsonType);
        return hubJsonType;
    }
    public Hub<JsonType> getJsonTypeSelectFromHub() {
        if (hubJsonTypeSelectFrom != null) return hubJsonTypeSelectFrom;
        hubJsonTypeSelectFrom = new Hub<JsonType>(JsonType.class);
        Hub<JsonType> hubJsonTypeSelectFrom1 = ModelDelegate.getJsonTypes().createSharedHub();
        HubCombined<JsonType> hubCombined = new HubCombined(hubJsonTypeSelectFrom, hubJsonTypeSelectFrom1, getJsonTypeHub());
        hubJsonTypeSelectFrom.setLinkHub(getHub(), RpgType.P_JsonType); 
        return hubJsonTypeSelectFrom;
    }
    public RpgType getRpgType() {
        return getHub().getAO();
    }
    
    public Hub<RpgType> getHub() {
        if (hub == null) {
            hub = new Hub<RpgType>(RpgType.class);
        }
        return hub;
    }
    
    public Hub<RpgType> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<RpgType>(RpgType.class);
        }
        return hubMultiSelect;
    }
    
    public JsonTypeModel getJsonTypeModel() {
        if (modelJsonType != null) return modelJsonType;
        modelJsonType = new JsonTypeModel(getJsonTypeHub());
        modelJsonType.setDisplayName("Json Type");
        modelJsonType.setPluralDisplayName("Json Types");
        modelJsonType.setForJfc(getForJfc());
        modelJsonType.setAllowNew(false);
        modelJsonType.setAllowSave(true);
        modelJsonType.setAllowAdd(false);
        modelJsonType.setAllowRemove(false);
        modelJsonType.setAllowClear(false);
        modelJsonType.setAllowDelete(false);
        modelJsonType.setAllowSearch(true);
        modelJsonType.setAllowHubSearch(true);
        modelJsonType.setAllowGotoEdit(true);
        modelJsonType.setViewOnly(true);
        // call RpgType.jsonTypeModelCallback(JsonTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(RpgType.class, RpgType.P_JsonType, modelJsonType);
    
        return modelJsonType;
    }
    
    public JsonTypeModel getJsonTypeSelectFromModel() {
        if (modelJsonTypeSelectFrom != null) return modelJsonTypeSelectFrom;
        modelJsonTypeSelectFrom = new JsonTypeModel(getJsonTypeSelectFromHub());
        modelJsonTypeSelectFrom.setDisplayName("Json Type");
        modelJsonTypeSelectFrom.setPluralDisplayName("Json Types");
        modelJsonTypeSelectFrom.setForJfc(getForJfc());
        modelJsonTypeSelectFrom.setAllowNew(false);
        modelJsonTypeSelectFrom.setAllowSave(true);
        modelJsonTypeSelectFrom.setAllowAdd(false);
        modelJsonTypeSelectFrom.setAllowMove(false);
        modelJsonTypeSelectFrom.setAllowRemove(false);
        modelJsonTypeSelectFrom.setAllowDelete(false);
        modelJsonTypeSelectFrom.setAllowSearch(true);
        modelJsonTypeSelectFrom.setAllowHubSearch(true);
        modelJsonTypeSelectFrom.setAllowGotoEdit(true);
        modelJsonTypeSelectFrom.setViewOnly(getViewOnly());
        modelJsonTypeSelectFrom.setAllowNew(false);
        modelJsonTypeSelectFrom.setAllowTableFilter(true);
        modelJsonTypeSelectFrom.setAllowTableSorting(true);
        modelJsonTypeSelectFrom.setAllowCut(false);
        modelJsonTypeSelectFrom.setAllowCopy(false);
        modelJsonTypeSelectFrom.setAllowPaste(false);
        modelJsonTypeSelectFrom.setAllowMultiSelect(false);
        return modelJsonTypeSelectFrom;
    }
    public JsonTypeSearchModel getJsonTypeSearchModel() {
        if (modelJsonTypeSearch != null) return modelJsonTypeSearch;
        modelJsonTypeSearch = new JsonTypeSearchModel();
        HubSelectDelegate.adoptWhereHub(modelJsonTypeSearch.getHub(), RpgType.P_JsonType, getHub());
        return modelJsonTypeSearch;
    }
    
    public HubCopy<RpgType> createHubCopy() {
        Hub<RpgType> hubRpgTypex = new Hub<>(RpgType.class);
        HubCopy<RpgType> hc = new HubCopy<>(getHub(), hubRpgTypex, true);
        return hc;
    }
    public RpgTypeModel createCopy() {
        RpgTypeModel mod = new RpgTypeModel(createHubCopy().getHub());
        return mod;
    }
}

