// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.dev.tool.messagedesigner.delegate.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "jsonType",
    pluralName = "JsonTypes",
    shortName = "jst",
    displayName = "Json Type",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name",
    sortProperty = "seq"
)
@OATable(
)
public class JsonType extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(JsonType.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_Name = "Name";
    public static final String P_Type = "Type";
    public static final String P_TypeAsString = "TypeString";
    public static final String P_Seq = "Seq";
     
    public static final String P_DefaultJavaClassType = "DefaultJavaClassType";
     
    public static final String P_RpgTypes = "RpgTypes";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile int type;
    public static enum Type {
        Unassigned("Unassigned"),
        String("String"),
        Number("Number"),
        Boolean("Boolean"),
        Array("Array"),
        DateTime("Date Time"),
        Date("Date"),
        Time("Time"),
        Timestamp("Timestamp"),
        Other("Other");

        private String display;
        Type(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int TYPE_Unassigned = 0;
    public static final int TYPE_String = 1;
    public static final int TYPE_Number = 2;
    public static final int TYPE_Boolean = 3;
    public static final int TYPE_Array = 4;
    public static final int TYPE_DateTime = 5;
    public static final int TYPE_Date = 6;
    public static final int TYPE_Time = 7;
    public static final int TYPE_Timestamp = 8;
    public static final int TYPE_Other = 9;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("Unassigned");
        hubType.addElement("String");
        hubType.addElement("Number");
        hubType.addElement("Boolean");
        hubType.addElement("Array");
        hubType.addElement("Date Time");
        hubType.addElement("Date");
        hubType.addElement("Time");
        hubType.addElement("Timestamp");
        hubType.addElement("Other");
    }
    protected volatile int seq;
     
     
    public JsonType() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public JsonType(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 30, displayLength = 20, columnLength = 18)
    @OAColumn(maxLength = 30)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayLength = 12, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    public void setType(int newValue) {
        int old = type;
        fireBeforePropertyChange(P_Type, old, newValue);
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
        firePropertyChange(P_Type + "String");
        firePropertyChange(P_Type + "Enum");
    }

    public String getTypeString() {
        Type type = getTypeEnum();
        if (type == null) return null;
        return type.name();
    }
    public void setTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            Type type = Type.valueOf(val);
            if (type != null) x = type.ordinal();
        }
        if (x < 0) setNull(P_Type);
        else setType(x);
    }


    public Type getTypeEnum() {
        if (isNull(P_Type)) return null;
        final int val = getType();
        if (val < 0 || val >= Type.values().length) return null;
        return Type.values()[val];
    }

    public void setTypeEnum(Type val) {
        if (val == null) {
            setNull(P_Type);
        }
        else {
            setType(val.ordinal());
        }
    }
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OACalculatedProperty(displayName = "Default Java Class Type", displayLength = 15, columnLength = 23, properties = {P_Type})
    public String getDefaultJavaClassType() {
        String javaClassType = "";
        int type = this.getType();
        if (type == TYPE_Unassigned || type == TYPE_String || type == TYPE_Other) {
            javaClassType = "String";
        } else if (type == TYPE_Number) {
            javaClassType = "Number";
        } else if (type == TYPE_Boolean) {
            javaClassType = "boolean";
        } else if (type == TYPE_DateTime) {
            javaClassType = "LocalDateTime";
        } else if (type == TYPE_Date) {
            javaClassType = "LocalDate";
        } else if (type == TYPE_Timestamp) {
            javaClassType = "LocalDateTime";
        } else if (type == TYPE_Time) {
            javaClassType = "LocalTime";
        }
    
        return javaClassType;
    }
    @OAMany(
        displayName = "Rpg Types", 
        toClass = RpgType.class, 
        reverseName = RpgType.P_JsonType, 
        createMethod = false
    )
    private Hub<RpgType> getRpgTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.type = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, JsonType.P_Type, true);
        }
        this.seq = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, JsonType.P_Seq, true);
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
