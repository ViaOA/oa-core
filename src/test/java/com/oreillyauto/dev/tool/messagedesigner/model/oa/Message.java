// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.dev.tool.messagedesigner.delegate.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "message",
    pluralName = "Messages",
    shortName = "mss",
    displayName = "Message",
    isProcessed = true,
    displayProperty = "id"
)
@OATable(
    indexes = {
        @OAIndex(name = "MessageMessageType", fkey = true, columns = { @OAIndexColumn(name = "MessageTypeId") })
    }
)
public class Message extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Message.class.getName());

    public static final String P_Id = "id";
    public static final String P_Created = "created";
    public static final String P_Json = "json";
    public static final String P_Processed = "processed";
    public static final String P_Cancelled = "cancelled";
    public static final String P_SeqNumber = "seqNumber";
     
     
    public static final String P_MessageType = "messageType";
    public static final String P_RpgMessages = "rpgMessages";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String json;
    protected volatile OADateTime processed;
    protected volatile OADateTime cancelled;
    protected volatile long seqNumber;
     
    // Links to other objects.
    protected volatile transient MessageType messageType;
    protected transient Hub<RpgMessage> hubRpgMessages;
     
    public Message() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public Message(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayLength = 30, columnLength = 20)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getJson() {
        return json;
    }
    public void setJson(String newValue) {
        String old = json;
        fireBeforePropertyChange(P_Json, old, newValue);
        this.json = newValue;
        firePropertyChange(P_Json, old, this.json);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getProcessed() {
        return processed;
    }
    public void setProcessed(OADateTime newValue) {
        OADateTime old = processed;
        fireBeforePropertyChange(P_Processed, old, newValue);
        this.processed = newValue;
        firePropertyChange(P_Processed, old, this.processed);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCancelled() {
        return cancelled;
    }
    public void setCancelled(OADateTime newValue) {
        OADateTime old = cancelled;
        fireBeforePropertyChange(P_Cancelled, old, newValue);
        this.cancelled = newValue;
        firePropertyChange(P_Cancelled, old, this.cancelled);
    }
    @OAProperty(displayName = "Seq Number", displayLength = 6, columnLength = 10)
    @OAColumn(sqlType = java.sql.Types.BIGINT)
    public long getSeqNumber() {
        return seqNumber;
    }
    public void setSeqNumber(long newValue) {
        long old = seqNumber;
        fireBeforePropertyChange(P_SeqNumber, old, newValue);
        this.seqNumber = newValue;
        firePropertyChange(P_SeqNumber, old, this.seqNumber);
    }
    @OAOne(
        displayName = "Message Type", 
        reverseName = MessageType.P_Messages, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MessageTypeId"})
    public MessageType getMessageType() {
        if (messageType == null) {
            messageType = (MessageType) getObject(P_MessageType);
        }
        return messageType;
    }
    public void setMessageType(MessageType newValue) {
        MessageType old = this.messageType;
        fireBeforePropertyChange(P_MessageType, old, newValue);
        this.messageType = newValue;
        firePropertyChange(P_MessageType, old, this.messageType);
    }
    @OAMany(
        displayName = "Rpg Messages", 
        toClass = RpgMessage.class, 
        reverseName = RpgMessage.P_Message, 
        isProcessed = true
    )
    public Hub<RpgMessage> getRpgMessages() {
        if (hubRpgMessages == null) {
            hubRpgMessages = (Hub<RpgMessage>) getHub(P_RpgMessages);
        }
        return hubRpgMessages;
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.json = rs.getString(3);
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.processed = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(5);
        if (timestamp != null) this.cancelled = new OADateTime(timestamp);
        this.seqNumber = (long) rs.getLong(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Message.P_SeqNumber, true);
        }
        int messageTypeFkey = rs.getInt(7);
        if (!rs.wasNull() && messageTypeFkey > 0) {
            setProperty(P_MessageType, new OAObjectKey(messageTypeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
