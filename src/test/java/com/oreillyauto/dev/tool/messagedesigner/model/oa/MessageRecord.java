// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.util.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.dev.tool.messagedesigner.delegate.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "messageRecord",
    pluralName = "MessageRecords",
    shortName = "msr",
    displayName = "Message Record",
    displayProperty = "display",
    filterClasses = {MessageRecordTypeManyFilter.class}
)
@OATable(
    indexes = {
        @OAIndex(name = "MessageRecordMessageGroup", fkey = true, columns = { @OAIndexColumn(name = "MessageGroupId") }), 
        @OAIndex(name = "MessageRecordMessageType", fkey = true, columns = { @OAIndexColumn(name = "MessageTypeId") }), 
        @OAIndex(name = "MessageRecordMessageTypeRecord", fkey = true, columns = { @OAIndexColumn(name = "MessageTypeRecordId") })
    }
)
public class MessageRecord extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MessageRecord.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_RelationshipType = "RelationshipType";
    public static final String P_RelationshipTypeAsString = "RelationshipTypeString";
    public static final String P_Seq = "Seq";
     
    public static final String P_Display = "Display";
     
    public static final String P_MessageGroup = "MessageGroup";
    public static final String P_MessageType = "MessageType";
    public static final String P_MessageTypeRecord = "MessageTypeRecord";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile int relationshipType;
    public static enum RelationshipType {
        One("One"),
        ZeroOrOne("Zero Or One"),
        ZeroOrMore("Zero Or More"),
        OneOrMore("One Or More"),
        Two("Two"),
        Three("Three"),
        Four("Four");

        private String display;
        RelationshipType(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int RELATIONSHIPTYPE_One = 0;
    public static final int RELATIONSHIPTYPE_ZeroOrOne = 1;
    public static final int RELATIONSHIPTYPE_ZeroOrMore = 2;
    public static final int RELATIONSHIPTYPE_OneOrMore = 3;
    public static final int RELATIONSHIPTYPE_Two = 4;
    public static final int RELATIONSHIPTYPE_Three = 5;
    public static final int RELATIONSHIPTYPE_Four = 6;
    public static final Hub<String> hubRelationshipType;
    static {
        hubRelationshipType = new Hub<String>(String.class);
        hubRelationshipType.addElement("One");
        hubRelationshipType.addElement("Zero Or One");
        hubRelationshipType.addElement("Zero Or More");
        hubRelationshipType.addElement("One Or More");
        hubRelationshipType.addElement("Two");
        hubRelationshipType.addElement("Three");
        hubRelationshipType.addElement("Four");
    }
    protected volatile int seq;
     
    // Links to other objects.
    protected volatile transient MessageGroup messageGroup;
    protected volatile transient MessageType messageType;
    protected volatile transient MessageTypeRecord messageTypeRecord;
     
    public MessageRecord() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public MessageRecord(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Relationship Type", trackPrimitiveNull = false, displayLength = 6, columnLength = 17, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getRelationshipType() {
        return relationshipType;
    }
    public void setRelationshipType(int newValue) {
        int old = relationshipType;
        fireBeforePropertyChange(P_RelationshipType, old, newValue);
        this.relationshipType = newValue;
        firePropertyChange(P_RelationshipType, old, this.relationshipType);
        firePropertyChange(P_RelationshipType + "String");
        firePropertyChange(P_RelationshipType + "Enum");
    }

    public String getRelationshipTypeString() {
        RelationshipType relationshipType = getRelationshipTypeEnum();
        if (relationshipType == null) return null;
        return relationshipType.name();
    }
    public void setRelationshipTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            RelationshipType relationshipType = RelationshipType.valueOf(val);
            if (relationshipType != null) x = relationshipType.ordinal();
        }
        if (x < 0) setNull(P_RelationshipType);
        else setRelationshipType(x);
    }


    public RelationshipType getRelationshipTypeEnum() {
        if (isNull(P_RelationshipType)) return null;
        final int val = getRelationshipType();
        if (val < 0 || val >= RelationshipType.values().length) return null;
        return RelationshipType.values()[val];
    }

    public void setRelationshipTypeEnum(RelationshipType val) {
        if (val == null) {
            setNull(P_RelationshipType);
        }
        else {
            setRelationshipType(val.ordinal());
        }
    }
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OACalculatedProperty(displayLength = 12, properties = {P_RelationshipType, P_MessageTypeRecord+"."+MessageTypeRecord.P_Name})
    public String getDisplay() {
        String display = this.getRelationshipTypeString();
        MessageTypeRecord messageTypeRecord = this.getMessageTypeRecord();
        if (messageTypeRecord != null) {
            display = OAString.concat(display, messageTypeRecord.getName(), " ");
        }
        return display;
    }
    @OAOne(
        displayName = "Message Group", 
        reverseName = MessageGroup.P_MessageRecords, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MessageGroupId"})
    public MessageGroup getMessageGroup() {
        if (messageGroup == null) {
            messageGroup = (MessageGroup) getObject(P_MessageGroup);
        }
        return messageGroup;
    }
    public void setMessageGroup(MessageGroup newValue) {
        MessageGroup old = this.messageGroup;
        fireBeforePropertyChange(P_MessageGroup, old, newValue);
        this.messageGroup = newValue;
        firePropertyChange(P_MessageGroup, old, this.messageGroup);
    }
    @OAOne(
        displayName = "Message Type", 
        reverseName = MessageType.P_MessageRecords, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MessageTypeId"})
    public MessageType getMessageType() {
        if (messageType == null) {
            messageType = (MessageType) getObject(P_MessageType);
        }
        return messageType;
    }
    public void setMessageType(MessageType newValue) {
        MessageType old = this.messageType;
        fireBeforePropertyChange(P_MessageType, old, newValue);
        this.messageType = newValue;
        firePropertyChange(P_MessageType, old, this.messageType);
    }
    @OAOne(
        displayName = "Message Type Record", 
        reverseName = MessageTypeRecord.P_MessageRecords, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MessageTypeRecordId"})
    public MessageTypeRecord getMessageTypeRecord() {
        if (messageTypeRecord == null) {
            messageTypeRecord = (MessageTypeRecord) getObject(P_MessageTypeRecord);
        }
        return messageTypeRecord;
    }
    public void setMessageTypeRecord(MessageTypeRecord newValue) {
        MessageTypeRecord old = this.messageTypeRecord;
        fireBeforePropertyChange(P_MessageTypeRecord, old, newValue);
        this.messageTypeRecord = newValue;
        firePropertyChange(P_MessageTypeRecord, old, this.messageTypeRecord);
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.relationshipType = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageRecord.P_RelationshipType, true);
        }
        this.seq = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageRecord.P_Seq, true);
        }
        int messageGroupFkey = rs.getInt(5);
        if (!rs.wasNull() && messageGroupFkey > 0) {
            setProperty(P_MessageGroup, new OAObjectKey(messageGroupFkey));
        }
        int messageTypeFkey = rs.getInt(6);
        if (!rs.wasNull() && messageTypeFkey > 0) {
            setProperty(P_MessageType, new OAObjectKey(messageTypeFkey));
        }
        int messageTypeRecordFkey = rs.getInt(7);
        if (!rs.wasNull() && messageTypeRecordFkey > 0) {
            setProperty(P_MessageTypeRecord, new OAObjectKey(messageTypeRecordFkey));
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
