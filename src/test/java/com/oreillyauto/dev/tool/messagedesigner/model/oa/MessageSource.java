// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

import com.oreillyauto.dev.tool.messagedesigner.delegate.oa.MessageSourceDelegate;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.method.MessageSourceSaveAsCSVMethod;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.method.MessageSourceSaveAsJsonResourceMethod;
import com.viaoa.annotation.OACalculatedProperty;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAMany;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAObjCallback;
import com.viaoa.annotation.OAProperty;
import com.viaoa.annotation.OATable;
import com.viaoa.datasource.OADataSource;
import com.viaoa.hub.Hub;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCallback;
import com.viaoa.object.OAObjectInfoDelegate;
import com.viaoa.util.OADateTime;
import com.viaoa.util.OAString;

@OAClass(lowerName = "messageSource", pluralName = "MessageSources", shortName = "mss", displayName = "Message Source", isLookup = true, isPreSelect = true, displayProperty = "source")
@OATable()
public class MessageSource extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(MessageSource.class.getName());

	public static final String P_Id = "id";
	public static final String P_Created = "created";
	public static final String P_Source = "source";
	public static final String P_SourceAsString = "sourceString";
	public static final String P_Console = "console";
	public static final String P_RpgMessageDefinitionFile = "rpgMessageDefinitionFile";
	public static final String P_CommonApiRootDirectory = "commonApiRootDirectory";

	public static final String P_ApiCode = "apiCode";
	public static final String P_ControllerCode = "controllerCode";

	public static final String P_MessageTypeRecords = "messageTypeRecords";
	public static final String P_MessageTypes = "messageTypes";

	public static final String M_SortMessageTypes = "sortMessageTypes";
	public static final String M_CreateOneMessageTypeForRecords = "createOneMessageTypeForRecords";
	public static final String M_Update = "update";
	public static final String M_RefreshApiCode = "refreshApiCode";
	public static final String M_RefreshControllerCode = "refreshControllerCode";
	public static final String M_LoadRpgMessageFile = "loadRpgMessageFile";
	public static final String M_ClearMessages = "clearMessages";
	public static final String M_ExportApiAndClasses = "exportApiAndClasses";
	public static final String M_SaveAsJsonResource = "saveAsJsonResource";
	public static final String M_SaveAsCSV = "saveAsCSV";
	public static final String M_VerifyAll = "verifyAll";
	protected volatile int id;
	protected volatile OADateTime created;
	protected volatile int source;

	public static enum Source {
		Unknown("Unknown"),
		Jcomm("Jcomm"),
		Jposnd("Jposnd"),
		Jtrsmt("Jtrsmt");

		private String display;

		Source(String display) {
			this.display = display;
		}

		public String getDisplay() {
			return display;
		}
	}

	public static final int SOURCE_Unknown = 0;
	public static final int SOURCE_Jcomm = 1;
	public static final int SOURCE_Jposnd = 2;
	public static final int SOURCE_Jtrsmt = 3;
	public static final Hub<String> hubSource;
	static {
		hubSource = new Hub<String>(String.class);
		hubSource.addElement("Unknown");
		hubSource.addElement("Jcomm");
		hubSource.addElement("Jposnd");
		hubSource.addElement("Jtrsmt");
	}
	protected volatile String console;
	protected volatile String rpgMessageDefinitionFile;
	protected volatile String commonApiRootDirectory;

	// Links to other objects.
	protected transient Hub<MessageTypeRecord> hubMessageTypeRecords;
	protected transient Hub<MessageType> hubMessageTypes;

	public MessageSource() {
		if (!isLoading()) {
			setObjectDefaults();
		}
	}

	@Override
	public void setObjectDefaults() {
		setCreated(new OADateTime());
	}

	public MessageSource(int id) {
		this();
		setId(id);
	}

	@OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
	@OAId()
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getCreated() {
		return created;
	}

	public void setCreated(OADateTime newValue) {
		OADateTime old = created;
		fireBeforePropertyChange(P_Created, old, newValue);
		this.created = newValue;
		firePropertyChange(P_Created, old, this.created);
	}

	@OAProperty(trackPrimitiveNull = false, displayLength = 12, columnLength = 16, isReadOnly = true, isNameValue = true)
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getSource() {
		return source;
	}

	public void setSource(int newValue) {
		int old = source;
		fireBeforePropertyChange(P_Source, old, newValue);
		this.source = newValue;
		firePropertyChange(P_Source, old, this.source);
		firePropertyChange(P_Source + "String");
		firePropertyChange(P_Source + "Enum");
	}

	public String getSourceString() {
		Source source = getSourceEnum();
		if (source == null) {
			return null;
		}
		return source.name();
	}

	public void setSourceString(String val) {
		int x = -1;
		if (OAString.isNotEmpty(val)) {
			Source source = Source.valueOf(val);
			if (source != null) {
				x = source.ordinal();
			}
		}
		if (x < 0) {
			setNull(P_Source);
		} else {
			setSource(x);
		}
	}

	public Source getSourceEnum() {
		if (isNull(P_Source)) {
			return null;
		}
		final int val = getSource();
		if (val < 0 || val >= Source.values().length) {
			return null;
		}
		return Source.values()[val];
	}

	public void setSourceEnum(Source val) {
		if (val == null) {
			setNull(P_Source);
		} else {
			setSource(val.ordinal());
		}
	}

	@OAProperty(displayLength = 20)
	public String getConsole() {
		return console;
	}

	public void setConsole(String newValue) {
		String old = console;
		fireBeforePropertyChange(P_Console, old, newValue);
		this.console = newValue;
		firePropertyChange(P_Console, old, this.console);
	}

	@OAProperty(displayName = "Rpg Message Definition File", maxLength = 125, displayLength = 50, columnLength = 27, isFileName = true)
	@OAColumn(maxLength = 125)
	/**
	 * Load csv file from Doug's output.<br>
	 * <br>
	 * RECORD_CODE,COLUMN_NAME,ORDINAL_POSITION,COLUMN_HEADING,DATA_TYPE,LENGTH,NUMERIC_SCALE,STORAGE,COLUMN_TEXT
	 * <p>
	 * AC,RECCD,1,recordCode,CHAR,2,,2,
	 * </p>
	 */
	public String getRpgMessageDefinitionFile() {
		return rpgMessageDefinitionFile;
	}

	public void setRpgMessageDefinitionFile(String newValue) {
		String old = rpgMessageDefinitionFile;
		fireBeforePropertyChange(P_RpgMessageDefinitionFile, old, newValue);
		this.rpgMessageDefinitionFile = newValue;
		firePropertyChange(P_RpgMessageDefinitionFile, old, this.rpgMessageDefinitionFile);
	}

	@OAProperty(displayName = "Common Api Root Directory", maxLength = 125, displayLength = 25)
	@OAColumn(maxLength = 125)
	public String getCommonApiRootDirectory() {
		return commonApiRootDirectory;
	}

	public void setCommonApiRootDirectory(String newValue) {
		String old = commonApiRootDirectory;
		fireBeforePropertyChange(P_CommonApiRootDirectory, old, newValue);
		this.commonApiRootDirectory = newValue;
		firePropertyChange(P_CommonApiRootDirectory, old, this.commonApiRootDirectory);
	}

	@OACalculatedProperty(displayName = "Api Code", displayLength = 30, columnLength = 20)
	public String getApiCode() {
		return MessageSourceDelegate.getApiCode(this);
	}

	@OACalculatedProperty(displayName = "Controller Code", displayLength = 30, columnLength = 20)
	public String getControllerCode() {
		return MessageSourceDelegate.getControllerCode(this);
	}

	@OAMany(displayName = "Message Type Records", toClass = MessageTypeRecord.class, owner = true, reverseName = MessageTypeRecord.P_MessageSource, cascadeSave = true, cascadeDelete = true)
	public Hub<MessageTypeRecord> getMessageTypeRecords() {
		if (hubMessageTypeRecords == null) {
			hubMessageTypeRecords = (Hub<MessageTypeRecord>) getHub(P_MessageTypeRecords);
		}
		return hubMessageTypeRecords;
	}

	@OAMany(displayName = "Message Types", toClass = MessageType.class, owner = true, reverseName = MessageType.P_MessageSource, cascadeSave = true, cascadeDelete = true, mustBeEmptyForDelete = true, seqProperty = MessageType.P_Seq, sortProperty = MessageType.P_Seq)
	public Hub<MessageType> getMessageTypes() {
		if (hubMessageTypes == null) {
			hubMessageTypes = (Hub<MessageType>) getHub(P_MessageTypes);
		}
		return hubMessageTypes;
	}

	@OAMethod(displayName = "Sort Message Types")
	public void sortMessageTypes() {
		// use this to run on server (remote)
		if (isRemoteAvailable()) {
			remote();
			return;
		}
		// custom code here
		getMessageTypes().sort(MessageType.P_Display);
	}

	@OAMethod(displayName = "Create Ones")
	public void createOneMessageTypeForRecords() {
		// use this to run on server (remote)
		if (isRemoteAvailable()) {
			remote();
			return;
		}
		MessageSourceDelegate.createOneMessageTypeForRecords(this);
	}

	@OAMethod(displayName = "Update")
	public void update() {
		// todo: add custom code here
		MessageSourceDelegate.update(this);
	}

	@OAMethod(displayName = "Refresh Api Code")
	public void refreshApiCode() {
		firePropertyChange(P_ApiCode);
	}

	@OAMethod(displayName = "Refresh Controller Code")
	public void refreshControllerCode() {
		firePropertyChange(P_ControllerCode);
	}

	@OAMethod(displayName = "Load Rpg CSV")
	public void loadRpgMessageFile() {
		// use this to run on server (remote)
		if (isRemoteAvailable()) {
			remote();
			return;
		}
		// custom code here
	}

	@OAObjCallback(enabledProperty = MessageSource.P_RpgMessageDefinitionFile)
	public void loadRpgMessageFileCallback(OAObjectCallback cb) {
	}

	@OAMethod(displayName = "Clear Messages")
	public void clearMessages() {
		// use this to run on server (remote)
		if (isRemoteAvailable()) {
			remote();
			return;
		}
		OADataSource ds = OADataSource.getDataSource(RpgMessage.class);
		setConsole("Deleting all RpgMessages");
		ds.deleteAll(RpgMessage.class);
		setConsole("Done deleting all RpgMessages");
		setConsole("Deleting all Messages");
		ds.deleteAll(Message.class);
		setConsole("Done deleting all Messages");
	}

	@OAMethod(displayName = "Export Api And Classes")
	public void exportApiAndClasses() {
		// use this to run on server (remote)
		if (isRemoteAvailable()) {
			remote();
			return;
		}

		// custom code here
	}

	@OAMethod(displayName = "Save As Json Resource")
	public void saveAsJsonResource(MessageSourceSaveAsJsonResourceMethod data) {
		MessageSourceDelegate.saveAsJsonResource(this, data.getJsonFileName());
	}

	@OAMethod(displayName = "Save As CSV")
	public void saveAsCSV(MessageSourceSaveAsCSVMethod data) {
		if (data == null) {
			return;
		}
		MessageSourceDelegate.saveAsCsvFile(this, data.getCsvFileName());
	}

	@OAMethod(displayName = "Verify All")
	public void verifyAll() {
		for (MessageType mt : getMessageTypes()) {
			mt.setVerified(new OADateTime());
		}
	}

	public void load(ResultSet rs, int id) throws SQLException {
		this.id = id;
		java.sql.Timestamp timestamp;
		timestamp = rs.getTimestamp(2);
		if (timestamp != null) {
			this.created = new OADateTime(timestamp);
		}
		this.source = (int) rs.getInt(3);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, MessageSource.P_Source, true);
		}
		this.rpgMessageDefinitionFile = rs.getString(4);
		this.commonApiRootDirectory = rs.getString(5);
		if (rs.getMetaData().getColumnCount() != 5) {
			throw new SQLException("invalid number of columns for load method");
		}

		this.changedFlag = false;
		this.newFlag = false;
	}
}
