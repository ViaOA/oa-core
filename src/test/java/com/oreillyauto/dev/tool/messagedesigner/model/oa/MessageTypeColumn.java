// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.util.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.dev.tool.messagedesigner.delegate.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "messageTypeColumn",
    pluralName = "MessageTypeColumns",
    shortName = "mtc",
    displayName = "Message Type Column",
    displayProperty = "name",
    filterClasses = {MessageTypeColumnInvalidRpgTypeFilter.class}
)
@OATable(
    indexes = {
        @OAIndex(name = "MessageTypeColumnMessageTypeRecord", fkey = true, columns = { @OAIndexColumn(name = "MessageTypeRecordId") }), 
        @OAIndex(name = "MessageTypeColumnRpgType", fkey = true, columns = { @OAIndexColumn(name = "RpgTypeId") })
    }
)
public class MessageTypeColumn extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MessageTypeColumn.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_Name = "Name";
    public static final String P_RpgName = "RpgName";
    public static final String P_Key = "Key";
    public static final String P_KeyPos = "KeyPos";
    public static final String P_FromPos = "FromPos";
    public static final String P_ToPos = "ToPos";
    public static final String P_Size = "Size";
    public static final String P_Description = "Description";
    public static final String P_DecimalPlaces = "DecimalPlaces";
    public static final String P_Format = "Format";
    public static final String P_SpecialType = "SpecialType";
    public static final String P_SpecialTypeAsString = "SpecialTypeString";
    public static final String P_NullValueType = "NullValueType";
    public static final String P_NullValueTypeAsString = "NullValueTypeString";
    public static final String P_DocType = "DocType";
    public static final String P_NotUsed = "NotUsed";
    public static final String P_Seq = "Seq";
    public static final String P_Note = "Note";
    public static final String P_FollowUp = "FollowUp";
     
    public static final String P_DefaultJavaClassType = "DefaultJavaClassType";
     
    public static final String P_MessageTypeRecord = "MessageTypeRecord";
    public static final String P_RecordSubCode = "RecordSubCode";
    public static final String P_RpgType = "RpgType";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile String rpgName;
    protected volatile boolean key;
    protected volatile int keyPos;
    protected volatile int fromPos;
    protected volatile int toPos;
    protected volatile int size;
    protected volatile String description;
    protected volatile int decimalPlaces;
    protected volatile String format;
    protected volatile int specialType;
    public static enum SpecialType {
        Unknown("Unknown"),
        NewInvoice("New Invoice"),
        InvoiceChange("Invoice Change"),
        newPurchaseOrder("New Purchase Order"),
        purchaseOrderChange("Purchase Order Change");

        private String display;
        SpecialType(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int SPECIALTYPE_Unknown = 0;
    public static final int SPECIALTYPE_NewInvoice = 1;
    public static final int SPECIALTYPE_InvoiceChange = 2;
    public static final int SPECIALTYPE_newPurchaseOrder = 3;
    public static final int SPECIALTYPE_purchaseOrderChange = 4;
    public static final Hub<String> hubSpecialType;
    static {
        hubSpecialType = new Hub<String>(String.class);
        hubSpecialType.addElement("Unknown");
        hubSpecialType.addElement("New Invoice");
        hubSpecialType.addElement("Invoice Change");
        hubSpecialType.addElement("New Purchase Order");
        hubSpecialType.addElement("Purchase Order Change");
    }
    protected volatile int nullValueType;
    public static enum NullValueType {
        Default("Default"),
        Zero("Zero"),
        Empty("Empty");

        private String display;
        NullValueType(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int NULLVALUETYPE_Default = 0;
    public static final int NULLVALUETYPE_Zero = 1;
    public static final int NULLVALUETYPE_Empty = 2;
    public static final Hub<String> hubNullValueType;
    static {
        hubNullValueType = new Hub<String>(String.class);
        hubNullValueType.addElement("Default");
        hubNullValueType.addElement("Zero");
        hubNullValueType.addElement("Empty");
    }
    protected volatile String docType;
    protected volatile boolean notUsed;
    protected volatile int seq;
    protected volatile String note;
    protected volatile boolean followUp;
     
    // Links to other objects.
    protected volatile transient MessageTypeRecord messageTypeRecord;
    protected volatile transient RpgType rpgType;
     
    public MessageTypeColumn() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public MessageTypeColumn(int id) {
        this();
        setId(id);
    }
     
    @OAObjCallback(enabledProperty = MessageTypeColumn.P_MessageTypeRecord+"."+MessageTypeRecord.P_Lock, 
        enabledValue = false
    )
    public void callback(final OAObjectCallback callback) {
        if (callback == null) return;
        switch (callback.getType()) {
        }
    }
    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 55, displayLength = 15, columnLength = 12, hasCustomCode = true)
    @OAColumn(maxLength = 55)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        if (!isLoading() && newValue != null) {
            newValue = OAString.mfcl(newValue);
        }
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayName = "Rpg Name", maxLength = 20, displayLength = 8)
    @OAColumn(maxLength = 20)
    public String getRpgName() {
        return rpgName;
    }
    public void setRpgName(String newValue) {
        String old = rpgName;
        fireBeforePropertyChange(P_RpgName, old, newValue);
        this.rpgName = newValue;
        firePropertyChange(P_RpgName, old, this.rpgName);
    }
    @OAProperty(displayLength = 5, columnLength = 3)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getKey() {
        return key;
    }
    public boolean isKey() {
        return getKey();
    }
    public void setKey(boolean newValue) {
        boolean old = key;
        fireBeforePropertyChange(P_Key, old, newValue);
        this.key = newValue;
        firePropertyChange(P_Key, old, this.key);
    }
    @OAProperty(displayName = "Key Pos", displayLength = 2, columnLength = 7)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getKeyPos() {
        return keyPos;
    }
    public void setKeyPos(int newValue) {
        int old = keyPos;
        fireBeforePropertyChange(P_KeyPos, old, newValue);
        this.keyPos = newValue;
        firePropertyChange(P_KeyPos, old, this.keyPos);
    }
    @OAProperty(displayName = "From Pos", displayLength = 6, columnLength = 8, hasCustomCode = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getFromPos() {
        return fromPos;
    }
    public void setFromPos(int newValue) {
        int old = fromPos;
        fireBeforePropertyChange(P_FromPos, old, newValue);
        this.fromPos = newValue;
        firePropertyChange(P_FromPos, old, this.fromPos);
    
        if (isLoading()) {
            return;
        }
        if (!beginServerOnly()) {
            return;
        }
        try {
            MessageTypeRecord mtr = getMessageTypeRecord();
            if (mtr == null) {
                return;
            }
    
            int pos = mtr.getMessageTypeColumns().getPos(this);
            if (pos < 1) {
                return;
            }
            MessageTypeColumn col = mtr.getMessageTypeColumns().get(pos - 1);
            if (col == null) {
                return;
            }
            int x = col.getToPos();
            if (x == 0) {
                col.setToPos(fromPos - 1);
            }
        } finally {
            endServerOnly();
        }
    }
    @OAProperty(displayName = "To Pos", displayLength = 6)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getToPos() {
        return toPos;
    }
    public void setToPos(int newValue) {
        int old = toPos;
        fireBeforePropertyChange(P_ToPos, old, newValue);
        this.toPos = newValue;
        firePropertyChange(P_ToPos, old, this.toPos);
    }
    @OAProperty(displayLength = 3)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSize() {
        return size;
    }
    public void setSize(int newValue) {
        int old = size;
        fireBeforePropertyChange(P_Size, old, newValue);
        this.size = newValue;
        firePropertyChange(P_Size, old, this.size);
    }
    @OAProperty(maxLength = 150, displayLength = 20)
    @OAColumn(maxLength = 150)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
    @OAProperty(displayName = "Decimal Places", displayLength = 2, columnLength = 14)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getDecimalPlaces() {
        return decimalPlaces;
    }
    public void setDecimalPlaces(int newValue) {
        int old = decimalPlaces;
        fireBeforePropertyChange(P_DecimalPlaces, old, newValue);
        this.decimalPlaces = newValue;
        firePropertyChange(P_DecimalPlaces, old, this.decimalPlaces);
    }
    @OAProperty(maxLength = 50, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 50)
    public String getFormat() {
        return format;
    }
    public void setFormat(String newValue) {
        String old = format;
        fireBeforePropertyChange(P_Format, old, newValue);
        this.format = newValue;
        firePropertyChange(P_Format, old, this.format);
    }
    @OAProperty(displayName = "Special Type", trackPrimitiveNull = false, displayLength = 6, columnLength = 12, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSpecialType() {
        return specialType;
    }
    public void setSpecialType(int newValue) {
        int old = specialType;
        fireBeforePropertyChange(P_SpecialType, old, newValue);
        this.specialType = newValue;
        firePropertyChange(P_SpecialType, old, this.specialType);
        firePropertyChange(P_SpecialType + "String");
        firePropertyChange(P_SpecialType + "Enum");
    }

    public String getSpecialTypeString() {
        SpecialType specialType = getSpecialTypeEnum();
        if (specialType == null) return null;
        return specialType.name();
    }
    public void setSpecialTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            SpecialType specialType = SpecialType.valueOf(val);
            if (specialType != null) x = specialType.ordinal();
        }
        if (x < 0) setNull(P_SpecialType);
        else setSpecialType(x);
    }


    public SpecialType getSpecialTypeEnum() {
        if (isNull(P_SpecialType)) return null;
        final int val = getSpecialType();
        if (val < 0 || val >= SpecialType.values().length) return null;
        return SpecialType.values()[val];
    }

    public void setSpecialTypeEnum(SpecialType val) {
        if (val == null) {
            setNull(P_SpecialType);
        }
        else {
            setSpecialType(val.ordinal());
        }
    }
    @OAProperty(displayName = "Null Value Type", trackPrimitiveNull = false, displayLength = 6, columnLength = 15, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getNullValueType() {
        return nullValueType;
    }
    public void setNullValueType(int newValue) {
        int old = nullValueType;
        fireBeforePropertyChange(P_NullValueType, old, newValue);
        this.nullValueType = newValue;
        firePropertyChange(P_NullValueType, old, this.nullValueType);
        firePropertyChange(P_NullValueType + "String");
        firePropertyChange(P_NullValueType + "Enum");
    }

    public String getNullValueTypeString() {
        NullValueType nullValueType = getNullValueTypeEnum();
        if (nullValueType == null) return null;
        return nullValueType.name();
    }
    public void setNullValueTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            NullValueType nullValueType = NullValueType.valueOf(val);
            if (nullValueType != null) x = nullValueType.ordinal();
        }
        if (x < 0) setNull(P_NullValueType);
        else setNullValueType(x);
    }


    public NullValueType getNullValueTypeEnum() {
        if (isNull(P_NullValueType)) return null;
        final int val = getNullValueType();
        if (val < 0 || val >= NullValueType.values().length) return null;
        return NullValueType.values()[val];
    }

    public void setNullValueTypeEnum(NullValueType val) {
        if (val == null) {
            setNull(P_NullValueType);
        }
        else {
            setNullValueType(val.ordinal());
        }
    }
    @OAProperty(displayName = "Doc Type", maxLength = 185, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 185)
    public String getDocType() {
        return docType;
    }
    public void setDocType(String newValue) {
        String old = docType;
        fireBeforePropertyChange(P_DocType, old, newValue);
        this.docType = newValue;
        firePropertyChange(P_DocType, old, this.docType);
    }
    @OAProperty(displayName = "Not Used", trackPrimitiveNull = false, displayLength = 5, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getNotUsed() {
        return notUsed;
    }
    public boolean isNotUsed() {
        return getNotUsed();
    }
    public void setNotUsed(boolean newValue) {
        boolean old = notUsed;
        fireBeforePropertyChange(P_NotUsed, old, newValue);
        this.notUsed = newValue;
        firePropertyChange(P_NotUsed, old, this.notUsed);
    }
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OAProperty(maxLength = 150, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 150)
    public String getNote() {
        return note;
    }
    public void setNote(String newValue) {
        String old = note;
        fireBeforePropertyChange(P_Note, old, newValue);
        this.note = newValue;
        firePropertyChange(P_Note, old, this.note);
    }
    @OAProperty(displayName = "Follow Up", displayLength = 5, columnLength = 9)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getFollowUp() {
        return followUp;
    }
    public boolean isFollowUp() {
        return getFollowUp();
    }
    public void setFollowUp(boolean newValue) {
        boolean old = followUp;
        fireBeforePropertyChange(P_FollowUp, old, newValue);
        this.followUp = newValue;
        firePropertyChange(P_FollowUp, old, this.followUp);
    }
    @OACalculatedProperty(displayName = "Default Java Class Type", displayLength = 12, properties = {P_DecimalPlaces, P_RpgType+"."+RpgType.P_JsonType+"."+JsonType.P_Type})
    public String getDefaultJavaClassType() {
        String defaultJavaClassType = "";
        int decimalPlaces = this.getDecimalPlaces();
    
        RpgType rpgType = this.getRpgType();
        if (rpgType != null) {
            JsonType jsonType = rpgType.getJsonType();
            if (jsonType != null) {
                if (jsonType.getType() == jsonType.TYPE_Number) {
                    if (decimalPlaces > 0) {
                        defaultJavaClassType = "Double";
                        if (decimalPlaces > 1) defaultJavaClassType = "BigDecimal";
                    }
                    else {
                        
                        int x = getToPos() - getFromPos();
                        if (rpgType.getEncodeType() != rpgType.ENCODETYPE_None) {
                            if (x > 5) defaultJavaClassType = "Long";
                            else defaultJavaClassType = "Integer";
                        }
                        else {
                            if (x > 3) defaultJavaClassType = "Long";
                            else defaultJavaClassType = "Integer";
                        }
                    }
                }
                else {
                    defaultJavaClassType = jsonType.getDefaultJavaClassType();
                }
            }
        }
        return defaultJavaClassType;
    }
    @OAOne(
        displayName = "Message Type Record", 
        reverseName = MessageTypeRecord.P_MessageTypeColumns, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MessageTypeRecordId"})
    public MessageTypeRecord getMessageTypeRecord() {
        if (messageTypeRecord == null) {
            messageTypeRecord = (MessageTypeRecord) getObject(P_MessageTypeRecord);
        }
        return messageTypeRecord;
    }
    public void setMessageTypeRecord(MessageTypeRecord newValue) {
        MessageTypeRecord old = this.messageTypeRecord;
        fireBeforePropertyChange(P_MessageTypeRecord, old, newValue);
        this.messageTypeRecord = newValue;
        firePropertyChange(P_MessageTypeRecord, old, this.messageTypeRecord);
    }
    @OAOne(
        displayName = "Message Type Record", 
        reverseName = MessageTypeRecord.P_SubCodeColumn, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private MessageTypeRecord getRecordSubCode() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAOne(
        displayName = "Rpg Type", 
        reverseName = RpgType.P_MessageTypeColumns, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"RpgTypeId"})
    public RpgType getRpgType() {
        if (rpgType == null) {
            rpgType = (RpgType) getObject(P_RpgType);
        }
        return rpgType;
    }
    public void setRpgType(RpgType newValue) {
        RpgType old = this.rpgType;
        fireBeforePropertyChange(P_RpgType, old, newValue);
        this.rpgType = newValue;
        firePropertyChange(P_RpgType, old, this.rpgType);
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.rpgName = rs.getString(4);
        this.key = rs.getBoolean(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_Key, true);
        }
        this.keyPos = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_KeyPos, true);
        }
        this.fromPos = (int) rs.getInt(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_FromPos, true);
        }
        this.toPos = (int) rs.getInt(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_ToPos, true);
        }
        this.size = (int) rs.getInt(9);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_Size, true);
        }
        this.description = rs.getString(10);
        this.decimalPlaces = (int) rs.getInt(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_DecimalPlaces, true);
        }
        this.format = rs.getString(12);
        this.specialType = (int) rs.getInt(13);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_SpecialType, true);
        }
        this.nullValueType = (int) rs.getInt(14);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_NullValueType, true);
        }
        this.docType = rs.getString(15);
        this.notUsed = rs.getBoolean(16);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_NotUsed, true);
        }
        this.seq = (int) rs.getInt(17);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_Seq, true);
        }
        this.note = rs.getString(18);
        this.followUp = rs.getBoolean(19);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MessageTypeColumn.P_FollowUp, true);
        }
        int messageTypeRecordFkey = rs.getInt(20);
        if (!rs.wasNull() && messageTypeRecordFkey > 0) {
            setProperty(P_MessageTypeRecord, new OAObjectKey(messageTypeRecordFkey));
        }
        int rpgTypeFkey = rs.getInt(21);
        if (!rs.wasNull() && rpgTypeFkey > 0) {
            setProperty(P_RpgType, new OAObjectKey(rpgTypeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 21) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
