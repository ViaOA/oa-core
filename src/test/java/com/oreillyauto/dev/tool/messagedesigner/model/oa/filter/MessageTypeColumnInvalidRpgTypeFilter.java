// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa.filter;

import java.util.logging.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import java.util.*;
import com.oreillyauto.dev.tool.messagedesigner.model.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.search.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "InvalidRpgType", displayName = "Invalid Rpg Type", hasInputParams = false)
public class MessageTypeColumnInvalidRpgTypeFilter extends OAObject implements CustomHubFilter<MessageTypeColumn> {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MessageTypeColumnInvalidRpgTypeFilter.class.getName());

    public static final String PPCode = ":InvalidRpgType()";
    private Hub<MessageTypeColumn> hubMaster;
    private Hub<MessageTypeColumn> hub;
    private HubFilter<MessageTypeColumn> hubFilter;
    private OAObjectCacheFilter<MessageTypeColumn> cacheFilter;
    private boolean bUseObjectCache;

    public MessageTypeColumnInvalidRpgTypeFilter() {
        this(null, null, false);
    }
    public MessageTypeColumnInvalidRpgTypeFilter(Hub<MessageTypeColumn> hub) {
        this(null, hub, true);
    }
    public MessageTypeColumnInvalidRpgTypeFilter(Hub<MessageTypeColumn> hubMaster, Hub<MessageTypeColumn> hub) {
        this(hubMaster, hub, false);
    }
    public MessageTypeColumnInvalidRpgTypeFilter(Hub<MessageTypeColumn> hubMaster, Hub<MessageTypeColumn> hubFiltered, boolean bUseObjectCache) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        this.bUseObjectCache = bUseObjectCache;
        if (hubMaster != null) getHubFilter();
        if (bUseObjectCache) getObjectCacheFilter();
    }


    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }
    public void refresh() {
        if (hubFilter != null) getHubFilter().refresh();
        if (cacheFilter != null) getObjectCacheFilter().refresh();
    }

    @Override
    public HubFilter<MessageTypeColumn> getHubFilter() {
        if (hubFilter != null) return hubFilter;
        if (hubMaster == null) return null;
        hubFilter = new HubFilter<MessageTypeColumn>(hubMaster, hub) {
            @Override
            public boolean isUsed(MessageTypeColumn messageTypeColumn) {
                return MessageTypeColumnInvalidRpgTypeFilter.this.isUsed(messageTypeColumn);
            }
        };
        hubFilter.addDependentProperty(MessageTypeColumnPP.format(), false);
        hubFilter.addDependentProperty(MessageTypeColumnPP.rpgType().defaultFormat(), false);
        hubFilter.refresh();
        return hubFilter;
    }

    public OAObjectCacheFilter<MessageTypeColumn> getObjectCacheFilter() {
        if (cacheFilter != null) return cacheFilter;
        if (!bUseObjectCache) return null;
        cacheFilter = new OAObjectCacheFilter<MessageTypeColumn>(hub) {
            @Override
            public boolean isUsed(MessageTypeColumn messageTypeColumn) {
                return MessageTypeColumnInvalidRpgTypeFilter.this.isUsed(messageTypeColumn);
            }
            @Override
            protected void reselect() {
                MessageTypeColumnInvalidRpgTypeFilter.this.reselect();
            }
        };
        cacheFilter.addDependentProperty(MessageTypeColumnPP.format(), false);
        cacheFilter.addDependentProperty(MessageTypeColumnPP.rpgType().defaultFormat(), false);
        cacheFilter.refresh();
        return cacheFilter;
    }

    public void reselect() {
        // can be overwritten to query datasource
    }

    // ==================
    // this method has custom code that will need to be put into the OABuilder filter

    @Override
    public boolean isUsed(MessageTypeColumn messageTypeColumn) {
        if (messageTypeColumn == null) {
            return false;
        }
    
        RpgType rpgType = messageTypeColumn.getRpgType();
        if (rpgType == null) {
            if (messageTypeColumn.getNotUsed()) {
                return false;
            } else {
                return true;
            }
        }
    
        String format = messageTypeColumn.getFormat();
        if (format == null) {
            format = "";
        }
    
        String format2 = rpgType.getDefaultFormat();
        if (format2 == null) {
            format2 = "";
        }
    
        if (!OAString.isEqual(format, format2, true)) {
            return true;
        }
    
        return false;
    }
}
