// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath;
 
import java.io.Serializable;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
 
public class RpgMessagePPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public RpgMessagePPx(String name) {
        this(null, name);
    }

    public RpgMessagePPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public MessagePPx message() {
        MessagePPx ppx = new MessagePPx(this, RpgMessage.P_Message);
        return ppx;
    }

    public MessageTypeRecordPPx messageTypeRecord() {
        MessageTypeRecordPPx ppx = new MessageTypeRecordPPx(this, RpgMessage.P_MessageTypeRecord);
        return ppx;
    }

    public String id() {
        return pp + "." + RpgMessage.P_Id;
    }

    public String created() {
        return pp + "." + RpgMessage.P_Created;
    }

    public String code() {
        return pp + "." + RpgMessage.P_Code;
    }

    public String binary() {
        return pp + "." + RpgMessage.P_Binary;
    }

    public String json() {
        return pp + "." + RpgMessage.P_Json;
    }

    public String processed() {
        return pp + "." + RpgMessage.P_Processed;
    }

    public String cancelled() {
        return pp + "." + RpgMessage.P_Cancelled;
    }

    public String error() {
        return pp + "." + RpgMessage.P_Error;
    }

    public String status() {
        return pp + "." + RpgMessage.P_Status;
    }

    public String binaryDisplay() {
        return pp + "." + RpgMessage.P_BinaryDisplay;
    }

    public String convert() {
        return pp + ".convert";
    }

    public RpgMessagePPx openFilter() {
        RpgMessagePPx ppx = new RpgMessagePPx(this, ":open()");
        return ppx;
    }

    public RpgMessagePPx errorFilter() {
        RpgMessagePPx ppx = new RpgMessagePPx(this, ":error()");
        return ppx;
    }

    @Override
    public String toString() {
        return pp;
    }
    public String pp() {
        return pp;
    }
}
 
