// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa.search;

import java.util.logging.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.delegate.oa.MessageTypeDelegate;

@OAClass(useDataSource=false, localOnly=true)
public class MessageTypeSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MessageTypeSearch.class.getName());
    public static final String P_Id = "Id";
    public static final String P_Id2 = "Id2";
    public static final String P_Name = "Name";
    public static final String P_Created = "Created";
    public static final String P_FollowUp = "FollowUp";
    public static final String P_FollowUpUseNull = "FollowUpUseNull";
    public static final String P_FollowUpUseNotNull = "FollowUpUseNotNull";
    public static final String P_Verified = "Verified";
    public static final String P_MaxResults = "MaxResults";

    protected int id;
    protected int id2;
    protected String name;
    protected OADateTime created;
    protected boolean followUp;
    protected boolean followUpUseNull;
    protected boolean followUpUseNotNull;
    protected OADateTime verified;
    protected int maxResults;

    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
        if (isLoading()) return;
        if (id > id2) setId2(this.id);
    } 
    public int getId2() {
        return id2;
    }
    public void setId2(int newValue) {
        int old = id2;
        fireBeforePropertyChange(P_Id2, old, newValue);
        this.id2 = newValue;
        firePropertyChange(P_Id2, old, this.id2);
        if (isLoading()) return;
        if (id > id2) setId(this.id2);
    }

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      

    public boolean getFollowUp() {
        return followUp;
    }
    public boolean isFollowUp() {
        return getFollowUp();
    }
    public void setFollowUp(boolean newValue) {
        boolean old = followUp;
        fireBeforePropertyChange(P_FollowUp, old, newValue);
        this.followUp = newValue;
        firePropertyChange(P_FollowUp, old, this.followUp);
    }
      
    public boolean getFollowUpUseNull() {
        return followUpUseNull;
    }
    public void setFollowUpUseNull(boolean newValue) {
        boolean old = this.followUpUseNull;
        this.followUpUseNull = newValue;
        firePropertyChange(P_FollowUpUseNull, old, this.followUpUseNull);
    }
    public boolean getFollowUpUseNotNull() {
        return followUpUseNotNull;
    }
    public void setFollowUpUseNotNull(boolean newValue) {
        boolean old = this.followUpUseNotNull;
        this.followUpUseNotNull = newValue;
        firePropertyChange(P_FollowUpUseNotNull, old, this.followUpUseNotNull);
    }

    public OADateTime getVerified() {
        return verified;
    }
    public void setVerified(OADateTime newValue) {
        OADateTime old = verified;
        fireBeforePropertyChange(P_Verified, old, newValue);
        this.verified = newValue;
        firePropertyChange(P_Verified, old, this.verified);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
        setId(0);
        setNull(P_Id);
        setId2(0);
        setNull(P_Id2);
        setName(null);
        setCreated(null);
        setFollowUp(false);
        setNull(P_FollowUp);
        setFollowUpUseNull(false);
        setFollowUpUseNotNull(false);
        setVerified(null);
    }

    public boolean isDataEntered() {
        if (!isNull(P_Id)) return true;
        if (getName() != null) return true;
        if (getCreated() != null) return true;
        if (!isNull(P_FollowUp)) return true;
        if (getFollowUpUseNull()) return true;
        if (getFollowUpUseNotNull()) return true;
        if (getVerified() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<MessageType> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<MessageType> f = new OAQueryFilter<MessageType>(MessageType.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<MessageType> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<MessageType> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<MessageType> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += MessageType.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + MessageType.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += MessageType.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += MessageType.P_Name + " LIKE ?";
            }
            else {
                sql += MessageType.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageType.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (followUpUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageType.P_FollowUp + " = null";
        }
        else if (followUpUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageType.P_FollowUp + " != null";
        }
        if (!isNull(P_FollowUp)) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageType.P_FollowUp + " = ?";
            args = OAArray.add(Object.class, args, this.followUp);
        }
        if (verified != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MessageType.P_Verified + " = ?";
            args = OAArray.add(Object.class, args, this.verified);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<MessageType> select = new OASelect<MessageType>(MessageType.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!isNull(P_Id)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Id2) && id != id2) {
                sql += prefix + MessageType.P_Id + " >= ?";
                args = OAArray.add(Object.class, args, getId());
                sql += " AND " + prefix + MessageType.P_Id + " <= ?";
                args = OAArray.add(Object.class, args, getId2());
            }
            else {
                sql += prefix + MessageType.P_Id + " = ?";
                args = OAArray.add(Object.class, args, getId());
            }
        }
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += prefix + MessageType.P_Name + " LIKE ?";
            }
            else {
                sql += prefix + MessageType.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageType.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (followUpUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageType.P_FollowUp + " = null";
        }
        else if (followUpUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageType.P_FollowUp + " != null";
        }
        if (!isNull(P_FollowUp)) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageType.P_FollowUp + " = ?";
            args = OAArray.add(Object.class, args, this.followUp);
        }
        if (verified != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + MessageType.P_Verified + " = ?";
            args = OAArray.add(Object.class, args, this.verified);
        }
        select.add(sql, args);
    }

    private OAFilter<MessageType> filterDataSourceFilter;
    public OAFilter<MessageType> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<MessageType>() {
            @Override
            public boolean isUsed(MessageType messageType) {
                return MessageTypeSearch.this.isUsedForDataSourceFilter(messageType);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<MessageType> filterCustomFilter;
    public OAFilter<MessageType> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<MessageType>() {
            @Override
            public boolean isUsed(MessageType messageType) {
                boolean b = MessageTypeSearch.this.isUsedForCustomFilter(messageType);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(MessageType searchMessageType) {
        return true;
    }
    public boolean isUsedForCustomFilter(MessageType searchMessageType) {
        return true;
    }
}
