// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa.search;

import java.util.logging.Logger;

import com.oreillyauto.dev.tool.messagedesigner.model.oa.MessageTypeRecord;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.RpgMessage;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.RpgMessagePP;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAOne;
import com.viaoa.datasource.OASelect;
import com.viaoa.filter.OAAndFilter;
import com.viaoa.filter.OAQueryFilter;
import com.viaoa.object.OAObject;
import com.viaoa.util.OAArray;
import com.viaoa.util.OADateTime;
import com.viaoa.util.OAFilter;
import com.viaoa.util.OAString;

@OAClass(useDataSource = false, localOnly = true)
public class RpgMessageSearch extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(RpgMessageSearch.class.getName());
	public static final String P_Id = "Id";
	public static final String P_Id2 = "Id2";
	public static final String P_Created = "Created";
	public static final String P_Created2 = "Created2";
	public static final String P_Code = "Code";
	public static final String P_Processed = "Processed";
	public static final String P_Processed2 = "Processed2";
	public static final String P_ProcessedUseNull = "ProcessedUseNull";
	public static final String P_ProcessedUseNotNull = "ProcessedUseNotNull";
	public static final String P_Cancelled = "Cancelled";
	public static final String P_Cancelled2 = "Cancelled2";
	public static final String P_CancelledUseNull = "CancelledUseNull";
	public static final String P_CancelledUseNotNull = "CancelledUseNotNull";
	public static final String P_Error = "Error";
	public static final String P_ErrorUseNull = "ErrorUseNull";
	public static final String P_ErrorUseNotNull = "ErrorUseNotNull";
	public static final String P_MessageTypeRecord = "MessageTypeRecord";
	public static final String P_UseMessageTypeRecordSearch = "UseMessageTypeRecordSearch";
	public static final String P_MaxResults = "MaxResults";

	protected int id;
	protected int id2;
	protected OADateTime created;
	protected OADateTime created2;
	protected String code;
	protected OADateTime processed;
	protected OADateTime processed2;
	protected boolean processedUseNull;
	protected boolean processedUseNotNull;
	protected OADateTime cancelled;
	protected OADateTime cancelled2;
	protected boolean cancelledUseNull;
	protected boolean cancelledUseNotNull;
	protected String error;
	protected boolean errorUseNull;
	protected boolean errorUseNotNull;
	protected MessageTypeRecord messageTypeRecord;
	protected boolean useMessageTypeRecordSearch;
	protected MessageTypeRecordSearch searchMessageTypeRecord;
	protected int maxResults;

	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
		if (isLoading()) {
			return;
		}
		if (id > id2) {
			setId2(this.id);
		}
	}

	public int getId2() {
		return id2;
	}

	public void setId2(int newValue) {
		int old = id2;
		fireBeforePropertyChange(P_Id2, old, newValue);
		this.id2 = newValue;
		firePropertyChange(P_Id2, old, this.id2);
		if (isLoading()) {
			return;
		}
		if (id > id2) {
			setId(this.id2);
		}
	}

	public OADateTime getCreated() {
		return created;
	}

	public void setCreated(OADateTime newValue) {
		OADateTime old = created;
		fireBeforePropertyChange(P_Created, old, newValue);
		this.created = newValue;
		firePropertyChange(P_Created, old, this.created);
		if (isLoading()) {
			return;
		}
		if (created != null) {
			if (created2 == null) {
				setCreated2(this.created.addDays(1));
			} else if (created.compareTo(created2) > 0) {
				setCreated2(this.created.addDays(1));
			}
		}
	}

	public OADateTime getCreated2() {
		return created2;
	}

	public void setCreated2(OADateTime newValue) {
		OADateTime old = created2;
		fireBeforePropertyChange(P_Created2, old, newValue);
		this.created2 = newValue;
		firePropertyChange(P_Created2, old, this.created2);
		if (created != null && created2 != null) {
			if (created.compareTo(created2) > 0) {
				setCreated(this.created2);
			}
		}
	}

	public String getCode() {
		return code;
	}

	public void setCode(String newValue) {
		String old = code;
		fireBeforePropertyChange(P_Code, old, newValue);
		this.code = newValue;
		firePropertyChange(P_Code, old, this.code);
	}

	public OADateTime getProcessed() {
		return processed;
	}

	public void setProcessed(OADateTime newValue) {
		OADateTime old = processed;
		fireBeforePropertyChange(P_Processed, old, newValue);
		this.processed = newValue;
		firePropertyChange(P_Processed, old, this.processed);
		if (isLoading()) {
			return;
		}
		if (processed != null) {
			if (processed2 == null) {
				setProcessed2(this.processed.addDays(1));
			} else if (processed.compareTo(processed2) > 0) {
				setProcessed2(this.processed.addDays(1));
			}
		}
	}

	public OADateTime getProcessed2() {
		return processed2;
	}

	public void setProcessed2(OADateTime newValue) {
		OADateTime old = processed2;
		fireBeforePropertyChange(P_Processed2, old, newValue);
		this.processed2 = newValue;
		firePropertyChange(P_Processed2, old, this.processed2);
		if (processed != null && processed2 != null) {
			if (processed.compareTo(processed2) > 0) {
				setProcessed(this.processed2);
			}
		}
	}

	public boolean getProcessedUseNull() {
		return processedUseNull;
	}

	public void setProcessedUseNull(boolean newValue) {
		boolean old = this.processedUseNull;
		this.processedUseNull = newValue;
		firePropertyChange(P_ProcessedUseNull, old, this.processedUseNull);
	}

	public boolean getProcessedUseNotNull() {
		return processedUseNotNull;
	}

	public void setProcessedUseNotNull(boolean newValue) {
		boolean old = this.processedUseNotNull;
		this.processedUseNotNull = newValue;
		firePropertyChange(P_ProcessedUseNotNull, old, this.processedUseNotNull);
	}

	public OADateTime getCancelled() {
		return cancelled;
	}

	public void setCancelled(OADateTime newValue) {
		OADateTime old = cancelled;
		fireBeforePropertyChange(P_Cancelled, old, newValue);
		this.cancelled = newValue;
		firePropertyChange(P_Cancelled, old, this.cancelled);
		if (isLoading()) {
			return;
		}
		if (cancelled != null) {
			if (cancelled2 == null) {
				setCancelled2(this.cancelled.addDays(1));
			} else if (cancelled.compareTo(cancelled2) > 0) {
				setCancelled2(this.cancelled.addDays(1));
			}
		}
	}

	public OADateTime getCancelled2() {
		return cancelled2;
	}

	public void setCancelled2(OADateTime newValue) {
		OADateTime old = cancelled2;
		fireBeforePropertyChange(P_Cancelled2, old, newValue);
		this.cancelled2 = newValue;
		firePropertyChange(P_Cancelled2, old, this.cancelled2);
		if (cancelled != null && cancelled2 != null) {
			if (cancelled.compareTo(cancelled2) > 0) {
				setCancelled(this.cancelled2);
			}
		}
	}

	public boolean getCancelledUseNull() {
		return cancelledUseNull;
	}

	public void setCancelledUseNull(boolean newValue) {
		boolean old = this.cancelledUseNull;
		this.cancelledUseNull = newValue;
		firePropertyChange(P_CancelledUseNull, old, this.cancelledUseNull);
	}

	public boolean getCancelledUseNotNull() {
		return cancelledUseNotNull;
	}

	public void setCancelledUseNotNull(boolean newValue) {
		boolean old = this.cancelledUseNotNull;
		this.cancelledUseNotNull = newValue;
		firePropertyChange(P_CancelledUseNotNull, old, this.cancelledUseNotNull);
	}

	public String getError() {
		return error;
	}

	public void setError(String newValue) {
		String old = error;
		fireBeforePropertyChange(P_Error, old, newValue);
		this.error = newValue;
		firePropertyChange(P_Error, old, this.error);
	}

	public boolean getErrorUseNull() {
		return errorUseNull;
	}

	public void setErrorUseNull(boolean newValue) {
		boolean old = this.errorUseNull;
		this.errorUseNull = newValue;
		firePropertyChange(P_ErrorUseNull, old, this.errorUseNull);
	}

	public boolean getErrorUseNotNull() {
		return errorUseNotNull;
	}

	public void setErrorUseNotNull(boolean newValue) {
		boolean old = this.errorUseNotNull;
		this.errorUseNotNull = newValue;
		firePropertyChange(P_ErrorUseNotNull, old, this.errorUseNotNull);
	}

	public int getMaxResults() {
		return maxResults;
	}

	public void setMaxResults(int newValue) {
		fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
		int old = maxResults;
		this.maxResults = newValue;
		firePropertyChange(P_MaxResults, old, this.maxResults);
	}

	@OAOne
	public MessageTypeRecord getMessageTypeRecord() {
		if (messageTypeRecord == null) {
			messageTypeRecord = (MessageTypeRecord) getObject(P_MessageTypeRecord);
		}
		return messageTypeRecord;
	}

	public void setMessageTypeRecord(MessageTypeRecord newValue) {
		MessageTypeRecord old = this.messageTypeRecord;
		this.messageTypeRecord = newValue;
		firePropertyChange(P_MessageTypeRecord, old, this.messageTypeRecord);
	}

	public boolean getUseMessageTypeRecordSearch() {
		return useMessageTypeRecordSearch;
	}

	public void setUseMessageTypeRecordSearch(boolean newValue) {
		boolean old = this.useMessageTypeRecordSearch;
		this.useMessageTypeRecordSearch = newValue;
		firePropertyChange(P_UseMessageTypeRecordSearch, old, this.useMessageTypeRecordSearch);
	}

	public MessageTypeRecordSearch getMessageTypeRecordSearch() {
		return this.searchMessageTypeRecord;
	}

	public void setMessageTypeRecordSearch(MessageTypeRecordSearch newValue) {
		this.searchMessageTypeRecord = newValue;
	}

	public void reset() {
		setId(0);
		setNull(P_Id);
		setId2(0);
		setNull(P_Id2);
		setCreated(null);
		setCreated2(null);
		setCode(null);
		setProcessed(null);
		setProcessed2(null);
		setProcessedUseNull(false);
		setProcessedUseNotNull(false);
		setCancelled(null);
		setCancelled2(null);
		setCancelledUseNull(false);
		setCancelledUseNotNull(false);
		setError(null);
		setErrorUseNull(false);
		setErrorUseNotNull(false);
		setMessageTypeRecord(null);
		setUseMessageTypeRecordSearch(false);
	}

	public boolean isDataEntered() {
		if (!isNull(P_Id)) {
			return true;
		}
		if (getCreated() != null) {
			return true;
		}
		if (getCode() != null) {
			return true;
		}
		if (getProcessed() != null) {
			return true;
		}
		if (getProcessedUseNull()) {
			return true;
		}
		if (getProcessedUseNull()) {
			return true;
		}
		if (getCancelled() != null) {
			return true;
		}
		if (getCancelledUseNull()) {
			return true;
		}
		if (getCancelledUseNull()) {
			return true;
		}
		if (getError() != null) {
			return true;
		}
		if (getErrorUseNull()) {
			return true;
		}
		if (getErrorUseNotNull()) {
			return true;
		}
		if (getMessageTypeRecord() != null) {
			return true;
		}
		if (getUseMessageTypeRecordSearch()) {
			return true;
		}
		return false;
	}

	protected String extraWhere;
	protected Object[] extraWhereParams;
	protected OAFilter<RpgMessage> filterExtraWhere;

	public void setExtraWhere(String s, Object... args) {
		this.extraWhere = s;
		this.extraWhereParams = args;
		if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
			OAFilter<RpgMessage> f = new OAQueryFilter<RpgMessage>(RpgMessage.class, s, args);
			setExtraWhereFilter(f);
		}
	}

	public void setExtraWhereFilter(OAFilter<RpgMessage> filter) {
		this.filterExtraWhere = filter;
	}

	public OAFilter<RpgMessage> getExtraWhereFilter() {
		return this.filterExtraWhere;
	}

	public OASelect<RpgMessage> getSelect() {
		final String prefix = "";
		String sql = "";
		String sortOrder = null;
		Object[] args = new Object[0];
		if (!isNull(P_Id)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			if (!isNull(P_Id2) && id != id2) {
				sql += RpgMessage.P_Id + " >= ?";
				args = OAArray.add(Object.class, args, getId());
				sql += " AND " + RpgMessage.P_Id + " <= ?";
				args = OAArray.add(Object.class, args, getId2());
			} else {
				sql += RpgMessage.P_Id + " = ?";
				args = OAArray.add(Object.class, args, getId());
			}
		}
		if (created != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			if (created2 != null && !created.equals(created2)) {
				sql += RpgMessage.P_Created + " >= ?";
				args = OAArray.add(Object.class, args, this.created);
				sql += " AND " + RpgMessage.P_Created + " <= ?";
				args = OAArray.add(Object.class, args, this.created2);
			} else {
				sql += RpgMessage.P_Created + " = ?";
				args = OAArray.add(Object.class, args, this.created);
			}
		}
		if (OAString.isNotEmpty(this.code)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			String value = OAString.convertToLikeSearch(code);
			if (value.indexOf("%") >= 0) {
				sql += RpgMessage.P_Code + " LIKE ?";
			} else {
				sql += RpgMessage.P_Code + " = ?";
			}
			args = OAArray.add(Object.class, args, value);
		}
		if (processedUseNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += RpgMessage.P_Processed + " = null";
		} else if (processedUseNotNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += RpgMessage.P_Processed + " != null";
		} else if (processed != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			if (processed2 != null && !processed.equals(processed2)) {
				sql += RpgMessage.P_Processed + " >= ?";
				args = OAArray.add(Object.class, args, this.processed);
				sql += " AND " + RpgMessage.P_Processed + " <= ?";
				args = OAArray.add(Object.class, args, this.processed2);
			} else {
				sql += RpgMessage.P_Processed + " = ?";
				args = OAArray.add(Object.class, args, this.processed);
			}
		}
		if (cancelledUseNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += RpgMessage.P_Cancelled + " = null";
		} else if (cancelledUseNotNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += RpgMessage.P_Cancelled + " != null";
		} else if (cancelled != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			if (cancelled2 != null && !cancelled.equals(cancelled2)) {
				sql += RpgMessage.P_Cancelled + " >= ?";
				args = OAArray.add(Object.class, args, this.cancelled);
				sql += " AND " + RpgMessage.P_Cancelled + " <= ?";
				args = OAArray.add(Object.class, args, this.cancelled2);
			} else {
				sql += RpgMessage.P_Cancelled + " = ?";
				args = OAArray.add(Object.class, args, this.cancelled);
			}
		}
		if (errorUseNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += "(" + RpgMessage.P_Error + " = null OR " + RpgMessage.P_Error + " == '')";
		} else if (errorUseNotNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += RpgMessage.P_Error + " != null";
		} else if (OAString.isNotEmpty(this.error)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			String value = OAString.convertToLikeSearch(error);
			if (value.indexOf("%") >= 0) {
				sql += RpgMessage.P_Error + " LIKE ?";
			} else {
				sql += RpgMessage.P_Error + " = ?";
			}
			args = OAArray.add(Object.class, args, value);
		}
		if (!useMessageTypeRecordSearch && getMessageTypeRecord() != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += RpgMessagePP.messageTypeRecord().pp + " = ?";
			args = OAArray.add(Object.class, args, getMessageTypeRecord());
		}

		if (OAString.isNotEmpty(extraWhere)) {
			if (sql.length() > 0) {
				sql = "(" + sql + ") AND ";
			}
			sql += extraWhere;
			args = OAArray.add(Object.class, args, extraWhereParams);
		}

		OASelect<RpgMessage> select = new OASelect<RpgMessage>(RpgMessage.class, sql, args, sortOrder);
		if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
			select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
		} else {
			select.setFilter(this.getCustomFilter());
		}
		select.setDataSourceFilter(this.getDataSourceFilter());
		if (getMaxResults() > 0) {
			select.setMax(getMaxResults());
		}
		if (useMessageTypeRecordSearch && getMessageTypeRecordSearch() != null) {
			getMessageTypeRecordSearch().appendSelect(RpgMessagePP.messageTypeRecord().pp, select);
		}
		return select;
	}

	public void appendSelect(final String fromName, final OASelect select) {
		final String prefix = fromName + ".";
		String sql = "";
		Object[] args = new Object[0];
		if (!isNull(P_Id)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			if (!isNull(P_Id2) && id != id2) {
				sql += prefix + RpgMessage.P_Id + " >= ?";
				args = OAArray.add(Object.class, args, getId());
				sql += " AND " + prefix + RpgMessage.P_Id + " <= ?";
				args = OAArray.add(Object.class, args, getId2());
			} else {
				sql += prefix + RpgMessage.P_Id + " = ?";
				args = OAArray.add(Object.class, args, getId());
			}
		}
		if (created != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			if (created2 != null && !created.equals(created2)) {
				sql += prefix + RpgMessage.P_Created + " >= ?";
				args = OAArray.add(Object.class, args, this.created);
				sql += " AND " + prefix + RpgMessage.P_Created + " <= ?";
				args = OAArray.add(Object.class, args, this.created2);
			} else {
				sql += prefix + RpgMessage.P_Created + " = ?";
				args = OAArray.add(Object.class, args, this.created);
			}
		}
		if (OAString.isNotEmpty(this.code)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			String value = OAString.convertToLikeSearch(code);
			if (value.indexOf("%") >= 0) {
				sql += prefix + RpgMessage.P_Code + " LIKE ?";
			} else {
				sql += prefix + RpgMessage.P_Code + " = ?";
			}
			args = OAArray.add(Object.class, args, value);
		}
		if (processedUseNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += prefix + RpgMessage.P_Processed + " = null";
		} else if (processedUseNotNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += prefix + RpgMessage.P_Processed + " != null";
		} else if (processed != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			if (processed2 != null && !processed.equals(processed2)) {
				sql += prefix + RpgMessage.P_Processed + " >= ?";
				args = OAArray.add(Object.class, args, this.processed);
				sql += " AND " + prefix + RpgMessage.P_Processed + " <= ?";
				args = OAArray.add(Object.class, args, this.processed2);
			} else {
				sql += prefix + RpgMessage.P_Processed + " = ?";
				args = OAArray.add(Object.class, args, this.processed);
			}
		}
		if (cancelledUseNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += prefix + RpgMessage.P_Cancelled + " = null";
		} else if (cancelledUseNotNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += prefix + RpgMessage.P_Cancelled + " != null";
		} else if (cancelled != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			if (cancelled2 != null && !cancelled.equals(cancelled2)) {
				sql += prefix + RpgMessage.P_Cancelled + " >= ?";
				args = OAArray.add(Object.class, args, this.cancelled);
				sql += " AND " + prefix + RpgMessage.P_Cancelled + " <= ?";
				args = OAArray.add(Object.class, args, this.cancelled2);
			} else {
				sql += prefix + RpgMessage.P_Cancelled + " = ?";
				args = OAArray.add(Object.class, args, this.cancelled);
			}
		}
		if (errorUseNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += "(" + prefix + RpgMessage.P_Error + " = null OR " + prefix + RpgMessage.P_Error + " == '')";
		} else if (errorUseNotNull) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += prefix + RpgMessage.P_Error + " != null";
		} else if (OAString.isNotEmpty(this.error)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			String value = OAString.convertToLikeSearch(error);
			if (value.indexOf("%") >= 0) {
				sql += prefix + RpgMessage.P_Error + " LIKE ?";
			} else {
				sql += prefix + RpgMessage.P_Error + " = ?";
			}
			args = OAArray.add(Object.class, args, value);
		}
		if (!useMessageTypeRecordSearch && getMessageTypeRecord() != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += prefix + RpgMessagePP.messageTypeRecord().pp + " = ?";
			args = OAArray.add(Object.class, args, getMessageTypeRecord());
		}
		if (useMessageTypeRecordSearch && getMessageTypeRecordSearch() != null) {
			getMessageTypeRecordSearch().appendSelect(prefix + RpgMessagePP.messageTypeRecord().pp, select);
		}
		select.add(sql, args);
	}

	private OAFilter<RpgMessage> filterDataSourceFilter;

	public OAFilter<RpgMessage> getDataSourceFilter() {
		if (filterDataSourceFilter != null) {
			return filterDataSourceFilter;
		}
		filterDataSourceFilter = new OAFilter<RpgMessage>() {
			@Override
			public boolean isUsed(RpgMessage rpgMessage) {
				return RpgMessageSearch.this.isUsedForDataSourceFilter(rpgMessage);
			}
		};
		return filterDataSourceFilter;
	}

	private OAFilter<RpgMessage> filterCustomFilter;

	public OAFilter<RpgMessage> getCustomFilter() {
		if (filterCustomFilter != null) {
			return filterCustomFilter;
		}
		filterCustomFilter = new OAFilter<RpgMessage>() {
			@Override
			public boolean isUsed(RpgMessage rpgMessage) {
				boolean b = RpgMessageSearch.this.isUsedForCustomFilter(rpgMessage);
				return b;
			}
		};
		return filterCustomFilter;
	}

	public boolean isUsedForDataSourceFilter(RpgMessage searchRpgMessage) {
		return true;
	}

	public boolean isUsedForCustomFilter(RpgMessage searchRpgMessage) {
		return true;
	}
}
