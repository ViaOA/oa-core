// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.oa.search;

import java.util.logging.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class RpgProgramSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(RpgProgramSearch.class.getName());
    public static final String P_Created = "Created";
    public static final String P_Created2 = "Created2";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_MaxResults = "MaxResults";

    protected OADateTime created;
    protected OADateTime created2;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected int maxResults;

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
        if (isLoading()) return;
        if (created != null) {
            if (created2 == null) setCreated2(this.created.addDays(1));
            else if (created.compareTo(created2) > 0) setCreated2(this.created.addDays(1));
        }
    } 
    public OADateTime getCreated2() {
        return created2;
    }
    public void setCreated2(OADateTime newValue) {
        OADateTime old = created2;
        fireBeforePropertyChange(P_Created2, old, newValue);
        this.created2 = newValue;
        firePropertyChange(P_Created2, old, this.created2);
        if (created != null && created2 != null) {
            if (created.compareTo(created2) > 0) setCreated(this.created2);
        }
    }

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
        setCreated(null);
        setCreated2(null);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
    }

    public boolean isDataEntered() {
        if (getCreated() != null) return true;
        if (getName() != null) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<RpgProgram> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<RpgProgram> f = new OAQueryFilter<RpgProgram>(RpgProgram.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<RpgProgram> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<RpgProgram> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<RpgProgram> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            if (created2 != null && !created.equals(created2)) {
                sql += RpgProgram.P_Created + " >= ?";
                args = OAArray.add(Object.class, args, this.created);
                sql += " AND " + RpgProgram.P_Created + " <= ?";
                args = OAArray.add(Object.class, args, this.created2);
            }
            else {
                sql += RpgProgram.P_Created + " = ?";
                args = OAArray.add(Object.class, args, this.created);
            }
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + RpgProgram.P_Name + " = null OR " + RpgProgram.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += RpgProgram.P_Name + " != null";
        }
        else if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += RpgProgram.P_Name + " LIKE ?";
            }
            else {
                sql += RpgProgram.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<RpgProgram> select = new OASelect<RpgProgram>(RpgProgram.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            if (created2 != null && !created.equals(created2)) {
                sql += prefix + RpgProgram.P_Created + " >= ?";
                args = OAArray.add(Object.class, args, this.created);
                sql += " AND " + prefix + RpgProgram.P_Created + " <= ?";
                args = OAArray.add(Object.class, args, this.created2);
            }
            else {
                sql += prefix + RpgProgram.P_Created + " = ?";
                args = OAArray.add(Object.class, args, this.created);
            }
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += "(" + prefix + RpgProgram.P_Name + " = null OR " + prefix + RpgProgram.P_Name + " == '')";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + RpgProgram.P_Name + " != null";
        }
        else if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += prefix + RpgProgram.P_Name + " LIKE ?";
            }
            else {
                sql += prefix + RpgProgram.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        select.add(sql, args);
    }

    private OAFilter<RpgProgram> filterDataSourceFilter;
    public OAFilter<RpgProgram> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<RpgProgram>() {
            @Override
            public boolean isUsed(RpgProgram rpgProgram) {
                return RpgProgramSearch.this.isUsedForDataSourceFilter(rpgProgram);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<RpgProgram> filterCustomFilter;
    public OAFilter<RpgProgram> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<RpgProgram>() {
            @Override
            public boolean isUsed(RpgProgram rpgProgram) {
                boolean b = RpgProgramSearch.this.isUsedForCustomFilter(rpgProgram);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(RpgProgram searchRpgProgram) {
        return true;
    }
    public boolean isUsedForCustomFilter(RpgProgram searchRpgProgram) {
        return true;
    }
}
