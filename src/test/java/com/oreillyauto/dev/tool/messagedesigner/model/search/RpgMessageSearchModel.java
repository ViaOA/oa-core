// Generated by OABuilder
package com.oreillyauto.dev.tool.messagedesigner.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.dev.tool.messagedesigner.model.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.propertypath.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.search.*;
import com.oreillyauto.dev.tool.messagedesigner.model.oa.filter.*;
import com.oreillyauto.dev.tool.messagedesigner.delegate.ModelDelegate;
import com.oreillyauto.dev.tool.messagedesigner.resource.Resource;

public class RpgMessageSearchModel {
    private static Logger LOG = Logger.getLogger(RpgMessageSearchModel.class.getName());
    
    protected Hub<RpgMessage> hub;  // search results
    protected Hub<RpgMessage> hubMultiSelect;
    protected Hub<RpgMessage> hubSearchFrom;  // hub (optional) to search from
    protected Hub<RpgMessageSearch> hubRpgMessageSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<MessageTypeRecord> hubMessageTypeRecord;
    
    // finder used to find objects in a path
    protected OAFinder<?, RpgMessage> finder;
    
    // ObjectModels
    protected MessageTypeRecordModel modelMessageTypeRecord;
    
    // SearchModels
    protected MessageTypeRecordSearchModel modelMessageTypeRecordSearch;
    
    // object used for search data
    protected RpgMessageSearch rpgMessageSearch;
    
    public RpgMessageSearchModel() {
    }
    
    public RpgMessageSearchModel(Hub<RpgMessage> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<RpgMessage> getHub() {
        if (hub == null) {
            hub = new Hub<RpgMessage>(RpgMessage.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<RpgMessage> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<RpgMessage> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    RpgMessageSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<RpgMessage> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(RpgMessage.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, RpgMessage> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, RpgMessage> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public RpgMessageSearch getRpgMessageSearch() {
        if (rpgMessageSearch != null) return rpgMessageSearch;
        rpgMessageSearch = new RpgMessageSearch();
        return rpgMessageSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<RpgMessageSearch> getRpgMessageSearchHub() {
        if (hubRpgMessageSearch == null) {
            hubRpgMessageSearch = new Hub<RpgMessageSearch>(RpgMessageSearch.class);
            hubRpgMessageSearch.add(getRpgMessageSearch());
            hubRpgMessageSearch.setPos(0);
        }
        return hubRpgMessageSearch;
    }
    public Hub<MessageTypeRecord> getMessageTypeRecordHub() {
        if (hubMessageTypeRecord != null) return hubMessageTypeRecord;
        hubMessageTypeRecord = getRpgMessageSearchHub().getDetailHub(RpgMessageSearch.P_MessageTypeRecord);
        return hubMessageTypeRecord;
    }
    
    public MessageTypeRecordModel getMessageTypeRecordModel() {
        if (modelMessageTypeRecord != null) return modelMessageTypeRecord;
        modelMessageTypeRecord = new MessageTypeRecordModel(getMessageTypeRecordHub());
        modelMessageTypeRecord.setDisplayName("Message Type Record");
        modelMessageTypeRecord.setPluralDisplayName("Message Type Records");
        modelMessageTypeRecord.setAllowNew(false);
        modelMessageTypeRecord.setAllowSave(true);
        modelMessageTypeRecord.setAllowAdd(false);
        modelMessageTypeRecord.setAllowRemove(false);
        modelMessageTypeRecord.setAllowClear(true);
        modelMessageTypeRecord.setAllowDelete(false);
        modelMessageTypeRecord.setAllowSearch(true);
        modelMessageTypeRecord.setAllowHubSearch(false);
        modelMessageTypeRecord.setAllowGotoEdit(true);
        modelMessageTypeRecord.setViewOnly(true);
        return modelMessageTypeRecord;
    }
    
    public MessageTypeRecordSearchModel getMessageTypeRecordSearchModel() {
        if (modelMessageTypeRecordSearch == null) {
            modelMessageTypeRecordSearch = new MessageTypeRecordSearchModel();
            getRpgMessageSearch().setMessageTypeRecordSearch(modelMessageTypeRecordSearch.getMessageTypeRecordSearch());
        }
        return modelMessageTypeRecordSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses RpgMessageSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<RpgMessage> sel = getRpgMessageSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(RpgMessage rpgMessage, Hub<RpgMessage> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<RpgMessage> hub) {
    }
}

