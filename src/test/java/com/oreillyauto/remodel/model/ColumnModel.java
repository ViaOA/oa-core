// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class ColumnModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ColumnModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      <- unfilteredHub - points one of the above hubs
      pkeyFilteredHub;
      <- hub - points to unfiltered or filtered hub
    */
    
    // Hubs
    protected Hub<Column> hubOriginal;
    
    // base hub that points to one of: hubOriginal
    protected Hub<Column> hubUnfiltered;
    protected Hub<Column> hubPkeyFilteredHub;
    // main hub that points to hubUnfiltered, hubPkeyFilteredHub
    protected Hub<Column> hub;
    // selected columns
    protected Hub<Column> hubMultiSelect;
    // detail hubs
    protected Hub<ColumnType> hubColumnType;
    protected Hub<JsonObject> hubJsonObject;
    protected Hub<Table> hubTable;
    protected Hub<IndexColumn> hubIndexColumns;
    
    // AddHubs used for references
    protected Hub<ColumnType> hubColumnTypeSelectFrom;
    
    // ObjectModels
    protected ColumnTypeModel modelColumnType;
    protected JsonObjectModel modelJsonObject;
    protected TableModel modelTable;
    protected IndexColumnModel modelIndexColumns;
    
    // selectFrom
    protected ColumnTypeModel modelColumnTypeSelectFrom;
    
    // SearchModels used for references
    protected ColumnTypeSearchModel modelColumnTypeSearch;
    protected TableSearchModel modelTableSearch;
    protected IndexColumnSearchModel modelIndexColumnsSearch;
    
    // FilterModels
    protected ColumnPkeyFilterModel modelColumnPkeyFilter;
    
    public ColumnModel() {
        setDisplayName("Column");
        setPluralDisplayName("Columns");
    }
    
    public ColumnModel(Hub<Column> hubColumn) {
        this();
        if (hubColumn != null) HubDelegate.setObjectClass(hubColumn, Column.class);
        this.hubOriginal = hubColumn;
    }
    public ColumnModel(Column column) {
        this();
        getHub().add(column);
        getHub().setPos(0);
    }
    
    public void useUnfilteredHub() {
        getHub().setSharedHub(getUnfilteredHub(), true);
    }
    public void usePkeyFilteredHub() {
        getHub().setSharedHub(getPkeyFilteredHub(), true);
    }
    
    public Hub<Column> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<Column>(Column.class);
        }
        return hubOriginal;
    }
    
    public Hub<ColumnType> getColumnTypeHub() {
        if (hubColumnType != null) return hubColumnType;
        hubColumnType = getHub().getDetailHub(Column.P_ColumnType);
        return hubColumnType;
    }
    public Hub<JsonObject> getJsonObjectHub() {
        if (hubJsonObject != null) return hubJsonObject;
        hubJsonObject = getHub().getDetailHub(Column.P_JsonObject);
        return hubJsonObject;
    }
    public Hub<Table> getTableHub() {
        if (hubTable != null) return hubTable;
        // this is the owner, use detailHub
        hubTable = getHub().getDetailHub(Column.P_Table);
        return hubTable;
    }
    public Hub<IndexColumn> getIndexColumns() {
        if (hubIndexColumns == null) {
            hubIndexColumns = getHub().getDetailHub(Column.P_IndexColumns);
        }
        return hubIndexColumns;
    }
    public Hub<ColumnType> getColumnTypeSelectFromHub() {
        if (hubColumnTypeSelectFrom != null) return hubColumnTypeSelectFrom;
        hubColumnTypeSelectFrom = new Hub<ColumnType>(ColumnType.class);
        Hub<ColumnType>hubColumnTypeSelectFrom1 = new Hub<ColumnType>(ColumnType.class);
        new HubMerger(getHub(), hubColumnTypeSelectFrom1, ColumnPP.table().database().databaseType().columnTypes().pp, false);
        HubCombined<ColumnType> hubCombined = new HubCombined(hubColumnTypeSelectFrom, hubColumnTypeSelectFrom1, getColumnTypeHub());
        hubColumnTypeSelectFrom.setLinkHub(getHub(), Column.P_ColumnType); 
        return hubColumnTypeSelectFrom;
    }
    public Hub<Column> getUnfilteredHub() {
        if (hubUnfiltered == null) {
            hubUnfiltered = new Hub<Column>(Column.class);
            hubUnfiltered.setSharedHub(getOriginalHub(), true);
        }
        return hubUnfiltered;
    }
    public Hub<Column> getPkeyFilteredHub() {
        if (hubPkeyFilteredHub == null) {
            hubPkeyFilteredHub = new Hub<Column>(Column.class);
        }
        return hubPkeyFilteredHub;
    }
    
    public Column getColumn() {
        return getHub().getAO();
    }
    
    // points to filtered or unfiltered hub
    public Hub<Column> getHub() {
        if (hub == null) {
            hub = new Hub<Column>(Column.class);
            hub.setSharedHub(getUnfilteredHub(), true);
        }
        return hub;
    }
    
    public Hub<Column> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Column>(Column.class);
        }
        return hubMultiSelect;
    }
    
    public ColumnTypeModel getColumnTypeModel() {
        if (modelColumnType != null) return modelColumnType;
        modelColumnType = new ColumnTypeModel(getColumnTypeHub());
        modelColumnType.setDisplayName("Column Type");
        modelColumnType.setPluralDisplayName("Column Types");
        modelColumnType.setForJfc(getForJfc());
        modelColumnType.setAllowNew(false);
        modelColumnType.setAllowSave(true);
        modelColumnType.setAllowAdd(false);
        modelColumnType.setAllowRemove(true);
        modelColumnType.setAllowClear(true);
        modelColumnType.setAllowDelete(false);
        modelColumnType.setAllowSearch(true);
        modelColumnType.setAllowHubSearch(false);
        modelColumnType.setAllowGotoEdit(true);
        modelColumnType.setViewOnly(true);
        // call Column.columnTypeModelCallback(ColumnTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Column.class, Column.P_ColumnType, modelColumnType);
    
        return modelColumnType;
    }
    public JsonObjectModel getJsonObjectModel() {
        if (modelJsonObject != null) return modelJsonObject;
        modelJsonObject = new JsonObjectModel(getJsonObjectHub());
        modelJsonObject.setDisplayName("Json Object");
        modelJsonObject.setPluralDisplayName("Json Objects");
        modelJsonObject.setForJfc(getForJfc());
        modelJsonObject.setAllowNew(true);
        modelJsonObject.setAllowSave(true);
        modelJsonObject.setAllowAdd(false);
        modelJsonObject.setAllowRemove(false);
        modelJsonObject.setAllowClear(false);
        modelJsonObject.setAllowDelete(true);
        modelJsonObject.setAllowSearch(false);
        modelJsonObject.setAllowHubSearch(false);
        modelJsonObject.setAllowGotoEdit(true);
        modelJsonObject.setViewOnly(getViewOnly());
        // call Column.jsonObjectModelCallback(JsonObjectModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Column.class, Column.P_JsonObject, modelJsonObject);
    
        return modelJsonObject;
    }
    public TableModel getTableModel() {
        if (modelTable != null) return modelTable;
        modelTable = new TableModel(getTableHub());
        modelTable.setDisplayName("Table");
        modelTable.setPluralDisplayName("Tables");
        modelTable.setForJfc(getForJfc());
        modelTable.setAllowNew(false);
        modelTable.setAllowSave(true);
        modelTable.setAllowAdd(false);
        modelTable.setAllowRemove(false);
        modelTable.setAllowClear(false);
        modelTable.setAllowDelete(false);
        modelTable.setAllowSearch(true);
        modelTable.setAllowHubSearch(true);
        modelTable.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelTable.setCreateUI(li == null || !Column.P_Table.equals(li.getName()) );
        modelTable.setViewOnly(getViewOnly());
        // call Column.tableModelCallback(TableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Column.class, Column.P_Table, modelTable);
    
        return modelTable;
    }
    public IndexColumnModel getIndexColumnsModel() {
        if (modelIndexColumns != null) return modelIndexColumns;
        modelIndexColumns = new IndexColumnModel(getIndexColumns());
        modelIndexColumns.setDisplayName("Index Column");
        modelIndexColumns.setPluralDisplayName("Index Columns");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getIndexColumns())) {
            modelIndexColumns.setCreateUI(false);
        }
        modelIndexColumns.setForJfc(getForJfc());
        modelIndexColumns.setAllowNew(false);
        modelIndexColumns.setAllowSave(true);
        modelIndexColumns.setAllowAdd(false);
        modelIndexColumns.setAllowMove(false);
        modelIndexColumns.setAllowRemove(false);
        modelIndexColumns.setAllowDelete(true);
        modelIndexColumns.setAllowSearch(false);
        modelIndexColumns.setAllowHubSearch(true);
        modelIndexColumns.setAllowGotoEdit(true);
        modelIndexColumns.setViewOnly(getViewOnly());
        modelIndexColumns.setAllowNew(false);
        modelIndexColumns.setAllowTableFilter(true);
        modelIndexColumns.setAllowTableSorting(true);
        modelIndexColumns.setAllowMultiSelect(false);
        modelIndexColumns.setAllowCopy(false);
        modelIndexColumns.setAllowCut(false);
        modelIndexColumns.setAllowPaste(false);
        // call Column.indexColumnsModelCallback(IndexColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Column.class, Column.P_IndexColumns, modelIndexColumns);
    
        return modelIndexColumns;
    }
    
    public ColumnTypeModel getColumnTypeSelectFromModel() {
        if (modelColumnTypeSelectFrom != null) return modelColumnTypeSelectFrom;
        modelColumnTypeSelectFrom = new ColumnTypeModel(getColumnTypeSelectFromHub());
        modelColumnTypeSelectFrom.setDisplayName("Column Type");
        modelColumnTypeSelectFrom.setPluralDisplayName("Column Types");
        modelColumnTypeSelectFrom.setForJfc(getForJfc());
        modelColumnTypeSelectFrom.setAllowNew(false);
        modelColumnTypeSelectFrom.setAllowSave(true);
        modelColumnTypeSelectFrom.setAllowAdd(false);
        modelColumnTypeSelectFrom.setAllowMove(false);
        modelColumnTypeSelectFrom.setAllowRemove(false);
        modelColumnTypeSelectFrom.setAllowDelete(false);
        modelColumnTypeSelectFrom.setAllowSearch(true);
        modelColumnTypeSelectFrom.setAllowHubSearch(true);
        modelColumnTypeSelectFrom.setAllowGotoEdit(true);
        modelColumnTypeSelectFrom.setViewOnly(getViewOnly());
        modelColumnTypeSelectFrom.setAllowNew(false);
        modelColumnTypeSelectFrom.setAllowTableFilter(true);
        modelColumnTypeSelectFrom.setAllowTableSorting(true);
        modelColumnTypeSelectFrom.setAllowCut(false);
        modelColumnTypeSelectFrom.setAllowCopy(false);
        modelColumnTypeSelectFrom.setAllowPaste(false);
        modelColumnTypeSelectFrom.setAllowMultiSelect(false);
        return modelColumnTypeSelectFrom;
    }
    public ColumnTypeSearchModel getColumnTypeSearchModel() {
        if (modelColumnTypeSearch != null) return modelColumnTypeSearch;
        modelColumnTypeSearch = new ColumnTypeSearchModel();
        OAFilter filter = new OAInFilter(ColumnModel.this.getHub(), ColumnPP.table().database().databaseType().columnTypes().pp);
        modelColumnTypeSearch.getColumnTypeSearch().setExtraWhereFilter(filter);
        return modelColumnTypeSearch;
    }
    public TableSearchModel getTableSearchModel() {
        if (modelTableSearch != null) return modelTableSearch;
        modelTableSearch = new TableSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTableSearch.getHub(), Column.P_Table, getHub());
        return modelTableSearch;
    }
    public IndexColumnSearchModel getIndexColumnsSearchModel() {
        if (modelIndexColumnsSearch != null) return modelIndexColumnsSearch;
        modelIndexColumnsSearch = new IndexColumnSearchModel();
        return modelIndexColumnsSearch;
    }
    
    public ColumnPkeyFilterModel getColumnPkeyFilterModel() {
        if (modelColumnPkeyFilter == null) {
            modelColumnPkeyFilter = new ColumnPkeyFilterModel(getUnfilteredHub(), getPkeyFilteredHub());
            new HubShareAO(getUnfilteredHub(), getPkeyFilteredHub());
        }
        return modelColumnPkeyFilter;
    }
    
    public HubCopy<Column> createHubCopy() {
        Hub<Column> hubColumnx = new Hub<>(Column.class);
        HubCopy<Column> hc = new HubCopy<>(getHub(), hubColumnx, true);
        return hc;
    }
    public ColumnModel createCopy() {
        ColumnModel mod = new ColumnModel(createHubCopy().getHub());
        return mod;
    }
}

