// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class DatabaseTypeModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(DatabaseTypeModel.class.getName());
    
    // Hubs
    protected Hub<DatabaseType> hub;
    // selected databaseTypes
    protected Hub<DatabaseType> hubMultiSelect;
    // detail hubs
    protected Hub<ColumnType> hubColumnTypes;
    
    // ObjectModels
    protected ColumnTypeModel modelColumnTypes;
    
    public DatabaseTypeModel() {
        setDisplayName("Database Type");
        setPluralDisplayName("Database Types");
    }
    
    public DatabaseTypeModel(Hub<DatabaseType> hubDatabaseType) {
        this();
        if (hubDatabaseType != null) HubDelegate.setObjectClass(hubDatabaseType, DatabaseType.class);
        this.hub = hubDatabaseType;
    }
    public DatabaseTypeModel(DatabaseType databaseType) {
        this();
        getHub().add(databaseType);
        getHub().setPos(0);
    }
    
    public Hub<DatabaseType> getOriginalHub() {
        return getHub();
    }
    
    public Hub<ColumnType> getColumnTypes() {
        if (hubColumnTypes == null) {
            hubColumnTypes = getHub().getDetailHub(DatabaseType.P_ColumnTypes);
        }
        return hubColumnTypes;
    }
    public DatabaseType getDatabaseType() {
        return getHub().getAO();
    }
    
    public Hub<DatabaseType> getHub() {
        if (hub == null) {
            hub = new Hub<DatabaseType>(DatabaseType.class);
        }
        return hub;
    }
    
    public Hub<DatabaseType> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<DatabaseType>(DatabaseType.class);
        }
        return hubMultiSelect;
    }
    
    public ColumnTypeModel getColumnTypesModel() {
        if (modelColumnTypes != null) return modelColumnTypes;
        modelColumnTypes = new ColumnTypeModel(getColumnTypes());
        modelColumnTypes.setDisplayName("Column Type");
        modelColumnTypes.setPluralDisplayName("Column Types");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getColumnTypes())) {
            modelColumnTypes.setCreateUI(false);
        }
        modelColumnTypes.setForJfc(getForJfc());
        modelColumnTypes.setAllowNew(false);
        modelColumnTypes.setAllowSave(true);
        modelColumnTypes.setAllowAdd(false);
        modelColumnTypes.setAllowMove(true);
        modelColumnTypes.setAllowRemove(false);
        modelColumnTypes.setAllowDelete(false);
        modelColumnTypes.setAllowSearch(false);
        modelColumnTypes.setAllowHubSearch(false);
        modelColumnTypes.setAllowGotoEdit(true);
        modelColumnTypes.setViewOnly(getViewOnly());
        modelColumnTypes.setAllowNew(false);
        modelColumnTypes.setAllowTableFilter(false);
        modelColumnTypes.setAllowTableSorting(false);
        modelColumnTypes.setAllowMultiSelect(false);
        modelColumnTypes.setAllowCopy(false);
        modelColumnTypes.setAllowCut(false);
        modelColumnTypes.setAllowPaste(false);
        // call DatabaseType.columnTypesModelCallback(ColumnTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(DatabaseType.class, DatabaseType.P_ColumnTypes, modelColumnTypes);
    
        return modelColumnTypes;
    }
    
    public HubCopy<DatabaseType> createHubCopy() {
        Hub<DatabaseType> hubDatabaseTypex = new Hub<>(DatabaseType.class);
        HubCopy<DatabaseType> hc = new HubCopy<>(getHub(), hubDatabaseTypex, true);
        return hc;
    }
    public DatabaseTypeModel createCopy() {
        DatabaseTypeModel mod = new DatabaseTypeModel(createHubCopy().getHub());
        return mod;
    }
}

