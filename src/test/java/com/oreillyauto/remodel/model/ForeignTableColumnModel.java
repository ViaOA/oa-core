// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class ForeignTableColumnModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ForeignTableColumnModel.class.getName());
    
    // Hubs
    protected Hub<ForeignTableColumn> hub;
    // selected foreignTableColumns
    protected Hub<ForeignTableColumn> hubMultiSelect;
    // detail hubs
    protected Hub<ForeignTable> hubForeignTable;
    protected Hub<Column> hubFromColumn;
    protected Hub<JsonColumn> hubFromJsonColumn;
    protected Hub<Column> hubToColumn;
    
    // AddHubs used for references
    protected Hub<Column> hubFromColumnSelectFrom;
    protected Hub<JsonColumn> hubFromJsonColumnSelectFrom;
    protected Hub<Column> hubToColumnSelectFrom;
    
    // ObjectModels
    protected ForeignTableModel modelForeignTable;
    protected ColumnModel modelFromColumn;
    protected JsonColumnModel modelFromJsonColumn;
    protected ColumnModel modelToColumn;
    
    // selectFrom
    protected ColumnModel modelFromColumnSelectFrom;
    protected JsonColumnModel modelFromJsonColumnSelectFrom;
    protected ColumnModel modelToColumnSelectFrom;
    
    // SearchModels used for references
    protected ForeignTableSearchModel modelForeignTableSearch;
    protected ColumnSearchModel modelFromColumnSearch;
    protected JsonColumnSearchModel modelFromJsonColumnSearch;
    protected ColumnSearchModel modelToColumnSearch;
    
    public ForeignTableColumnModel() {
        setDisplayName("Foreign Table Column");
        setPluralDisplayName("Foreign Table Columns");
    }
    
    public ForeignTableColumnModel(Hub<ForeignTableColumn> hubForeignTableColumn) {
        this();
        if (hubForeignTableColumn != null) HubDelegate.setObjectClass(hubForeignTableColumn, ForeignTableColumn.class);
        this.hub = hubForeignTableColumn;
    }
    public ForeignTableColumnModel(ForeignTableColumn foreignTableColumn) {
        this();
        getHub().add(foreignTableColumn);
        getHub().setPos(0);
    }
    
    public Hub<ForeignTableColumn> getOriginalHub() {
        return getHub();
    }
    
    public Hub<ForeignTable> getForeignTableHub() {
        if (hubForeignTable != null) return hubForeignTable;
        // this is the owner, use detailHub
        hubForeignTable = getHub().getDetailHub(ForeignTableColumn.P_ForeignTable);
        return hubForeignTable;
    }
    public Hub<Column> getFromColumnHub() {
        if (hubFromColumn != null) return hubFromColumn;
        hubFromColumn = getHub().getDetailHub(ForeignTableColumn.P_FromColumn);
        return hubFromColumn;
    }
    public Hub<JsonColumn> getFromJsonColumnHub() {
        if (hubFromJsonColumn != null) return hubFromJsonColumn;
        hubFromJsonColumn = getHub().getDetailHub(ForeignTableColumn.P_FromJsonColumn);
        return hubFromJsonColumn;
    }
    public Hub<Column> getToColumnHub() {
        if (hubToColumn != null) return hubToColumn;
        hubToColumn = getHub().getDetailHub(ForeignTableColumn.P_ToColumn);
        return hubToColumn;
    }
    public Hub<Column> getFromColumnSelectFromHub() {
        if (hubFromColumnSelectFrom != null) return hubFromColumnSelectFrom;
        hubFromColumnSelectFrom = new Hub<Column>(Column.class);
        Hub<Column>hubFromColumnSelectFrom1 = new Hub<Column>(Column.class);
        new HubMerger(getHub(), hubFromColumnSelectFrom1, ForeignTableColumnPP.foreignTable().table().columns().pp, false);
        HubCombined<Column> hubCombined = new HubCombined(hubFromColumnSelectFrom, hubFromColumnSelectFrom1, getFromColumnHub());
        hubFromColumnSelectFrom.setLinkHub(getHub(), ForeignTableColumn.P_FromColumn); 
        return hubFromColumnSelectFrom;
    }
    public Hub<JsonColumn> getFromJsonColumnSelectFromHub() {
        if (hubFromJsonColumnSelectFrom != null) return hubFromJsonColumnSelectFrom;
        hubFromJsonColumnSelectFrom = new Hub<JsonColumn>(JsonColumn.class);
        Hub<JsonColumn>hubFromJsonColumnSelectFrom1 = new Hub<JsonColumn>(JsonColumn.class);
        new HubMerger(getHub(), hubFromJsonColumnSelectFrom1, ForeignTableColumnPP.fromColumn().jsonObject().jsonColumns().pp, false);
        HubCombined<JsonColumn> hubCombined = new HubCombined(hubFromJsonColumnSelectFrom, hubFromJsonColumnSelectFrom1, getFromJsonColumnHub());
        hubFromJsonColumnSelectFrom.setLinkHub(getHub(), ForeignTableColumn.P_FromJsonColumn); 
        return hubFromJsonColumnSelectFrom;
    }
    public Hub<Column> getToColumnSelectFromHub() {
        if (hubToColumnSelectFrom != null) return hubToColumnSelectFrom;
        hubToColumnSelectFrom = new Hub<Column>(Column.class);
        Hub<Column>hubToColumnSelectFrom1 = new Hub<Column>(Column.class);
        new HubMerger(getHub(), hubToColumnSelectFrom1, ForeignTableColumnPP.foreignTable().toTable().columns().pp, false);
        HubCombined<Column> hubCombined = new HubCombined(hubToColumnSelectFrom, hubToColumnSelectFrom1, getToColumnHub());
        hubToColumnSelectFrom.setLinkHub(getHub(), ForeignTableColumn.P_ToColumn); 
        return hubToColumnSelectFrom;
    }
    public ForeignTableColumn getForeignTableColumn() {
        return getHub().getAO();
    }
    
    public Hub<ForeignTableColumn> getHub() {
        if (hub == null) {
            hub = new Hub<ForeignTableColumn>(ForeignTableColumn.class);
        }
        return hub;
    }
    
    public Hub<ForeignTableColumn> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ForeignTableColumn>(ForeignTableColumn.class);
        }
        return hubMultiSelect;
    }
    
    public ForeignTableModel getForeignTableModel() {
        if (modelForeignTable != null) return modelForeignTable;
        modelForeignTable = new ForeignTableModel(getForeignTableHub());
        modelForeignTable.setDisplayName("Foreign Table");
        modelForeignTable.setPluralDisplayName("Foreign Tables");
        modelForeignTable.setForJfc(getForJfc());
        modelForeignTable.setAllowNew(false);
        modelForeignTable.setAllowSave(true);
        modelForeignTable.setAllowAdd(false);
        modelForeignTable.setAllowRemove(false);
        modelForeignTable.setAllowClear(false);
        modelForeignTable.setAllowDelete(false);
        modelForeignTable.setAllowSearch(true);
        modelForeignTable.setAllowHubSearch(true);
        modelForeignTable.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelForeignTable.setCreateUI(li == null || !ForeignTableColumn.P_ForeignTable.equals(li.getName()) );
        modelForeignTable.setViewOnly(getViewOnly());
        // call ForeignTableColumn.foreignTableModelCallback(ForeignTableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ForeignTableColumn.class, ForeignTableColumn.P_ForeignTable, modelForeignTable);
    
        return modelForeignTable;
    }
    public ColumnModel getFromColumnModel() {
        if (modelFromColumn != null) return modelFromColumn;
        modelFromColumn = new ColumnModel(getFromColumnHub());
        modelFromColumn.setDisplayName("From Column");
        modelFromColumn.setPluralDisplayName("Columns");
        modelFromColumn.setForJfc(getForJfc());
        modelFromColumn.setAllowNew(false);
        modelFromColumn.setAllowSave(true);
        modelFromColumn.setAllowAdd(false);
        modelFromColumn.setAllowRemove(true);
        modelFromColumn.setAllowClear(true);
        modelFromColumn.setAllowDelete(false);
        modelFromColumn.setAllowSearch(true);
        modelFromColumn.setAllowHubSearch(true);
        modelFromColumn.setAllowGotoEdit(true);
        modelFromColumn.setViewOnly(true);
        // call ForeignTableColumn.fromColumnModelCallback(ColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ForeignTableColumn.class, ForeignTableColumn.P_FromColumn, modelFromColumn);
    
        return modelFromColumn;
    }
    public JsonColumnModel getFromJsonColumnModel() {
        if (modelFromJsonColumn != null) return modelFromJsonColumn;
        modelFromJsonColumn = new JsonColumnModel(getFromJsonColumnHub());
        modelFromJsonColumn.setDisplayName("From Json Column");
        modelFromJsonColumn.setPluralDisplayName("Json Columns");
        modelFromJsonColumn.setForJfc(getForJfc());
        modelFromJsonColumn.setAllowNew(false);
        modelFromJsonColumn.setAllowSave(true);
        modelFromJsonColumn.setAllowAdd(false);
        modelFromJsonColumn.setAllowRemove(true);
        modelFromJsonColumn.setAllowClear(true);
        modelFromJsonColumn.setAllowDelete(false);
        modelFromJsonColumn.setAllowSearch(true);
        modelFromJsonColumn.setAllowHubSearch(true);
        modelFromJsonColumn.setAllowGotoEdit(true);
        modelFromJsonColumn.setViewOnly(true);
        // call ForeignTableColumn.fromJsonColumnModelCallback(JsonColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ForeignTableColumn.class, ForeignTableColumn.P_FromJsonColumn, modelFromJsonColumn);
    
        return modelFromJsonColumn;
    }
    public ColumnModel getToColumnModel() {
        if (modelToColumn != null) return modelToColumn;
        modelToColumn = new ColumnModel(getToColumnHub());
        modelToColumn.setDisplayName("Column");
        modelToColumn.setPluralDisplayName("Columns");
        modelToColumn.setForJfc(getForJfc());
        modelToColumn.setAllowNew(false);
        modelToColumn.setAllowSave(true);
        modelToColumn.setAllowAdd(false);
        modelToColumn.setAllowRemove(false);
        modelToColumn.setAllowClear(false);
        modelToColumn.setAllowDelete(false);
        modelToColumn.setAllowSearch(true);
        modelToColumn.setAllowHubSearch(true);
        modelToColumn.setAllowGotoEdit(true);
        modelToColumn.setViewOnly(true);
        // call ForeignTableColumn.toColumnModelCallback(ColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ForeignTableColumn.class, ForeignTableColumn.P_ToColumn, modelToColumn);
    
        return modelToColumn;
    }
    
    public ColumnModel getFromColumnSelectFromModel() {
        if (modelFromColumnSelectFrom != null) return modelFromColumnSelectFrom;
        modelFromColumnSelectFrom = new ColumnModel(getFromColumnSelectFromHub());
        modelFromColumnSelectFrom.setDisplayName("Column");
        modelFromColumnSelectFrom.setPluralDisplayName("Columns");
        modelFromColumnSelectFrom.setForJfc(getForJfc());
        modelFromColumnSelectFrom.setAllowNew(false);
        modelFromColumnSelectFrom.setAllowSave(true);
        modelFromColumnSelectFrom.setAllowAdd(false);
        modelFromColumnSelectFrom.setAllowMove(false);
        modelFromColumnSelectFrom.setAllowRemove(false);
        modelFromColumnSelectFrom.setAllowDelete(false);
        modelFromColumnSelectFrom.setAllowSearch(true);
        modelFromColumnSelectFrom.setAllowHubSearch(true);
        modelFromColumnSelectFrom.setAllowGotoEdit(true);
        modelFromColumnSelectFrom.setViewOnly(getViewOnly());
        modelFromColumnSelectFrom.setAllowNew(false);
        modelFromColumnSelectFrom.setAllowTableFilter(true);
        modelFromColumnSelectFrom.setAllowTableSorting(true);
        modelFromColumnSelectFrom.setAllowCut(false);
        modelFromColumnSelectFrom.setAllowCopy(false);
        modelFromColumnSelectFrom.setAllowPaste(false);
        modelFromColumnSelectFrom.setAllowMultiSelect(false);
        return modelFromColumnSelectFrom;
    }
    public JsonColumnModel getFromJsonColumnSelectFromModel() {
        if (modelFromJsonColumnSelectFrom != null) return modelFromJsonColumnSelectFrom;
        modelFromJsonColumnSelectFrom = new JsonColumnModel(getFromJsonColumnSelectFromHub());
        modelFromJsonColumnSelectFrom.setDisplayName("Json Column");
        modelFromJsonColumnSelectFrom.setPluralDisplayName("Json Columns");
        modelFromJsonColumnSelectFrom.setForJfc(getForJfc());
        modelFromJsonColumnSelectFrom.setAllowNew(false);
        modelFromJsonColumnSelectFrom.setAllowSave(true);
        modelFromJsonColumnSelectFrom.setAllowAdd(false);
        modelFromJsonColumnSelectFrom.setAllowMove(false);
        modelFromJsonColumnSelectFrom.setAllowRemove(false);
        modelFromJsonColumnSelectFrom.setAllowDelete(false);
        modelFromJsonColumnSelectFrom.setAllowSearch(true);
        modelFromJsonColumnSelectFrom.setAllowHubSearch(true);
        modelFromJsonColumnSelectFrom.setAllowGotoEdit(true);
        modelFromJsonColumnSelectFrom.setViewOnly(getViewOnly());
        modelFromJsonColumnSelectFrom.setAllowNew(false);
        modelFromJsonColumnSelectFrom.setAllowTableFilter(true);
        modelFromJsonColumnSelectFrom.setAllowTableSorting(true);
        modelFromJsonColumnSelectFrom.setAllowCut(false);
        modelFromJsonColumnSelectFrom.setAllowCopy(false);
        modelFromJsonColumnSelectFrom.setAllowPaste(false);
        modelFromJsonColumnSelectFrom.setAllowMultiSelect(false);
        return modelFromJsonColumnSelectFrom;
    }
    public ColumnModel getToColumnSelectFromModel() {
        if (modelToColumnSelectFrom != null) return modelToColumnSelectFrom;
        modelToColumnSelectFrom = new ColumnModel(getToColumnSelectFromHub());
        modelToColumnSelectFrom.setDisplayName("Column");
        modelToColumnSelectFrom.setPluralDisplayName("Columns");
        modelToColumnSelectFrom.setForJfc(getForJfc());
        modelToColumnSelectFrom.setAllowNew(false);
        modelToColumnSelectFrom.setAllowSave(true);
        modelToColumnSelectFrom.setAllowAdd(false);
        modelToColumnSelectFrom.setAllowMove(false);
        modelToColumnSelectFrom.setAllowRemove(false);
        modelToColumnSelectFrom.setAllowDelete(false);
        modelToColumnSelectFrom.setAllowSearch(true);
        modelToColumnSelectFrom.setAllowHubSearch(true);
        modelToColumnSelectFrom.setAllowGotoEdit(true);
        modelToColumnSelectFrom.setViewOnly(getViewOnly());
        modelToColumnSelectFrom.setAllowNew(false);
        modelToColumnSelectFrom.setAllowTableFilter(true);
        modelToColumnSelectFrom.setAllowTableSorting(true);
        modelToColumnSelectFrom.setAllowCut(false);
        modelToColumnSelectFrom.setAllowCopy(false);
        modelToColumnSelectFrom.setAllowPaste(false);
        modelToColumnSelectFrom.setAllowMultiSelect(false);
        return modelToColumnSelectFrom;
    }
    public ForeignTableSearchModel getForeignTableSearchModel() {
        if (modelForeignTableSearch != null) return modelForeignTableSearch;
        modelForeignTableSearch = new ForeignTableSearchModel();
        HubSelectDelegate.adoptWhereHub(modelForeignTableSearch.getHub(), ForeignTableColumn.P_ForeignTable, getHub());
        return modelForeignTableSearch;
    }
    public ColumnSearchModel getFromColumnSearchModel() {
        if (modelFromColumnSearch != null) return modelFromColumnSearch;
        modelFromColumnSearch = new ColumnSearchModel();
        OAFilter filter = new OAInFilter(ForeignTableColumnModel.this.getHub(), ForeignTableColumnPP.foreignTable().table().columns().pp);
        modelFromColumnSearch.getColumnSearch().setExtraWhereFilter(filter);
        return modelFromColumnSearch;
    }
    public JsonColumnSearchModel getFromJsonColumnSearchModel() {
        if (modelFromJsonColumnSearch != null) return modelFromJsonColumnSearch;
        modelFromJsonColumnSearch = new JsonColumnSearchModel();
        OAFilter filter = new OAInFilter(ForeignTableColumnModel.this.getHub(), ForeignTableColumnPP.fromColumn().jsonObject().jsonColumns().pp);
        modelFromJsonColumnSearch.getJsonColumnSearch().setExtraWhereFilter(filter);
        return modelFromJsonColumnSearch;
    }
    public ColumnSearchModel getToColumnSearchModel() {
        if (modelToColumnSearch != null) return modelToColumnSearch;
        modelToColumnSearch = new ColumnSearchModel();
        OAFilter filter = new OAInFilter(ForeignTableColumnModel.this.getHub(), ForeignTableColumnPP.foreignTable().toTable().columns().pp);
        modelToColumnSearch.getColumnSearch().setExtraWhereFilter(filter);
        return modelToColumnSearch;
    }
    
    public HubCopy<ForeignTableColumn> createHubCopy() {
        Hub<ForeignTableColumn> hubForeignTableColumnx = new Hub<>(ForeignTableColumn.class);
        HubCopy<ForeignTableColumn> hc = new HubCopy<>(getHub(), hubForeignTableColumnx, true);
        return hc;
    }
    public ForeignTableColumnModel createCopy() {
        ForeignTableColumnModel mod = new ForeignTableColumnModel(createHubCopy().getHub());
        return mod;
    }
}

