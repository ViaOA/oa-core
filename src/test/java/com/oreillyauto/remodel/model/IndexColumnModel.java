// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class IndexColumnModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(IndexColumnModel.class.getName());
    
    // Hubs
    protected Hub<IndexColumn> hub;
    // selected indexColumns
    protected Hub<IndexColumn> hubMultiSelect;
    // detail hubs
    protected Hub<Column> hubColumn;
    protected Hub<Index> hubIndex;
    
    // AddHubs used for references
    protected Hub<Column> hubColumnSelectFrom;
    
    // ObjectModels
    protected ColumnModel modelColumn;
    protected IndexModel modelIndex;
    
    // selectFrom
    protected ColumnModel modelColumnSelectFrom;
    
    // SearchModels used for references
    protected ColumnSearchModel modelColumnSearch;
    
    public IndexColumnModel() {
        setDisplayName("Index Column");
        setPluralDisplayName("Index Columns");
    }
    
    public IndexColumnModel(Hub<IndexColumn> hubIndexColumn) {
        this();
        if (hubIndexColumn != null) HubDelegate.setObjectClass(hubIndexColumn, IndexColumn.class);
        this.hub = hubIndexColumn;
    }
    public IndexColumnModel(IndexColumn indexColumn) {
        this();
        getHub().add(indexColumn);
        getHub().setPos(0);
    }
    
    public Hub<IndexColumn> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Column> getColumnHub() {
        if (hubColumn != null) return hubColumn;
        hubColumn = getHub().getDetailHub(IndexColumn.P_Column);
        return hubColumn;
    }
    public Hub<Index> getIndexHub() {
        if (hubIndex != null) return hubIndex;
        // this is the owner, use detailHub
        hubIndex = getHub().getDetailHub(IndexColumn.P_Index);
        return hubIndex;
    }
    public Hub<Column> getColumnSelectFromHub() {
        if (hubColumnSelectFrom != null) return hubColumnSelectFrom;
        hubColumnSelectFrom = new Hub<Column>(Column.class);
        Hub<Column>hubColumnSelectFrom1 = new Hub<Column>(Column.class);
        new HubMerger(getHub(), hubColumnSelectFrom1, IndexColumnPP.index().table().columns().pp, false);
        HubCombined<Column> hubCombined = new HubCombined(hubColumnSelectFrom, hubColumnSelectFrom1, getColumnHub());
        hubColumnSelectFrom.setLinkHub(getHub(), IndexColumn.P_Column); 
        return hubColumnSelectFrom;
    }
    public IndexColumn getIndexColumn() {
        return getHub().getAO();
    }
    
    public Hub<IndexColumn> getHub() {
        if (hub == null) {
            hub = new Hub<IndexColumn>(IndexColumn.class);
        }
        return hub;
    }
    
    public Hub<IndexColumn> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<IndexColumn>(IndexColumn.class);
        }
        return hubMultiSelect;
    }
    
    public ColumnModel getColumnModel() {
        if (modelColumn != null) return modelColumn;
        modelColumn = new ColumnModel(getColumnHub());
        modelColumn.setDisplayName("Column");
        modelColumn.setPluralDisplayName("Columns");
        modelColumn.setForJfc(getForJfc());
        modelColumn.setAllowNew(false);
        modelColumn.setAllowSave(true);
        modelColumn.setAllowAdd(false);
        modelColumn.setAllowRemove(false);
        modelColumn.setAllowClear(false);
        modelColumn.setAllowDelete(false);
        modelColumn.setAllowSearch(true);
        modelColumn.setAllowHubSearch(true);
        modelColumn.setAllowGotoEdit(true);
        modelColumn.setViewOnly(getViewOnly());
        // call IndexColumn.columnModelCallback(ColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(IndexColumn.class, IndexColumn.P_Column, modelColumn);
    
        return modelColumn;
    }
    public IndexModel getIndexModel() {
        if (modelIndex != null) return modelIndex;
        modelIndex = new IndexModel(getIndexHub());
        modelIndex.setDisplayName("Index");
        modelIndex.setPluralDisplayName("Indexes");
        modelIndex.setForJfc(getForJfc());
        modelIndex.setAllowNew(false);
        modelIndex.setAllowSave(true);
        modelIndex.setAllowAdd(false);
        modelIndex.setAllowRemove(false);
        modelIndex.setAllowClear(false);
        modelIndex.setAllowDelete(false);
        modelIndex.setAllowSearch(false);
        modelIndex.setAllowHubSearch(false);
        modelIndex.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelIndex.setCreateUI(li == null || !IndexColumn.P_Index.equals(li.getName()) );
        modelIndex.setViewOnly(getViewOnly());
        // call IndexColumn.indexModelCallback(IndexModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(IndexColumn.class, IndexColumn.P_Index, modelIndex);
    
        return modelIndex;
    }
    
    public ColumnModel getColumnSelectFromModel() {
        if (modelColumnSelectFrom != null) return modelColumnSelectFrom;
        modelColumnSelectFrom = new ColumnModel(getColumnSelectFromHub());
        modelColumnSelectFrom.setDisplayName("Column");
        modelColumnSelectFrom.setPluralDisplayName("Columns");
        modelColumnSelectFrom.setForJfc(getForJfc());
        modelColumnSelectFrom.setAllowNew(false);
        modelColumnSelectFrom.setAllowSave(true);
        modelColumnSelectFrom.setAllowAdd(false);
        modelColumnSelectFrom.setAllowMove(false);
        modelColumnSelectFrom.setAllowRemove(false);
        modelColumnSelectFrom.setAllowDelete(false);
        modelColumnSelectFrom.setAllowSearch(true);
        modelColumnSelectFrom.setAllowHubSearch(true);
        modelColumnSelectFrom.setAllowGotoEdit(true);
        modelColumnSelectFrom.setViewOnly(getViewOnly());
        modelColumnSelectFrom.setAllowNew(false);
        modelColumnSelectFrom.setAllowTableFilter(true);
        modelColumnSelectFrom.setAllowTableSorting(true);
        modelColumnSelectFrom.setAllowCut(false);
        modelColumnSelectFrom.setAllowCopy(false);
        modelColumnSelectFrom.setAllowPaste(false);
        modelColumnSelectFrom.setAllowMultiSelect(false);
        return modelColumnSelectFrom;
    }
    public ColumnSearchModel getColumnSearchModel() {
        if (modelColumnSearch != null) return modelColumnSearch;
        modelColumnSearch = new ColumnSearchModel();
        OAFilter filter = new OAInFilter(IndexColumnModel.this.getHub(), IndexColumnPP.index().table().columns().pp);
        modelColumnSearch.getColumnSearch().setExtraWhereFilter(filter);
        return modelColumnSearch;
    }
    
    public HubCopy<IndexColumn> createHubCopy() {
        Hub<IndexColumn> hubIndexColumnx = new Hub<>(IndexColumn.class);
        HubCopy<IndexColumn> hc = new HubCopy<>(getHub(), hubIndexColumnx, true);
        return hc;
    }
    public IndexColumnModel createCopy() {
        IndexColumnModel mod = new IndexColumnModel(createHubCopy().getHub());
        return mod;
    }
}

