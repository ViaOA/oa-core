// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class IndexModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(IndexModel.class.getName());
    
    // Hubs
    protected Hub<Index> hub;
    // selected indexes
    protected Hub<Index> hubMultiSelect;
    // detail hubs
    protected Hub<Table> hubTable;
    protected Hub<IndexColumn> hubIndexColumns;
    
    // pickFrom
    protected Hub<Column> hubIndexColumnsPickFromColumn;
    
    // ObjectModels
    protected TableModel modelTable;
    protected IndexColumnModel modelIndexColumns;
    
    // pickFrom
    protected ColumnModel modelIndexColumnsPickFromColumn;
    protected ColumnSearchModel modelIndexColumnsPickFromColumnSearch;
    
    // SearchModels used for references
    protected TableSearchModel modelTableSearch;
    protected IndexColumnSearchModel modelIndexColumnsSearch;
    
    public IndexModel() {
        setDisplayName("Index");
        setPluralDisplayName("Indexes");
    }
    
    public IndexModel(Hub<Index> hubIndex) {
        this();
        if (hubIndex != null) HubDelegate.setObjectClass(hubIndex, Index.class);
        this.hub = hubIndex;
    }
    public IndexModel(Index index) {
        this();
        getHub().add(index);
        getHub().setPos(0);
    }
    
    public Hub<Index> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Table> getTableHub() {
        if (hubTable != null) return hubTable;
        // this is the owner, use detailHub
        hubTable = getHub().getDetailHub(Index.P_Table);
        return hubTable;
    }
    public Hub<IndexColumn> getIndexColumns() {
        if (hubIndexColumns == null) {
            hubIndexColumns = getHub().getDetailHub(Index.P_IndexColumns);
        }
        return hubIndexColumns;
    }
    public Hub<Column> getIndexColumnsPickFromColumnHub() {
        if (hubIndexColumnsPickFromColumn != null) return hubIndexColumnsPickFromColumn;
        hubIndexColumnsPickFromColumn = new Hub<Column>(Column.class);
        new HubMerger(getHub(), hubIndexColumnsPickFromColumn, IndexPP.table().columns().pp, false);
        return hubIndexColumnsPickFromColumn;
    }
    public Index getIndex() {
        return getHub().getAO();
    }
    
    public Hub<Index> getHub() {
        if (hub == null) {
            hub = new Hub<Index>(Index.class);
        }
        return hub;
    }
    
    public Hub<Index> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Index>(Index.class);
        }
        return hubMultiSelect;
    }
    
    public TableModel getTableModel() {
        if (modelTable != null) return modelTable;
        modelTable = new TableModel(getTableHub());
        modelTable.setDisplayName("Table");
        modelTable.setPluralDisplayName("Tables");
        modelTable.setForJfc(getForJfc());
        modelTable.setAllowNew(false);
        modelTable.setAllowSave(true);
        modelTable.setAllowAdd(false);
        modelTable.setAllowRemove(false);
        modelTable.setAllowClear(false);
        modelTable.setAllowDelete(false);
        modelTable.setAllowSearch(true);
        modelTable.setAllowHubSearch(true);
        modelTable.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelTable.setCreateUI(li == null || !Index.P_Table.equals(li.getName()) );
        modelTable.setViewOnly(getViewOnly());
        // call Index.tableModelCallback(TableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Index.class, Index.P_Table, modelTable);
    
        return modelTable;
    }
    public IndexColumnModel getIndexColumnsModel() {
        if (modelIndexColumns != null) return modelIndexColumns;
        modelIndexColumns = new IndexColumnModel(getIndexColumns());
        modelIndexColumns.setDisplayName("Index Column");
        modelIndexColumns.setPluralDisplayName("Index Columns");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getIndexColumns())) {
            modelIndexColumns.setCreateUI(false);
        }
        modelIndexColumns.setForJfc(getForJfc());
        modelIndexColumns.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Column
        modelIndexColumns.setAllowSave(true);
        modelIndexColumns.setAllowAdd(true); // Add is overwritten to create new IndexColumn by first selecting Column
        modelIndexColumns.setAllowMove(true);
        modelIndexColumns.setAllowRemove(false);
        modelIndexColumns.setAllowDelete(true);
        modelIndexColumns.setAllowSearch(false);
        modelIndexColumns.setAllowHubSearch(true);
        modelIndexColumns.setAllowGotoEdit(true);
        modelIndexColumns.setViewOnly(getViewOnly());
        modelIndexColumns.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Column
        modelIndexColumns.setAllowTableFilter(false);
        modelIndexColumns.setAllowTableSorting(false);
        modelIndexColumns.setAllowMultiSelect(false);
        modelIndexColumns.setAllowCopy(false);
        modelIndexColumns.setAllowCut(false);
        modelIndexColumns.setAllowPaste(false);
        // call Index.indexColumnsModelCallback(IndexColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Index.class, Index.P_IndexColumns, modelIndexColumns);
    
        return modelIndexColumns;
    }
    
    public ColumnModel getIndexColumnsPickFromColumnModel() {
        if (modelIndexColumnsPickFromColumn != null) return modelIndexColumnsPickFromColumn;
        modelIndexColumnsPickFromColumn = new ColumnModel(getIndexColumnsPickFromColumnHub());
        modelIndexColumnsPickFromColumn.setDisplayName("Index Column");
        modelIndexColumnsPickFromColumn.setPluralDisplayName("Index Columns");
        modelIndexColumnsPickFromColumn.setForJfc(getForJfc());
        modelIndexColumnsPickFromColumn.setAllowNew(false);
        modelIndexColumnsPickFromColumn.setAllowSave(true);
        modelIndexColumnsPickFromColumn.setAllowAdd(false);
        modelIndexColumnsPickFromColumn.setAllowMove(false);
        modelIndexColumnsPickFromColumn.setAllowRemove(false);
        modelIndexColumnsPickFromColumn.setAllowDelete(false);
        modelIndexColumnsPickFromColumn.setAllowSearch(true);
        modelIndexColumnsPickFromColumn.setAllowHubSearch(true);
        modelIndexColumnsPickFromColumn.setAllowGotoEdit(true);
        modelIndexColumnsPickFromColumn.setViewOnly(getViewOnly());
        modelIndexColumnsPickFromColumn.setAllowNew(false);
        modelIndexColumnsPickFromColumn.setAllowTableFilter(true);
        modelIndexColumnsPickFromColumn.setAllowTableSorting(true);
        modelIndexColumnsPickFromColumn.setAllowCut(false);
        modelIndexColumnsPickFromColumn.setAllowCopy(false);
        modelIndexColumnsPickFromColumn.setAllowPaste(false);
        modelIndexColumnsPickFromColumn.setAllowMultiSelect(true);
        new HubMerger<IndexColumn, Column>(getIndexColumns(), modelIndexColumnsPickFromColumn.getMultiSelectHub(), IndexColumn.P_Column);
        return modelIndexColumnsPickFromColumn;
    }
    public ColumnSearchModel getIndexColumnsPickFromColumnSearchModel() {
        if (modelIndexColumnsPickFromColumnSearch != null) return modelIndexColumnsPickFromColumnSearch;
        modelIndexColumnsPickFromColumnSearch = new ColumnSearchModel();
        OAFilter filter = new OAInFilter(getIndexColumns(), IndexColumnPP.index().table().columns().pp);
        modelIndexColumnsPickFromColumnSearch.getColumnSearch().setExtraWhereFilter(filter);
        return modelIndexColumnsPickFromColumnSearch;
    }
    public TableSearchModel getTableSearchModel() {
        if (modelTableSearch != null) return modelTableSearch;
        modelTableSearch = new TableSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTableSearch.getHub(), Index.P_Table, getHub());
        return modelTableSearch;
    }
    public IndexColumnSearchModel getIndexColumnsSearchModel() {
        if (modelIndexColumnsSearch != null) return modelIndexColumnsSearch;
        modelIndexColumnsSearch = new IndexColumnSearchModel();
        return modelIndexColumnsSearch;
    }
    
    public HubCopy<Index> createHubCopy() {
        Hub<Index> hubIndexx = new Hub<>(Index.class);
        HubCopy<Index> hc = new HubCopy<>(getHub(), hubIndexx, true);
        return hc;
    }
    public IndexModel createCopy() {
        IndexModel mod = new IndexModel(createHubCopy().getHub());
        return mod;
    }
}

