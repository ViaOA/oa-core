// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class JsonColumnModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(JsonColumnModel.class.getName());
    
    // Hubs
    protected Hub<JsonColumn> hub;
    // selected jsonColumns
    protected Hub<JsonColumn> hubMultiSelect;
    // detail hubs
    protected Hub<DataType> hubCalcDataType;
    protected Hub<DataType> hubDataType;
    protected Hub<JavaType> hubJavaType;
    protected Hub<JsonObject> hubJsonObject;
    protected Hub<ForeignTableColumn> hubFromForeignTableColumns;
    
    // AddHubs used for references
    protected Hub<DataType> hubDataTypeSelectFrom;
    protected Hub<JavaType> hubJavaTypeSelectFrom;
    
    // ObjectModels
    protected DataTypeModel modelCalcDataType;
    protected DataTypeModel modelDataType;
    protected JavaTypeModel modelJavaType;
    protected JsonObjectModel modelJsonObject;
    protected ForeignTableColumnModel modelFromForeignTableColumns;
    
    // selectFrom
    protected DataTypeModel modelDataTypeSelectFrom;
    protected JavaTypeModel modelJavaTypeSelectFrom;
    
    // SearchModels used for references
    protected JavaTypeSearchModel modelJavaTypeSearch;
    
    public JsonColumnModel() {
        setDisplayName("Json Column");
        setPluralDisplayName("Json Columns");
    }
    
    public JsonColumnModel(Hub<JsonColumn> hubJsonColumn) {
        this();
        if (hubJsonColumn != null) HubDelegate.setObjectClass(hubJsonColumn, JsonColumn.class);
        this.hub = hubJsonColumn;
    }
    public JsonColumnModel(JsonColumn jsonColumn) {
        this();
        getHub().add(jsonColumn);
        getHub().setPos(0);
    }
    
    public Hub<JsonColumn> getOriginalHub() {
        return getHub();
    }
    
    public Hub<DataType> getCalcDataTypeHub() {
        if (hubCalcDataType != null) return hubCalcDataType;
        // this is a calculated
        hubCalcDataType = getHub().getDetailHub(JsonColumn.P_CalcDataType);
        return hubCalcDataType;
    }
    public Hub<DataType> getDataTypeHub() {
        if (hubDataType != null) return hubDataType;
        hubDataType = getHub().getDetailHub(JsonColumn.P_DataType);
        return hubDataType;
    }
    public Hub<JavaType> getJavaTypeHub() {
        if (hubJavaType != null) return hubJavaType;
        hubJavaType = getHub().getDetailHub(JsonColumn.P_JavaType);
        return hubJavaType;
    }
    public Hub<JsonObject> getJsonObjectHub() {
        if (hubJsonObject != null) return hubJsonObject;
        // this is the owner, use detailHub
        hubJsonObject = getHub().getDetailHub(JsonColumn.P_JsonObject);
        return hubJsonObject;
    }
    public Hub<ForeignTableColumn> getFromForeignTableColumns() {
        if (hubFromForeignTableColumns == null) {
            hubFromForeignTableColumns = getHub().getDetailHub(JsonColumn.P_FromForeignTableColumns);
        }
        return hubFromForeignTableColumns;
    }
    public Hub<DataType> getDataTypeSelectFromHub() {
        if (hubDataTypeSelectFrom != null) return hubDataTypeSelectFrom;
        hubDataTypeSelectFrom = new Hub<DataType>(DataType.class);
        Hub<DataType> hubDataTypeSelectFrom1 = ModelDelegate.getDataTypes().createSharedHub();
        HubCombined<DataType> hubCombined = new HubCombined(hubDataTypeSelectFrom, hubDataTypeSelectFrom1, getDataTypeHub());
        hubDataTypeSelectFrom.setLinkHub(getHub(), JsonColumn.P_DataType); 
        return hubDataTypeSelectFrom;
    }
    public Hub<JavaType> getJavaTypeSelectFromHub() {
        if (hubJavaTypeSelectFrom != null) return hubJavaTypeSelectFrom;
        hubJavaTypeSelectFrom = new Hub<JavaType>(JavaType.class);
        Hub<JavaType> hubJavaTypeSelectFrom1 = ModelDelegate.getJavaTypes().createSharedHub();
        HubCombined<JavaType> hubCombined = new HubCombined(hubJavaTypeSelectFrom, hubJavaTypeSelectFrom1, getJavaTypeHub());
        hubJavaTypeSelectFrom.setLinkHub(getHub(), JsonColumn.P_JavaType); 
        return hubJavaTypeSelectFrom;
    }
    public JsonColumn getJsonColumn() {
        return getHub().getAO();
    }
    
    public Hub<JsonColumn> getHub() {
        if (hub == null) {
            hub = new Hub<JsonColumn>(JsonColumn.class);
        }
        return hub;
    }
    
    public Hub<JsonColumn> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<JsonColumn>(JsonColumn.class);
        }
        return hubMultiSelect;
    }
    
    public DataTypeModel getCalcDataTypeModel() {
        if (modelCalcDataType != null) return modelCalcDataType;
        modelCalcDataType = new DataTypeModel(getCalcDataTypeHub());
        modelCalcDataType.setDisplayName("Data Type");
        modelCalcDataType.setPluralDisplayName("Data Types");
        modelCalcDataType.setForJfc(getForJfc());
        modelCalcDataType.setAllowNew(false);
        modelCalcDataType.setAllowSave(false);
        modelCalcDataType.setAllowAdd(false);
        modelCalcDataType.setAllowRemove(false);
        modelCalcDataType.setAllowClear(false);
        modelCalcDataType.setAllowDelete(false);
        modelCalcDataType.setAllowSearch(false);
        modelCalcDataType.setAllowHubSearch(false);
        modelCalcDataType.setAllowGotoEdit(false);
        modelCalcDataType.setViewOnly(true);
        // call JsonColumn.calcDataTypeModelCallback(DataTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(JsonColumn.class, JsonColumn.P_CalcDataType, modelCalcDataType);
    
        return modelCalcDataType;
    }
    public DataTypeModel getDataTypeModel() {
        if (modelDataType != null) return modelDataType;
        modelDataType = new DataTypeModel(getDataTypeHub());
        modelDataType.setDisplayName("Data Type");
        modelDataType.setPluralDisplayName("Data Types");
        modelDataType.setForJfc(getForJfc());
        modelDataType.setAllowNew(false);
        modelDataType.setAllowSave(true);
        modelDataType.setAllowAdd(false);
        modelDataType.setAllowRemove(false);
        modelDataType.setAllowClear(false);
        modelDataType.setAllowDelete(false);
        modelDataType.setAllowSearch(false);
        modelDataType.setAllowHubSearch(false);
        modelDataType.setAllowGotoEdit(false);
        modelDataType.setViewOnly(true);
        // call JsonColumn.dataTypeModelCallback(DataTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(JsonColumn.class, JsonColumn.P_DataType, modelDataType);
    
        return modelDataType;
    }
    public JavaTypeModel getJavaTypeModel() {
        if (modelJavaType != null) return modelJavaType;
        modelJavaType = new JavaTypeModel(getJavaTypeHub());
        modelJavaType.setDisplayName("Java Type");
        modelJavaType.setPluralDisplayName("Java Types");
        modelJavaType.setForJfc(getForJfc());
        modelJavaType.setAllowNew(false);
        modelJavaType.setAllowSave(true);
        modelJavaType.setAllowAdd(false);
        modelJavaType.setAllowRemove(false);
        modelJavaType.setAllowClear(false);
        modelJavaType.setAllowDelete(false);
        modelJavaType.setAllowSearch(true);
        modelJavaType.setAllowHubSearch(true);
        modelJavaType.setAllowGotoEdit(false);
        modelJavaType.setViewOnly(true);
        // call JsonColumn.javaTypeModelCallback(JavaTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(JsonColumn.class, JsonColumn.P_JavaType, modelJavaType);
    
        return modelJavaType;
    }
    public JsonObjectModel getJsonObjectModel() {
        if (modelJsonObject != null) return modelJsonObject;
        modelJsonObject = new JsonObjectModel(getJsonObjectHub());
        modelJsonObject.setDisplayName("Json Object");
        modelJsonObject.setPluralDisplayName("Json Objects");
        modelJsonObject.setForJfc(getForJfc());
        modelJsonObject.setAllowNew(false);
        modelJsonObject.setAllowSave(true);
        modelJsonObject.setAllowAdd(false);
        modelJsonObject.setAllowRemove(false);
        modelJsonObject.setAllowClear(false);
        modelJsonObject.setAllowDelete(false);
        modelJsonObject.setAllowSearch(false);
        modelJsonObject.setAllowHubSearch(false);
        modelJsonObject.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelJsonObject.setCreateUI(li == null || !JsonColumn.P_JsonObject.equals(li.getName()) );
        modelJsonObject.setViewOnly(getViewOnly());
        // call JsonColumn.jsonObjectModelCallback(JsonObjectModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(JsonColumn.class, JsonColumn.P_JsonObject, modelJsonObject);
    
        return modelJsonObject;
    }
    public ForeignTableColumnModel getFromForeignTableColumnsModel() {
        if (modelFromForeignTableColumns != null) return modelFromForeignTableColumns;
        modelFromForeignTableColumns = new ForeignTableColumnModel(getFromForeignTableColumns());
        modelFromForeignTableColumns.setDisplayName("Foreign Table Column");
        modelFromForeignTableColumns.setPluralDisplayName("Foreign Table Columns");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getFromForeignTableColumns())) {
            modelFromForeignTableColumns.setCreateUI(false);
        }
        modelFromForeignTableColumns.setForJfc(getForJfc());
        modelFromForeignTableColumns.setAllowNew(false);
        modelFromForeignTableColumns.setAllowSave(true);
        modelFromForeignTableColumns.setAllowAdd(false);
        modelFromForeignTableColumns.setAllowMove(false);
        modelFromForeignTableColumns.setAllowRemove(false);
        modelFromForeignTableColumns.setAllowDelete(true);
        modelFromForeignTableColumns.setAllowSearch(false);
        modelFromForeignTableColumns.setAllowHubSearch(false);
        modelFromForeignTableColumns.setAllowGotoEdit(true);
        modelFromForeignTableColumns.setViewOnly(getViewOnly());
        modelFromForeignTableColumns.setAllowNew(false);
        modelFromForeignTableColumns.setAllowTableFilter(true);
        modelFromForeignTableColumns.setAllowTableSorting(true);
        modelFromForeignTableColumns.setAllowMultiSelect(false);
        modelFromForeignTableColumns.setAllowCopy(false);
        modelFromForeignTableColumns.setAllowCut(false);
        modelFromForeignTableColumns.setAllowPaste(false);
        // call JsonColumn.fromForeignTableColumnsModelCallback(ForeignTableColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(JsonColumn.class, JsonColumn.P_FromForeignTableColumns, modelFromForeignTableColumns);
    
        return modelFromForeignTableColumns;
    }
    
    public DataTypeModel getDataTypeSelectFromModel() {
        if (modelDataTypeSelectFrom != null) return modelDataTypeSelectFrom;
        modelDataTypeSelectFrom = new DataTypeModel(getDataTypeSelectFromHub());
        modelDataTypeSelectFrom.setDisplayName("Data Type");
        modelDataTypeSelectFrom.setPluralDisplayName("Data Types");
        modelDataTypeSelectFrom.setForJfc(getForJfc());
        modelDataTypeSelectFrom.setAllowNew(false);
        modelDataTypeSelectFrom.setAllowSave(true);
        modelDataTypeSelectFrom.setAllowAdd(false);
        modelDataTypeSelectFrom.setAllowMove(false);
        modelDataTypeSelectFrom.setAllowRemove(false);
        modelDataTypeSelectFrom.setAllowDelete(false);
        modelDataTypeSelectFrom.setAllowSearch(false);
        modelDataTypeSelectFrom.setAllowHubSearch(true);
        modelDataTypeSelectFrom.setAllowGotoEdit(true);
        modelDataTypeSelectFrom.setViewOnly(getViewOnly());
        modelDataTypeSelectFrom.setAllowNew(false);
        modelDataTypeSelectFrom.setAllowTableFilter(true);
        modelDataTypeSelectFrom.setAllowTableSorting(true);
        modelDataTypeSelectFrom.setAllowCut(false);
        modelDataTypeSelectFrom.setAllowCopy(false);
        modelDataTypeSelectFrom.setAllowPaste(false);
        modelDataTypeSelectFrom.setAllowMultiSelect(false);
        return modelDataTypeSelectFrom;
    }
    public JavaTypeModel getJavaTypeSelectFromModel() {
        if (modelJavaTypeSelectFrom != null) return modelJavaTypeSelectFrom;
        modelJavaTypeSelectFrom = new JavaTypeModel(getJavaTypeSelectFromHub());
        modelJavaTypeSelectFrom.setDisplayName("Java Type");
        modelJavaTypeSelectFrom.setPluralDisplayName("Java Types");
        modelJavaTypeSelectFrom.setForJfc(getForJfc());
        modelJavaTypeSelectFrom.setAllowNew(false);
        modelJavaTypeSelectFrom.setAllowSave(true);
        modelJavaTypeSelectFrom.setAllowAdd(false);
        modelJavaTypeSelectFrom.setAllowMove(false);
        modelJavaTypeSelectFrom.setAllowRemove(false);
        modelJavaTypeSelectFrom.setAllowDelete(false);
        modelJavaTypeSelectFrom.setAllowSearch(true);
        modelJavaTypeSelectFrom.setAllowHubSearch(true);
        modelJavaTypeSelectFrom.setAllowGotoEdit(true);
        modelJavaTypeSelectFrom.setViewOnly(getViewOnly());
        modelJavaTypeSelectFrom.setAllowNew(false);
        modelJavaTypeSelectFrom.setAllowTableFilter(true);
        modelJavaTypeSelectFrom.setAllowTableSorting(true);
        modelJavaTypeSelectFrom.setAllowCut(false);
        modelJavaTypeSelectFrom.setAllowCopy(false);
        modelJavaTypeSelectFrom.setAllowPaste(false);
        modelJavaTypeSelectFrom.setAllowMultiSelect(false);
        return modelJavaTypeSelectFrom;
    }
    public JavaTypeSearchModel getJavaTypeSearchModel() {
        if (modelJavaTypeSearch != null) return modelJavaTypeSearch;
        modelJavaTypeSearch = new JavaTypeSearchModel();
        HubSelectDelegate.adoptWhereHub(modelJavaTypeSearch.getHub(), JsonColumn.P_JavaType, getHub());
        return modelJavaTypeSearch;
    }
    
    public HubCopy<JsonColumn> createHubCopy() {
        Hub<JsonColumn> hubJsonColumnx = new Hub<>(JsonColumn.class);
        HubCopy<JsonColumn> hc = new HubCopy<>(getHub(), hubJsonColumnx, true);
        return hc;
    }
    public JsonColumnModel createCopy() {
        JsonColumnModel mod = new JsonColumnModel(createHubCopy().getHub());
        return mod;
    }
}

