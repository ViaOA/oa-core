// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;
import com.viaoa.model.oa.VInteger;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class JsonObjectModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(JsonObjectModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      rootHub       - for recursive, root
      recursiveHub  - will be shared with root or child hub
      flattenedHub  - will merge all recursive child hubs into one
      treeTableHub  - will have root objects and all expanded child hub objects
    */
    
    // types of ways to view the original hub
    public static final int TYPE_Original = 0;
    public static final int TYPE_TreeTable = 1;
    public static final int TYPE_Root = 2;
    public static final int TYPE_Flattened = 3;
    public static final int TYPE_Recursive = 4;
    
    // Hubs
    protected Hub<JsonObject> hubOriginal;
    // hubs needed since JsonObject is recursive
    protected Hub<JsonObject> hubRecursive; // used by tree, points to root or child hub
    protected Hub<JsonObject> hubTreeTable; // hub of root and the expanded node objects
    protected Hub<JsonObject> hubFlattenedTreeTable; // works with tree
    protected Hub<JsonObject> hubRoot;      // recursive root
    protected Hub<JsonObject> hubFlattened; // recursive flattened
    
    // main hub that points to hubOriginal, hubRoot, hubRecursive, hubFlattened, hubTreeTable
    protected Hub<JsonObject> hub;
    // selected jsonObjects
    protected Hub<JsonObject> hubMultiSelect;
    // detail hubs
    protected Hub<Column> hubColumn;
    protected Hub<JsonObject> hubParentJsonObject;
    protected Hub<JsonColumn> hubJsonColumns;
    protected Hub<JsonObject> hubJsonObjects;
    
    // ObjectModels
    protected ColumnModel modelColumn;
    protected JsonObjectModel modelParentJsonObject;
    protected JsonColumnModel modelJsonColumns;
    protected JsonObjectModel modelJsonObjects;
    
    // SearchModels used for references
    protected ColumnSearchModel modelColumnSearch;
    protected JsonColumnSearchModel modelJsonColumnsSearch;
    
    public JsonObjectModel() {
        setDisplayName("Json Object");
        setPluralDisplayName("Json Objects");
        setAllowRecursive(true);
    }
    
    public JsonObjectModel(Hub<JsonObject> hubJsonObject) {
        this();
        if (hubJsonObject != null) HubDelegate.setObjectClass(hubJsonObject, JsonObject.class);
        this.hubOriginal = hubJsonObject;
        setType(TYPE_Original);
    }
    public JsonObjectModel(JsonObject jsonObject) {
        this();
        getOriginalHub().add(jsonObject);
        getOriginalHub().setPos(0);
        setType(TYPE_Original);
    }
    
    public JsonObjectModel(Hub<JsonObject> hubRootJsonObject, Hub<JsonObject> hubJsonObject) {
        this();
        hubOriginal = hubRootJsonObject;
        hubRecursive = hubJsonObject;
        setType(TYPE_Recursive);
    }
    
    // the type of hub that is active
    public void setType(int type) {
        updateType(type);
        getVType().setValue(type);
    }
    public int getType() {
        return getVType().getValue();
    }
    // listen to type change
    public void addTypeListener(HubListener hl) {
        if (hl != null) getTypeHub().addHubListener(hl);
    }
    // used to listen to type change
    private Hub<VInteger> hubType;
    private VInteger type;
    private VInteger getVType() {
        if (type == null) {
            type = new VInteger();
        }
        return type;
    }
    private Hub<VInteger> getTypeHub() {
        if (hubType == null) {
            hubType = new Hub<VInteger>(VInteger.class);
            hubType.add(getVType());
            hubType.setPos(0);
        }
        return hubType;
    }
    private void updateType(int newValue) {
        if (!getAllowRecursive()) newValue = TYPE_Original;
        switch (newValue) {
        case TYPE_Original:
            getHub().setSharedHub(getOriginalHub(), true);
            break;
        case TYPE_TreeTable:
            getHub().setSharedHub(getFlattenedTreeTableHub(), true);
            break;
        case TYPE_Root:
            getHub().setSharedHub(getRootHub(), true);
            break;
        case TYPE_Flattened:
            getHub().setSharedHub(getFlattenedHub(), true);
            break;
        case TYPE_Recursive:
            getHub().setSharedHub(getRecursiveHub(), true);
            break;
        }
    }
    
    public Hub<JsonObject> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<JsonObject>(JsonObject.class);
        }
        return hubOriginal;
    }
    
    // the root hub of a recursive hub
    public Hub<JsonObject> getRootHub() {
        if (hubRoot == null) {
            hubRoot = new Hub<JsonObject>(JsonObject.class);
            new HubRoot(getOriginalHub(), hubRoot);
        }
        return hubRoot;
    }
    
    // This will point/share to the root or child hub that is active.
    public Hub<JsonObject> getRecursiveHub() {
        if (hubRecursive == null) {
            hubRecursive = new Hub<JsonObject>(JsonObject.class);
            hubRecursive.setSharedHub(getOriginalHub());
        }
        return hubRecursive;
    }
    
    // flattened hub for a recursive hub
    public Hub<JsonObject> getFlattenedHub() {
        if (hubFlattened == null) {
            hubFlattened = new Hub<JsonObject>(JsonObject.class);
            HubFlattened hf = new HubFlattened(getOriginalHub(), hubFlattened);
        }
        return hubFlattened;
    }
    
    // hub of expanded nodes in treeTable
    public Hub<JsonObject> getTreeTableHub() {
        if (hubTreeTable == null) {
            hubTreeTable = new Hub<JsonObject>(JsonObject.class);
        }
        return hubTreeTable;
    }
    public Hub<JsonObject> getFlattenedTreeTableHub() {
        if (hubFlattenedTreeTable == null) {
            hubFlattenedTreeTable = new Hub<JsonObject>(JsonObject.class);
            new HubFlattened(getOriginalHub(), hubFlattenedTreeTable);
        }
        return hubFlattenedTreeTable;
    }
    
    public Hub<Column> getColumnHub() {
        if (hubColumn != null) return hubColumn;
        hubColumn = getHub().getDetailHub(JsonObject.P_Column);
        return hubColumn;
    }
    public Hub<JsonObject> getParentJsonObjectHub() {
        if (hubParentJsonObject != null) return hubParentJsonObject;
        // this is the owner, use detailHub
        hubParentJsonObject = getHub().getDetailHub(JsonObject.P_ParentJsonObject);
        return hubParentJsonObject;
    }
    public Hub<JsonColumn> getJsonColumns() {
        if (hubJsonColumns == null) {
            hubJsonColumns = getHub().getDetailHub(JsonObject.P_JsonColumns);
        }
        return hubJsonColumns;
    }
    public Hub<JsonObject> getJsonObjects() {
        if (hubJsonObjects == null) {
            hubJsonObjects = getHub().getDetailHub(JsonObject.P_JsonObjects);
        }
        return hubJsonObjects;
    }
    public JsonObject getJsonObject() {
        return getHub().getAO();
    }
    
    // points to one: hubOriginal, hubFlattened, hubRecursive, hubTreeTable
    public Hub<JsonObject> getHub() {
        if (hub == null) {
            hub = new Hub<JsonObject>(JsonObject.class);
            hub.setSharedHub(getOriginalHub(), true);
        }
        return hub;
    }
    
    public Hub<JsonObject> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<JsonObject>(JsonObject.class);
        }
        return hubMultiSelect;
    }
    
    public ColumnModel getColumnModel() {
        if (modelColumn != null) return modelColumn;
        modelColumn = new ColumnModel(getColumnHub());
        modelColumn.setDisplayName("Column");
        modelColumn.setPluralDisplayName("Columns");
        modelColumn.setForJfc(getForJfc());
        modelColumn.setAllowNew(false);
        modelColumn.setAllowSave(true);
        modelColumn.setAllowAdd(false);
        modelColumn.setAllowRemove(false);
        modelColumn.setAllowClear(false);
        modelColumn.setAllowDelete(false);
        modelColumn.setAllowSearch(true);
        modelColumn.setAllowHubSearch(true);
        modelColumn.setAllowGotoEdit(true);
        modelColumn.setViewOnly(true);
        // call JsonObject.columnModelCallback(ColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(JsonObject.class, JsonObject.P_Column, modelColumn);
    
        return modelColumn;
    }
    public JsonObjectModel getParentJsonObjectModel() {
        if (modelParentJsonObject != null) return modelParentJsonObject;
        modelParentJsonObject = new JsonObjectModel(getParentJsonObjectHub());
        modelParentJsonObject.setDisplayName("Parent Json Object");
        modelParentJsonObject.setPluralDisplayName("Json Objects");
        modelParentJsonObject.setForJfc(getForJfc());
        modelParentJsonObject.setAllowNew(false);
        modelParentJsonObject.setAllowSave(true);
        modelParentJsonObject.setAllowAdd(false);
        modelParentJsonObject.setAllowRemove(false);
        modelParentJsonObject.setAllowClear(false);
        modelParentJsonObject.setAllowDelete(false);
        modelParentJsonObject.setAllowSearch(false);
        modelParentJsonObject.setAllowHubSearch(false);
        modelParentJsonObject.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelParentJsonObject.setCreateUI(li == null || !JsonObject.P_ParentJsonObject.equals(li.getName()) );
        modelParentJsonObject.setViewOnly(getViewOnly());
        // call JsonObject.parentJsonObjectModelCallback(JsonObjectModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(JsonObject.class, JsonObject.P_ParentJsonObject, modelParentJsonObject);
    
        return modelParentJsonObject;
    }
    public JsonColumnModel getJsonColumnsModel() {
        if (modelJsonColumns != null) return modelJsonColumns;
        modelJsonColumns = new JsonColumnModel(getJsonColumns());
        modelJsonColumns.setDisplayName("Json Column");
        modelJsonColumns.setPluralDisplayName("Json Columns");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getJsonColumns())) {
            modelJsonColumns.setCreateUI(false);
        }
        modelJsonColumns.setForJfc(getForJfc());
        modelJsonColumns.setAllowNew(true);
        modelJsonColumns.setAllowSave(true);
        modelJsonColumns.setAllowAdd(false);
        modelJsonColumns.setAllowMove(true);
        modelJsonColumns.setAllowRemove(false);
        modelJsonColumns.setAllowDelete(true);
        modelJsonColumns.setAllowSearch(false);
        modelJsonColumns.setAllowHubSearch(true);
        modelJsonColumns.setAllowGotoEdit(true);
        modelJsonColumns.setViewOnly(getViewOnly());
        modelJsonColumns.setAllowNew(true);
        modelJsonColumns.setAllowTableFilter(false);
        modelJsonColumns.setAllowTableSorting(false);
        modelJsonColumns.setAllowMultiSelect(false);
        modelJsonColumns.setAllowCopy(false);
        modelJsonColumns.setAllowCut(false);
        modelJsonColumns.setAllowPaste(false);
        // call JsonObject.jsonColumnsModelCallback(JsonColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(JsonObject.class, JsonObject.P_JsonColumns, modelJsonColumns);
    
        return modelJsonColumns;
    }
    public JsonObjectModel getJsonObjectsModel() {
        if (modelJsonObjects != null) return modelJsonObjects;
        modelJsonObjects = new JsonObjectModel(getJsonObjects());
        modelJsonObjects.setDisplayName("Json Object");
        modelJsonObjects.setPluralDisplayName("Json Objects");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getJsonObjects())) {
            modelJsonObjects.setCreateUI(false);
        }
        modelJsonObjects.setForJfc(getForJfc());
        modelJsonObjects.setAllowNew(true);
        modelJsonObjects.setAllowSave(true);
        modelJsonObjects.setAllowAdd(false);
        modelJsonObjects.setAllowMove(false);
        modelJsonObjects.setAllowRemove(false);
        modelJsonObjects.setAllowDelete(true);
        modelJsonObjects.setAllowSearch(false);
        modelJsonObjects.setAllowHubSearch(false);
        modelJsonObjects.setAllowGotoEdit(true);
        modelJsonObjects.setViewOnly(getViewOnly());
        modelJsonObjects.setAllowNew(true);
        modelJsonObjects.setAllowTableFilter(true);
        modelJsonObjects.setAllowTableSorting(true);
        modelJsonObjects.setAllowRecursive(true);
        modelJsonObjects.setAllowMultiSelect(false);
        modelJsonObjects.setAllowCopy(false);
        modelJsonObjects.setAllowCut(false);
        modelJsonObjects.setAllowPaste(false);
        // call JsonObject.jsonObjectsModelCallback(JsonObjectModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(JsonObject.class, JsonObject.P_JsonObjects, modelJsonObjects);
    
        return modelJsonObjects;
    }
    
    public ColumnSearchModel getColumnSearchModel() {
        if (modelColumnSearch != null) return modelColumnSearch;
        modelColumnSearch = new ColumnSearchModel();
        HubSelectDelegate.adoptWhereHub(modelColumnSearch.getHub(), JsonObject.P_Column, getHub());
        return modelColumnSearch;
    }
    public JsonColumnSearchModel getJsonColumnsSearchModel() {
        if (modelJsonColumnsSearch != null) return modelJsonColumnsSearch;
        modelJsonColumnsSearch = new JsonColumnSearchModel();
        return modelJsonColumnsSearch;
    }
    
    public HubCopy<JsonObject> createHubCopy() {
        Hub<JsonObject> hubJsonObjectx = new Hub<>(JsonObject.class);
        HubCopy<JsonObject> hc = new HubCopy<>(getHub(), hubJsonObjectx, true);
        return hc;
    }
    public JsonObjectModel createCopy() {
        JsonObjectModel mod = new JsonObjectModel(createHubCopy().getHub());
        return mod;
    }
}

