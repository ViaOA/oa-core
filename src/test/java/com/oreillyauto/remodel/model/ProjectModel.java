// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class ProjectModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ProjectModel.class.getName());
    
    // Hubs
    protected Hub<Project> hub;
    // selected projects
    protected Hub<Project> hubMultiSelect;
    // detail hubs
    protected Hub<Database> hubDatabases;
    protected Hub<Repository> hubRepositories;
    
    // selectFrom
    protected Hub<Database> hubDatabasesSelectFrom;
    
    // ObjectModels
    protected DatabaseModel modelDatabases;
    protected RepositoryModel modelRepositories;
    
    // selectFrom
    protected DatabaseModel modelDatabasesSelectFrom;
    
    // SearchModels used for references
    protected DatabaseSearchModel modelDatabasesSearch;
    protected RepositorySearchModel modelRepositoriesSearch;
    
    public ProjectModel() {
        setDisplayName("Project");
        setPluralDisplayName("Projects");
    }
    
    public ProjectModel(Hub<Project> hubProject) {
        this();
        if (hubProject != null) HubDelegate.setObjectClass(hubProject, Project.class);
        this.hub = hubProject;
    }
    public ProjectModel(Project project) {
        this();
        getHub().add(project);
        getHub().setPos(0);
    }
    
    public Hub<Project> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Database> getDatabases() {
        if (hubDatabases == null) {
            hubDatabases = getHub().getDetailHub(Project.P_Databases);
        }
        return hubDatabases;
    }
    public Hub<Repository> getRepositories() {
        if (hubRepositories == null) {
            hubRepositories = getHub().getDetailHub(Project.P_Repositories);
        }
        return hubRepositories;
    }
    public Hub<Database> getDatabasesSelectFromHub() {
        if (hubDatabasesSelectFrom != null) return hubDatabasesSelectFrom;
        hubDatabasesSelectFrom = ModelDelegate.getDatabases().createSharedHub();
        return hubDatabasesSelectFrom;
    }
    public Project getProject() {
        return getHub().getAO();
    }
    
    public Hub<Project> getHub() {
        if (hub == null) {
            hub = new Hub<Project>(Project.class);
        }
        return hub;
    }
    
    public Hub<Project> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Project>(Project.class);
        }
        return hubMultiSelect;
    }
    
    public DatabaseModel getDatabasesModel() {
        if (modelDatabases != null) return modelDatabases;
        modelDatabases = new DatabaseModel(getDatabases());
        modelDatabases.setDisplayName("Database");
        modelDatabases.setPluralDisplayName("Databases");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getDatabases())) {
            modelDatabases.setCreateUI(false);
        }
        modelDatabases.setForJfc(getForJfc());
        modelDatabases.setAllowNew(false);
        modelDatabases.setAllowSave(true);
        modelDatabases.setAllowAdd(true);
        modelDatabases.setAllowMove(false);
        modelDatabases.setAllowRemove(true);
        modelDatabases.setAllowDelete(false);
        modelDatabases.setAllowSearch(false);
        modelDatabases.setAllowHubSearch(true);
        modelDatabases.setAllowGotoEdit(true);
        modelDatabases.setViewOnly(getViewOnly());
        modelDatabases.setAllowNew(false);
        modelDatabases.setAllowTableFilter(true);
        modelDatabases.setAllowTableSorting(true);
        modelDatabases.setAllowMultiSelect(true);
        modelDatabases.setAllowCopy(false);
        modelDatabases.setAllowCut(false);
        modelDatabases.setAllowPaste(false);
        // call Project.databasesModelCallback(DatabaseModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Project.class, Project.P_Databases, modelDatabases);
    
        return modelDatabases;
    }
    public RepositoryModel getRepositoriesModel() {
        if (modelRepositories != null) return modelRepositories;
        modelRepositories = new RepositoryModel(getRepositories());
        modelRepositories.setDisplayName("Repository");
        modelRepositories.setPluralDisplayName("Repositories");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getRepositories())) {
            modelRepositories.setCreateUI(false);
        }
        modelRepositories.setForJfc(getForJfc());
        modelRepositories.setAllowNew(true);
        modelRepositories.setAllowSave(true);
        modelRepositories.setAllowAdd(false);
        modelRepositories.setAllowMove(true);
        modelRepositories.setAllowRemove(false);
        modelRepositories.setAllowDelete(true);
        modelRepositories.setAllowSearch(false);
        modelRepositories.setAllowHubSearch(true);
        modelRepositories.setAllowGotoEdit(true);
        modelRepositories.setViewOnly(getViewOnly());
        modelRepositories.setAllowNew(true);
        modelRepositories.setAllowTableFilter(false);
        modelRepositories.setAllowTableSorting(false);
        modelRepositories.setAllowMultiSelect(false);
        modelRepositories.setAllowCopy(false);
        modelRepositories.setAllowCut(false);
        modelRepositories.setAllowPaste(false);
        // call Project.repositoriesModelCallback(RepositoryModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Project.class, Project.P_Repositories, modelRepositories);
    
        return modelRepositories;
    }
    
    public DatabaseModel getDatabasesSelectFromModel() {
        if (modelDatabasesSelectFrom != null) return modelDatabasesSelectFrom;
        modelDatabasesSelectFrom = new DatabaseModel(getDatabasesSelectFromHub());
        modelDatabasesSelectFrom.setDisplayName("Database");
        modelDatabasesSelectFrom.setPluralDisplayName("Databases");
        modelDatabasesSelectFrom.setForJfc(getForJfc());
        modelDatabasesSelectFrom.setAllowNew(false);
        modelDatabasesSelectFrom.setAllowSave(true);
        modelDatabasesSelectFrom.setAllowAdd(false);
        modelDatabasesSelectFrom.setAllowMove(false);
        modelDatabasesSelectFrom.setAllowRemove(false);
        modelDatabasesSelectFrom.setAllowDelete(false);
        modelDatabasesSelectFrom.setAllowSearch(true);
        modelDatabasesSelectFrom.setAllowHubSearch(true);
        modelDatabasesSelectFrom.setAllowGotoEdit(true);
        modelDatabasesSelectFrom.setViewOnly(getViewOnly());
        modelDatabasesSelectFrom.setAllowNew(false);
        modelDatabasesSelectFrom.setAllowTableFilter(true);
        modelDatabasesSelectFrom.setAllowTableSorting(true);
        modelDatabasesSelectFrom.setAllowCut(false);
        modelDatabasesSelectFrom.setAllowCopy(false);
        modelDatabasesSelectFrom.setAllowPaste(false);
        modelDatabasesSelectFrom.setAllowMultiSelect(true);
        new HubMakeCopy(getDatabases(), modelDatabasesSelectFrom.getMultiSelectHub());
        return modelDatabasesSelectFrom;
    }
    public DatabaseSearchModel getDatabasesSearchModel() {
        if (modelDatabasesSearch != null) return modelDatabasesSearch;
        modelDatabasesSearch = new DatabaseSearchModel();
        return modelDatabasesSearch;
    }
    public RepositorySearchModel getRepositoriesSearchModel() {
        if (modelRepositoriesSearch != null) return modelRepositoriesSearch;
        modelRepositoriesSearch = new RepositorySearchModel();
        return modelRepositoriesSearch;
    }
    
    public HubCopy<Project> createHubCopy() {
        Hub<Project> hubProjectx = new Hub<>(Project.class);
        HubCopy<Project> hc = new HubCopy<>(getHub(), hubProjectx, true);
        return hc;
    }
    public ProjectModel createCopy() {
        ProjectModel mod = new ProjectModel(createHubCopy().getHub());
        return mod;
    }
}

