// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class QueryColumnModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(QueryColumnModel.class.getName());
    
    // Hubs
    protected Hub<QueryColumn> hub;
    // selected queryColumns
    protected Hub<QueryColumn> hubMultiSelect;
    // detail hubs
    protected Hub<Column> hubColumn;
    protected Hub<JsonColumn> hubJsonColumn;
    protected Hub<QueryTable> hubQueryTable;
    
    // AddHubs used for references
    protected Hub<Column> hubColumnSelectFrom;
    protected Hub<JsonColumn> hubJsonColumnSelectFrom;
    
    // ObjectModels
    protected ColumnModel modelColumn;
    protected JsonColumnModel modelJsonColumn;
    protected QueryTableModel modelQueryTable;
    
    // selectFrom
    protected ColumnModel modelColumnSelectFrom;
    protected JsonColumnModel modelJsonColumnSelectFrom;
    
    // SearchModels used for references
    protected ColumnSearchModel modelColumnSearch;
    protected JsonColumnSearchModel modelJsonColumnSearch;
    protected QueryTableSearchModel modelQueryTableSearch;
    
    public QueryColumnModel() {
        setDisplayName("Query Column");
        setPluralDisplayName("Query Columns");
    }
    
    public QueryColumnModel(Hub<QueryColumn> hubQueryColumn) {
        this();
        if (hubQueryColumn != null) HubDelegate.setObjectClass(hubQueryColumn, QueryColumn.class);
        this.hub = hubQueryColumn;
    }
    public QueryColumnModel(QueryColumn queryColumn) {
        this();
        getHub().add(queryColumn);
        getHub().setPos(0);
    }
    
    public Hub<QueryColumn> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Column> getColumnHub() {
        if (hubColumn != null) return hubColumn;
        hubColumn = getHub().getDetailHub(QueryColumn.P_Column);
        return hubColumn;
    }
    public Hub<JsonColumn> getJsonColumnHub() {
        if (hubJsonColumn != null) return hubJsonColumn;
        hubJsonColumn = getHub().getDetailHub(QueryColumn.P_JsonColumn);
        return hubJsonColumn;
    }
    public Hub<QueryTable> getQueryTableHub() {
        if (hubQueryTable != null) return hubQueryTable;
        // this is the owner, use detailHub
        hubQueryTable = getHub().getDetailHub(QueryColumn.P_QueryTable);
        return hubQueryTable;
    }
    public Hub<Column> getColumnSelectFromHub() {
        if (hubColumnSelectFrom != null) return hubColumnSelectFrom;
        hubColumnSelectFrom = new Hub<Column>(Column.class);
        Hub<Column>hubColumnSelectFrom1 = new Hub<Column>(Column.class);
        new HubMerger(getHub(), hubColumnSelectFrom1, QueryColumnPP.queryTable().table().columns().pp, false);
        HubCombined<Column> hubCombined = new HubCombined(hubColumnSelectFrom, hubColumnSelectFrom1, getColumnHub());
        hubColumnSelectFrom.setLinkHub(getHub(), QueryColumn.P_Column); 
        return hubColumnSelectFrom;
    }
    public Hub<JsonColumn> getJsonColumnSelectFromHub() {
        if (hubJsonColumnSelectFrom != null) return hubJsonColumnSelectFrom;
        hubJsonColumnSelectFrom = new Hub<JsonColumn>(JsonColumn.class);
        Hub<JsonColumn>hubJsonColumnSelectFrom1 = new Hub<JsonColumn>(JsonColumn.class);
        new HubMerger(getHub(), hubJsonColumnSelectFrom1, QueryColumnPP.column().jsonObject().jsonColumns().pp, false);
        HubCombined<JsonColumn> hubCombined = new HubCombined(hubJsonColumnSelectFrom, hubJsonColumnSelectFrom1, getJsonColumnHub());
        hubJsonColumnSelectFrom.setLinkHub(getHub(), QueryColumn.P_JsonColumn); 
        return hubJsonColumnSelectFrom;
    }
    public QueryColumn getQueryColumn() {
        return getHub().getAO();
    }
    
    public Hub<QueryColumn> getHub() {
        if (hub == null) {
            hub = new Hub<QueryColumn>(QueryColumn.class);
        }
        return hub;
    }
    
    public Hub<QueryColumn> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<QueryColumn>(QueryColumn.class);
        }
        return hubMultiSelect;
    }
    
    public ColumnModel getColumnModel() {
        if (modelColumn != null) return modelColumn;
        modelColumn = new ColumnModel(getColumnHub());
        modelColumn.setDisplayName("Column");
        modelColumn.setPluralDisplayName("Columns");
        modelColumn.setForJfc(getForJfc());
        modelColumn.setAllowNew(false);
        modelColumn.setAllowSave(true);
        modelColumn.setAllowAdd(false);
        modelColumn.setAllowRemove(false);
        modelColumn.setAllowClear(false);
        modelColumn.setAllowDelete(false);
        modelColumn.setAllowSearch(true);
        modelColumn.setAllowHubSearch(true);
        modelColumn.setAllowGotoEdit(true);
        modelColumn.setViewOnly(getViewOnly());
        // call QueryColumn.columnModelCallback(ColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(QueryColumn.class, QueryColumn.P_Column, modelColumn);
    
        return modelColumn;
    }
    public JsonColumnModel getJsonColumnModel() {
        if (modelJsonColumn != null) return modelJsonColumn;
        modelJsonColumn = new JsonColumnModel(getJsonColumnHub());
        modelJsonColumn.setDisplayName("Json Column");
        modelJsonColumn.setPluralDisplayName("Json Columns");
        modelJsonColumn.setForJfc(getForJfc());
        modelJsonColumn.setAllowNew(false);
        modelJsonColumn.setAllowSave(true);
        modelJsonColumn.setAllowAdd(false);
        modelJsonColumn.setAllowRemove(true);
        modelJsonColumn.setAllowClear(true);
        modelJsonColumn.setAllowDelete(false);
        modelJsonColumn.setAllowSearch(true);
        modelJsonColumn.setAllowHubSearch(true);
        modelJsonColumn.setAllowGotoEdit(true);
        modelJsonColumn.setViewOnly(true);
        // call QueryColumn.jsonColumnModelCallback(JsonColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(QueryColumn.class, QueryColumn.P_JsonColumn, modelJsonColumn);
    
        return modelJsonColumn;
    }
    public QueryTableModel getQueryTableModel() {
        if (modelQueryTable != null) return modelQueryTable;
        modelQueryTable = new QueryTableModel(getQueryTableHub());
        modelQueryTable.setDisplayName("Query Table");
        modelQueryTable.setPluralDisplayName("Query Tables");
        modelQueryTable.setForJfc(getForJfc());
        modelQueryTable.setAllowNew(false);
        modelQueryTable.setAllowSave(true);
        modelQueryTable.setAllowAdd(false);
        modelQueryTable.setAllowRemove(false);
        modelQueryTable.setAllowClear(false);
        modelQueryTable.setAllowDelete(false);
        modelQueryTable.setAllowSearch(true);
        modelQueryTable.setAllowHubSearch(true);
        modelQueryTable.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelQueryTable.setCreateUI(li == null || !QueryColumn.P_QueryTable.equals(li.getName()) );
        modelQueryTable.setViewOnly(getViewOnly());
        // call QueryColumn.queryTableModelCallback(QueryTableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(QueryColumn.class, QueryColumn.P_QueryTable, modelQueryTable);
    
        return modelQueryTable;
    }
    
    public ColumnModel getColumnSelectFromModel() {
        if (modelColumnSelectFrom != null) return modelColumnSelectFrom;
        modelColumnSelectFrom = new ColumnModel(getColumnSelectFromHub());
        modelColumnSelectFrom.setDisplayName("Column");
        modelColumnSelectFrom.setPluralDisplayName("Columns");
        modelColumnSelectFrom.setForJfc(getForJfc());
        modelColumnSelectFrom.setAllowNew(false);
        modelColumnSelectFrom.setAllowSave(true);
        modelColumnSelectFrom.setAllowAdd(false);
        modelColumnSelectFrom.setAllowMove(false);
        modelColumnSelectFrom.setAllowRemove(false);
        modelColumnSelectFrom.setAllowDelete(false);
        modelColumnSelectFrom.setAllowSearch(true);
        modelColumnSelectFrom.setAllowHubSearch(true);
        modelColumnSelectFrom.setAllowGotoEdit(true);
        modelColumnSelectFrom.setViewOnly(getViewOnly());
        modelColumnSelectFrom.setAllowNew(false);
        modelColumnSelectFrom.setAllowTableFilter(true);
        modelColumnSelectFrom.setAllowTableSorting(true);
        modelColumnSelectFrom.setAllowCut(false);
        modelColumnSelectFrom.setAllowCopy(false);
        modelColumnSelectFrom.setAllowPaste(false);
        modelColumnSelectFrom.setAllowMultiSelect(false);
        return modelColumnSelectFrom;
    }
    public JsonColumnModel getJsonColumnSelectFromModel() {
        if (modelJsonColumnSelectFrom != null) return modelJsonColumnSelectFrom;
        modelJsonColumnSelectFrom = new JsonColumnModel(getJsonColumnSelectFromHub());
        modelJsonColumnSelectFrom.setDisplayName("Json Column");
        modelJsonColumnSelectFrom.setPluralDisplayName("Json Columns");
        modelJsonColumnSelectFrom.setForJfc(getForJfc());
        modelJsonColumnSelectFrom.setAllowNew(false);
        modelJsonColumnSelectFrom.setAllowSave(true);
        modelJsonColumnSelectFrom.setAllowAdd(false);
        modelJsonColumnSelectFrom.setAllowMove(false);
        modelJsonColumnSelectFrom.setAllowRemove(false);
        modelJsonColumnSelectFrom.setAllowDelete(false);
        modelJsonColumnSelectFrom.setAllowSearch(true);
        modelJsonColumnSelectFrom.setAllowHubSearch(true);
        modelJsonColumnSelectFrom.setAllowGotoEdit(true);
        modelJsonColumnSelectFrom.setViewOnly(getViewOnly());
        modelJsonColumnSelectFrom.setAllowNew(false);
        modelJsonColumnSelectFrom.setAllowTableFilter(true);
        modelJsonColumnSelectFrom.setAllowTableSorting(true);
        modelJsonColumnSelectFrom.setAllowCut(false);
        modelJsonColumnSelectFrom.setAllowCopy(false);
        modelJsonColumnSelectFrom.setAllowPaste(false);
        modelJsonColumnSelectFrom.setAllowMultiSelect(false);
        return modelJsonColumnSelectFrom;
    }
    public ColumnSearchModel getColumnSearchModel() {
        if (modelColumnSearch != null) return modelColumnSearch;
        modelColumnSearch = new ColumnSearchModel();
        OAFilter filter = new OAInFilter(QueryColumnModel.this.getHub(), QueryColumnPP.queryTable().table().columns().pp);
        modelColumnSearch.getColumnSearch().setExtraWhereFilter(filter);
        return modelColumnSearch;
    }
    public JsonColumnSearchModel getJsonColumnSearchModel() {
        if (modelJsonColumnSearch != null) return modelJsonColumnSearch;
        modelJsonColumnSearch = new JsonColumnSearchModel();
        OAFilter filter = new OAInFilter(QueryColumnModel.this.getHub(), QueryColumnPP.column().jsonObject().jsonColumns().pp);
        modelJsonColumnSearch.getJsonColumnSearch().setExtraWhereFilter(filter);
        return modelJsonColumnSearch;
    }
    public QueryTableSearchModel getQueryTableSearchModel() {
        if (modelQueryTableSearch != null) return modelQueryTableSearch;
        modelQueryTableSearch = new QueryTableSearchModel();
        HubSelectDelegate.adoptWhereHub(modelQueryTableSearch.getHub(), QueryColumn.P_QueryTable, getHub());
        return modelQueryTableSearch;
    }
    
    public HubCopy<QueryColumn> createHubCopy() {
        Hub<QueryColumn> hubQueryColumnx = new Hub<>(QueryColumn.class);
        HubCopy<QueryColumn> hc = new HubCopy<>(getHub(), hubQueryColumnx, true);
        return hc;
    }
    public QueryColumnModel createCopy() {
        QueryColumnModel mod = new QueryColumnModel(createHubCopy().getHub());
        return mod;
    }
}

