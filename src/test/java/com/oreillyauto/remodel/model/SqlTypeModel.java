// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class SqlTypeModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(SqlTypeModel.class.getName());
    
    // Hubs
    protected Hub<SqlType> hub;
    // selected sqlTypes
    protected Hub<SqlType> hubMultiSelect;
    // detail hubs
    protected Hub<DataType> hubDataType;
    
    // AddHubs used for references
    protected Hub<DataType> hubDataTypeSelectFrom;
    
    // ObjectModels
    protected DataTypeModel modelDataType;
    
    // selectFrom
    protected DataTypeModel modelDataTypeSelectFrom;
    
    public SqlTypeModel() {
        setDisplayName("Sql Type");
        setPluralDisplayName("Sql Types");
    }
    
    public SqlTypeModel(Hub<SqlType> hubSqlType) {
        this();
        if (hubSqlType != null) HubDelegate.setObjectClass(hubSqlType, SqlType.class);
        this.hub = hubSqlType;
    }
    public SqlTypeModel(SqlType sqlType) {
        this();
        getHub().add(sqlType);
        getHub().setPos(0);
    }
    
    public Hub<SqlType> getOriginalHub() {
        return getHub();
    }
    
    public Hub<DataType> getDataTypeHub() {
        if (hubDataType != null) return hubDataType;
        hubDataType = getHub().getDetailHub(SqlType.P_DataType);
        return hubDataType;
    }
    public Hub<DataType> getDataTypeSelectFromHub() {
        if (hubDataTypeSelectFrom != null) return hubDataTypeSelectFrom;
        hubDataTypeSelectFrom = new Hub<DataType>(DataType.class);
        Hub<DataType> hubDataTypeSelectFrom1 = ModelDelegate.getDataTypes().createSharedHub();
        HubCombined<DataType> hubCombined = new HubCombined(hubDataTypeSelectFrom, hubDataTypeSelectFrom1, getDataTypeHub());
        hubDataTypeSelectFrom.setLinkHub(getHub(), SqlType.P_DataType); 
        return hubDataTypeSelectFrom;
    }
    public SqlType getSqlType() {
        return getHub().getAO();
    }
    
    public Hub<SqlType> getHub() {
        if (hub == null) {
            hub = new Hub<SqlType>(SqlType.class);
        }
        return hub;
    }
    
    public Hub<SqlType> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<SqlType>(SqlType.class);
        }
        return hubMultiSelect;
    }
    
    public DataTypeModel getDataTypeModel() {
        if (modelDataType != null) return modelDataType;
        modelDataType = new DataTypeModel(getDataTypeHub());
        modelDataType.setDisplayName("Data Type");
        modelDataType.setPluralDisplayName("Data Types");
        modelDataType.setForJfc(getForJfc());
        modelDataType.setAllowNew(false);
        modelDataType.setAllowSave(true);
        modelDataType.setAllowAdd(false);
        modelDataType.setAllowRemove(false);
        modelDataType.setAllowClear(false);
        modelDataType.setAllowDelete(false);
        modelDataType.setAllowSearch(false);
        modelDataType.setAllowHubSearch(false);
        modelDataType.setAllowGotoEdit(false);
        modelDataType.setViewOnly(true);
        // call SqlType.dataTypeModelCallback(DataTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(SqlType.class, SqlType.P_DataType, modelDataType);
    
        return modelDataType;
    }
    
    public DataTypeModel getDataTypeSelectFromModel() {
        if (modelDataTypeSelectFrom != null) return modelDataTypeSelectFrom;
        modelDataTypeSelectFrom = new DataTypeModel(getDataTypeSelectFromHub());
        modelDataTypeSelectFrom.setDisplayName("Data Type");
        modelDataTypeSelectFrom.setPluralDisplayName("Data Types");
        modelDataTypeSelectFrom.setForJfc(getForJfc());
        modelDataTypeSelectFrom.setAllowNew(false);
        modelDataTypeSelectFrom.setAllowSave(true);
        modelDataTypeSelectFrom.setAllowAdd(false);
        modelDataTypeSelectFrom.setAllowMove(false);
        modelDataTypeSelectFrom.setAllowRemove(false);
        modelDataTypeSelectFrom.setAllowDelete(false);
        modelDataTypeSelectFrom.setAllowSearch(false);
        modelDataTypeSelectFrom.setAllowHubSearch(true);
        modelDataTypeSelectFrom.setAllowGotoEdit(true);
        modelDataTypeSelectFrom.setViewOnly(getViewOnly());
        modelDataTypeSelectFrom.setAllowNew(false);
        modelDataTypeSelectFrom.setAllowTableFilter(true);
        modelDataTypeSelectFrom.setAllowTableSorting(true);
        modelDataTypeSelectFrom.setAllowCut(false);
        modelDataTypeSelectFrom.setAllowCopy(false);
        modelDataTypeSelectFrom.setAllowPaste(false);
        modelDataTypeSelectFrom.setAllowMultiSelect(false);
        return modelDataTypeSelectFrom;
    }
    
    public HubCopy<SqlType> createHubCopy() {
        Hub<SqlType> hubSqlTypex = new Hub<>(SqlType.class);
        HubCopy<SqlType> hc = new HubCopy<>(getHub(), hubSqlTypex, true);
        return hc;
    }
    public SqlTypeModel createCopy() {
        SqlTypeModel mod = new SqlTypeModel(createHubCopy().getHub());
        return mod;
    }
}

