// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;
import com.viaoa.model.oa.VInteger;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class TableCategoryModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TableCategoryModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      rootHub       - for recursive, root
      recursiveHub  - will be shared with root or child hub
      flattenedHub  - will merge all recursive child hubs into one
      treeTableHub  - will have root objects and all expanded child hub objects
    */
    
    // types of ways to view the original hub
    public static final int TYPE_Original = 0;
    public static final int TYPE_TreeTable = 1;
    public static final int TYPE_Root = 2;
    public static final int TYPE_Flattened = 3;
    public static final int TYPE_Recursive = 4;
    
    // Hubs
    protected Hub<TableCategory> hubOriginal;
    // hubs needed since TableCategory is recursive
    protected Hub<TableCategory> hubRecursive; // used by tree, points to root or child hub
    protected Hub<TableCategory> hubTreeTable; // hub of root and the expanded node objects
    protected Hub<TableCategory> hubFlattenedTreeTable; // works with tree
    protected Hub<TableCategory> hubRoot;      // recursive root
    protected Hub<TableCategory> hubFlattened; // recursive flattened
    
    // main hub that points to hubOriginal, hubRoot, hubRecursive, hubFlattened, hubTreeTable
    protected Hub<TableCategory> hub;
    // selected tableCategories
    protected Hub<TableCategory> hubMultiSelect;
    // detail hubs
    protected Hub<Database> hubDatabase;
    protected Hub<TableCategory> hubParentTableCategory;
    protected Hub<TableCategory> hubTableCategories;
    protected Hub<Table> hubTables;
    
    // AddHubs used for references
    protected Hub<Database> hubDatabaseSelectFrom;
    protected Hub<Table> hubTablesSelectFrom;
    
    // ObjectModels
    protected DatabaseModel modelDatabase;
    protected TableCategoryModel modelParentTableCategory;
    protected TableCategoryModel modelTableCategories;
    protected TableModel modelTables;
    
    // selectFrom
    protected DatabaseModel modelDatabaseSelectFrom;
    protected TableModel modelTablesSelectFrom;
    
    // SearchModels used for references
    protected DatabaseSearchModel modelDatabaseSearch;
    protected TableCategorySearchModel modelParentTableCategorySearch;
    protected TableCategorySearchModel modelTableCategoriesSearch;
    protected TableSearchModel modelTablesSearch;
    
    public TableCategoryModel() {
        setDisplayName("Table Category");
        setPluralDisplayName("Table Categories");
        setAllowRecursive(true);
    }
    
    public TableCategoryModel(Hub<TableCategory> hubTableCategory) {
        this();
        if (hubTableCategory != null) HubDelegate.setObjectClass(hubTableCategory, TableCategory.class);
        this.hubOriginal = hubTableCategory;
        setType(TYPE_Original);
    }
    public TableCategoryModel(TableCategory tableCategory) {
        this();
        getOriginalHub().add(tableCategory);
        getOriginalHub().setPos(0);
        setType(TYPE_Original);
    }
    
    public TableCategoryModel(Hub<TableCategory> hubRootTableCategory, Hub<TableCategory> hubTableCategory) {
        this();
        hubOriginal = hubRootTableCategory;
        hubRecursive = hubTableCategory;
        setType(TYPE_Recursive);
    }
    
    // the type of hub that is active
    public void setType(int type) {
        updateType(type);
        getVType().setValue(type);
    }
    public int getType() {
        return getVType().getValue();
    }
    // listen to type change
    public void addTypeListener(HubListener hl) {
        if (hl != null) getTypeHub().addHubListener(hl);
    }
    // used to listen to type change
    private Hub<VInteger> hubType;
    private VInteger type;
    private VInteger getVType() {
        if (type == null) {
            type = new VInteger();
        }
        return type;
    }
    private Hub<VInteger> getTypeHub() {
        if (hubType == null) {
            hubType = new Hub<VInteger>(VInteger.class);
            hubType.add(getVType());
            hubType.setPos(0);
        }
        return hubType;
    }
    private void updateType(int newValue) {
        if (!getAllowRecursive()) newValue = TYPE_Original;
        switch (newValue) {
        case TYPE_Original:
            getHub().setSharedHub(getOriginalHub(), true);
            break;
        case TYPE_TreeTable:
            getHub().setSharedHub(getFlattenedTreeTableHub(), true);
            break;
        case TYPE_Root:
            getHub().setSharedHub(getRootHub(), true);
            break;
        case TYPE_Flattened:
            getHub().setSharedHub(getFlattenedHub(), true);
            break;
        case TYPE_Recursive:
            getHub().setSharedHub(getRecursiveHub(), true);
            break;
        }
    }
    
    public Hub<TableCategory> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<TableCategory>(TableCategory.class);
        }
        return hubOriginal;
    }
    
    // the root hub of a recursive hub
    public Hub<TableCategory> getRootHub() {
        if (hubRoot == null) {
            hubRoot = new Hub<TableCategory>(TableCategory.class);
            new HubRoot(getOriginalHub(), hubRoot);
        }
        return hubRoot;
    }
    
    // This will point/share to the root or child hub that is active.
    public Hub<TableCategory> getRecursiveHub() {
        if (hubRecursive == null) {
            hubRecursive = new Hub<TableCategory>(TableCategory.class);
            hubRecursive.setSharedHub(getOriginalHub());
        }
        return hubRecursive;
    }
    
    // flattened hub for a recursive hub
    public Hub<TableCategory> getFlattenedHub() {
        if (hubFlattened == null) {
            hubFlattened = new Hub<TableCategory>(TableCategory.class);
            HubFlattened hf = new HubFlattened(getOriginalHub(), hubFlattened);
        }
        return hubFlattened;
    }
    
    // hub of expanded nodes in treeTable
    public Hub<TableCategory> getTreeTableHub() {
        if (hubTreeTable == null) {
            hubTreeTable = new Hub<TableCategory>(TableCategory.class);
        }
        return hubTreeTable;
    }
    public Hub<TableCategory> getFlattenedTreeTableHub() {
        if (hubFlattenedTreeTable == null) {
            hubFlattenedTreeTable = new Hub<TableCategory>(TableCategory.class);
            new HubFlattened(getOriginalHub(), hubFlattenedTreeTable);
        }
        return hubFlattenedTreeTable;
    }
    
    public Hub<Database> getDatabaseHub() {
        if (hubDatabase != null) return hubDatabase;
        // this is the owner, use detailHub
        hubDatabase = getHub().getDetailHub(TableCategory.P_Database);
        return hubDatabase;
    }
    public Hub<TableCategory> getParentTableCategoryHub() {
        if (hubParentTableCategory != null) return hubParentTableCategory;
        hubParentTableCategory = getHub().getDetailHub(TableCategory.P_ParentTableCategory);
        return hubParentTableCategory;
    }
    public Hub<TableCategory> getTableCategories() {
        if (hubTableCategories == null) {
            hubTableCategories = getHub().getDetailHub(TableCategory.P_TableCategories);
        }
        return hubTableCategories;
    }
    public Hub<Table> getTables() {
        if (hubTables == null) {
            hubTables = getHub().getDetailHub(TableCategory.P_Tables);
        }
        return hubTables;
    }
    public Hub<Database> getDatabaseSelectFromHub() {
        if (hubDatabaseSelectFrom != null) return hubDatabaseSelectFrom;
        hubDatabaseSelectFrom = new Hub<Database>(Database.class);
        Hub<Database> hubDatabaseSelectFrom1 = ModelDelegate.getDatabases().createSharedHub();
        HubCombined<Database> hubCombined = new HubCombined(hubDatabaseSelectFrom, hubDatabaseSelectFrom1, getDatabaseHub());
        hubDatabaseSelectFrom.setLinkHub(getHub(), TableCategory.P_Database); 
        return hubDatabaseSelectFrom;
    }
    public Hub<Table> getTablesSelectFromHub() {
        if (hubTablesSelectFrom != null) return hubTablesSelectFrom;
        hubTablesSelectFrom = new Hub(Table.class);
        new HubMerger(getHub(), hubTablesSelectFrom, TableCategoryPP.database().tables().pp);
        return hubTablesSelectFrom;
    }
    public TableCategory getTableCategory() {
        return getHub().getAO();
    }
    
    // points to one: hubOriginal, hubFlattened, hubRecursive, hubTreeTable
    public Hub<TableCategory> getHub() {
        if (hub == null) {
            hub = new Hub<TableCategory>(TableCategory.class);
            hub.setSharedHub(getOriginalHub(), true);
        }
        return hub;
    }
    
    public Hub<TableCategory> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<TableCategory>(TableCategory.class);
        }
        return hubMultiSelect;
    }
    
    public DatabaseModel getDatabaseModel() {
        if (modelDatabase != null) return modelDatabase;
        modelDatabase = new DatabaseModel(getDatabaseHub());
        modelDatabase.setDisplayName("Database");
        modelDatabase.setPluralDisplayName("Databases");
        modelDatabase.setForJfc(getForJfc());
        modelDatabase.setAllowNew(false);
        modelDatabase.setAllowSave(true);
        modelDatabase.setAllowAdd(false);
        modelDatabase.setAllowRemove(false);
        modelDatabase.setAllowClear(false);
        modelDatabase.setAllowDelete(false);
        modelDatabase.setAllowSearch(true);
        modelDatabase.setAllowHubSearch(true);
        modelDatabase.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelDatabase.setCreateUI(li == null || !TableCategory.P_Database.equals(li.getName()) );
        modelDatabase.setViewOnly(getViewOnly());
        // call TableCategory.databaseModelCallback(DatabaseModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TableCategory.class, TableCategory.P_Database, modelDatabase);
    
        return modelDatabase;
    }
    public TableCategoryModel getParentTableCategoryModel() {
        if (modelParentTableCategory != null) return modelParentTableCategory;
        modelParentTableCategory = new TableCategoryModel(getParentTableCategoryHub());
        modelParentTableCategory.setDisplayName("Parent Table Category");
        modelParentTableCategory.setPluralDisplayName("Table Categories");
        modelParentTableCategory.setForJfc(getForJfc());
        modelParentTableCategory.setAllowNew(false);
        modelParentTableCategory.setAllowSave(true);
        modelParentTableCategory.setAllowAdd(false);
        modelParentTableCategory.setAllowRemove(false);
        modelParentTableCategory.setAllowClear(false);
        modelParentTableCategory.setAllowDelete(false);
        modelParentTableCategory.setAllowSearch(true);
        modelParentTableCategory.setAllowHubSearch(true);
        modelParentTableCategory.setAllowGotoEdit(true);
        modelParentTableCategory.setViewOnly(true);
        // call TableCategory.parentTableCategoryModelCallback(TableCategoryModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TableCategory.class, TableCategory.P_ParentTableCategory, modelParentTableCategory);
    
        return modelParentTableCategory;
    }
    public TableCategoryModel getTableCategoriesModel() {
        if (modelTableCategories != null) return modelTableCategories;
        modelTableCategories = new TableCategoryModel(getTableCategories());
        modelTableCategories.setDisplayName("Table Category");
        modelTableCategories.setPluralDisplayName("Table Categories");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getTableCategories())) {
            modelTableCategories.setCreateUI(false);
        }
        modelTableCategories.setForJfc(getForJfc());
        modelTableCategories.setAllowNew(true);
        modelTableCategories.setAllowSave(true);
        modelTableCategories.setAllowAdd(false);
        modelTableCategories.setAllowMove(false);
        modelTableCategories.setAllowRemove(false);
        modelTableCategories.setAllowDelete(true);
        modelTableCategories.setAllowSearch(false);
        modelTableCategories.setAllowHubSearch(true);
        modelTableCategories.setAllowGotoEdit(true);
        modelTableCategories.setViewOnly(getViewOnly());
        modelTableCategories.setAllowNew(true);
        modelTableCategories.setAllowTableFilter(true);
        modelTableCategories.setAllowTableSorting(true);
        modelTableCategories.setAllowRecursive(true);
        modelTableCategories.setAllowMultiSelect(false);
        modelTableCategories.setAllowCopy(false);
        modelTableCategories.setAllowCut(false);
        modelTableCategories.setAllowPaste(false);
        // call TableCategory.tableCategoriesModelCallback(TableCategoryModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TableCategory.class, TableCategory.P_TableCategories, modelTableCategories);
    
        return modelTableCategories;
    }
    public TableModel getTablesModel() {
        if (modelTables != null) return modelTables;
        modelTables = new TableModel(getTables());
        modelTables.setDisplayName("Table");
        modelTables.setPluralDisplayName("Tables");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getTables())) {
            modelTables.setCreateUI(false);
        }
        modelTables.setForJfc(getForJfc());
        modelTables.setAllowNew(false);
        modelTables.setAllowSave(true);
        modelTables.setAllowAdd(true);
        modelTables.setAllowMove(false);
        modelTables.setAllowRemove(true);
        modelTables.setAllowDelete(false);
        modelTables.setAllowSearch(false);
        modelTables.setAllowHubSearch(true);
        modelTables.setAllowGotoEdit(true);
        modelTables.setViewOnly(getViewOnly());
        modelTables.setAllowNew(false);
        modelTables.setAllowTableFilter(true);
        modelTables.setAllowTableSorting(true);
        modelTables.setAllowMultiSelect(false);
        modelTables.setAllowCopy(false);
        modelTables.setAllowCut(false);
        modelTables.setAllowPaste(false);
        // call TableCategory.tablesModelCallback(TableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(TableCategory.class, TableCategory.P_Tables, modelTables);
    
        return modelTables;
    }
    
    public DatabaseModel getDatabaseSelectFromModel() {
        if (modelDatabaseSelectFrom != null) return modelDatabaseSelectFrom;
        modelDatabaseSelectFrom = new DatabaseModel(getDatabaseSelectFromHub());
        modelDatabaseSelectFrom.setDisplayName("Database");
        modelDatabaseSelectFrom.setPluralDisplayName("Databases");
        modelDatabaseSelectFrom.setForJfc(getForJfc());
        modelDatabaseSelectFrom.setAllowNew(false);
        modelDatabaseSelectFrom.setAllowSave(true);
        modelDatabaseSelectFrom.setAllowAdd(false);
        modelDatabaseSelectFrom.setAllowMove(false);
        modelDatabaseSelectFrom.setAllowRemove(false);
        modelDatabaseSelectFrom.setAllowDelete(false);
        modelDatabaseSelectFrom.setAllowSearch(true);
        modelDatabaseSelectFrom.setAllowHubSearch(true);
        modelDatabaseSelectFrom.setAllowGotoEdit(true);
        modelDatabaseSelectFrom.setViewOnly(getViewOnly());
        modelDatabaseSelectFrom.setAllowNew(false);
        modelDatabaseSelectFrom.setAllowTableFilter(true);
        modelDatabaseSelectFrom.setAllowTableSorting(true);
        modelDatabaseSelectFrom.setAllowCut(false);
        modelDatabaseSelectFrom.setAllowCopy(false);
        modelDatabaseSelectFrom.setAllowPaste(false);
        modelDatabaseSelectFrom.setAllowMultiSelect(false);
        return modelDatabaseSelectFrom;
    }
    public TableModel getTablesSelectFromModel() {
        if (modelTablesSelectFrom != null) return modelTablesSelectFrom;
        modelTablesSelectFrom = new TableModel(getTablesSelectFromHub());
        modelTablesSelectFrom.setDisplayName("Table");
        modelTablesSelectFrom.setPluralDisplayName("Tables");
        modelTablesSelectFrom.setForJfc(getForJfc());
        modelTablesSelectFrom.setAllowNew(false);
        modelTablesSelectFrom.setAllowSave(true);
        modelTablesSelectFrom.setAllowAdd(false);
        modelTablesSelectFrom.setAllowMove(false);
        modelTablesSelectFrom.setAllowRemove(false);
        modelTablesSelectFrom.setAllowDelete(false);
        modelTablesSelectFrom.setAllowSearch(true);
        modelTablesSelectFrom.setAllowHubSearch(true);
        modelTablesSelectFrom.setAllowGotoEdit(true);
        modelTablesSelectFrom.setViewOnly(getViewOnly());
        modelTablesSelectFrom.setAllowNew(false);
        modelTablesSelectFrom.setAllowTableFilter(true);
        modelTablesSelectFrom.setAllowTableSorting(true);
        modelTablesSelectFrom.setAllowCut(false);
        modelTablesSelectFrom.setAllowCopy(false);
        modelTablesSelectFrom.setAllowPaste(false);
        modelTablesSelectFrom.setAllowMultiSelect(true);
        new HubMakeCopy(getTables(), modelTablesSelectFrom.getMultiSelectHub());
        return modelTablesSelectFrom;
    }
    public DatabaseSearchModel getDatabaseSearchModel() {
        if (modelDatabaseSearch != null) return modelDatabaseSearch;
        modelDatabaseSearch = new DatabaseSearchModel();
        HubSelectDelegate.adoptWhereHub(modelDatabaseSearch.getHub(), TableCategory.P_Database, getHub());
        return modelDatabaseSearch;
    }
    public TableCategorySearchModel getParentTableCategorySearchModel() {
        if (modelParentTableCategorySearch != null) return modelParentTableCategorySearch;
        modelParentTableCategorySearch = new TableCategorySearchModel();
        HubSelectDelegate.adoptWhereHub(modelParentTableCategorySearch.getHub(), TableCategory.P_ParentTableCategory, getHub());
        return modelParentTableCategorySearch;
    }
    public TableCategorySearchModel getTableCategoriesSearchModel() {
        if (modelTableCategoriesSearch != null) return modelTableCategoriesSearch;
        modelTableCategoriesSearch = new TableCategorySearchModel();
        return modelTableCategoriesSearch;
    }
    public TableSearchModel getTablesSearchModel() {
        if (modelTablesSearch != null) return modelTablesSearch;
        modelTablesSearch = new TableSearchModel();
        OAFilter filter = new OAInFilter(TableCategoryModel.this.getHub(), TableCategoryPP.database().tables().pp);
        modelTablesSearch.getTableSearch().setExtraWhereFilter(filter);
        return modelTablesSearch;
    }
    
    public HubCopy<TableCategory> createHubCopy() {
        Hub<TableCategory> hubTableCategoryx = new Hub<>(TableCategory.class);
        HubCopy<TableCategory> hc = new HubCopy<>(getHub(), hubTableCategoryx, true);
        return hc;
    }
    public TableCategoryModel createCopy() {
        TableCategoryModel mod = new TableCategoryModel(createHubCopy().getHub());
        return mod;
    }
}

