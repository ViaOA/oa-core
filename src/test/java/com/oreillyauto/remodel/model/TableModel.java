// Generated by OABuilder

package com.oreillyauto.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;
import com.viaoa.model.oa.VInteger;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.search.*;
import com.oreillyauto.remodel.model.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class TableModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(TableModel.class.getName());
    
    /* overview
      originalHub   - save the original hub
      groupByTableCategoriesHub - detail hub of selected Table
      <- hub - points to groupBy or original hub
    */
    
    // types of ways to view the original hub
    public static final int TYPE_Original = 0;
    public static final int TYPE_GroupByTableCategories = 1;
    
    // Hubs
    protected Hub<Table> hubOriginal;
    // groupBy TableCategory
    protected Hub<TableCategory> hubGroupedByTableCategories;
    protected Hub<Table> hubTablesGroupedByTableCategories;
    protected HubGroupBy<Table, TableCategory> hgbTableCategories;
    
    // main hub that points to hubOriginal, groupedBy hub
    protected Hub<Table> hub;
    // selected tables
    protected Hub<Table> hubMultiSelect;
    // detail hubs
    protected Hub<Database> hubDatabase;
    protected Hub<Column> hubColumns;
    protected Hub<ForeignTable> hubForeignTables;
    protected Hub<Index> hubIndexes;
    protected Hub<QueryTable> hubQueryTables;
    protected Hub<Repository> hubRepositories;
    protected Hub<TableCategory> hubTableCategories;
    protected Hub<ForeignTable> hubTableForeignTables;
    
    // AddHubs used for references
    protected Hub<Database> hubDatabaseSelectFrom;
    protected Hub<Repository> hubRepositoriesSelectFrom;
    protected Hub<TableCategory> hubTableCategoriesSelectFrom;
    
    // pickFrom
    protected Hub<Table> hubForeignTablesPickFromToTable;
    
    // ObjectModels
    protected DatabaseModel modelDatabase;
    protected ColumnModel modelColumns;
    protected ForeignTableModel modelForeignTables;
    protected IndexModel modelIndexes;
    protected QueryTableModel modelQueryTables;
    protected RepositoryModel modelRepositories;
    protected TableCategoryModel modelTableCategories;
    protected ForeignTableModel modelTableForeignTables;
    protected TableCategoryModel modelGroupedByTableCategories;
    protected TableModel modelTablesGroupedByTableCategories;
    
    // selectFrom
    protected DatabaseModel modelDatabaseSelectFrom;
    protected RepositoryModel modelRepositoriesSelectFrom;
    protected TableCategoryModel modelTableCategoriesSelectFrom;
    
    // pickFrom
    protected TableModel modelForeignTablesPickFromToTable;
    protected TableSearchModel modelForeignTablesPickFromToTableSearch;
    
    // SearchModels used for references
    protected DatabaseSearchModel modelDatabaseSearch;
    protected ColumnSearchModel modelColumnsSearch;
    protected ForeignTableSearchModel modelForeignTablesSearch;
    protected QueryTableSearchModel modelQueryTablesSearch;
    protected RepositorySearchModel modelRepositoriesSearch;
    protected TableCategorySearchModel modelTableCategoriesSearch;
    protected ForeignTableSearchModel modelTableForeignTablesSearch;
    
    public TableModel() {
        setDisplayName("Table");
        setPluralDisplayName("Tables");
    }
    
    public TableModel(Hub<Table> hubTable) {
        this();
        if (hubTable != null) HubDelegate.setObjectClass(hubTable, Table.class);
        this.hubOriginal = hubTable;
        setType(TYPE_Original);
    }
    public TableModel(Table table) {
        this();
        getOriginalHub().add(table);
        getOriginalHub().setPos(0);
        setType(TYPE_Original);
    }
    
    // the type of hub that is active
    public void setType(int type) {
        updateType(type);
        getVType().setValue(type);
    }
    public int getType() {
        return getVType().getValue();
    }
    // listen to type change
    public void addTypeListener(HubListener hl) {
        if (hl != null) getTypeHub().addHubListener(hl);
    }
    // used to listen to type change
    private Hub<VInteger> hubType;
    private VInteger type;
    private VInteger getVType() {
        if (type == null) {
            type = new VInteger();
        }
        return type;
    }
    private Hub<VInteger> getTypeHub() {
        if (hubType == null) {
            hubType = new Hub<VInteger>(VInteger.class);
            hubType.add(getVType());
            hubType.setPos(0);
        }
        return hubType;
    }
    private void updateType(int newValue) {
        if (!getAllowRecursive()) newValue = TYPE_Original;
        switch (newValue) {
        case TYPE_Original:
            getHub().setSharedHub(getOriginalHub(), true);
            break;
        case TYPE_GroupByTableCategories:
            getHub().setSharedHub(getTablesGroupedByTableCategoriesHub(), true);
            break;
        }
    }
    
    public Hub<Table> getOriginalHub() {
        if (hubOriginal == null) {
            hubOriginal = new Hub<Table>(Table.class);
        }
        return hubOriginal;
    }
    
    public Hub<Database> getDatabaseHub() {
        if (hubDatabase != null) return hubDatabase;
        // this is the owner, use detailHub
        hubDatabase = getHub().getDetailHub(Table.P_Database);
        return hubDatabase;
    }
    public Hub<Column> getColumns() {
        if (hubColumns == null) {
            hubColumns = getHub().getDetailHub(Table.P_Columns);
        }
        return hubColumns;
    }
    public Hub<ForeignTable> getForeignTables() {
        if (hubForeignTables == null) {
            hubForeignTables = getHub().getDetailHub(Table.P_ForeignTables);
        }
        return hubForeignTables;
    }
    public Hub<Index> getIndexes() {
        if (hubIndexes == null) {
            hubIndexes = getHub().getDetailHub(Table.P_Indexes);
        }
        return hubIndexes;
    }
    public Hub<QueryTable> getQueryTables() {
        if (hubQueryTables == null) {
            hubQueryTables = getHub().getDetailHub(Table.P_QueryTables);
        }
        return hubQueryTables;
    }
    public Hub<Repository> getRepositories() {
        if (hubRepositories == null) {
            hubRepositories = getHub().getDetailHub(Table.P_Repositories);
        }
        return hubRepositories;
    }
    public Hub<TableCategory> getTableCategories() {
        if (hubTableCategories == null) {
            hubTableCategories = getHub().getDetailHub(Table.P_TableCategories);
        }
        return hubTableCategories;
    }
    public Hub<ForeignTable> getTableForeignTables() {
        if (hubTableForeignTables == null) {
            hubTableForeignTables = getHub().getDetailHub(Table.P_TableForeignTables);
        }
        return hubTableForeignTables;
    }
    public Hub<Database> getDatabaseSelectFromHub() {
        if (hubDatabaseSelectFrom != null) return hubDatabaseSelectFrom;
        hubDatabaseSelectFrom = new Hub<Database>(Database.class);
        Hub<Database> hubDatabaseSelectFrom1 = ModelDelegate.getDatabases().createSharedHub();
        HubCombined<Database> hubCombined = new HubCombined(hubDatabaseSelectFrom, hubDatabaseSelectFrom1, getDatabaseHub());
        hubDatabaseSelectFrom.setLinkHub(getHub(), Table.P_Database); 
        return hubDatabaseSelectFrom;
    }
    public Hub<Repository> getRepositoriesSelectFromHub() {
        if (hubRepositoriesSelectFrom != null) return hubRepositoriesSelectFrom;
        hubRepositoriesSelectFrom = new Hub(Repository.class);
        new HubMerger(getHub(), hubRepositoriesSelectFrom, TablePP.database().projects().repositories().pp);
        return hubRepositoriesSelectFrom;
    }
    public Hub<TableCategory> getTableCategoriesSelectFromHub() {
        if (hubTableCategoriesSelectFrom != null) return hubTableCategoriesSelectFrom;
        hubTableCategoriesSelectFrom = new Hub(TableCategory.class);
        new HubMerger(getHub(), hubTableCategoriesSelectFrom, TablePP.database().tableCategories().pp);
        return hubTableCategoriesSelectFrom;
    }
    public Hub<Table> getForeignTablesPickFromToTableHub() {
        if (hubForeignTablesPickFromToTable != null) return hubForeignTablesPickFromToTable;
        hubForeignTablesPickFromToTable = new Hub<Table>(Table.class);
        new HubMerger(getHub(), hubForeignTablesPickFromToTable, TablePP.database().tables().pp, false);
        return hubForeignTablesPickFromToTable;
    }
    public Hub<TableCategory> getGroupedByTableCategoriesHub() {
        if (hubGroupedByTableCategories == null) {
            hubGroupedByTableCategories = getGroupedByTableCategories().getMasterHub();
        }
        return hubGroupedByTableCategories;
    }
    public Hub<Table> getTablesGroupedByTableCategoriesHub() {
        if (hubTablesGroupedByTableCategories == null) {
            hubTablesGroupedByTableCategories = getGroupedByTableCategories().getDetailHub();
        }
        return hubTablesGroupedByTableCategories;
    }
    protected HubGroupBy<Table, TableCategory> getGroupedByTableCategories() {
        if (hgbTableCategories == null) {
            String pp = TablePP.tableCategories().pp;
            hgbTableCategories = new HubGroupBy<Table, TableCategory>(getOriginalHub(), pp);
        }
        return hgbTableCategories;
    }
    
    public Table getTable() {
        return getHub().getAO();
    }
    
    public Hub<Table> getHub() {
        if (hub == null) {
            hub = new Hub<Table>(Table.class);
            hub.setSharedHub(getOriginalHub(), true);
        }
        return hub;
    }
    
    public Hub<Table> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Table>(Table.class);
        }
        return hubMultiSelect;
    }
    
    public DatabaseModel getDatabaseModel() {
        if (modelDatabase != null) return modelDatabase;
        modelDatabase = new DatabaseModel(getDatabaseHub());
        modelDatabase.setDisplayName("Database");
        modelDatabase.setPluralDisplayName("Databases");
        modelDatabase.setForJfc(getForJfc());
        modelDatabase.setAllowNew(false);
        modelDatabase.setAllowSave(true);
        modelDatabase.setAllowAdd(false);
        modelDatabase.setAllowRemove(false);
        modelDatabase.setAllowClear(false);
        modelDatabase.setAllowDelete(false);
        modelDatabase.setAllowSearch(true);
        modelDatabase.setAllowHubSearch(true);
        modelDatabase.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelDatabase.setCreateUI(li == null || !Table.P_Database.equals(li.getName()) );
        modelDatabase.setViewOnly(getViewOnly());
        // call Table.databaseModelCallback(DatabaseModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Table.class, Table.P_Database, modelDatabase);
    
        return modelDatabase;
    }
    public ColumnModel getColumnsModel() {
        if (modelColumns != null) return modelColumns;
        modelColumns = new ColumnModel(getColumns());
        modelColumns.setDisplayName("Column");
        modelColumns.setPluralDisplayName("Columns");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getColumns())) {
            modelColumns.setCreateUI(false);
        }
        modelColumns.setForJfc(getForJfc());
        modelColumns.setAllowNew(true);
        modelColumns.setAllowSave(true);
        modelColumns.setAllowAdd(false);
        modelColumns.setAllowMove(true);
        modelColumns.setAllowRemove(false);
        modelColumns.setAllowDelete(true);
        modelColumns.setAllowSearch(false);
        modelColumns.setAllowHubSearch(true);
        modelColumns.setAllowGotoEdit(true);
        modelColumns.setViewOnly(getViewOnly());
        modelColumns.setAllowNew(true);
        modelColumns.setAllowTableFilter(false);
        modelColumns.setAllowTableSorting(false);
        modelColumns.setAllowMultiSelect(false);
        modelColumns.setAllowCopy(false);
        modelColumns.setAllowCut(false);
        modelColumns.setAllowPaste(false);
        // call Table.columnsModelCallback(ColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Table.class, Table.P_Columns, modelColumns);
    
        return modelColumns;
    }
    public ForeignTableModel getForeignTablesModel() {
        if (modelForeignTables != null) return modelForeignTables;
        modelForeignTables = new ForeignTableModel(getForeignTables());
        modelForeignTables.setDisplayName("Foreign Table");
        modelForeignTables.setPluralDisplayName("Foreign Tables");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getForeignTables())) {
            modelForeignTables.setCreateUI(false);
        }
        modelForeignTables.setForJfc(getForJfc());
        modelForeignTables.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Table
        modelForeignTables.setAllowSave(true);
        modelForeignTables.setAllowAdd(true); // Add is overwritten to create new ForeignTable by first selecting Table
        modelForeignTables.setAllowMove(false);
        modelForeignTables.setAllowRemove(false);
        modelForeignTables.setAllowDelete(true);
        modelForeignTables.setAllowSearch(false);
        modelForeignTables.setAllowHubSearch(true);
        modelForeignTables.setAllowGotoEdit(true);
        modelForeignTables.setViewOnly(getViewOnly());
        modelForeignTables.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Table
        modelForeignTables.setAllowTableFilter(true);
        modelForeignTables.setAllowTableSorting(true);
        modelForeignTables.setAllowMultiSelect(false);
        modelForeignTables.setAllowCopy(false);
        modelForeignTables.setAllowCut(false);
        modelForeignTables.setAllowPaste(false);
        // call Table.foreignTablesModelCallback(ForeignTableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Table.class, Table.P_ForeignTables, modelForeignTables);
    
        return modelForeignTables;
    }
    public IndexModel getIndexesModel() {
        if (modelIndexes != null) return modelIndexes;
        modelIndexes = new IndexModel(getIndexes());
        modelIndexes.setDisplayName("Index");
        modelIndexes.setPluralDisplayName("Indexes");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getIndexes())) {
            modelIndexes.setCreateUI(false);
        }
        modelIndexes.setForJfc(getForJfc());
        modelIndexes.setAllowNew(true);
        modelIndexes.setAllowSave(true);
        modelIndexes.setAllowAdd(false);
        modelIndexes.setAllowMove(false);
        modelIndexes.setAllowRemove(false);
        modelIndexes.setAllowDelete(true);
        modelIndexes.setAllowSearch(false);
        modelIndexes.setAllowHubSearch(false);
        modelIndexes.setAllowGotoEdit(true);
        modelIndexes.setViewOnly(getViewOnly());
        modelIndexes.setAllowNew(true);
        modelIndexes.setAllowTableFilter(true);
        modelIndexes.setAllowTableSorting(true);
        modelIndexes.setAllowMultiSelect(false);
        modelIndexes.setAllowCopy(false);
        modelIndexes.setAllowCut(false);
        modelIndexes.setAllowPaste(false);
        // call Table.indexesModelCallback(IndexModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Table.class, Table.P_Indexes, modelIndexes);
    
        return modelIndexes;
    }
    public QueryTableModel getQueryTablesModel() {
        if (modelQueryTables != null) return modelQueryTables;
        modelQueryTables = new QueryTableModel(getQueryTables());
        modelQueryTables.setDisplayName("Query Table");
        modelQueryTables.setPluralDisplayName("Query Tables");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getQueryTables())) {
            modelQueryTables.setCreateUI(false);
        }
        modelQueryTables.setForJfc(getForJfc());
        modelQueryTables.setAllowNew(false);
        modelQueryTables.setAllowSave(true);
        modelQueryTables.setAllowAdd(false);
        modelQueryTables.setAllowMove(false);
        modelQueryTables.setAllowRemove(false);
        modelQueryTables.setAllowDelete(true);
        modelQueryTables.setAllowSearch(false);
        modelQueryTables.setAllowHubSearch(true);
        modelQueryTables.setAllowGotoEdit(true);
        modelQueryTables.setViewOnly(getViewOnly());
        modelQueryTables.setAllowNew(false);
        modelQueryTables.setAllowTableFilter(true);
        modelQueryTables.setAllowTableSorting(true);
        modelQueryTables.setAllowMultiSelect(false);
        modelQueryTables.setAllowCopy(false);
        modelQueryTables.setAllowCut(false);
        modelQueryTables.setAllowPaste(false);
        // call Table.queryTablesModelCallback(QueryTableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Table.class, Table.P_QueryTables, modelQueryTables);
    
        return modelQueryTables;
    }
    public RepositoryModel getRepositoriesModel() {
        if (modelRepositories != null) return modelRepositories;
        modelRepositories = new RepositoryModel(getRepositories());
        modelRepositories.setDisplayName("Repository");
        modelRepositories.setPluralDisplayName("Repositories");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getRepositories())) {
            modelRepositories.setCreateUI(false);
        }
        modelRepositories.setForJfc(getForJfc());
        modelRepositories.setAllowNew(false);
        modelRepositories.setAllowSave(true);
        modelRepositories.setAllowAdd(true);
        modelRepositories.setAllowMove(false);
        modelRepositories.setAllowRemove(true);
        modelRepositories.setAllowDelete(false);
        modelRepositories.setAllowSearch(false);
        modelRepositories.setAllowHubSearch(true);
        modelRepositories.setAllowGotoEdit(true);
        modelRepositories.setViewOnly(getViewOnly());
        modelRepositories.setAllowNew(false);
        modelRepositories.setAllowTableFilter(true);
        modelRepositories.setAllowTableSorting(true);
        modelRepositories.setAllowMultiSelect(false);
        modelRepositories.setAllowCopy(false);
        modelRepositories.setAllowCut(false);
        modelRepositories.setAllowPaste(false);
        // call Table.repositoriesModelCallback(RepositoryModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Table.class, Table.P_Repositories, modelRepositories);
    
        return modelRepositories;
    }
    public TableCategoryModel getTableCategoriesModel() {
        if (modelTableCategories != null) return modelTableCategories;
        modelTableCategories = new TableCategoryModel(getTableCategories());
        modelTableCategories.setDisplayName("Table Category");
        modelTableCategories.setPluralDisplayName("Table Categories");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getTableCategories())) {
            modelTableCategories.setCreateUI(false);
        }
        modelTableCategories.setForJfc(getForJfc());
        modelTableCategories.setAllowNew(false);
        modelTableCategories.setAllowSave(true);
        modelTableCategories.setAllowAdd(true);
        modelTableCategories.setAllowMove(false);
        modelTableCategories.setAllowRemove(true);
        modelTableCategories.setAllowDelete(false);
        modelTableCategories.setAllowSearch(false);
        modelTableCategories.setAllowHubSearch(true);
        modelTableCategories.setAllowGotoEdit(true);
        modelTableCategories.setViewOnly(getViewOnly());
        modelTableCategories.setAllowNew(false);
        modelTableCategories.setAllowTableFilter(true);
        modelTableCategories.setAllowTableSorting(true);
        modelTableCategories.setAllowRecursive(false);
        modelTableCategories.setAllowMultiSelect(false);
        modelTableCategories.setAllowCopy(false);
        modelTableCategories.setAllowCut(false);
        modelTableCategories.setAllowPaste(false);
        // call Table.tableCategoriesModelCallback(TableCategoryModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Table.class, Table.P_TableCategories, modelTableCategories);
    
        return modelTableCategories;
    }
    public ForeignTableModel getTableForeignTablesModel() {
        if (modelTableForeignTables != null) return modelTableForeignTables;
        modelTableForeignTables = new ForeignTableModel(getTableForeignTables());
        modelTableForeignTables.setDisplayName("Foreign Table");
        modelTableForeignTables.setPluralDisplayName("Foreign Tables");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getTableForeignTables())) {
            modelTableForeignTables.setCreateUI(false);
        }
        modelTableForeignTables.setForJfc(getForJfc());
        modelTableForeignTables.setAllowNew(false);
        modelTableForeignTables.setAllowSave(true);
        modelTableForeignTables.setAllowAdd(true);
        modelTableForeignTables.setAllowMove(false);
        modelTableForeignTables.setAllowRemove(true);
        modelTableForeignTables.setAllowDelete(false);
        modelTableForeignTables.setAllowSearch(false);
        modelTableForeignTables.setAllowHubSearch(true);
        modelTableForeignTables.setAllowGotoEdit(true);
        modelTableForeignTables.setViewOnly(getViewOnly());
        modelTableForeignTables.setAllowNew(false);
        modelTableForeignTables.setAllowTableFilter(true);
        modelTableForeignTables.setAllowTableSorting(true);
        modelTableForeignTables.setAllowMultiSelect(false);
        modelTableForeignTables.setAllowCopy(false);
        modelTableForeignTables.setAllowCut(false);
        modelTableForeignTables.setAllowPaste(false);
        // call Table.tableForeignTablesModelCallback(ForeignTableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Table.class, Table.P_TableForeignTables, modelTableForeignTables);
    
        return modelTableForeignTables;
    }
    
    public TableCategoryModel getGroupedByTableCategoriesModel() {
        if (modelGroupedByTableCategories != null) return modelGroupedByTableCategories;
        modelGroupedByTableCategories = new TableCategoryModel(getGroupedByTableCategoriesHub());
        modelGroupedByTableCategories.setDisplayName("Table Categories");
        modelGroupedByTableCategories.setPluralDisplayName("Table Categories");
        modelGroupedByTableCategories.setAllowNew(false);
        modelGroupedByTableCategories.setAllowSave(false);
        modelGroupedByTableCategories.setAllowAdd(false);
        modelGroupedByTableCategories.setAllowRemove(false);
        modelGroupedByTableCategories.setAllowDelete(false);
        modelGroupedByTableCategories.setAllowSearch(false);
        modelGroupedByTableCategories.setAllowHubSearch(true);
        modelGroupedByTableCategories.setAllowGotoEdit(true);
        modelGroupedByTableCategories.setForJfc(getForJfc());
        return modelGroupedByTableCategories;
    }
    public TableModel getTablesGroupedByTableCategoriesModel() {
        if (modelTablesGroupedByTableCategories != null) return modelTablesGroupedByTableCategories;
        modelTablesGroupedByTableCategories = new TableModel(getTablesGroupedByTableCategoriesHub());
        modelTablesGroupedByTableCategories.setDisplayName("Table");
        modelTablesGroupedByTableCategories.setPluralDisplayName("Tables");
        modelTablesGroupedByTableCategories.setAllowSave(false);
        modelTablesGroupedByTableCategories.setAllowNew(false);
        modelTablesGroupedByTableCategories.setAllowAdd(false);
        modelTablesGroupedByTableCategories.setAllowRemove(false);
        modelTablesGroupedByTableCategories.setAllowDelete(false);
        modelTablesGroupedByTableCategories.setAllowSearch(false);
        modelTablesGroupedByTableCategories.setAllowHubSearch(true);
        modelTablesGroupedByTableCategories.setAllowGotoEdit(true);
        modelTablesGroupedByTableCategories.setForJfc(getForJfc());
        return modelTablesGroupedByTableCategories;
    }
    
    
    public DatabaseModel getDatabaseSelectFromModel() {
        if (modelDatabaseSelectFrom != null) return modelDatabaseSelectFrom;
        modelDatabaseSelectFrom = new DatabaseModel(getDatabaseSelectFromHub());
        modelDatabaseSelectFrom.setDisplayName("Database");
        modelDatabaseSelectFrom.setPluralDisplayName("Databases");
        modelDatabaseSelectFrom.setForJfc(getForJfc());
        modelDatabaseSelectFrom.setAllowNew(false);
        modelDatabaseSelectFrom.setAllowSave(true);
        modelDatabaseSelectFrom.setAllowAdd(false);
        modelDatabaseSelectFrom.setAllowMove(false);
        modelDatabaseSelectFrom.setAllowRemove(false);
        modelDatabaseSelectFrom.setAllowDelete(false);
        modelDatabaseSelectFrom.setAllowSearch(true);
        modelDatabaseSelectFrom.setAllowHubSearch(true);
        modelDatabaseSelectFrom.setAllowGotoEdit(true);
        modelDatabaseSelectFrom.setViewOnly(getViewOnly());
        modelDatabaseSelectFrom.setAllowNew(false);
        modelDatabaseSelectFrom.setAllowTableFilter(true);
        modelDatabaseSelectFrom.setAllowTableSorting(true);
        modelDatabaseSelectFrom.setAllowCut(false);
        modelDatabaseSelectFrom.setAllowCopy(false);
        modelDatabaseSelectFrom.setAllowPaste(false);
        modelDatabaseSelectFrom.setAllowMultiSelect(false);
        return modelDatabaseSelectFrom;
    }
    public RepositoryModel getRepositoriesSelectFromModel() {
        if (modelRepositoriesSelectFrom != null) return modelRepositoriesSelectFrom;
        modelRepositoriesSelectFrom = new RepositoryModel(getRepositoriesSelectFromHub());
        modelRepositoriesSelectFrom.setDisplayName("Repository");
        modelRepositoriesSelectFrom.setPluralDisplayName("Repositories");
        modelRepositoriesSelectFrom.setForJfc(getForJfc());
        modelRepositoriesSelectFrom.setAllowNew(false);
        modelRepositoriesSelectFrom.setAllowSave(true);
        modelRepositoriesSelectFrom.setAllowAdd(false);
        modelRepositoriesSelectFrom.setAllowMove(false);
        modelRepositoriesSelectFrom.setAllowRemove(false);
        modelRepositoriesSelectFrom.setAllowDelete(false);
        modelRepositoriesSelectFrom.setAllowSearch(true);
        modelRepositoriesSelectFrom.setAllowHubSearch(true);
        modelRepositoriesSelectFrom.setAllowGotoEdit(true);
        modelRepositoriesSelectFrom.setViewOnly(getViewOnly());
        modelRepositoriesSelectFrom.setAllowNew(false);
        modelRepositoriesSelectFrom.setAllowTableFilter(true);
        modelRepositoriesSelectFrom.setAllowTableSorting(true);
        modelRepositoriesSelectFrom.setAllowCut(false);
        modelRepositoriesSelectFrom.setAllowCopy(false);
        modelRepositoriesSelectFrom.setAllowPaste(false);
        modelRepositoriesSelectFrom.setAllowMultiSelect(true);
        new HubMakeCopy(getRepositories(), modelRepositoriesSelectFrom.getMultiSelectHub());
        return modelRepositoriesSelectFrom;
    }
    public TableCategoryModel getTableCategoriesSelectFromModel() {
        if (modelTableCategoriesSelectFrom != null) return modelTableCategoriesSelectFrom;
        modelTableCategoriesSelectFrom = new TableCategoryModel(getTableCategoriesSelectFromHub());
        modelTableCategoriesSelectFrom.setDisplayName("Table Category");
        modelTableCategoriesSelectFrom.setPluralDisplayName("Table Categories");
        modelTableCategoriesSelectFrom.setForJfc(getForJfc());
        modelTableCategoriesSelectFrom.setAllowNew(false);
        modelTableCategoriesSelectFrom.setAllowSave(true);
        modelTableCategoriesSelectFrom.setAllowAdd(false);
        modelTableCategoriesSelectFrom.setAllowMove(false);
        modelTableCategoriesSelectFrom.setAllowRemove(false);
        modelTableCategoriesSelectFrom.setAllowDelete(false);
        modelTableCategoriesSelectFrom.setAllowSearch(true);
        modelTableCategoriesSelectFrom.setAllowHubSearch(true);
        modelTableCategoriesSelectFrom.setAllowGotoEdit(true);
        modelTableCategoriesSelectFrom.setViewOnly(getViewOnly());
        modelTableCategoriesSelectFrom.setAllowNew(false);
        modelTableCategoriesSelectFrom.setAllowTableFilter(true);
        modelTableCategoriesSelectFrom.setAllowTableSorting(true);
        modelTableCategoriesSelectFrom.setAllowCut(false);
        modelTableCategoriesSelectFrom.setAllowCopy(false);
        modelTableCategoriesSelectFrom.setAllowPaste(false);
        modelTableCategoriesSelectFrom.setAllowRecursive(false);
        modelTableCategoriesSelectFrom.setAllowMultiSelect(true);
        new HubMakeCopy(getTableCategories(), modelTableCategoriesSelectFrom.getMultiSelectHub());
        return modelTableCategoriesSelectFrom;
    }
    public TableModel getForeignTablesPickFromToTableModel() {
        if (modelForeignTablesPickFromToTable != null) return modelForeignTablesPickFromToTable;
        modelForeignTablesPickFromToTable = new TableModel(getForeignTablesPickFromToTableHub());
        modelForeignTablesPickFromToTable.setDisplayName("Foreign Table");
        modelForeignTablesPickFromToTable.setPluralDisplayName("Foreign Tables");
        modelForeignTablesPickFromToTable.setForJfc(getForJfc());
        modelForeignTablesPickFromToTable.setAllowNew(false);
        modelForeignTablesPickFromToTable.setAllowSave(true);
        modelForeignTablesPickFromToTable.setAllowAdd(false);
        modelForeignTablesPickFromToTable.setAllowMove(false);
        modelForeignTablesPickFromToTable.setAllowRemove(false);
        modelForeignTablesPickFromToTable.setAllowDelete(false);
        modelForeignTablesPickFromToTable.setAllowSearch(true);
        modelForeignTablesPickFromToTable.setAllowHubSearch(true);
        modelForeignTablesPickFromToTable.setAllowGotoEdit(true);
        modelForeignTablesPickFromToTable.setViewOnly(getViewOnly());
        modelForeignTablesPickFromToTable.setAllowNew(false);
        modelForeignTablesPickFromToTable.setAllowTableFilter(true);
        modelForeignTablesPickFromToTable.setAllowTableSorting(true);
        modelForeignTablesPickFromToTable.setAllowCut(false);
        modelForeignTablesPickFromToTable.setAllowCopy(false);
        modelForeignTablesPickFromToTable.setAllowPaste(false);
        modelForeignTablesPickFromToTable.setAllowMultiSelect(true);
        new HubMerger<ForeignTable, Table>(getForeignTables(), modelForeignTablesPickFromToTable.getMultiSelectHub(), ForeignTable.P_ToTable);
        return modelForeignTablesPickFromToTable;
    }
    public TableSearchModel getForeignTablesPickFromToTableSearchModel() {
        if (modelForeignTablesPickFromToTableSearch != null) return modelForeignTablesPickFromToTableSearch;
        modelForeignTablesPickFromToTableSearch = new TableSearchModel();
        OAFilter filter = new OAInFilter(getForeignTables(), ForeignTablePP.table().database().tables().pp);
        modelForeignTablesPickFromToTableSearch.getTableSearch().setExtraWhereFilter(filter);
        return modelForeignTablesPickFromToTableSearch;
    }
    public DatabaseSearchModel getDatabaseSearchModel() {
        if (modelDatabaseSearch != null) return modelDatabaseSearch;
        modelDatabaseSearch = new DatabaseSearchModel();
        HubSelectDelegate.adoptWhereHub(modelDatabaseSearch.getHub(), Table.P_Database, getHub());
        return modelDatabaseSearch;
    }
    public ColumnSearchModel getColumnsSearchModel() {
        if (modelColumnsSearch != null) return modelColumnsSearch;
        modelColumnsSearch = new ColumnSearchModel();
        return modelColumnsSearch;
    }
    public ForeignTableSearchModel getForeignTablesSearchModel() {
        if (modelForeignTablesSearch != null) return modelForeignTablesSearch;
        modelForeignTablesSearch = new ForeignTableSearchModel();
        return modelForeignTablesSearch;
    }
    public QueryTableSearchModel getQueryTablesSearchModel() {
        if (modelQueryTablesSearch != null) return modelQueryTablesSearch;
        modelQueryTablesSearch = new QueryTableSearchModel();
        return modelQueryTablesSearch;
    }
    public RepositorySearchModel getRepositoriesSearchModel() {
        if (modelRepositoriesSearch != null) return modelRepositoriesSearch;
        modelRepositoriesSearch = new RepositorySearchModel();
        OAFilter filter = new OAInFilter(TableModel.this.getHub(), TablePP.database().projects().repositories().pp);
        modelRepositoriesSearch.getRepositorySearch().setExtraWhereFilter(filter);
        return modelRepositoriesSearch;
    }
    public TableCategorySearchModel getTableCategoriesSearchModel() {
        if (modelTableCategoriesSearch != null) return modelTableCategoriesSearch;
        modelTableCategoriesSearch = new TableCategorySearchModel();
        OAFilter filter = new OAInFilter(TableModel.this.getHub(), TablePP.database().tableCategories().pp);
        modelTableCategoriesSearch.getTableCategorySearch().setExtraWhereFilter(filter);
        return modelTableCategoriesSearch;
    }
    public ForeignTableSearchModel getTableForeignTablesSearchModel() {
        if (modelTableForeignTablesSearch != null) return modelTableForeignTablesSearch;
        modelTableForeignTablesSearch = new ForeignTableSearchModel();
        return modelTableForeignTablesSearch;
    }
    
    public HubCopy<Table> createHubCopy() {
        Hub<Table> hubTablex = new Hub<>(Table.class);
        HubCopy<Table> hc = new HubCopy<>(getHub(), hubTablex, true);
        return hc;
    }
    public TableModel createCopy() {
        TableModel mod = new TableModel(createHubCopy().getHub());
        return mod;
    }
}

