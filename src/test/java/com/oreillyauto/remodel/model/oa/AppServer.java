// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import javax.xml.bind.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "appServer",
    pluralName = "AppServers",
    shortName = "as",
    displayName = "App Server",
    isLookup = true,
    isPreSelect = true,
    isProcessed = true,
    displayProperty = "appUserLogin.hostName"
)
@OATable(
    indexes = {
        @OAIndex(name = "AppServerAppUserLogin", fkey = true, columns = { @OAIndexColumn(name = "AppUserLoginId") })
    }
)
@XmlRootElement(name = "appServer")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.NONE)
public class AppServer extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(AppServer.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Started = "Started";
    public static final String P_Started = "Started";
    public static final String PROPERTY_DemoMode = "DemoMode";
    public static final String P_DemoMode = "DemoMode";
    public static final String PROPERTY_Release = "Release";
    public static final String P_Release = "Release";
     
     
    public static final String PROPERTY_AppUserLogin = "AppUserLogin";
    public static final String P_AppUserLogin = "AppUserLogin";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile OADateTime started;
    protected volatile boolean demoMode;
    protected volatile String release;
     
    // Links to other objects.
    protected volatile transient AppUserLogin appUserLogin;
     
    public AppServer() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public AppServer(int id) {
        this();
        setId(id);
    }
     

    @XmlAttribute(name="oaSingleId")
    public Integer getJaxbGuid() {
        return super.getJaxbGuid();
    }

    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @XmlTransient
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @XmlID
    @XmlAttribute(name="id")
    public String getJaxbId() {
        // note: jaxb spec requires id to be a string
        if (!getJaxbShouldInclude(P_Id)) return null;
        return ""+id;
    }
    public void setJaxbId(String id) {
        if (getJaxbAllowPropertyChange(P_Id, this.id, id)) {
            setId((int) OAConv.convert(int.class, id));
        }
    }

    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @XmlElement(name="created", nillable=true)
    public OADateTime getJaxbCreated() {
        if (!getJaxbShouldInclude(P_Created)) return null;
        return getCreated();
    }
    public void setJaxbCreated(OADateTime newValue) {
        if (getJaxbAllowPropertyChange(P_Created, this.created, newValue)) {
            setCreated(newValue);
        }
    }

    @OAProperty(displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStarted() {
        return started;
    }
    public void setStarted(OADateTime newValue) {
        OADateTime old = started;
        fireBeforePropertyChange(P_Started, old, newValue);
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
    @XmlElement(name="started", nillable=true)
    public OADateTime getJaxbStarted() {
        if (!getJaxbShouldInclude(P_Started)) return null;
        return getStarted();
    }
    public void setJaxbStarted(OADateTime newValue) {
        if (getJaxbAllowPropertyChange(P_Started, this.started, newValue)) {
            setStarted(newValue);
        }
    }

    @OAProperty(displayName = "Demo Mode", trackPrimitiveNull = false, displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getDemoMode() {
        return demoMode;
    }
    public boolean isDemoMode() {
        return getDemoMode();
    }
    public void setDemoMode(boolean newValue) {
        boolean old = demoMode;
        fireBeforePropertyChange(P_DemoMode, old, newValue);
        this.demoMode = newValue;
        firePropertyChange(P_DemoMode, old, this.demoMode);
    }
    @XmlElement(name="demoMode")
    public Boolean getJaxbDemoMode() {
        if (!getJaxbShouldInclude(P_DemoMode)) return null;
        return getDemoMode();
    }
    public void setJaxbDemoMode(Boolean newValue) {
        if (getJaxbAllowPropertyChange(P_DemoMode, this.demoMode, newValue)) {
            setDemoMode(newValue);
        }
    }

    @OAProperty(maxLength = 18, displayLength = 18, columnLength = 7, isProcessed = true)
    @OAColumn(maxLength = 18)
    public String getRelease() {
        return release;
    }
    public void setRelease(String newValue) {
        String old = release;
        fireBeforePropertyChange(P_Release, old, newValue);
        this.release = newValue;
        firePropertyChange(P_Release, old, this.release);
    }
    @XmlElement(name="release", nillable=true)
    public String getJaxbRelease() {
        if (!getJaxbShouldInclude(P_Release)) return null;
        return getRelease();
    }
    public void setJaxbRelease(String newValue) {
        if (getJaxbAllowPropertyChange(P_Release, this.release, newValue)) {
            setRelease(newValue);
        }
    }

    @OAOne(
        displayName = "App User Login", 
        reverseName = AppUserLogin.P_AppServers, 
        isProcessed = true
    )
    @OAFkey(columns = {"AppUserLoginId"})
    @XmlTransient
    public AppUserLogin getAppUserLogin() {
        if (appUserLogin == null) {
            appUserLogin = (AppUserLogin) getObject(P_AppUserLogin);
        }
        return appUserLogin;
    }
    public void setAppUserLogin(AppUserLogin newValue) {
        AppUserLogin old = this.appUserLogin;
        fireBeforePropertyChange(P_AppUserLogin, old, newValue);
        this.appUserLogin = newValue;
        firePropertyChange(P_AppUserLogin, old, this.appUserLogin);
    }
    @XmlElement(name="appUserLogin", nillable=true)
    public AppUserLogin getJaxbAppUserLogin() {
        Object obj = super.getJaxbObject(P_AppUserLogin);
        return (AppUserLogin) obj;
    }
    public void setJaxbAppUserLogin(AppUserLogin newValue) {
        if (getJaxbAllowPropertyChange(P_AppUserLogin, this.appUserLogin, newValue)) {
            setAppUserLogin(newValue);
        }
    }
    @XmlElement(name="refAppUserLogin")
    @XmlIDREF
    public AppUserLogin getJaxbRefAppUserLogin() {
        Object obj = super.getJaxbRefObject(P_AppUserLogin);
        return (AppUserLogin) obj;
    }
    public void setJaxbRefAppUserLogin(AppUserLogin newValue) {
        setJaxbAppUserLogin(newValue);
    }
    @XmlElement(name="appUserLoginId", nillable=true)
    public String getJaxbAppUserLoginId() {
        String s = super.getJaxbId(P_AppUserLogin);
        return s;
    }
    public void setJaxbAppUserLoginId(String id) {
        setJaxbId(P_AppUserLogin, id);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.started = new OADateTime(timestamp);
        this.demoMode = rs.getBoolean(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AppServer.P_DemoMode, true);
        }
        this.release = rs.getString(5);
        int appUserLoginFkey = rs.getInt(6);
        if (!rs.wasNull() && appUserLoginFkey > 0) {
            setProperty(P_AppUserLogin, new OAObjectKey(appUserLoginFkey));
        }
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
    public static AppServer jaxbCreate() {
        AppServer appServer = (AppServer) OAObject.jaxbCreateInstance(AppServer.class);
        if (appServer == null) appServer = new AppServer();
        return appServer;
    }
}
 
