// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "column",
    pluralName = "Columns",
    shortName = "clm",
    displayName = "Column",
    displayProperty = "name",
    filterClasses = {ColumnPkeyFilter.class},
    rootTreePropertyPaths = {
        "[Database]."+Database.P_Tables+"."+Table.P_Columns
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "ColumnColumnType", fkey = true, columns = { @OAIndexColumn(name = "ColumnTypeId") }), 
        @OAIndex(name = "ColumnTable", fkey = true, columns = { @OAIndexColumn(name = "TableId") })
    }
)
public class Column extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Column.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_Name = "Name";
    public static final String P_PrimaryKey = "PrimaryKey";
    public static final String P_AutoNumber = "AutoNumber";
    public static final String P_Use = "Use";
    public static final String P_NewName = "NewName";
    public static final String P_Description = "Description";
    public static final String P_Size = "Size";
    public static final String P_Decimals = "Decimals";
    public static final String P_Seq = "Seq";
     
     
    public static final String P_ColumnType = "ColumnType";
    public static final String P_ForeignTableColumns = "ForeignTableColumns";
    public static final String P_ForeignTableForeignColumns = "ForeignTableForeignColumns";
    public static final String P_IndexColumns = "IndexColumns";
    public static final String P_JsonObject = "JsonObject";
    public static final String P_QueryColumns = "QueryColumns";
    public static final String P_QuerySorts = "QuerySorts";
    public static final String P_Table = "Table";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile boolean primaryKey;
    protected volatile boolean autoNumber;
    protected volatile boolean use;
    protected volatile String newName;
    protected volatile String description;
    protected volatile int size;
    protected volatile int decimals;
    protected volatile int seq;
     
    // Links to other objects.
    protected volatile transient ColumnType columnType;
    protected transient Hub<IndexColumn> hubIndexColumns;
    protected volatile transient JsonObject jsonObject;
    protected volatile transient Table table;
     
    public Column() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public Column(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayName = "Primary Key", displayLength = 5, columnLength = 11)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getPrimaryKey() {
        return primaryKey;
    }
    public boolean isPrimaryKey() {
        return getPrimaryKey();
    }
    public void setPrimaryKey(boolean newValue) {
        boolean old = primaryKey;
        fireBeforePropertyChange(P_PrimaryKey, old, newValue);
        this.primaryKey = newValue;
        firePropertyChange(P_PrimaryKey, old, this.primaryKey);
    }
    @OAProperty(displayName = "Auto Number", trackPrimitiveNull = false, displayLength = 5, columnLength = 11)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getAutoNumber() {
        return autoNumber;
    }
    public boolean isAutoNumber() {
        return getAutoNumber();
    }
    public void setAutoNumber(boolean newValue) {
        boolean old = autoNumber;
        fireBeforePropertyChange(P_AutoNumber, old, newValue);
        this.autoNumber = newValue;
        firePropertyChange(P_AutoNumber, old, this.autoNumber);
    }
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUse() {
        return use;
    }
    public boolean isUse() {
        return getUse();
    }
    public void setUse(boolean newValue) {
        boolean old = use;
        fireBeforePropertyChange(P_Use, old, newValue);
        this.use = newValue;
        firePropertyChange(P_Use, old, this.use);
    }
    @OAProperty(displayName = "New Name", maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getNewName() {
        return newName;
    }
    public void setNewName(String newValue) {
        String old = newName;
        fireBeforePropertyChange(P_NewName, old, newValue);
        this.newName = newValue;
        firePropertyChange(P_NewName, old, this.newName);
    }
    @OAProperty(maxLength = 150, displayLength = 20)
    @OAColumn(maxLength = 150)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
    @OAProperty(displayLength = 6)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSize() {
        return size;
    }
    public void setSize(int newValue) {
        int old = size;
        fireBeforePropertyChange(P_Size, old, newValue);
        this.size = newValue;
        firePropertyChange(P_Size, old, this.size);
    }
    @OAProperty(displayLength = 6, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getDecimals() {
        return decimals;
    }
    public void setDecimals(int newValue) {
        int old = decimals;
        fireBeforePropertyChange(P_Decimals, old, newValue);
        this.decimals = newValue;
        firePropertyChange(P_Decimals, old, this.decimals);
    }
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OAOne(
        displayName = "Column Type", 
        reverseName = ColumnType.P_Columns, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ColumnTypeId"})
    public ColumnType getColumnType() {
        if (columnType == null) {
            columnType = (ColumnType) getObject(P_ColumnType);
        }
        return columnType;
    }
    public void setColumnType(ColumnType newValue) {
        ColumnType old = this.columnType;
        fireBeforePropertyChange(P_ColumnType, old, newValue);
        this.columnType = newValue;
        firePropertyChange(P_ColumnType, old, this.columnType);
    }
    @OAMany(
        displayName = "Foreign Table Columns", 
        toClass = ForeignTableColumn.class, 
        reverseName = ForeignTableColumn.P_FromColumn, 
        createMethod = false
    )
    private Hub<ForeignTableColumn> getForeignTableColumns() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        displayName = "Foreign Table Columns", 
        toClass = ForeignTableColumn.class, 
        reverseName = ForeignTableColumn.P_ToColumn, 
        createMethod = false
    )
    private Hub<ForeignTableColumn> getForeignTableForeignColumns() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        displayName = "Index Columns", 
        toClass = IndexColumn.class, 
        reverseName = IndexColumn.P_Column
    )
    public Hub<IndexColumn> getIndexColumns() {
        if (hubIndexColumns == null) {
            hubIndexColumns = (Hub<IndexColumn>) getHub(P_IndexColumns);
        }
        return hubIndexColumns;
    }
    @OAOne(
        displayName = "Json Object", 
        reverseName = JsonObject.P_Column, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    public JsonObject getJsonObject() {
        if (jsonObject == null) {
            jsonObject = (JsonObject) getObject(P_JsonObject);
        }
        return jsonObject;
    }
    public void setJsonObject(JsonObject newValue) {
        JsonObject old = this.jsonObject;
        fireBeforePropertyChange(P_JsonObject, old, newValue);
        this.jsonObject = newValue;
        firePropertyChange(P_JsonObject, old, this.jsonObject);
    }
    @OAObjCallback(enabledProperty = Column.P_ColumnType+"."+ColumnType.P_IsJsonb)
    public void jsonObjectCallback(OAObjectCallback cb) {
        if (cb == null) return;
        switch (cb.getType()) {
        }
    }
    @OAMany(
        displayName = "Query Columns", 
        toClass = QueryColumn.class, 
        reverseName = QueryColumn.P_Column, 
        createMethod = false
    )
    private Hub<QueryColumn> getQueryColumns() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        displayName = "Query Sorts", 
        toClass = QuerySort.class, 
        reverseName = QuerySort.P_Column, 
        createMethod = false
    )
    private Hub<QuerySort> getQuerySorts() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAOne(
        reverseName = Table.P_Columns, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"TableId"})
    public Table getTable() {
        if (table == null) {
            table = (Table) getObject(P_Table);
        }
        return table;
    }
    public void setTable(Table newValue) {
        Table old = this.table;
        fireBeforePropertyChange(P_Table, old, newValue);
        this.table = newValue;
        firePropertyChange(P_Table, old, this.table);
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.primaryKey = rs.getBoolean(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Column.P_PrimaryKey, true);
        }
        this.autoNumber = rs.getBoolean(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Column.P_AutoNumber, true);
        }
        this.use = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Column.P_Use, true);
        }
        this.newName = rs.getString(7);
        this.description = rs.getString(8);
        this.size = (int) rs.getInt(9);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Column.P_Size, true);
        }
        this.decimals = (int) rs.getInt(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Column.P_Decimals, true);
        }
        this.seq = (int) rs.getInt(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Column.P_Seq, true);
        }
        int columnTypeFkey = rs.getInt(12);
        if (!rs.wasNull() && columnTypeFkey > 0) {
            setProperty(P_ColumnType, new OAObjectKey(columnTypeFkey));
        }
        int tableFkey = rs.getInt(13);
        if (!rs.wasNull() && tableFkey > 0) {
            setProperty(P_Table, new OAObjectKey(tableFkey));
        }
        if (rs.getMetaData().getColumnCount() != 13) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
