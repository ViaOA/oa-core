// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "dataType",
    pluralName = "DataTypes",
    shortName = "dtt",
    displayName = "Data Type",
    isLookup = true,
    isPreSelect = true,
    isProcessed = true,
    displayProperty = "name",
    sortProperty = "seq"
)
@OATable(
)
public class DataType extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(DataType.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_Name = "Name";
    public static final String P_Description = "Description";
    public static final String P_Type = "Type";
    public static final String P_TypeAsString = "TypeString";
    public static final String P_IsNumeric = "IsNumeric";
    public static final String P_IsDecimal = "IsDecimal";
    public static final String P_Seq = "Seq";
     
     
    public static final String P_CalcColumnTypes = "CalcColumnTypes";
    public static final String P_CalcJsonColumns = "CalcJsonColumns";
    public static final String P_ColumnTypes = "ColumnTypes";
    public static final String P_JavaTypes = "JavaTypes";
    public static final String P_JsonColumns = "JsonColumns";
    public static final String P_SqlTypes = "SqlTypes";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile String description;
    protected volatile int type;
    public static enum Type {
        Unassigned("Unassigned"),
        Unknown("Unknown"),
        booleanType("boolean"),
        byteType("byte"),
        charType("char"),
        shortType("short"),
        intType("int"),
        longType("long"),
        floatType("float"),
        doubleType("double"),
        String("String"),
        StringLong("String (Long)"),
        guid("Guid"),
        Date("Date"),
        Time("Time"),
        DateTime("Date Time"),
        Timestamp("Timestamp"),
        Currency("Currency"),
        Number("Number"),
        Font("Font"),
        Color("Color"),
        Dimension("Dimension"),
        Rectangle("Rectangle"),
        Blob("Blob"),
        Timezone("Timezone");

        private String display;
        Type(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int TYPE_Unassigned = 0;
    public static final int TYPE_Unknown = 1;
    public static final int TYPE_booleanType = 2;
    public static final int TYPE_byteType = 3;
    public static final int TYPE_charType = 4;
    public static final int TYPE_shortType = 5;
    public static final int TYPE_intType = 6;
    public static final int TYPE_longType = 7;
    public static final int TYPE_floatType = 8;
    public static final int TYPE_doubleType = 9;
    public static final int TYPE_String = 10;
    public static final int TYPE_StringLong = 11;
    public static final int TYPE_guid = 12;
    public static final int TYPE_Date = 13;
    public static final int TYPE_Time = 14;
    public static final int TYPE_DateTime = 15;
    public static final int TYPE_Timestamp = 16;
    public static final int TYPE_Currency = 17;
    public static final int TYPE_Number = 18;
    public static final int TYPE_Font = 19;
    public static final int TYPE_Color = 20;
    public static final int TYPE_Dimension = 21;
    public static final int TYPE_Rectangle = 22;
    public static final int TYPE_Blob = 23;
    public static final int TYPE_Timezone = 24;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("Unassigned");
        hubType.addElement("Unknown");
        hubType.addElement("boolean");
        hubType.addElement("byte");
        hubType.addElement("char");
        hubType.addElement("short");
        hubType.addElement("int");
        hubType.addElement("long");
        hubType.addElement("float");
        hubType.addElement("double");
        hubType.addElement("String");
        hubType.addElement("String (Long)");
        hubType.addElement("Guid");
        hubType.addElement("Date");
        hubType.addElement("Time");
        hubType.addElement("Date Time");
        hubType.addElement("Timestamp");
        hubType.addElement("Currency");
        hubType.addElement("Number");
        hubType.addElement("Font");
        hubType.addElement("Color");
        hubType.addElement("Dimension");
        hubType.addElement("Rectangle");
        hubType.addElement("Blob");
        hubType.addElement("Timezone");
    }
    protected volatile boolean isNumeric;
    protected volatile boolean isDecimal;
    protected volatile int seq;
     
    // Links to other objects.
    protected transient Hub<JavaType> hubJavaTypes;
     
    public DataType() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public DataType(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 25, displayLength = 20)
    @OAColumn(maxLength = 25)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(maxLength = 150, displayLength = 20)
    @OAColumn(maxLength = 150)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
    @OAProperty(displayLength = 6, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    public void setType(int newValue) {
        int old = type;
        fireBeforePropertyChange(P_Type, old, newValue);
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
        firePropertyChange(P_Type + "String");
        firePropertyChange(P_Type + "Enum");
    }

    public String getTypeString() {
        Type type = getTypeEnum();
        if (type == null) return null;
        return type.name();
    }
    public void setTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            Type type = Type.valueOf(val);
            if (type != null) x = type.ordinal();
        }
        if (x < 0) setNull(P_Type);
        else setType(x);
    }


    public Type getTypeEnum() {
        if (isNull(P_Type)) return null;
        final int val = getType();
        if (val < 0 || val >= Type.values().length) return null;
        return Type.values()[val];
    }

    public void setTypeEnum(Type val) {
        if (val == null) {
            setNull(P_Type);
        }
        else {
            setType(val.ordinal());
        }
    }
    @OAProperty(displayName = "Is Numeric", trackPrimitiveNull = false, displayLength = 5, columnLength = 10)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getIsNumeric() {
        return isNumeric;
    }
    public boolean isIsNumeric() {
        return getIsNumeric();
    }
    public void setIsNumeric(boolean newValue) {
        boolean old = isNumeric;
        fireBeforePropertyChange(P_IsNumeric, old, newValue);
        this.isNumeric = newValue;
        firePropertyChange(P_IsNumeric, old, this.isNumeric);
    }
    @OAProperty(displayName = "Is Decimal", trackPrimitiveNull = false, displayLength = 5, columnLength = 10)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getIsDecimal() {
        return isDecimal;
    }
    public boolean isIsDecimal() {
        return getIsDecimal();
    }
    public void setIsDecimal(boolean newValue) {
        boolean old = isDecimal;
        fireBeforePropertyChange(P_IsDecimal, old, newValue);
        this.isDecimal = newValue;
        firePropertyChange(P_IsDecimal, old, this.isDecimal);
    }
     
    @OAObjCallback(visibleProperty = DataType.P_IsNumeric)
    public void isDecimalCallback(OAObjectCallback callback) {
        if (callback == null) return;
        switch (callback.getType()) {
        }
    }
    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OAMany(
        displayName = "Column Types", 
        toClass = ColumnType.class, 
        isCalculated = true, 
        reverseName = ColumnType.P_CalcDataType, 
        createMethod = false
    )
    private Hub<ColumnType> getCalcColumnTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        displayName = "Json Columns", 
        toClass = JsonColumn.class, 
        isCalculated = true, 
        reverseName = JsonColumn.P_CalcDataType, 
        createMethod = false
    )
    private Hub<JsonColumn> getCalcJsonColumns() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        displayName = "Column Types", 
        toClass = ColumnType.class, 
        reverseName = ColumnType.P_DataType, 
        createMethod = false
    )
    private Hub<ColumnType> getColumnTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        displayName = "Java Types", 
        toClass = JavaType.class, 
        reverseName = JavaType.P_DataType
    )
    public Hub<JavaType> getJavaTypes() {
        if (hubJavaTypes == null) {
            hubJavaTypes = (Hub<JavaType>) getHub(P_JavaTypes);
        }
        return hubJavaTypes;
    }
    @OAMany(
        displayName = "Json Columns", 
        toClass = JsonColumn.class, 
        reverseName = JsonColumn.P_DataType, 
        createMethod = false
    )
    private Hub<JsonColumn> getJsonColumns() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    @OAMany(
        displayName = "Sql Types", 
        toClass = SqlType.class, 
        reverseName = SqlType.P_DataType, 
        createMethod = false
    )
    private Hub<SqlType> getSqlTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.description = rs.getString(4);
        this.type = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, DataType.P_Type, true);
        }
        this.isNumeric = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, DataType.P_IsNumeric, true);
        }
        this.isDecimal = rs.getBoolean(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, DataType.P_IsDecimal, true);
        }
        this.seq = (int) rs.getInt(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, DataType.P_Seq, true);
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
