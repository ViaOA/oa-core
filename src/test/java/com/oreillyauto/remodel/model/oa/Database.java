// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Logger;

import com.viaoa.annotation.OACalculatedProperty;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAIndex;
import com.viaoa.annotation.OAIndexColumn;
import com.viaoa.annotation.OALinkTable;
import com.viaoa.annotation.OAMany;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.annotation.OATable;
import com.viaoa.hub.Hub;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectKey;
import com.viaoa.util.OADateTime;
import com.viaoa.util.OAString;

@OAClass(lowerName = "database", pluralName = "Databases", shortName = "dtb", displayName = "Database", isLookup = true, isPreSelect = true, displayProperty = "display", sortProperty = "name")
@OATable(indexes = {
		@OAIndex(name = "DatabaseDatabaseType", fkey = true, columns = { @OAIndexColumn(name = "DatabaseTypeId") })
})
public class Database extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(Database.class.getName());

	public static final String P_Id = "Id";
	public static final String P_Created = "Created";
	public static final String P_Name = "Name";
	public static final String P_Description = "Description";
	public static final String P_CatalogName = "CatalogName";
	public static final String P_SchemeName = "SchemeName";
	public static final String P_DriverName = "DriverName";
	public static final String P_JdbcUrl = "JdbcUrl";
	public static final String P_UserId = "UserId";
	public static final String P_Password = "Password";
	public static final String P_ModelFileName = "ModelFileName";
	public static final String P_CodeDirectory = "CodeDirectory";
	public static final String P_Console = "Console";
	public static final String P_Notes = "Notes";

	public static final String P_Display = "Display";

	public static final String P_DatabaseType = "DatabaseType";
	public static final String P_Projects = "Projects";
	public static final String P_TableCategories = "TableCategories";
	public static final String P_Tables = "Tables";

	public static final String M_Load = "Load";
	protected volatile int id;
	protected volatile OADateTime created;
	protected volatile String name;
	protected volatile String description;
	protected volatile String catalogName;
	protected volatile String schemeName;
	protected volatile String driverName;
	protected volatile String jdbcUrl;
	protected volatile String userId;
	protected volatile String password;
	protected volatile String modelFileName;
	protected volatile String codeDirectory;
	protected volatile String console;
	protected volatile String notes;

	// Links to other objects.
	protected volatile transient DatabaseType databaseType;
	protected transient Hub<Project> hubProjects;
	protected transient Hub<TableCategory> hubTableCategories;
	protected transient Hub<Table> hubTables;

	public Database() {
		if (!isLoading()) {
			setObjectDefaults();
		}
	}

	@Override
	public void setObjectDefaults() {
		setCreated(new OADateTime());
	}

	public Database(int id) {
		this();
		setId(id);
	}

	@OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
	@OAId()
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getCreated() {
		return created;
	}

	public void setCreated(OADateTime newValue) {
		OADateTime old = created;
		fireBeforePropertyChange(P_Created, old, newValue);
		this.created = newValue;
		firePropertyChange(P_Created, old, this.created);
	}

	@OAProperty(maxLength = 35, displayLength = 20)
	@OAColumn(maxLength = 35)
	public String getName() {
		return name;
	}

	public void setName(String newValue) {
		String old = name;
		fireBeforePropertyChange(P_Name, old, newValue);
		this.name = newValue;
		firePropertyChange(P_Name, old, this.name);
	}

	@OAProperty(maxLength = 150, displayLength = 20)
	@OAColumn(maxLength = 150)
	public String getDescription() {
		return description;
	}

	public void setDescription(String newValue) {
		String old = description;
		fireBeforePropertyChange(P_Description, old, newValue);
		this.description = newValue;
		firePropertyChange(P_Description, old, this.description);
	}

	@OAProperty(displayName = "Catalog Name", maxLength = 35, displayLength = 20)
	@OAColumn(maxLength = 35)
	public String getCatalogName() {
		return catalogName;
	}

	public void setCatalogName(String newValue) {
		String old = catalogName;
		fireBeforePropertyChange(P_CatalogName, old, newValue);
		this.catalogName = newValue;
		firePropertyChange(P_CatalogName, old, this.catalogName);
	}

	@OAProperty(displayName = "Scheme Name", maxLength = 35, displayLength = 20)
	@OAColumn(maxLength = 35)
	public String getSchemeName() {
		return schemeName;
	}

	public void setSchemeName(String newValue) {
		String old = schemeName;
		fireBeforePropertyChange(P_SchemeName, old, newValue);
		this.schemeName = newValue;
		firePropertyChange(P_SchemeName, old, this.schemeName);
	}

	@OAProperty(displayName = "Driver Name", maxLength = 75, displayLength = 20)
	@OAColumn(maxLength = 75)
	public String getDriverName() {
		return driverName;
	}

	public void setDriverName(String newValue) {
		String old = driverName;
		fireBeforePropertyChange(P_DriverName, old, newValue);
		this.driverName = newValue;
		firePropertyChange(P_DriverName, old, this.driverName);
	}

	@OAProperty(displayName = "Jdbc Url", maxLength = 150, displayLength = 20)
	@OAColumn(maxLength = 150)
	public String getJdbcUrl() {
		return jdbcUrl;
	}

	public void setJdbcUrl(String newValue) {
		String old = jdbcUrl;
		fireBeforePropertyChange(P_JdbcUrl, old, newValue);
		this.jdbcUrl = newValue;
		firePropertyChange(P_JdbcUrl, old, this.jdbcUrl);
	}

	@OAProperty(displayName = "User Id", maxLength = 30, displayLength = 12)
	@OAColumn(maxLength = 30)
	public String getUserId() {
		return userId;
	}

	public void setUserId(String newValue) {
		String old = userId;
		fireBeforePropertyChange(P_UserId, old, newValue);
		this.userId = newValue;
		firePropertyChange(P_UserId, old, this.userId);
	}

	@OAProperty(maxLength = 30, displayLength = 12, isEncrypted = true)
	@OAColumn(maxLength = 30)
	public String getPassword() {
		return password;
	}

	public void setPassword(String newValue) {
		String old = password;
		fireBeforePropertyChange(P_Password, old, newValue);
		this.password = newValue;
		firePropertyChange(P_Password, old, this.password);
	}

	@OAProperty(displayName = "Model File Name", maxLength = 150, displayLength = 20, isFileName = true)
	@OAColumn(maxLength = 150)
	public String getModelFileName() {
		return modelFileName;
	}

	public void setModelFileName(String newValue) {
		String old = modelFileName;
		fireBeforePropertyChange(P_ModelFileName, old, newValue);
		this.modelFileName = newValue;
		firePropertyChange(P_ModelFileName, old, this.modelFileName);
	}

	@OAProperty(displayName = "Code Directory", maxLength = 250, displayLength = 20)
	@OAColumn(maxLength = 250)
	public String getCodeDirectory() {
		return codeDirectory;
	}

	public void setCodeDirectory(String newValue) {
		String old = codeDirectory;
		fireBeforePropertyChange(P_CodeDirectory, old, newValue);
		this.codeDirectory = newValue;
		firePropertyChange(P_CodeDirectory, old, this.codeDirectory);
	}

	@OAProperty(maxLength = 250, displayLength = 20)
	public String getConsole() {
		return console;
	}

	public void setConsole(String newValue) {
		String old = console;
		fireBeforePropertyChange(P_Console, old, newValue);
		this.console = newValue;
		firePropertyChange(P_Console, old, this.console);
	}

	@OAProperty(displayLength = 30, columnLength = 20, isHtml = true)
	@OAColumn(sqlType = java.sql.Types.CLOB)
	public String getNotes() {
		return notes;
	}

	public void setNotes(String newValue) {
		String old = notes;
		fireBeforePropertyChange(P_Notes, old, newValue);
		this.notes = newValue;
		firePropertyChange(P_Notes, old, this.notes);
	}

	@OACalculatedProperty(displayLength = 20, columnLength = 18, properties = { P_Name, P_DatabaseType + "." + DatabaseType.P_Name })
	public String getDisplay() {
		String display = "";
		String name = this.getName();
		display = OAString.concat(display, name, " ");

		name = null;
		DatabaseType databaseType = this.getDatabaseType();
		if (databaseType != null) {
			name = databaseType.getName();
		}
		display = OAString.concat(display, name, " ");
		return display;
	}

	@OAOne(displayName = "Database Type", reverseName = DatabaseType.P_Databases, allowCreateNew = false)
	@OAFkey(columns = { "DatabaseTypeId" })
	public DatabaseType getDatabaseType() {
		if (databaseType == null) {
			databaseType = (DatabaseType) getObject(P_DatabaseType);
		}
		return databaseType;
	}

	public void setDatabaseType(DatabaseType newValue) {
		DatabaseType old = this.databaseType;
		fireBeforePropertyChange(P_DatabaseType, old, newValue);
		this.databaseType = newValue;
		firePropertyChange(P_DatabaseType, old, this.databaseType);
	}

	@OAMany(toClass = Project.class, reverseName = Project.P_Databases)
	@OALinkTable(name = "ProjectDatabase", indexName = "ProjectDatabas", columns = { "DatabaseId" })
	public Hub<Project> getProjects() {
		if (hubProjects == null) {
			hubProjects = (Hub<Project>) getHub(P_Projects);
		}
		return hubProjects;
	}

	@OAMany(displayName = "Table Categories", toClass = TableCategory.class, recursive = true, owner = true, reverseName = TableCategory.P_Database, cascadeSave = true, cascadeDelete = true)
	public Hub<TableCategory> getTableCategories() {
		if (hubTableCategories == null) {
			hubTableCategories = (Hub<TableCategory>) getHub(P_TableCategories);
		}
		return hubTableCategories;
	}

	@OAMany(toClass = Table.class, owner = true, reverseName = Table.P_Database, cascadeSave = true, cascadeDelete = true, sortProperty = Table.P_Name)
	public Hub<Table> getTables() {
		if (hubTables == null) {
			hubTables = (Hub<Table>) getHub(P_Tables);
		}
		return hubTables;
	}

	@OAMethod(displayName = "Load")
	public void load() {
		// use this to run on server (remote)
		if (isRemoteAvailable()) {
			remote();
			return;
		}
		/*
		LoadDatabaseMetadata loader = new LoadDatabaseMetadata(this);
		try {
		    loader.load();
		} catch (Exception e) {
		    throw new RuntimeException("Exception while loading DB metadata", e);
		}
		*/
	}

	public void load(ResultSet rs, int id) throws SQLException {
		this.id = id;
		java.sql.Timestamp timestamp;
		timestamp = rs.getTimestamp(2);
		if (timestamp != null) {
			this.created = new OADateTime(timestamp);
		}
		this.name = rs.getString(3);
		this.description = rs.getString(4);
		this.catalogName = rs.getString(5);
		this.schemeName = rs.getString(6);
		this.driverName = rs.getString(7);
		this.jdbcUrl = rs.getString(8);
		this.userId = rs.getString(9);
		this.password = rs.getString(10);
		this.modelFileName = rs.getString(11);
		this.codeDirectory = rs.getString(12);
		this.notes = rs.getString(13);
		int databaseTypeFkey = rs.getInt(14);
		if (!rs.wasNull() && databaseTypeFkey > 0) {
			setProperty(P_DatabaseType, new OAObjectKey(databaseTypeFkey));
		}
		if (rs.getMetaData().getColumnCount() != 14) {
			throw new SQLException("invalid number of columns for load method");
		}

		this.changedFlag = false;
		this.newFlag = false;
	}
}
