// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "databaseType",
    pluralName = "DatabaseTypes",
    shortName = "dtt",
    displayName = "Database Type",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name"
)
@OATable(
)
public class DatabaseType extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(DatabaseType.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_Name = "Name";
    public static final String P_Description = "Description";
    public static final String P_DriverName = "DriverName";
    public static final String P_JdbcUrl = "JdbcUrl";
    public static final String P_Type = "Type";
    public static final String P_TypeAsString = "TypeString";
     
     
    public static final String P_ColumnTypes = "ColumnTypes";
    public static final String P_Databases = "Databases";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile String description;
    protected volatile String driverName;
    protected volatile String jdbcUrl;
    protected volatile int type;
    public static enum Type {
        Unassigned("Unassigned"),
        Unknown("Unknown"),
        Derby("Derby"),
        SQLServer("SQL Server"),
        Oracle("Oracle"),
        MySQL("My SQL"),
        Postgres("Postgres"),
        DB2("DB2");

        private String display;
        Type(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int TYPE_Unassigned = 0;
    public static final int TYPE_Unknown = 1;
    public static final int TYPE_Derby = 2;
    public static final int TYPE_SQLServer = 3;
    public static final int TYPE_Oracle = 4;
    public static final int TYPE_MySQL = 5;
    public static final int TYPE_Postgres = 6;
    public static final int TYPE_DB2 = 7;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("Unassigned");
        hubType.addElement("Unknown");
        hubType.addElement("Derby");
        hubType.addElement("SQL Server");
        hubType.addElement("Oracle");
        hubType.addElement("My SQL");
        hubType.addElement("Postgres");
        hubType.addElement("DB2");
    }
     
    // Links to other objects.
    protected transient Hub<ColumnType> hubColumnTypes;
     
    public DatabaseType() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public DatabaseType(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(maxLength = 150, displayLength = 20)
    @OAColumn(maxLength = 150)
    public String getDescription() {
        return description;
    }
    public void setDescription(String newValue) {
        String old = description;
        fireBeforePropertyChange(P_Description, old, newValue);
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
    @OAProperty(displayName = "Driver Name", maxLength = 75, displayLength = 20)
    @OAColumn(maxLength = 75)
    public String getDriverName() {
        return driverName;
    }
    public void setDriverName(String newValue) {
        String old = driverName;
        fireBeforePropertyChange(P_DriverName, old, newValue);
        this.driverName = newValue;
        firePropertyChange(P_DriverName, old, this.driverName);
    }
    @OAProperty(displayName = "Jdbc Url", maxLength = 150, displayLength = 20)
    @OAColumn(maxLength = 150)
    public String getJdbcUrl() {
        return jdbcUrl;
    }
    public void setJdbcUrl(String newValue) {
        String old = jdbcUrl;
        fireBeforePropertyChange(P_JdbcUrl, old, newValue);
        this.jdbcUrl = newValue;
        firePropertyChange(P_JdbcUrl, old, this.jdbcUrl);
    }
    @OAProperty(displayLength = 14, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    public void setType(int newValue) {
        int old = type;
        fireBeforePropertyChange(P_Type, old, newValue);
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
        firePropertyChange(P_Type + "String");
        firePropertyChange(P_Type + "Enum");
    }

    public String getTypeString() {
        Type type = getTypeEnum();
        if (type == null) return null;
        return type.name();
    }
    public void setTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            Type type = Type.valueOf(val);
            if (type != null) x = type.ordinal();
        }
        if (x < 0) setNull(P_Type);
        else setType(x);
    }


    public Type getTypeEnum() {
        if (isNull(P_Type)) return null;
        final int val = getType();
        if (val < 0 || val >= Type.values().length) return null;
        return Type.values()[val];
    }

    public void setTypeEnum(Type val) {
        if (val == null) {
            setNull(P_Type);
        }
        else {
            setType(val.ordinal());
        }
    }
    @OAMany(
        displayName = "Column Types", 
        toClass = ColumnType.class, 
        owner = true, 
        reverseName = ColumnType.P_DatabaseType, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = ColumnType.P_Seq, 
        matchProperty = ColumnType.P_SqlType, 
        sortProperty = ColumnType.P_Seq
    )
    public Hub<ColumnType> getColumnTypes() {
        if (hubColumnTypes == null) {
            Hub<SqlType> hubMatch = com.oreillyauto.remodel.delegate.ModelDelegate.getSqlTypes();
            hubColumnTypes = (Hub<ColumnType>) getHub(P_ColumnTypes, hubMatch);
        }
        return hubColumnTypes;
    }
    @OAMany(
        toClass = Database.class, 
        reverseName = Database.P_DatabaseType, 
        createMethod = false
    )
    private Hub<Database> getDatabases() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.description = rs.getString(4);
        this.driverName = rs.getString(5);
        this.jdbcUrl = rs.getString(6);
        this.type = (int) rs.getInt(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, DatabaseType.P_Type, true);
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
