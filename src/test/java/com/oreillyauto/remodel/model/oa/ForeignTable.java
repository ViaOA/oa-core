// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "foreignTable",
    pluralName = "ForeignTables",
    shortName = "frt",
    displayName = "Foreign Table",
    displayProperty = "table"
)
@OATable(
    indexes = {
        @OAIndex(name = "ForeignTableTable", fkey = true, columns = { @OAIndexColumn(name = "TableId") }), 
        @OAIndex(name = "ForeignTableToTable", fkey = true, columns = { @OAIndexColumn(name = "ToTableId") })
    }
)
public class ForeignTable extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ForeignTable.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_FkeyExist = "FkeyExist";
     
     
    public static final String P_ForeignTableColumns = "ForeignTableColumns";
    public static final String P_Table = "Table";
    public static final String P_ToTable = "ToTable";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile boolean fkeyExist;
     
    // Links to other objects.
    protected transient Hub<ForeignTableColumn> hubForeignTableColumns;
    protected volatile transient Table table;
    protected volatile transient Table toTable;
     
    public ForeignTable() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public ForeignTable(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Fkey Exist", displayLength = 5, columnLength = 10, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getFkeyExist() {
        return fkeyExist;
    }
    public boolean isFkeyExist() {
        return getFkeyExist();
    }
    public void setFkeyExist(boolean newValue) {
        boolean old = fkeyExist;
        fireBeforePropertyChange(P_FkeyExist, old, newValue);
        this.fkeyExist = newValue;
        firePropertyChange(P_FkeyExist, old, this.fkeyExist);
    }
    @OAMany(
        displayName = "Foreign Table Columns", 
        toClass = ForeignTableColumn.class, 
        owner = true, 
        reverseName = ForeignTableColumn.P_ForeignTable, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchHub = (ForeignTable.P_ToTable+"."+Table.P_Columns+ColumnPkeyFilter.PPCode), 
        matchProperty = ForeignTableColumn.P_FromColumn
    )
    public Hub<ForeignTableColumn> getForeignTableColumns() {
        if (hubForeignTableColumns == null) {
            hubForeignTableColumns = (Hub<ForeignTableColumn>) getHub(P_ForeignTableColumns);
        }
        return hubForeignTableColumns;
    }
    @OAOne(
        reverseName = Table.P_ForeignTables, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"TableId"})
    public Table getTable() {
        if (table == null) {
            table = (Table) getObject(P_Table);
        }
        return table;
    }
    public void setTable(Table newValue) {
        Table old = this.table;
        fireBeforePropertyChange(P_Table, old, newValue);
        this.table = newValue;
        firePropertyChange(P_Table, old, this.table);
    }
    @OAOne(
        displayName = "Table", 
        reverseName = Table.P_TableForeignTables, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ToTableId"})
    public Table getToTable() {
        if (toTable == null) {
            toTable = (Table) getObject(P_ToTable);
        }
        return toTable;
    }
    public void setToTable(Table newValue) {
        Table old = this.toTable;
        fireBeforePropertyChange(P_ToTable, old, newValue);
        this.toTable = newValue;
        firePropertyChange(P_ToTable, old, this.toTable);
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.fkeyExist = rs.getBoolean(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ForeignTable.P_FkeyExist, true);
        }
        int tableFkey = rs.getInt(4);
        if (!rs.wasNull() && tableFkey > 0) {
            setProperty(P_Table, new OAObjectKey(tableFkey));
        }
        int toTableFkey = rs.getInt(5);
        if (!rs.wasNull() && toTableFkey > 0) {
            setProperty(P_ToTable, new OAObjectKey(toTableFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
