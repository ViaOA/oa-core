// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "foreignTableColumn",
    pluralName = "ForeignTableColumns",
    shortName = "ftc",
    displayName = "Foreign Table Column",
    displayProperty = "fromColumn"
)
@OATable(
    indexes = {
        @OAIndex(name = "ForeignTableColumnForeignTable", fkey = true, columns = { @OAIndexColumn(name = "ForeignTableId") }), 
        @OAIndex(name = "ForeignTableColumnFromColumn", fkey = true, columns = { @OAIndexColumn(name = "FromColumnId") }), 
        @OAIndex(name = "ForeignTableColumnFromJsonColumn", fkey = true, columns = { @OAIndexColumn(name = "FromJsonColumnId") }), 
        @OAIndex(name = "ForeignTableColumnToColumn", fkey = true, columns = { @OAIndexColumn(name = "ToColumnId") })
    }
)
public class ForeignTableColumn extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ForeignTableColumn.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_FromColumnName = "FromColumnName";
    public static final String P_ToColumnName = "ToColumnName";
     
     
    public static final String P_ForeignTable = "ForeignTable";
    public static final String P_FromColumn = "FromColumn";
    public static final String P_FromJsonColumn = "FromJsonColumn";
    public static final String P_ToColumn = "ToColumn";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String fromColumnName;
    protected volatile String toColumnName;
     
    // Links to other objects.
    protected volatile transient ForeignTable foreignTable;
    protected volatile transient Column fromColumn;
    protected volatile transient JsonColumn fromJsonColumn;
    protected volatile transient Column toColumn;
     
    public ForeignTableColumn() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public ForeignTableColumn(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "From Column Name", maxLength = 125, displayLength = 20)
    @OAColumn(maxLength = 125)
    public String getFromColumnName() {
        return fromColumnName;
    }
    public void setFromColumnName(String newValue) {
        String old = fromColumnName;
        fireBeforePropertyChange(P_FromColumnName, old, newValue);
        this.fromColumnName = newValue;
        firePropertyChange(P_FromColumnName, old, this.fromColumnName);
    }
    @OAProperty(displayName = "To Column Name", maxLength = 125, displayLength = 20)
    @OAColumn(maxLength = 125)
    public String getToColumnName() {
        return toColumnName;
    }
    public void setToColumnName(String newValue) {
        String old = toColumnName;
        fireBeforePropertyChange(P_ToColumnName, old, newValue);
        this.toColumnName = newValue;
        firePropertyChange(P_ToColumnName, old, this.toColumnName);
    }
    @OAOne(
        displayName = "Foreign Table", 
        reverseName = ForeignTable.P_ForeignTableColumns, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ForeignTableId"})
    public ForeignTable getForeignTable() {
        if (foreignTable == null) {
            foreignTable = (ForeignTable) getObject(P_ForeignTable);
        }
        return foreignTable;
    }
    public void setForeignTable(ForeignTable newValue) {
        ForeignTable old = this.foreignTable;
        fireBeforePropertyChange(P_ForeignTable, old, newValue);
        this.foreignTable = newValue;
        firePropertyChange(P_ForeignTable, old, this.foreignTable);
    }
    @OAOne(
        displayName = "From Column", 
        reverseName = Column.P_ForeignTableColumns, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"FromColumnId"})
    public Column getFromColumn() {
        if (fromColumn == null) {
            fromColumn = (Column) getObject(P_FromColumn);
        }
        return fromColumn;
    }
    public void setFromColumn(Column newValue) {
        Column old = this.fromColumn;
        fireBeforePropertyChange(P_FromColumn, old, newValue);
        this.fromColumn = newValue;
        firePropertyChange(P_FromColumn, old, this.fromColumn);
    }
    @OAOne(
        displayName = "From Json Column", 
        reverseName = JsonColumn.P_FromForeignTableColumns, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"FromJsonColumnId"})
    public JsonColumn getFromJsonColumn() {
        if (fromJsonColumn == null) {
            fromJsonColumn = (JsonColumn) getObject(P_FromJsonColumn);
        }
        return fromJsonColumn;
    }
    public void setFromJsonColumn(JsonColumn newValue) {
        JsonColumn old = this.fromJsonColumn;
        fireBeforePropertyChange(P_FromJsonColumn, old, newValue);
        this.fromJsonColumn = newValue;
        firePropertyChange(P_FromJsonColumn, old, this.fromJsonColumn);
    }
    @OAOne(
        displayName = "Column", 
        reverseName = Column.P_ForeignTableForeignColumns, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ToColumnId"})
    public Column getToColumn() {
        if (toColumn == null) {
            toColumn = (Column) getObject(P_ToColumn);
        }
        return toColumn;
    }
    public void setToColumn(Column newValue) {
        Column old = this.toColumn;
        fireBeforePropertyChange(P_ToColumn, old, newValue);
        this.toColumn = newValue;
        firePropertyChange(P_ToColumn, old, this.toColumn);
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.fromColumnName = rs.getString(3);
        this.toColumnName = rs.getString(4);
        int foreignTableFkey = rs.getInt(5);
        if (!rs.wasNull() && foreignTableFkey > 0) {
            setProperty(P_ForeignTable, new OAObjectKey(foreignTableFkey));
        }
        int fromColumnFkey = rs.getInt(6);
        if (!rs.wasNull() && fromColumnFkey > 0) {
            setProperty(P_FromColumn, new OAObjectKey(fromColumnFkey));
        }
        int fromJsonColumnFkey = rs.getInt(7);
        if (!rs.wasNull() && fromJsonColumnFkey > 0) {
            setProperty(P_FromJsonColumn, new OAObjectKey(fromJsonColumnFkey));
        }
        int toColumnFkey = rs.getInt(8);
        if (!rs.wasNull() && toColumnFkey > 0) {
            setProperty(P_ToColumn, new OAObjectKey(toColumnFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
