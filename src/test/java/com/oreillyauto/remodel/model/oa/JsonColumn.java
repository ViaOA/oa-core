// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.List;
import java.util.logging.*;
import java.sql.*;
import javax.xml.bind.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "jsonColumn",
    pluralName = "JsonColumns",
    shortName = "jsc",
    displayName = "Json Column",
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "JsonColumnDataType", fkey = true, columns = { @OAIndexColumn(name = "DataTypeId") }), 
        @OAIndex(name = "JsonColumnJavaType", fkey = true, columns = { @OAIndexColumn(name = "JavaTypeId") }), 
        @OAIndex(name = "JsonColumnJsonObject", fkey = true, columns = { @OAIndexColumn(name = "JsonObjectId") })
    }
)
@XmlRootElement(name = "jsonColumn")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.NONE)
public class JsonColumn extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(JsonColumn.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
     
     
    public static final String PROPERTY_CalcDataType = "CalcDataType";
    public static final String P_CalcDataType = "CalcDataType";
    public static final String PROPERTY_DataType = "DataType";
    public static final String P_DataType = "DataType";
    public static final String PROPERTY_FromForeignTableColumns = "FromForeignTableColumns";
    public static final String P_FromForeignTableColumns = "FromForeignTableColumns";
    public static final String PROPERTY_JavaType = "JavaType";
    public static final String P_JavaType = "JavaType";
    public static final String PROPERTY_JsonObject = "JsonObject";
    public static final String P_JsonObject = "JsonObject";
    public static final String PROPERTY_QueryColumns = "QueryColumns";
    public static final String P_QueryColumns = "QueryColumns";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile int seq;
     
    // Links to other objects.
    protected volatile transient DataType dataType;
    protected transient Hub<ForeignTableColumn> hubFromForeignTableColumns;
    protected volatile transient JavaType javaType;
    protected volatile transient JsonObject jsonObject;
     
    public JsonColumn() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public JsonColumn(int id) {
        this();
        setId(id);
    }
     

    @XmlAttribute(name="oaSingleId")
    public Integer getJaxbGuid() {
        return super.getJaxbGuid();
    }

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @XmlTransient
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @XmlID
    @XmlAttribute(name="id")
    public String getJaxbId() {
        // note: jaxb spec requires id to be a string
        if (!getJaxbShouldInclude(P_Id)) return null;
        return ""+id;
    }
    public void setJaxbId(String id) {
        if (getJaxbAllowPropertyChange(P_Id, this.id, id)) {
            setId((int) OAConv.convert(int.class, id));
        }
    }

    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @XmlElement(name="created", nillable=true)
    public OADateTime getJaxbCreated() {
        if (!getJaxbShouldInclude(P_Created)) return null;
        return getCreated();
    }
    public void setJaxbCreated(OADateTime newValue) {
        if (getJaxbAllowPropertyChange(P_Created, this.created, newValue)) {
            setCreated(newValue);
        }
    }

    @OAProperty(maxLength = 75, displayLength = 20)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @XmlElement(name="name", nillable=true)
    public String getJaxbName() {
        if (!getJaxbShouldInclude(P_Name)) return null;
        return getName();
    }
    public void setJaxbName(String newValue) {
        if (getJaxbAllowPropertyChange(P_Name, this.name, newValue)) {
            setName(newValue);
        }
    }

    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @XmlElement(name="seq")
    public Integer getJaxbSeq() {
        if (!getJaxbShouldInclude(P_Seq)) return null;
        return getSeq();
    }
    public void setJaxbSeq(Integer newValue) {
        if (getJaxbAllowPropertyChange(P_Seq, this.seq, newValue)) {
            setSeq(newValue);
        }
    }

    @OAOne(
        displayName = "Data Type", 
        isCalculated = true, 
        calcDependentProperties = {P_DataType, P_JavaType}, 
        reverseName = DataType.P_CalcJsonColumns, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @XmlTransient
    public DataType getCalcDataType() {
        DataType dataType = getDataType();
        if (dataType != null) return dataType;
        JavaType javaType = getJavaType();
        if (javaType != null) return javaType.getDataType();
        return null;
    }
     
    @OAOne(
        displayName = "Data Type", 
        reverseName = DataType.P_JsonColumns, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"DataTypeId"})
    @XmlTransient
    public DataType getDataType() {
        if (dataType == null) {
            dataType = (DataType) getObject(P_DataType);
        }
        return dataType;
    }
    public void setDataType(DataType newValue) {
        DataType old = this.dataType;
        fireBeforePropertyChange(P_DataType, old, newValue);
        this.dataType = newValue;
        firePropertyChange(P_DataType, old, this.dataType);
    }
    @XmlElement(name="dataType", nillable=true)
    public DataType getJaxbDataType() {
        Object obj = super.getJaxbObject(P_DataType);
        return (DataType) obj;
    }
    public void setJaxbDataType(DataType newValue) {
        if (getJaxbAllowPropertyChange(P_DataType, this.dataType, newValue)) {
            setDataType(newValue);
        }
    }
    @XmlElement(name="refDataType")
    @XmlIDREF
    public DataType getJaxbRefDataType() {
        Object obj = super.getJaxbRefObject(P_DataType);
        return (DataType) obj;
    }
    public void setJaxbRefDataType(DataType newValue) {
        setJaxbDataType(newValue);
    }
    @XmlElement(name="dataTypeId", nillable=true)
    public String getJaxbDataTypeId() {
        String s = super.getJaxbId(P_DataType);
        return s;
    }
    public void setJaxbDataTypeId(String id) {
        setJaxbId(P_DataType, id);
    }
     
    @OAMany(
        displayName = "From Foreign Table Columns", 
        toClass = ForeignTableColumn.class, 
        reverseName = ForeignTableColumn.P_FromJsonColumn
    )
    @XmlTransient
    public Hub<ForeignTableColumn> getFromForeignTableColumns() {
        if (hubFromForeignTableColumns == null) {
            hubFromForeignTableColumns = (Hub<ForeignTableColumn>) getHub(P_FromForeignTableColumns);
        }
        return hubFromForeignTableColumns;
    }
    @XmlElementWrapper(name="fromForeignTableColumns")
    @XmlElement(name="foreignTableColumn", type=ForeignTableColumn.class)
    protected List<ForeignTableColumn> getJaxbFromForeignTableColumns() {
        return getJaxbHub(P_FromForeignTableColumns);
    }
    @XmlElementWrapper(name="refFromForeignTableColumns")
    @XmlElement(name="foreignTableColumn", type=ForeignTableColumn.class)
    @XmlIDREF
    protected List<ForeignTableColumn> getJaxbRefFromForeignTableColumns() {
        return getJaxbRefHub(P_FromForeignTableColumns); 
    }
    protected void setJaxbRefFromForeignTableColumns(List<ForeignTableColumn> lst) {
        // no-op, since jaxb sends lst=hubFromForeignTableColumns 
    }
     
    @OAOne(
        displayName = "Java Type", 
        reverseName = JavaType.P_JsonColumns, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"JavaTypeId"})
    @XmlTransient
    public JavaType getJavaType() {
        if (javaType == null) {
            javaType = (JavaType) getObject(P_JavaType);
        }
        return javaType;
    }
    public void setJavaType(JavaType newValue) {
        JavaType old = this.javaType;
        fireBeforePropertyChange(P_JavaType, old, newValue);
        this.javaType = newValue;
        firePropertyChange(P_JavaType, old, this.javaType);
    }
    @XmlElement(name="javaType", nillable=true)
    public JavaType getJaxbJavaType() {
        Object obj = super.getJaxbObject(P_JavaType);
        return (JavaType) obj;
    }
    public void setJaxbJavaType(JavaType newValue) {
        if (getJaxbAllowPropertyChange(P_JavaType, this.javaType, newValue)) {
            setJavaType(newValue);
        }
    }
    @XmlElement(name="refJavaType")
    @XmlIDREF
    public JavaType getJaxbRefJavaType() {
        Object obj = super.getJaxbRefObject(P_JavaType);
        return (JavaType) obj;
    }
    public void setJaxbRefJavaType(JavaType newValue) {
        setJaxbJavaType(newValue);
    }
    @XmlElement(name="javaTypeId", nillable=true)
    public String getJaxbJavaTypeId() {
        String s = super.getJaxbId(P_JavaType);
        return s;
    }
    public void setJaxbJavaTypeId(String id) {
        setJaxbId(P_JavaType, id);
    }
     
    @OAOne(
        displayName = "Json Object", 
        reverseName = JsonObject.P_JsonColumns, 
        required = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"JsonObjectId"})
    @XmlTransient
    public JsonObject getJsonObject() {
        if (jsonObject == null) {
            jsonObject = (JsonObject) getObject(P_JsonObject);
        }
        return jsonObject;
    }
    public void setJsonObject(JsonObject newValue) {
        JsonObject old = this.jsonObject;
        fireBeforePropertyChange(P_JsonObject, old, newValue);
        this.jsonObject = newValue;
        firePropertyChange(P_JsonObject, old, this.jsonObject);
    }
    @XmlElement(name="jsonObject", required=true)
    public JsonObject getJaxbJsonObject() {
        Object obj = super.getJaxbObject(P_JsonObject);
        return (JsonObject) obj;
    }
    public void setJaxbJsonObject(JsonObject newValue) {
        if (getJaxbAllowPropertyChange(P_JsonObject, this.jsonObject, newValue)) {
            setJsonObject(newValue);
        }
    }
    @XmlElement(name="refJsonObject")
    @XmlIDREF
    public JsonObject getJaxbRefJsonObject() {
        Object obj = super.getJaxbRefObject(P_JsonObject);
        return (JsonObject) obj;
    }
    public void setJaxbRefJsonObject(JsonObject newValue) {
        setJaxbJsonObject(newValue);
    }
    @XmlElement(name="jsonObjectId", required=true)
    public String getJaxbJsonObjectId() {
        String s = super.getJaxbId(P_JsonObject);
        return s;
    }
    public void setJaxbJsonObjectId(String id) {
        setJaxbId(P_JsonObject, id);
    }
     
    @OAMany(
        displayName = "Query Columns", 
        toClass = QueryColumn.class, 
        reverseName = QueryColumn.P_JsonColumn, 
        createMethod = false
    )
    @XmlTransient
    private Hub<QueryColumn> getQueryColumns() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.seq = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, JsonColumn.P_Seq, true);
        }
        int dataTypeFkey = rs.getInt(5);
        if (!rs.wasNull() && dataTypeFkey > 0) {
            setProperty(P_DataType, new OAObjectKey(dataTypeFkey));
        }
        int javaTypeFkey = rs.getInt(6);
        if (!rs.wasNull() && javaTypeFkey > 0) {
            setProperty(P_JavaType, new OAObjectKey(javaTypeFkey));
        }
        int jsonObjectFkey = rs.getInt(7);
        if (!rs.wasNull() && jsonObjectFkey > 0) {
            setProperty(P_JsonObject, new OAObjectKey(jsonObjectFkey));
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
    public static JsonColumn jaxbCreate() {
        JsonColumn jsonColumn = (JsonColumn) OAObject.jaxbCreateInstance(JsonColumn.class);
        if (jsonColumn == null) jsonColumn = new JsonColumn();
        return jsonColumn;
    }
}
 
