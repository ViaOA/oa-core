// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.List;
import java.util.logging.*;
import java.sql.*;
import javax.xml.bind.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "queryInfo",
    pluralName = "QueryInfos",
    shortName = "qri",
    displayName = "Query Info",
    displayProperty = "name",
    rootTreePropertyPaths = {
        "[Project]."+Project.P_Repositories+"."+Repository.P_QueryInfos
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "QueryInfoRepository", fkey = true, columns = { @OAIndexColumn(name = "RepositoryId") })
    }
)
@XmlRootElement(name = "queryInfo")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.NONE)
public class QueryInfo extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(QueryInfo.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_SqlCode = "SqlCode";
    public static final String P_SqlCode = "SqlCode";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
    public static final String PROPERTY_AllowPaging = "AllowPaging";
    public static final String P_AllowPaging = "AllowPaging";
     
     
    public static final String PROPERTY_QuerySorts = "QuerySorts";
    public static final String P_QuerySorts = "QuerySorts";
    public static final String PROPERTY_QueryTables = "QueryTables";
    public static final String P_QueryTables = "QueryTables";
    public static final String PROPERTY_Repository = "Repository";
    public static final String P_Repository = "Repository";
     
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile String sqlCode;
    protected volatile int seq;
    protected volatile boolean allowPaging;
     
    // Links to other objects.
    protected transient Hub<QuerySort> hubQuerySorts;
    protected transient Hub<QueryTable> hubQueryTables;
    protected volatile transient Repository repository;
     
    public QueryInfo() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public QueryInfo(int id) {
        this();
        setId(id);
    }
     

    @XmlAttribute(name="oaSingleId")
    public Integer getJaxbGuid() {
        return super.getJaxbGuid();
    }

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @XmlTransient
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @XmlID
    @XmlAttribute(name="id")
    public String getJaxbId() {
        // note: jaxb spec requires id to be a string
        if (!getJaxbShouldInclude(P_Id)) return null;
        return ""+id;
    }
    public void setJaxbId(String id) {
        if (getJaxbAllowPropertyChange(P_Id, this.id, id)) {
            setId((int) OAConv.convert(int.class, id));
        }
    }

    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @XmlElement(name="created", nillable=true)
    public OADateTime getJaxbCreated() {
        if (!getJaxbShouldInclude(P_Created)) return null;
        return getCreated();
    }
    public void setJaxbCreated(OADateTime newValue) {
        if (getJaxbAllowPropertyChange(P_Created, this.created, newValue)) {
            setCreated(newValue);
        }
    }

    @OAProperty(maxLength = 254, displayLength = 20)
    @OAColumn(maxLength = 254)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @XmlElement(name="name", nillable=true)
    public String getJaxbName() {
        if (!getJaxbShouldInclude(P_Name)) return null;
        return getName();
    }
    public void setJaxbName(String newValue) {
        if (getJaxbAllowPropertyChange(P_Name, this.name, newValue)) {
            setName(newValue);
        }
    }

    @OAProperty(displayName = "Sql Code", displayLength = 30, columnLength = 20)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getSqlCode() {
        return sqlCode;
    }
    public void setSqlCode(String newValue) {
        String old = sqlCode;
        fireBeforePropertyChange(P_SqlCode, old, newValue);
        this.sqlCode = newValue;
        firePropertyChange(P_SqlCode, old, this.sqlCode);
    }
    @XmlElement(name="sqlCode", nillable=true)
    public String getJaxbSqlCode() {
        if (!getJaxbShouldInclude(P_SqlCode)) return null;
        return getSqlCode();
    }
    public void setJaxbSqlCode(String newValue) {
        if (getJaxbAllowPropertyChange(P_SqlCode, this.sqlCode, newValue)) {
            setSqlCode(newValue);
        }
    }

    @OAProperty(displayLength = 6, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    public void setSeq(int newValue) {
        int old = seq;
        fireBeforePropertyChange(P_Seq, old, newValue);
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @XmlElement(name="seq")
    public Integer getJaxbSeq() {
        if (!getJaxbShouldInclude(P_Seq)) return null;
        return getSeq();
    }
    public void setJaxbSeq(Integer newValue) {
        if (getJaxbAllowPropertyChange(P_Seq, this.seq, newValue)) {
            setSeq(newValue);
        }
    }

    @OAProperty(displayName = "Allow Paging", displayLength = 5, columnLength = 12)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getAllowPaging() {
        return allowPaging;
    }
    public boolean isAllowPaging() {
        return getAllowPaging();
    }
    public void setAllowPaging(boolean newValue) {
        boolean old = allowPaging;
        fireBeforePropertyChange(P_AllowPaging, old, newValue);
        this.allowPaging = newValue;
        firePropertyChange(P_AllowPaging, old, this.allowPaging);
    }
    @XmlElement(name="allowPaging")
    public Boolean getJaxbAllowPaging() {
        if (!getJaxbShouldInclude(P_AllowPaging)) return null;
        return getAllowPaging();
    }
    public void setJaxbAllowPaging(Boolean newValue) {
        if (getJaxbAllowPropertyChange(P_AllowPaging, this.allowPaging, newValue)) {
            setAllowPaging(newValue);
        }
    }

    @OAMany(
        displayName = "Query Sorts", 
        toClass = QuerySort.class, 
        owner = true, 
        reverseName = QuerySort.P_QueryInfo, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = QuerySort.P_Seq, 
        sortProperty = QuerySort.P_Seq
    )
    @XmlTransient
    public Hub<QuerySort> getQuerySorts() {
        if (hubQuerySorts == null) {
            hubQuerySorts = (Hub<QuerySort>) getHub(P_QuerySorts);
        }
        return hubQuerySorts;
    }
    @XmlElementWrapper(name="querySorts")
    @XmlElement(name="querySort", type=QuerySort.class)
    protected List<QuerySort> getJaxbQuerySorts() {
        return getJaxbHub(P_QuerySorts);
    }
    @XmlElementWrapper(name="refQuerySorts")
    @XmlElement(name="querySort", type=QuerySort.class)
    @XmlIDREF
    protected List<QuerySort> getJaxbRefQuerySorts() {
        return getJaxbRefHub(P_QuerySorts); 
    }
    protected void setJaxbRefQuerySorts(List<QuerySort> lst) {
        // no-op, since jaxb sends lst=hubQuerySorts 
    }
     
    @OAMany(
        displayName = "Query Tables", 
        toClass = QueryTable.class, 
        owner = true, 
        reverseName = QueryTable.P_QueryInfo, 
        cascadeSave = true, 
        cascadeDelete = true, 
        uniqueProperty = QueryTable.P_Table
    )
    @XmlTransient
    public Hub<QueryTable> getQueryTables() {
        if (hubQueryTables == null) {
            hubQueryTables = (Hub<QueryTable>) getHub(P_QueryTables);
        }
        return hubQueryTables;
    }
    @XmlElementWrapper(name="queryTables")
    @XmlElement(name="queryTable", type=QueryTable.class)
    protected List<QueryTable> getJaxbQueryTables() {
        return getJaxbHub(P_QueryTables);
    }
    @XmlElementWrapper(name="refQueryTables")
    @XmlElement(name="queryTable", type=QueryTable.class)
    @XmlIDREF
    protected List<QueryTable> getJaxbRefQueryTables() {
        return getJaxbRefHub(P_QueryTables); 
    }
    protected void setJaxbRefQueryTables(List<QueryTable> lst) {
        // no-op, since jaxb sends lst=hubQueryTables 
    }
     
    @OAOne(
        reverseName = Repository.P_QueryInfos, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"RepositoryId"})
    @XmlTransient
    public Repository getRepository() {
        if (repository == null) {
            repository = (Repository) getObject(P_Repository);
        }
        return repository;
    }
    public void setRepository(Repository newValue) {
        Repository old = this.repository;
        fireBeforePropertyChange(P_Repository, old, newValue);
        this.repository = newValue;
        firePropertyChange(P_Repository, old, this.repository);
    }
    @XmlElement(name="repository", required=true)
    public Repository getJaxbRepository() {
        Object obj = super.getJaxbObject(P_Repository);
        return (Repository) obj;
    }
    public void setJaxbRepository(Repository newValue) {
        if (getJaxbAllowPropertyChange(P_Repository, this.repository, newValue)) {
            setRepository(newValue);
        }
    }
    @XmlElement(name="refRepository")
    @XmlIDREF
    public Repository getJaxbRefRepository() {
        Object obj = super.getJaxbRefObject(P_Repository);
        return (Repository) obj;
    }
    public void setJaxbRefRepository(Repository newValue) {
        setJaxbRepository(newValue);
    }
    @XmlElement(name="repositoryId", required=true)
    public String getJaxbRepositoryId() {
        String s = super.getJaxbId(P_Repository);
        return s;
    }
    public void setJaxbRepositoryId(String id) {
        setJaxbId(P_Repository, id);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.sqlCode = rs.getString(4);
        this.seq = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, QueryInfo.P_Seq, true);
        }
        this.allowPaging = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, QueryInfo.P_AllowPaging, true);
        }
        int repositoryFkey = rs.getInt(7);
        if (!rs.wasNull() && repositoryFkey > 0) {
            setProperty(P_Repository, new OAObjectKey(repositoryFkey));
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
    public static QueryInfo jaxbCreate() {
        QueryInfo queryInfo = (QueryInfo) OAObject.jaxbCreateInstance(QueryInfo.class);
        if (queryInfo == null) queryInfo = new QueryInfo();
        return queryInfo;
    }
}
 
