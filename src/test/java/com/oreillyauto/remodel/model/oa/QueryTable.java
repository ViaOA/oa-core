// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.List;
import java.util.logging.*;
import java.sql.*;
import javax.xml.bind.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "queryTable",
    pluralName = "QueryTables",
    shortName = "qrt",
    displayName = "Query Table",
    displayProperty = "table"
)
@OATable(
    indexes = {
        @OAIndex(name = "QueryTableJoinTable", fkey = true, columns = { @OAIndexColumn(name = "JoinTableId") }), 
        @OAIndex(name = "QueryTableQueryInfo", fkey = true, columns = { @OAIndexColumn(name = "QueryInfoId") }), 
        @OAIndex(name = "QueryTableTable", fkey = true, columns = { @OAIndexColumn(name = "TableId") })
    }
)
@XmlRootElement(name = "queryTable")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.NONE)
public class QueryTable extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(QueryTable.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
     
     
    public static final String PROPERTY_JoinedTables = "JoinedTables";
    public static final String P_JoinedTables = "JoinedTables";
    public static final String PROPERTY_JoinTable = "JoinTable";
    public static final String P_JoinTable = "JoinTable";
    public static final String PROPERTY_QueryColumns = "QueryColumns";
    public static final String P_QueryColumns = "QueryColumns";
    public static final String PROPERTY_QueryInfo = "QueryInfo";
    public static final String P_QueryInfo = "QueryInfo";
    public static final String PROPERTY_Table = "Table";
    public static final String P_Table = "Table";
     
    protected volatile int id;
    protected volatile OADateTime created;
     
    // Links to other objects.
    protected transient Hub<QueryTable> hubJoinedTables;
    protected volatile transient QueryTable joinTable;
    protected transient Hub<QueryColumn> hubQueryColumns;
    protected volatile transient QueryInfo queryInfo;
    protected volatile transient Table table;
     
    public QueryTable() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public QueryTable(int id) {
        this();
        setId(id);
    }
     

    @XmlAttribute(name="oaSingleId")
    public Integer getJaxbGuid() {
        return super.getJaxbGuid();
    }

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @XmlTransient
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @XmlID
    @XmlAttribute(name="id")
    public String getJaxbId() {
        // note: jaxb spec requires id to be a string
        if (!getJaxbShouldInclude(P_Id)) return null;
        return ""+id;
    }
    public void setJaxbId(String id) {
        if (getJaxbAllowPropertyChange(P_Id, this.id, id)) {
            setId((int) OAConv.convert(int.class, id));
        }
    }

    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @XmlElement(name="created", nillable=true)
    public OADateTime getJaxbCreated() {
        if (!getJaxbShouldInclude(P_Created)) return null;
        return getCreated();
    }
    public void setJaxbCreated(OADateTime newValue) {
        if (getJaxbAllowPropertyChange(P_Created, this.created, newValue)) {
            setCreated(newValue);
        }
    }

    @OAMany(
        displayName = "Joined Tables", 
        toClass = QueryTable.class, 
        reverseName = QueryTable.P_JoinTable
    )
    @XmlTransient
    public Hub<QueryTable> getJoinedTables() {
        if (hubJoinedTables == null) {
            hubJoinedTables = (Hub<QueryTable>) getHub(P_JoinedTables);
        }
        return hubJoinedTables;
    }
    @XmlElementWrapper(name="joinedTables")
    @XmlElement(name="queryTable", type=QueryTable.class)
    protected List<QueryTable> getJaxbJoinedTables() {
        return getJaxbHub(P_JoinedTables);
    }
    @XmlElementWrapper(name="refJoinedTables")
    @XmlElement(name="queryTable", type=QueryTable.class)
    @XmlIDREF
    protected List<QueryTable> getJaxbRefJoinedTables() {
        return getJaxbRefHub(P_JoinedTables); 
    }
    protected void setJaxbRefJoinedTables(List<QueryTable> lst) {
        // no-op, since jaxb sends lst=hubJoinedTables 
    }
     
    @OAOne(
        displayName = "Join Table", 
        reverseName = QueryTable.P_JoinedTables, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"JoinTableId"})
    @XmlTransient
    public QueryTable getJoinTable() {
        if (joinTable == null) {
            joinTable = (QueryTable) getObject(P_JoinTable);
        }
        return joinTable;
    }
    public void setJoinTable(QueryTable newValue) {
        QueryTable old = this.joinTable;
        fireBeforePropertyChange(P_JoinTable, old, newValue);
        this.joinTable = newValue;
        firePropertyChange(P_JoinTable, old, this.joinTable);
    }
    @XmlElement(name="joinTable", nillable=true)
    public QueryTable getJaxbJoinTable() {
        Object obj = super.getJaxbObject(P_JoinTable);
        return (QueryTable) obj;
    }
    public void setJaxbJoinTable(QueryTable newValue) {
        if (getJaxbAllowPropertyChange(P_JoinTable, this.joinTable, newValue)) {
            setJoinTable(newValue);
        }
    }
    @XmlElement(name="refJoinTable")
    @XmlIDREF
    public QueryTable getJaxbRefJoinTable() {
        Object obj = super.getJaxbRefObject(P_JoinTable);
        return (QueryTable) obj;
    }
    public void setJaxbRefJoinTable(QueryTable newValue) {
        setJaxbJoinTable(newValue);
    }
    @XmlElement(name="joinTableId", nillable=true)
    public String getJaxbJoinTableId() {
        String s = super.getJaxbId(P_JoinTable);
        return s;
    }
    public void setJaxbJoinTableId(String id) {
        setJaxbId(P_JoinTable, id);
    }
     
    @OAMany(
        displayName = "Query Columns", 
        toClass = QueryColumn.class, 
        owner = true, 
        reverseName = QueryColumn.P_QueryTable, 
        cascadeSave = true, 
        cascadeDelete = true, 
        uniqueProperty = QueryColumn.P_Column
    )
    @XmlTransient
    public Hub<QueryColumn> getQueryColumns() {
        if (hubQueryColumns == null) {
            hubQueryColumns = (Hub<QueryColumn>) getHub(P_QueryColumns);
        }
        return hubQueryColumns;
    }
    @XmlElementWrapper(name="queryColumns")
    @XmlElement(name="queryColumn", type=QueryColumn.class)
    protected List<QueryColumn> getJaxbQueryColumns() {
        return getJaxbHub(P_QueryColumns);
    }
    @XmlElementWrapper(name="refQueryColumns")
    @XmlElement(name="queryColumn", type=QueryColumn.class)
    @XmlIDREF
    protected List<QueryColumn> getJaxbRefQueryColumns() {
        return getJaxbRefHub(P_QueryColumns); 
    }
    protected void setJaxbRefQueryColumns(List<QueryColumn> lst) {
        // no-op, since jaxb sends lst=hubQueryColumns 
    }
     
    @OAOne(
        displayName = "Query Info", 
        reverseName = QueryInfo.P_QueryTables, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"QueryInfoId"})
    @XmlTransient
    public QueryInfo getQueryInfo() {
        if (queryInfo == null) {
            queryInfo = (QueryInfo) getObject(P_QueryInfo);
        }
        return queryInfo;
    }
    public void setQueryInfo(QueryInfo newValue) {
        QueryInfo old = this.queryInfo;
        fireBeforePropertyChange(P_QueryInfo, old, newValue);
        this.queryInfo = newValue;
        firePropertyChange(P_QueryInfo, old, this.queryInfo);
    }
    @XmlElement(name="queryInfo", required=true)
    public QueryInfo getJaxbQueryInfo() {
        Object obj = super.getJaxbObject(P_QueryInfo);
        return (QueryInfo) obj;
    }
    public void setJaxbQueryInfo(QueryInfo newValue) {
        if (getJaxbAllowPropertyChange(P_QueryInfo, this.queryInfo, newValue)) {
            setQueryInfo(newValue);
        }
    }
    @XmlElement(name="refQueryInfo")
    @XmlIDREF
    public QueryInfo getJaxbRefQueryInfo() {
        Object obj = super.getJaxbRefObject(P_QueryInfo);
        return (QueryInfo) obj;
    }
    public void setJaxbRefQueryInfo(QueryInfo newValue) {
        setJaxbQueryInfo(newValue);
    }
    @XmlElement(name="queryInfoId", required=true)
    public String getJaxbQueryInfoId() {
        String s = super.getJaxbId(P_QueryInfo);
        return s;
    }
    public void setJaxbQueryInfoId(String id) {
        setJaxbId(P_QueryInfo, id);
    }
     
    @OAOne(
        reverseName = Table.P_QueryTables, 
        required = true, 
        allowCreateNew = false, 
        defaultPropertyPath = P_QueryInfo+"."+QueryInfo.P_Repository+"."+Repository.P_MainTable, 
        defaultPropertyPathCanBeChanged = true
    )
    @OAFkey(columns = {"TableId"})
    @XmlTransient
    public Table getTable() {
        if (table == null) {
            table = (Table) getObject(P_Table);
        }
        return table;
    }
    public void setTable(Table newValue) {
        Table old = this.table;
        fireBeforePropertyChange(P_Table, old, newValue);
        this.table = newValue;
        firePropertyChange(P_Table, old, this.table);
    }
    @XmlElement(name="table", required=true)
    public Table getJaxbTable() {
        Object obj = super.getJaxbObject(P_Table);
        return (Table) obj;
    }
    public void setJaxbTable(Table newValue) {
        if (getJaxbAllowPropertyChange(P_Table, this.table, newValue)) {
            setTable(newValue);
        }
    }
    @XmlElement(name="refTable")
    @XmlIDREF
    public Table getJaxbRefTable() {
        Object obj = super.getJaxbRefObject(P_Table);
        return (Table) obj;
    }
    public void setJaxbRefTable(Table newValue) {
        setJaxbTable(newValue);
    }
    @XmlElement(name="tableId", required=true)
    public String getJaxbTableId() {
        String s = super.getJaxbId(P_Table);
        return s;
    }
    public void setJaxbTableId(String id) {
        setJaxbId(P_Table, id);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        int joinTableFkey = rs.getInt(3);
        if (!rs.wasNull() && joinTableFkey > 0) {
            setProperty(P_JoinTable, new OAObjectKey(joinTableFkey));
        }
        int queryInfoFkey = rs.getInt(4);
        if (!rs.wasNull() && queryInfoFkey > 0) {
            setProperty(P_QueryInfo, new OAObjectKey(queryInfoFkey));
        }
        int tableFkey = rs.getInt(5);
        if (!rs.wasNull() && tableFkey > 0) {
            setProperty(P_Table, new OAObjectKey(tableFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
    public static QueryTable jaxbCreate() {
        QueryTable queryTable = (QueryTable) OAObject.jaxbCreateInstance(QueryTable.class);
        if (queryTable == null) queryTable = new QueryTable();
        return queryTable;
    }
}
 
