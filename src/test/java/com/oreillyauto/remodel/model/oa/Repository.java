// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Logger;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import com.viaoa.annotation.OACalculatedProperty;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAColumn;
import com.viaoa.annotation.OAFkey;
import com.viaoa.annotation.OAId;
import com.viaoa.annotation.OAIndex;
import com.viaoa.annotation.OAIndexColumn;
import com.viaoa.annotation.OAMany;
import com.viaoa.annotation.OAMethod;
import com.viaoa.annotation.OAObjCallback;
import com.viaoa.annotation.OAOne;
import com.viaoa.annotation.OAProperty;
import com.viaoa.annotation.OATable;
import com.viaoa.hub.Hub;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCallback;
import com.viaoa.object.OAObjectInfoDelegate;
import com.viaoa.object.OAObjectKey;
import com.viaoa.util.OAConv;
import com.viaoa.util.OADateTime;
import com.viaoa.util.OAString;

@OAClass(lowerName = "repository", pluralName = "Repositories", shortName = "rps", displayName = "Repository", displayProperty = "fileName", rootTreePropertyPaths = {
		"[Project]." + Project.P_Repositories
})
@OATable(indexes = {
		@OAIndex(name = "RepositoryMainTable", fkey = true, columns = { @OAIndexColumn(name = "MainTableId") }),
		@OAIndex(name = "RepositoryProject", fkey = true, columns = { @OAIndexColumn(name = "ProjectId") })
})
@XmlRootElement(name = "repository")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.NONE)
public class Repository extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(Repository.class.getName());

	public static final String PROPERTY_Id = "Id";
	public static final String P_Id = "Id";
	public static final String PROPERTY_Created = "Created";
	public static final String P_Created = "Created";
	public static final String PROPERTY_FileName = "FileName";
	public static final String P_FileName = "FileName";
	public static final String PROPERTY_PackageName = "PackageName";
	public static final String P_PackageName = "PackageName";
	public static final String PROPERTY_Seq = "Seq";
	public static final String P_Seq = "Seq";
	public static final String PROPERTY_Description = "Description";
	public static final String P_Description = "Description";

	public static final String PROPERTY_FileExists = "FileExists";
	public static final String P_FileExists = "FileExists";

	public static final String PROPERTY_MainTable = "MainTable";
	public static final String P_MainTable = "MainTable";
	public static final String PROPERTY_Project = "Project";
	public static final String P_Project = "Project";
	public static final String PROPERTY_QueryInfos = "QueryInfos";
	public static final String P_QueryInfos = "QueryInfos";

	public static final String METHOD_Parse = "Parse";
	public static final String M_Parse = "Parse";
	protected volatile int id;
	protected volatile OADateTime created;
	protected volatile String fileName;
	protected volatile String packageName;
	protected volatile int seq;
	protected volatile String description;

	// Links to other objects.
	protected volatile transient Table mainTable;
	protected volatile transient Project project;
	protected transient Hub<QueryInfo> hubQueryInfos;

	public Repository() {
		if (!isLoading()) {
			setCreated(new OADateTime());
		}
	}

	public Repository(int id) {
		this();
		setId(id);
	}

	@XmlAttribute(name = "oaSingleId")
	public Integer getJaxbGuid() {
		return super.getJaxbGuid();
	}

	@OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
	@OAId()
	@XmlTransient
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getId() {
		return id;
	}

	public void setId(int newValue) {
		int old = id;
		fireBeforePropertyChange(P_Id, old, newValue);
		this.id = newValue;
		firePropertyChange(P_Id, old, this.id);
	}

	@XmlID
	@XmlAttribute(name = "id")
	public String getJaxbId() {
		// note: jaxb spec requires id to be a string
		if (!getJaxbShouldInclude(P_Id)) {
			return null;
		}
		return "" + id;
	}

	public void setJaxbId(String id) {
		if (getJaxbAllowPropertyChange(P_Id, this.id, id)) {
			setId((int) OAConv.convert(int.class, id));
		}
	}

	@OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
	@OAColumn(sqlType = java.sql.Types.TIMESTAMP)
	public OADateTime getCreated() {
		return created;
	}

	public void setCreated(OADateTime newValue) {
		OADateTime old = created;
		fireBeforePropertyChange(P_Created, old, newValue);
		this.created = newValue;
		firePropertyChange(P_Created, old, this.created);
	}

	@XmlElement(name = "created", nillable = true)
	public OADateTime getJaxbCreated() {
		if (!getJaxbShouldInclude(P_Created)) {
			return null;
		}
		return getCreated();
	}

	public void setJaxbCreated(OADateTime newValue) {
		if (getJaxbAllowPropertyChange(P_Created, this.created, newValue)) {
			setCreated(newValue);
		}
	}

	@OAProperty(displayName = "File Name", maxLength = 250, displayLength = 20, hasCustomCode = true, isFileName = true)
	@OAColumn(maxLength = 250)
	public String getFileName() {
		return fileName;
	}

	public void setFileName(String newValue) {
		String[] ss = null;
		if (!isLoading()) {
			ss = convertFileName(newValue);
			newValue = ss[0];
		}

		String old = fileName;
		fireBeforePropertyChange(P_FileName, old, newValue);
		this.fileName = newValue;
		firePropertyChange(P_FileName, old, this.fileName);

		if (ss != null) {
			setPackageName(ss[1]);
		}
	}

	protected String[] convertFileName(String fn) {
		String[] ss = new String[2];

		ss[0] = fn;
		ss[1] = getPackageName();

		if (OAString.isEmpty(fn)) {
			return ss;
		}
		Project proj = getProject();
		if (proj == null) {
			return ss;
		}
		String s = proj.getCodeDirectory();
		if (OAString.isNotEmpty(s) && fn.startsWith(s)) {
			fn = fn.substring(s.length() + 1);
		}

		fn = OAString.convert(fn, "\\", "/");

		int dcnt = OAString.dcount(fn, "/");
		if (dcnt > 1) {
			s = OAString.field(fn, "/", 1, dcnt - 1);
			s = OAString.convert(s, "/", ".");
			ss[1] = s;

			fn = OAString.field(fn, "/", dcnt);
		}
		ss[0] = fn;
		return ss;
	}

	@XmlElement(name = "fileName", nillable = true)
	public String getJaxbFileName() {
		if (!getJaxbShouldInclude(P_FileName)) {
			return null;
		}
		return getFileName();
	}

	public void setJaxbFileName(String newValue) {
		if (getJaxbAllowPropertyChange(P_FileName, this.fileName, newValue)) {
			setFileName(newValue);
		}
	}

	@OAProperty(displayName = "Package Name", maxLength = 150, displayLength = 20)
	@OAColumn(maxLength = 150)
	public String getPackageName() {
		return packageName;
	}

	public void setPackageName(String newValue) {
		String old = packageName;
		fireBeforePropertyChange(P_PackageName, old, newValue);
		this.packageName = newValue;
		firePropertyChange(P_PackageName, old, this.packageName);
	}

	@XmlElement(name = "packageName", nillable = true)
	public String getJaxbPackageName() {
		if (!getJaxbShouldInclude(P_PackageName)) {
			return null;
		}
		return getPackageName();
	}

	public void setJaxbPackageName(String newValue) {
		if (getJaxbAllowPropertyChange(P_PackageName, this.packageName, newValue)) {
			setPackageName(newValue);
		}
	}

	@OAProperty(displayLength = 6, isAutoSeq = true)
	@OAColumn(sqlType = java.sql.Types.INTEGER)
	public int getSeq() {
		return seq;
	}

	public void setSeq(int newValue) {
		int old = seq;
		fireBeforePropertyChange(P_Seq, old, newValue);
		this.seq = newValue;
		firePropertyChange(P_Seq, old, this.seq);
	}

	@XmlElement(name = "seq")
	public Integer getJaxbSeq() {
		if (!getJaxbShouldInclude(P_Seq)) {
			return null;
		}
		return getSeq();
	}

	public void setJaxbSeq(Integer newValue) {
		if (getJaxbAllowPropertyChange(P_Seq, this.seq, newValue)) {
			setSeq(newValue);
		}
	}

	@OAProperty(displayLength = 30, columnLength = 20)
	@OAColumn(sqlType = java.sql.Types.CLOB)
	public String getDescription() {
		return description;
	}

	public void setDescription(String newValue) {
		String old = description;
		fireBeforePropertyChange(P_Description, old, newValue);
		this.description = newValue;
		firePropertyChange(P_Description, old, this.description);
	}

	@XmlElement(name = "description", nillable = true)
	public String getJaxbDescription() {
		if (!getJaxbShouldInclude(P_Description)) {
			return null;
		}
		return getDescription();
	}

	public void setJaxbDescription(String newValue) {
		if (getJaxbAllowPropertyChange(P_Description, this.description, newValue)) {
			setDescription(newValue);
		}
	}

	@OACalculatedProperty(displayName = "File Exists", displayLength = 5, columnLength = 6, columnName = "Exists", properties = {
			P_FileName, P_PackageName, P_Project + "." + Project.P_CodeDirectory })
	public boolean getFileExists() {
		return false;
	}

	public boolean isFileExists() {
		return getFileExists();
	}

	@XmlElement(name = "fileExists")
	public Boolean getJaxbFileExists() {
		if (!getJaxbShouldInclude(P_FileExists)) {
			return null;
		}
		return getFileExists();
	}

	@OAOne(displayName = "Main Table", reverseName = Table.P_Repositories, allowCreateNew = false)
	@OAFkey(columns = { "MainTableId" })
	@XmlTransient
	public Table getMainTable() {
		if (mainTable == null) {
			mainTable = (Table) getObject(P_MainTable);
		}
		return mainTable;
	}

	public void setMainTable(Table newValue) {
		Table old = this.mainTable;
		fireBeforePropertyChange(P_MainTable, old, newValue);
		this.mainTable = newValue;
		firePropertyChange(P_MainTable, old, this.mainTable);
	}

	@XmlElement(name = "mainTable", nillable = true)
	public Table getJaxbMainTable() {
		Object obj = super.getJaxbObject(P_MainTable);
		return (Table) obj;
	}

	public void setJaxbMainTable(Table newValue) {
		if (getJaxbAllowPropertyChange(P_MainTable, this.mainTable, newValue)) {
			setMainTable(newValue);
		}
	}

	@XmlElement(name = "refMainTable")
	@XmlIDREF
	public Table getJaxbRefMainTable() {
		Object obj = super.getJaxbRefObject(P_MainTable);
		return (Table) obj;
	}

	public void setJaxbRefMainTable(Table newValue) {
		setJaxbMainTable(newValue);
	}

	@XmlElement(name = "mainTableId", nillable = true)
	public String getJaxbMainTableId() {
		String s = super.getJaxbId(P_MainTable);
		return s;
	}

	public void setJaxbMainTableId(String id) {
		setJaxbId(P_MainTable, id);
	}

	@OAOne(reverseName = Project.P_Repositories, required = true, allowCreateNew = false)
	@OAFkey(columns = { "ProjectId" })
	@XmlTransient
	public Project getProject() {
		if (project == null) {
			project = (Project) getObject(P_Project);
		}
		return project;
	}

	public void setProject(Project newValue) {
		Project old = this.project;
		fireBeforePropertyChange(P_Project, old, newValue);
		this.project = newValue;
		firePropertyChange(P_Project, old, this.project);
	}

	@XmlElement(name = "project", required = true)
	public Project getJaxbProject() {
		Object obj = super.getJaxbObject(P_Project);
		return (Project) obj;
	}

	public void setJaxbProject(Project newValue) {
		if (getJaxbAllowPropertyChange(P_Project, this.project, newValue)) {
			setProject(newValue);
		}
	}

	@XmlElement(name = "refProject")
	@XmlIDREF
	public Project getJaxbRefProject() {
		Object obj = super.getJaxbRefObject(P_Project);
		return (Project) obj;
	}

	public void setJaxbRefProject(Project newValue) {
		setJaxbProject(newValue);
	}

	@XmlElement(name = "projectId", required = true)
	public String getJaxbProjectId() {
		String s = super.getJaxbId(P_Project);
		return s;
	}

	public void setJaxbProjectId(String id) {
		setJaxbId(P_Project, id);
	}

	@OAMany(displayName = "Query Infos", toClass = QueryInfo.class, owner = true, reverseName = QueryInfo.P_Repository, cascadeSave = true, cascadeDelete = true, seqProperty = QueryInfo.P_Seq, sortProperty = QueryInfo.P_Seq)
	@XmlTransient
	public Hub<QueryInfo> getQueryInfos() {
		if (hubQueryInfos == null) {
			hubQueryInfos = (Hub<QueryInfo>) getHub(P_QueryInfos);
		}
		return hubQueryInfos;
	}

	@XmlElementWrapper(name = "queryInfos")
	@XmlElement(name = "queryInfo", type = QueryInfo.class)
	protected List<QueryInfo> getJaxbQueryInfos() {
		return getJaxbHub(P_QueryInfos);
	}

	@XmlElementWrapper(name = "refQueryInfos")
	@XmlElement(name = "queryInfo", type = QueryInfo.class)
	@XmlIDREF
	protected List<QueryInfo> getJaxbRefQueryInfos() {
		return getJaxbRefHub(P_QueryInfos);
	}

	protected void setJaxbRefQueryInfos(List<QueryInfo> lst) {
		// no-op, since jaxb sends lst=hubQueryInfos
	}

	@OAMethod(displayName = "Parse")
	public void parse() {
	}

	@OAObjCallback
	public void parseCallback(final OAObjectCallback callback) {
		switch (callback.getType()) {
		case SetConfirmForCommand:
			if (getQueryInfos().getSize() > 0) {
				callback.setConfirmMessage("OK to reparse for SQL Query information");
				callback.setConfirmTitle("confirm");
			}
			break;
		}
	}

	public void load(ResultSet rs, int id) throws SQLException {
		this.id = id;
		java.sql.Timestamp timestamp;
		timestamp = rs.getTimestamp(2);
		if (timestamp != null) {
			this.created = new OADateTime(timestamp);
		}
		this.fileName = rs.getString(3);
		this.packageName = rs.getString(4);
		this.seq = (int) rs.getInt(5);
		if (rs.wasNull()) {
			OAObjectInfoDelegate.setPrimitiveNull(this, Repository.P_Seq, true);
		}
		this.description = rs.getString(6);
		int mainTableFkey = rs.getInt(7);
		if (!rs.wasNull() && mainTableFkey > 0) {
			setProperty(P_MainTable, new OAObjectKey(mainTableFkey));
		}
		int projectFkey = rs.getInt(8);
		if (!rs.wasNull() && projectFkey > 0) {
			setProperty(P_Project, new OAObjectKey(projectFkey));
		}
		if (rs.getMetaData().getColumnCount() != 8) {
			throw new SQLException("invalid number of columns for load method");
		}

		this.changedFlag = false;
		this.newFlag = false;
	}

	public static Repository jaxbCreate() {
		Repository repository = (Repository) OAObject.jaxbCreateInstance(Repository.class);
		if (repository == null) {
			repository = new Repository();
		}
		return repository;
	}
}
