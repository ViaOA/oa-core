// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "tableCategory",
    pluralName = "TableCategories",
    shortName = "tbc",
    displayName = "Table Category",
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "TableCategoryDatabase", fkey = true, columns = { @OAIndexColumn(name = "DatabaseId") }), 
        @OAIndex(name = "TableCategoryParentTableCategory", fkey = true, columns = { @OAIndexColumn(name = "ParentTableCategoryId") })
    }
)
public class TableCategory extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(TableCategory.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_Name = "Name";
     
     
    public static final String P_Database = "Database";
    public static final String P_ParentTableCategory = "ParentTableCategory";
    public static final String P_TableCategories = "TableCategories";
    public static final String P_Tables = "Tables";
     
    public static final String M_Generate = "Generate";
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
     
    // Links to other objects.
    protected volatile transient Database database;
    protected volatile transient TableCategory parentTableCategory;
    protected transient Hub<TableCategory> hubTableCategories;
    protected transient Hub<Table> hubTables;
     
    public TableCategory() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public TableCategory(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAOne(
        reverseName = Database.P_TableCategories, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"DatabaseId"})
    public Database getDatabase() {
        if (database == null) {
            database = (Database) getObject(P_Database);
        }
        return database;
    }
    public void setDatabase(Database newValue) {
        Database old = this.database;
        fireBeforePropertyChange(P_Database, old, newValue);
        this.database = newValue;
        firePropertyChange(P_Database, old, this.database);
    }
    @OAOne(
        displayName = "Parent Table Category", 
        reverseName = TableCategory.P_TableCategories, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ParentTableCategoryId"})
    public TableCategory getParentTableCategory() {
        if (parentTableCategory == null) {
            parentTableCategory = (TableCategory) getObject(P_ParentTableCategory);
        }
        return parentTableCategory;
    }
    public void setParentTableCategory(TableCategory newValue) {
        TableCategory old = this.parentTableCategory;
        fireBeforePropertyChange(P_ParentTableCategory, old, newValue);
        this.parentTableCategory = newValue;
        firePropertyChange(P_ParentTableCategory, old, this.parentTableCategory);
    }
    @OAMany(
        displayName = "Table Categories", 
        toClass = TableCategory.class, 
        recursive = true, 
        reverseName = TableCategory.P_ParentTableCategory
    )
    public Hub<TableCategory> getTableCategories() {
        if (hubTableCategories == null) {
            hubTableCategories = (Hub<TableCategory>) getHub(P_TableCategories);
        }
        return hubTableCategories;
    }
    @OAMany(
        toClass = Table.class, 
        reverseName = Table.P_TableCategories
    )
    @OALinkTable(name = "TableCategoryTable", indexName = "TableTableCategory", columns = {"TableCategoryId"})
    public Hub<Table> getTables() {
        if (hubTables == null) {
            hubTables = (Hub<Table>) getHub(P_Tables);
        }
        return hubTables;
    }
    @OAMethod(displayName = "Generate")
    public void generate() {
        // todo: add custom code here
    //    qqqqqqqqqqqqqqqqqqqqqqqqqq
    }

    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        int databaseFkey = rs.getInt(4);
        if (!rs.wasNull() && databaseFkey > 0) {
            setProperty(P_Database, new OAObjectKey(databaseFkey));
        }
        int parentTableCategoryFkey = rs.getInt(5);
        if (!rs.wasNull() && parentTableCategoryFkey > 0) {
            setProperty(P_ParentTableCategory, new OAObjectKey(parentTableCategoryFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
