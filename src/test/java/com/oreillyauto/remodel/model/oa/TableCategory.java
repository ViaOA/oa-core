// Generated by OABuilder
package com.oreillyauto.remodel.model.oa;
 
import java.util.List;
import java.util.logging.*;
import java.sql.*;
import javax.xml.bind.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
import com.oreillyauto.remodel.delegate.oa.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
 
@OAClass(
    lowerName = "tableCategory",
    pluralName = "TableCategories",
    shortName = "tbc",
    displayName = "Table Category",
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "TableCategoryDatabase", fkey = true, columns = { @OAIndexColumn(name = "DatabaseId") }), 
        @OAIndex(name = "TableCategoryParentTableCategory", fkey = true, columns = { @OAIndexColumn(name = "ParentTableCategoryId") })
    }
)
@XmlRootElement(name = "tableCategory")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.NONE)
public class TableCategory extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(TableCategory.class.getName());

    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
     
     
    public static final String PROPERTY_Database = "Database";
    public static final String P_Database = "Database";
    public static final String PROPERTY_ParentTableCategory = "ParentTableCategory";
    public static final String P_ParentTableCategory = "ParentTableCategory";
    public static final String PROPERTY_TableCategories = "TableCategories";
    public static final String P_TableCategories = "TableCategories";
    public static final String PROPERTY_Tables = "Tables";
    public static final String P_Tables = "Tables";
     
    public static final String METHOD_Generate = "Generate";
    public static final String M_Generate = "Generate";
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
     
    // Links to other objects.
    protected volatile transient Database database;
    protected volatile transient TableCategory parentTableCategory;
    protected transient Hub<TableCategory> hubTableCategories;
    protected transient Hub<Table> hubTables;
     
    public TableCategory() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public TableCategory(int id) {
        this();
        setId(id);
    }
     

    @XmlAttribute(name="oaSingleId")
    public Integer getJaxbGuid() {
        return super.getJaxbGuid();
    }

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @XmlTransient
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @XmlID
    @XmlAttribute(name="id")
    public String getJaxbId() {
        // note: jaxb spec requires id to be a string
        if (!getJaxbShouldInclude(P_Id)) return null;
        return ""+id;
    }
    public void setJaxbId(String id) {
        if (getJaxbAllowPropertyChange(P_Id, this.id, id)) {
            setId((int) OAConv.convert(int.class, id));
        }
    }

    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @XmlElement(name="created", nillable=true)
    public OADateTime getJaxbCreated() {
        if (!getJaxbShouldInclude(P_Created)) return null;
        return getCreated();
    }
    public void setJaxbCreated(OADateTime newValue) {
        if (getJaxbAllowPropertyChange(P_Created, this.created, newValue)) {
            setCreated(newValue);
        }
    }

    @OAProperty(maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @XmlElement(name="name", nillable=true)
    public String getJaxbName() {
        if (!getJaxbShouldInclude(P_Name)) return null;
        return getName();
    }
    public void setJaxbName(String newValue) {
        if (getJaxbAllowPropertyChange(P_Name, this.name, newValue)) {
            setName(newValue);
        }
    }

    @OAOne(
        reverseName = Database.P_TableCategories, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"DatabaseId"})
    @XmlTransient
    public Database getDatabase() {
        if (database == null) {
            database = (Database) getObject(P_Database);
        }
        return database;
    }
    public void setDatabase(Database newValue) {
        Database old = this.database;
        fireBeforePropertyChange(P_Database, old, newValue);
        this.database = newValue;
        firePropertyChange(P_Database, old, this.database);
    }
    @XmlElement(name="database", required=true)
    public Database getJaxbDatabase() {
        Object obj = super.getJaxbObject(P_Database);
        return (Database) obj;
    }
    public void setJaxbDatabase(Database newValue) {
        if (getJaxbAllowPropertyChange(P_Database, this.database, newValue)) {
            setDatabase(newValue);
        }
    }
    @XmlElement(name="refDatabase")
    @XmlIDREF
    public Database getJaxbRefDatabase() {
        Object obj = super.getJaxbRefObject(P_Database);
        return (Database) obj;
    }
    public void setJaxbRefDatabase(Database newValue) {
        setJaxbDatabase(newValue);
    }
    @XmlElement(name="databaseId", required=true)
    public String getJaxbDatabaseId() {
        String s = super.getJaxbId(P_Database);
        return s;
    }
    public void setJaxbDatabaseId(String id) {
        setJaxbId(P_Database, id);
    }
     
    @OAOne(
        displayName = "Parent Table Category", 
        reverseName = TableCategory.P_TableCategories, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ParentTableCategoryId"})
    @XmlTransient
    public TableCategory getParentTableCategory() {
        if (parentTableCategory == null) {
            parentTableCategory = (TableCategory) getObject(P_ParentTableCategory);
        }
        return parentTableCategory;
    }
    public void setParentTableCategory(TableCategory newValue) {
        TableCategory old = this.parentTableCategory;
        fireBeforePropertyChange(P_ParentTableCategory, old, newValue);
        this.parentTableCategory = newValue;
        firePropertyChange(P_ParentTableCategory, old, this.parentTableCategory);
    }
    @XmlElement(name="parentTableCategory", nillable=true)
    public TableCategory getJaxbParentTableCategory() {
        Object obj = super.getJaxbObject(P_ParentTableCategory);
        return (TableCategory) obj;
    }
    public void setJaxbParentTableCategory(TableCategory newValue) {
        if (getJaxbAllowPropertyChange(P_ParentTableCategory, this.parentTableCategory, newValue)) {
            setParentTableCategory(newValue);
        }
    }
    @XmlElement(name="refParentTableCategory")
    @XmlIDREF
    public TableCategory getJaxbRefParentTableCategory() {
        Object obj = super.getJaxbRefObject(P_ParentTableCategory);
        return (TableCategory) obj;
    }
    public void setJaxbRefParentTableCategory(TableCategory newValue) {
        setJaxbParentTableCategory(newValue);
    }
    @XmlElement(name="parentTableCategoryId", nillable=true)
    public String getJaxbParentTableCategoryId() {
        String s = super.getJaxbId(P_ParentTableCategory);
        return s;
    }
    public void setJaxbParentTableCategoryId(String id) {
        setJaxbId(P_ParentTableCategory, id);
    }
     
    @OAMany(
        displayName = "Table Categories", 
        toClass = TableCategory.class, 
        recursive = true, 
        reverseName = TableCategory.P_ParentTableCategory
    )
    @XmlTransient
    public Hub<TableCategory> getTableCategories() {
        if (hubTableCategories == null) {
            hubTableCategories = (Hub<TableCategory>) getHub(P_TableCategories);
        }
        return hubTableCategories;
    }
    @XmlElementWrapper(name="tableCategories")
    @XmlElement(name="tableCategory", type=TableCategory.class)
    protected List<TableCategory> getJaxbTableCategories() {
        return getJaxbHub(P_TableCategories);
    }
    @XmlElementWrapper(name="refTableCategories")
    @XmlElement(name="tableCategory", type=TableCategory.class)
    @XmlIDREF
    protected List<TableCategory> getJaxbRefTableCategories() {
        return getJaxbRefHub(P_TableCategories); 
    }
    protected void setJaxbRefTableCategories(List<TableCategory> lst) {
        // no-op, since jaxb sends lst=hubTableCategories 
    }
     
    @OAMany(
        toClass = Table.class, 
        reverseName = Table.P_TableCategories
    )
    @OALinkTable(name = "TableCategoryTable", indexName = "TableTableCategory", columns = {"TableCategoryId"})
    @XmlTransient
    public Hub<Table> getTables() {
        if (hubTables == null) {
            hubTables = (Hub<Table>) getHub(P_Tables);
        }
        return hubTables;
    }
    @XmlElementWrapper(name="tables")
    @XmlElement(name="table", type=Table.class)
    protected List<Table> getJaxbTables() {
        return getJaxbHub(P_Tables);
    }
    @XmlElementWrapper(name="refTables")
    @XmlElement(name="table", type=Table.class)
    @XmlIDREF
    protected List<Table> getJaxbRefTables() {
        return getJaxbRefHub(P_Tables); 
    }
    protected void setJaxbRefTables(List<Table> lst) {
        // no-op, since jaxb sends lst=hubTables 
    }
     
    @OAMethod(displayName = "Generate")
    public void generate() {
        // todo: add custom code here
    //    qqqqqqqqqqqqqqqqqqqqqqqqqq
    }

    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        int databaseFkey = rs.getInt(4);
        if (!rs.wasNull() && databaseFkey > 0) {
            setProperty(P_Database, new OAObjectKey(databaseFkey));
        }
        int parentTableCategoryFkey = rs.getInt(5);
        if (!rs.wasNull() && parentTableCategoryFkey > 0) {
            setProperty(P_ParentTableCategory, new OAObjectKey(parentTableCategoryFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
    public static TableCategory jaxbCreate() {
        TableCategory tableCategory = (TableCategory) OAObject.jaxbCreateInstance(TableCategory.class);
        if (tableCategory == null) tableCategory = new TableCategory();
        return tableCategory;
    }
}
 
