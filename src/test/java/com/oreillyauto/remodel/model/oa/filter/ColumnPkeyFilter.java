// Generated by OABuilder
package com.oreillyauto.remodel.model.oa.filter;

import java.util.logging.Logger;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import com.oreillyauto.remodel.model.oa.Column;
import com.oreillyauto.remodel.model.oa.propertypath.ColumnPP;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAClassFilter;
import com.viaoa.hub.CustomHubFilter;
import com.viaoa.hub.Hub;
import com.viaoa.hub.HubFilter;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCacheFilter;

@OAClass(useDataSource = false, localOnly = true)
@XmlRootElement(name = "columnPkeyFilter")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.PROPERTY)
@OAClassFilter(name = "Pkey", displayName = "Pkey", hasInputParams = false, query = "primaryKey = true")
public class ColumnPkeyFilter extends OAObject implements CustomHubFilter<Column> {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(ColumnPkeyFilter.class.getName());

	public static final String PPCode = ":Pkey()";
	private Hub<Column> hubMaster;
	private Hub<Column> hub;
	private HubFilter<Column> hubFilter;
	private OAObjectCacheFilter<Column> cacheFilter;
	private boolean bUseObjectCache;

	public ColumnPkeyFilter() {
		this(null, null, false);
	}

	public ColumnPkeyFilter(Hub<Column> hub) {
		this(null, hub, true);
	}

	public ColumnPkeyFilter(Hub<Column> hubMaster, Hub<Column> hub) {
		this(hubMaster, hub, false);
	}

	public ColumnPkeyFilter(Hub<Column> hubMaster, Hub<Column> hubFiltered, boolean bUseObjectCache) {
		this.hubMaster = hubMaster;
		this.hub = hubFiltered;
		this.bUseObjectCache = bUseObjectCache;
		if (hubMaster != null) {
			getHubFilter();
		}
		if (bUseObjectCache) {
			getObjectCacheFilter();
		}
	}

	public static ColumnPkeyFilter jaxbCreate() {
		ColumnPkeyFilter columnPkeyFilter = (ColumnPkeyFilter) OAObject.jaxbCreateInstance(ColumnPkeyFilter.class);
		if (columnPkeyFilter == null) {
			columnPkeyFilter = new ColumnPkeyFilter();
		}
		return columnPkeyFilter;
	}

	public void reset() {
	}

	public boolean isDataEntered() {
		return false;
	}

	public void refresh() {
		if (hubFilter != null) {
			getHubFilter().refresh();
		}
		if (cacheFilter != null) {
			getObjectCacheFilter().refresh();
		}
	}

	@Override
	public HubFilter<Column> getHubFilter() {
		if (hubFilter != null) {
			return hubFilter;
		}
		if (hubMaster == null) {
			return null;
		}
		hubFilter = new HubFilter<Column>(hubMaster, hub) {
			@Override
			public boolean isUsed(Column column) {
				return ColumnPkeyFilter.this.isUsed(column);
			}
		};
		hubFilter.addDependentProperty(ColumnPP.primaryKey(), false);
		hubFilter.refresh();
		return hubFilter;
	}

	public OAObjectCacheFilter<Column> getObjectCacheFilter() {
		if (cacheFilter != null) {
			return cacheFilter;
		}
		if (!bUseObjectCache) {
			return null;
		}
		cacheFilter = new OAObjectCacheFilter<Column>(hub) {
			@Override
			public boolean isUsed(Column column) {
				return ColumnPkeyFilter.this.isUsed(column);
			}

			@Override
			protected void reselect() {
				ColumnPkeyFilter.this.reselect();
			}
		};
		cacheFilter.addDependentProperty(ColumnPP.primaryKey(), false);
		cacheFilter.refresh();
		return cacheFilter;
	}

	public void reselect() {
		// can be overwritten to query datasource
	}

	// ==================
	// this method has custom code that will need to be put into the OABuilder filter

	@Override
	public boolean isUsed(Column column) {
		boolean b = column.getPrimaryKey();
		return b;
	}
}
