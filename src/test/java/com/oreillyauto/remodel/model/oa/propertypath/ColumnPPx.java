// Generated by OABuilder
package com.oreillyauto.remodel.model.oa.propertypath;
 
import java.io.Serializable;

import com.oreillyauto.remodel.model.oa.*;
 
public class ColumnPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public ColumnPPx(String name) {
        this(null, name);
    }

    public ColumnPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public ColumnTypePPx columnType() {
        ColumnTypePPx ppx = new ColumnTypePPx(this, Column.P_ColumnType);
        return ppx;
    }

    public ForeignTableColumnPPx foreignTableColumns() {
        ForeignTableColumnPPx ppx = new ForeignTableColumnPPx(this, Column.P_ForeignTableColumns);
        return ppx;
    }

    public ForeignTableColumnPPx foreignTableForeignColumns() {
        ForeignTableColumnPPx ppx = new ForeignTableColumnPPx(this, Column.P_ForeignTableForeignColumns);
        return ppx;
    }

    public IndexColumnPPx indexColumns() {
        IndexColumnPPx ppx = new IndexColumnPPx(this, Column.P_IndexColumns);
        return ppx;
    }

    public JsonObjectPPx jsonObject() {
        JsonObjectPPx ppx = new JsonObjectPPx(this, Column.P_JsonObject);
        return ppx;
    }

    public QueryColumnPPx queryColumns() {
        QueryColumnPPx ppx = new QueryColumnPPx(this, Column.P_QueryColumns);
        return ppx;
    }

    public QuerySortPPx querySorts() {
        QuerySortPPx ppx = new QuerySortPPx(this, Column.P_QuerySorts);
        return ppx;
    }

    public TablePPx table() {
        TablePPx ppx = new TablePPx(this, Column.P_Table);
        return ppx;
    }

    public String id() {
        return pp + "." + Column.P_Id;
    }

    public String created() {
        return pp + "." + Column.P_Created;
    }

    public String name() {
        return pp + "." + Column.P_Name;
    }

    public String primaryKey() {
        return pp + "." + Column.P_PrimaryKey;
    }

    public String autoNumber() {
        return pp + "." + Column.P_AutoNumber;
    }

    public String use() {
        return pp + "." + Column.P_Use;
    }

    public String newName() {
        return pp + "." + Column.P_NewName;
    }

    public String description() {
        return pp + "." + Column.P_Description;
    }

    public String size() {
        return pp + "." + Column.P_Size;
    }

    public String decimals() {
        return pp + "." + Column.P_Decimals;
    }

    public String seq() {
        return pp + "." + Column.P_Seq;
    }

    public ColumnPPx pkeyFilter() {
        ColumnPPx ppx = new ColumnPPx(this, ":pkey()");
        return ppx;
    }

    @Override
    public String toString() {
        return pp;
    }
    public String pp() {
        return pp;
    }
}
 
