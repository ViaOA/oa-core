// Generated by OABuilder
package com.oreillyauto.remodel.model.oa.search;

import javax.xml.bind.annotation.*;
import java.util.logging.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.datasource.*;
import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
@XmlRootElement(name = "javaTypeSearch")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.PROPERTY)
public class JavaTypeSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(JavaTypeSearch.class.getName());
    public static final String P_Name = "Name";
    public static final String P_DataType = "DataType";
    public static final String P_UseDataTypeSearch = "UseDataTypeSearch";
    public static final String P_MaxResults = "MaxResults";

    protected String name;
    protected DataType dataType;
    protected boolean useDataTypeSearch;
    protected DataTypeSearch searchDataType;
    protected int maxResults;

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public DataType getDataType() {
        if (dataType == null) {
            dataType = (DataType) getObject(P_DataType);
        }
        return dataType;
    }
    public void setDataType(DataType newValue) {
        DataType old = this.dataType;
        this.dataType = newValue;
        firePropertyChange(P_DataType, old, this.dataType);
    }
    public boolean getUseDataTypeSearch() {
        return useDataTypeSearch;
    }
    public void setUseDataTypeSearch(boolean newValue) {
        boolean old = this.useDataTypeSearch;
        this.useDataTypeSearch = newValue;
        firePropertyChange(P_UseDataTypeSearch, old, this.useDataTypeSearch);
    }
    public DataTypeSearch getDataTypeSearch() {
        return this.searchDataType;
    }
    public void setDataTypeSearch(DataTypeSearch newValue) {
        this.searchDataType = newValue;
    }

    public static JavaTypeSearch jaxbCreate() {
        JavaTypeSearch javaTypeSearch = (JavaTypeSearch) OAObject.jaxbCreateInstance(JavaTypeSearch.class);
        if (javaTypeSearch == null) javaTypeSearch = new JavaTypeSearch();
        return javaTypeSearch;
    }

    public void reset() {
        setName(null);
        setDataType(null);
        setUseDataTypeSearch(false);
    }

    public boolean isDataEntered() {
        if (getName() != null) return true;
        if (getDataType() != null) return true;
        if (getUseDataTypeSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<JavaType> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<JavaType> f = new OAQueryFilter<JavaType>(JavaType.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<JavaType> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<JavaType> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<JavaType> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += JavaType.P_Name + " LIKE ?";
            }
            else {
                sql += JavaType.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useDataTypeSearch && getDataType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += JavaTypePP.dataType().pp + " = ?";
            args = OAArray.add(Object.class, args, getDataType());
            finder = new OAFinder<DataType, JavaType>(getDataType(), DataType.P_JavaTypes);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<JavaType> select = new OASelect<JavaType>(JavaType.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useDataTypeSearch && getDataTypeSearch() != null) {
            getDataTypeSearch().appendSelect(JavaTypePP.dataType().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += prefix + JavaType.P_Name + " LIKE ?";
            }
            else {
                sql += prefix + JavaType.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useDataTypeSearch && getDataType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + JavaTypePP.dataType().pp + " = ?";
            args = OAArray.add(Object.class, args, getDataType());
        }
        if (useDataTypeSearch && getDataTypeSearch() != null) {
            getDataTypeSearch().appendSelect(prefix + JavaTypePP.dataType().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<JavaType> filterDataSourceFilter;
    public OAFilter<JavaType> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<JavaType>() {
            @Override
            public boolean isUsed(JavaType javaType) {
                return JavaTypeSearch.this.isUsedForDataSourceFilter(javaType);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<JavaType> filterCustomFilter;
    public OAFilter<JavaType> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<JavaType>() {
            @Override
            public boolean isUsed(JavaType javaType) {
                boolean b = JavaTypeSearch.this.isUsedForCustomFilter(javaType);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(javaType);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(JavaType searchJavaType) {
        if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchJavaType.getName(), s)) return false;
        }
        if (dataType != null) {
            if (!OACompare.isEqual(searchJavaType.getDataType(), dataType)) return false;
        }
        if (useDataTypeSearch && getDataTypeSearch() != null) {
            DataType dataType = (DataType) searchJavaType.getProperty(JavaTypePP.dataType().pp);
            if (dataType == null) return false;
            if (!getDataTypeSearch().isUsedForDataSourceFilter(dataType)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(JavaType searchJavaType) {
        return true;
    }
}
