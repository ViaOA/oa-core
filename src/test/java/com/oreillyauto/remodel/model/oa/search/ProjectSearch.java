// Generated by OABuilder
package com.oreillyauto.remodel.model.oa.search;

import javax.xml.bind.annotation.*;
import java.util.logging.*;

import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
@XmlRootElement(name = "projectSearch")
@XmlType(factoryMethod = "jaxbCreate")
@XmlAccessorType(XmlAccessType.PROPERTY)
public class ProjectSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ProjectSearch.class.getName());
    public static final String P_Name = "Name";
    public static final String P_Created = "Created";
    public static final String P_Program = "Program";
    public static final String P_UseProgramSearch = "UseProgramSearch";
    public static final String P_MaxResults = "MaxResults";

    protected String name;
    protected OADateTime created;
    protected Repository program;
    protected boolean useProgramSearch;
    protected RepositorySearch searchProgram;
    protected int maxResults;

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Repository getProgram() {
        if (program == null) {
            program = (Repository) getObject(P_Program);
        }
        return program;
    }
    public void setProgram(Repository newValue) {
        Repository old = this.program;
        this.program = newValue;
        firePropertyChange(P_Program, old, this.program);
    }
    public boolean getUseProgramSearch() {
        return useProgramSearch;
    }
    public void setUseProgramSearch(boolean newValue) {
        boolean old = this.useProgramSearch;
        this.useProgramSearch = newValue;
        firePropertyChange(P_UseProgramSearch, old, this.useProgramSearch);
    }
    public RepositorySearch getProgramSearch() {
        return this.searchProgram;
    }
    public void setProgramSearch(RepositorySearch newValue) {
        this.searchProgram = newValue;
    }

    public static ProjectSearch jaxbCreate() {
        ProjectSearch projectSearch = (ProjectSearch) OAObject.jaxbCreateInstance(ProjectSearch.class);
        if (projectSearch == null) projectSearch = new ProjectSearch();
        return projectSearch;
    }

    public void reset() {
        setName(null);
        setCreated(null);
        setProgram(null);
        setUseProgramSearch(false);
    }

    public boolean isDataEntered() {
        if (getName() != null) return true;
        if (getCreated() != null) return true;
        if (getProgram() != null) return true;
        if (getUseProgramSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Project> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Project> f = new OAQueryFilter<Project>(Project.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Project> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Project> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Project> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += Project.P_Name + " LIKE ?";
            }
            else {
                sql += Project.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Project.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (!useProgramSearch && getProgram() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += ProjectPP.repositories().pp + " = ?";
            args = OAArray.add(Object.class, args, getProgram());
            finder = new OAFinder<Repository, Project>(getProgram(), Repository.P_Project);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Project> select = new OASelect<Project>(Project.class, sql, args, sortOrder);
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFilter(this.getCustomFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useProgramSearch && getProgramSearch() != null) {
            getProgramSearch().appendSelect(ProjectPP.repositories().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = this.name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                sql += prefix + Project.P_Name + " LIKE ?";
            }
            else {
                sql += prefix + Project.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Project.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (!useProgramSearch && getProgram() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + ProjectPP.repositories().pp + " = ?";
            args = OAArray.add(Object.class, args, getProgram());
        }
        if (useProgramSearch && getProgramSearch() != null) {
            getProgramSearch().appendSelect(prefix + ProjectPP.repositories().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Project> filterDataSourceFilter;
    public OAFilter<Project> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Project>() {
            @Override
            public boolean isUsed(Project project) {
                return ProjectSearch.this.isUsedForDataSourceFilter(project);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Project> filterCustomFilter;
    public OAFilter<Project> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Project>() {
            @Override
            public boolean isUsed(Project project) {
                boolean b = ProjectSearch.this.isUsedForCustomFilter(project);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(project);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Project searchProject) {
        if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(searchProject.getName(), s)) return false;
        }
        if (created != null) {
            if (!OACompare.isEqual(searchProject.getCreated(), created)) return false;
        }
        if (program != null) {
            if (!OACompare.isIn(program, searchProject.getRepositories())) return false;
        }
        if (useProgramSearch && getProgramSearch() != null) {
            Repository repository = (Repository) searchProject.getProperty(ProjectPP.repositories().pp);
            if (repository == null) return false;
            if (!getProgramSearch().isUsedForDataSourceFilter(repository)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Project searchProject) {
        return true;
    }
}
