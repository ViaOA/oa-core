// Generated by OABuilder
package com.oreillyauto.remodel.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.*;
import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class ProjectSearchModel {
    private static Logger LOG = Logger.getLogger(ProjectSearchModel.class.getName());
    
    protected Hub<Project> hub;  // search results
    protected Hub<Project> hubMultiSelect;
    protected Hub<Project> hubSearchFrom;  // hub (optional) to search from
    protected Hub<ProjectSearch> hubProjectSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Repository> hubProgram;
    
    // finder used to find objects in a path
    protected OAFinder<?, Project> finder;
    
    // ObjectModels
    protected RepositoryModel modelProgram;
    
    // SearchModels
    protected RepositorySearchModel modelProgramSearch;
    
    // object used for search data
    protected ProjectSearch projectSearch;
    
    public ProjectSearchModel() {
    }
    
    public ProjectSearchModel(Hub<Project> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Project> getHub() {
        if (hub == null) {
            hub = new Hub<Project>(Project.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Project> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Project> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    ProjectSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Project> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Project.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Project> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Project> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public ProjectSearch getProjectSearch() {
        if (projectSearch != null) return projectSearch;
        projectSearch = new ProjectSearch();
        return projectSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<ProjectSearch> getProjectSearchHub() {
        if (hubProjectSearch == null) {
            hubProjectSearch = new Hub<ProjectSearch>(ProjectSearch.class);
            hubProjectSearch.add(getProjectSearch());
            hubProjectSearch.setPos(0);
        }
        return hubProjectSearch;
    }
    public Hub<Repository> getProgramHub() {
        if (hubProgram != null) return hubProgram;
        hubProgram = getProjectSearchHub().getDetailHub(ProjectSearch.P_Program);
        return hubProgram;
    }
    
    public RepositoryModel getProgramModel() {
        if (modelProgram != null) return modelProgram;
        modelProgram = new RepositoryModel(getProgramHub());
        modelProgram.setDisplayName("Repositories");
        modelProgram.setPluralDisplayName("Repositories");
        modelProgram.setAllowNew(false);
        modelProgram.setAllowSave(true);
        modelProgram.setAllowAdd(false);
        modelProgram.setAllowRemove(false);
        modelProgram.setAllowClear(true);
        modelProgram.setAllowDelete(false);
        modelProgram.setAllowSearch(true);
        modelProgram.setAllowHubSearch(false);
        modelProgram.setAllowGotoEdit(true);
        return modelProgram;
    }
    
    public RepositorySearchModel getProgramSearchModel() {
        if (modelProgramSearch == null) {
            modelProgramSearch = new RepositorySearchModel();
            getProjectSearch().setProgramSearch(modelProgramSearch.getRepositorySearch());
        }
        return modelProgramSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses ProjectSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Project> sel = getProjectSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Project project, Hub<Project> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Project> hub) {
    }
}

