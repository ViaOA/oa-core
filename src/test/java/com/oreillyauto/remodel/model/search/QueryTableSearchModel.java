// Generated by OABuilder
package com.oreillyauto.remodel.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

import com.oreillyauto.remodel.model.*;
import com.oreillyauto.remodel.model.oa.*;
import com.oreillyauto.remodel.model.oa.propertypath.*;
import com.oreillyauto.remodel.model.oa.search.*;
import com.oreillyauto.remodel.model.oa.filter.*;
import com.oreillyauto.remodel.delegate.ModelDelegate;
import com.oreillyauto.remodel.resource.Resource;

public class QueryTableSearchModel {
    private static Logger LOG = Logger.getLogger(QueryTableSearchModel.class.getName());
    
    protected Hub<QueryTable> hub;  // search results
    protected Hub<QueryTable> hubMultiSelect;
    protected Hub<QueryTable> hubSearchFrom;  // hub (optional) to search from
    protected Hub<QueryTableSearch> hubQueryTableSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Table> hubTable;
    protected Hub<QueryTable> hubJoinTable;
    
    // finder used to find objects in a path
    protected OAFinder<?, QueryTable> finder;
    
    // ObjectModels
    protected TableModel modelTable;
    protected QueryTableModel modelJoinTable;
    
    // SearchModels
    protected TableSearchModel modelTableSearch;
    protected QueryTableSearchModel modelJoinTableSearch;
    
    // object used for search data
    protected QueryTableSearch queryTableSearch;
    
    public QueryTableSearchModel() {
    }
    
    public QueryTableSearchModel(Hub<QueryTable> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<QueryTable> getHub() {
        if (hub == null) {
            hub = new Hub<QueryTable>(QueryTable.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<QueryTable> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<QueryTable> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    QueryTableSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<QueryTable> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(QueryTable.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, QueryTable> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, QueryTable> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public QueryTableSearch getQueryTableSearch() {
        if (queryTableSearch != null) return queryTableSearch;
        queryTableSearch = new QueryTableSearch();
        return queryTableSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<QueryTableSearch> getQueryTableSearchHub() {
        if (hubQueryTableSearch == null) {
            hubQueryTableSearch = new Hub<QueryTableSearch>(QueryTableSearch.class);
            hubQueryTableSearch.add(getQueryTableSearch());
            hubQueryTableSearch.setPos(0);
        }
        return hubQueryTableSearch;
    }
    public Hub<Table> getTableHub() {
        if (hubTable != null) return hubTable;
        hubTable = getQueryTableSearchHub().getDetailHub(QueryTableSearch.P_Table);
        return hubTable;
    }
    public Hub<QueryTable> getJoinTableHub() {
        if (hubJoinTable != null) return hubJoinTable;
        hubJoinTable = getQueryTableSearchHub().getDetailHub(QueryTableSearch.P_JoinTable);
        return hubJoinTable;
    }
    
    public TableModel getTableModel() {
        if (modelTable != null) return modelTable;
        modelTable = new TableModel(getTableHub());
        modelTable.setDisplayName("Table");
        modelTable.setPluralDisplayName("Tables");
        modelTable.setAllowNew(false);
        modelTable.setAllowSave(true);
        modelTable.setAllowAdd(false);
        modelTable.setAllowRemove(false);
        modelTable.setAllowClear(true);
        modelTable.setAllowDelete(false);
        modelTable.setAllowSearch(true);
        modelTable.setAllowHubSearch(false);
        modelTable.setAllowGotoEdit(true);
        return modelTable;
    }
    public QueryTableModel getJoinTableModel() {
        if (modelJoinTable != null) return modelJoinTable;
        modelJoinTable = new QueryTableModel(getJoinTableHub());
        modelJoinTable.setDisplayName("Join Table");
        modelJoinTable.setPluralDisplayName("Query Tables");
        modelJoinTable.setAllowNew(false);
        modelJoinTable.setAllowSave(true);
        modelJoinTable.setAllowAdd(false);
        modelJoinTable.setAllowRemove(false);
        modelJoinTable.setAllowClear(true);
        modelJoinTable.setAllowDelete(false);
        modelJoinTable.setAllowSearch(true);
        modelJoinTable.setAllowHubSearch(false);
        modelJoinTable.setAllowGotoEdit(true);
        modelJoinTable.setViewOnly(true);
        return modelJoinTable;
    }
    
    public TableSearchModel getTableSearchModel() {
        if (modelTableSearch == null) {
            modelTableSearch = new TableSearchModel();
            getQueryTableSearch().setTableSearch(modelTableSearch.getTableSearch());
        }
        return modelTableSearch;
    }
    public QueryTableSearchModel getJoinTableSearchModel() {
        if (modelJoinTableSearch == null) {
            modelJoinTableSearch = new QueryTableSearchModel();
            getQueryTableSearch().setJoinTableSearch(modelJoinTableSearch.getQueryTableSearch());
        }
        return modelJoinTableSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses QueryTableSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<QueryTable> sel = getQueryTableSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(QueryTable queryTable, Hub<QueryTable> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<QueryTable> hub) {
    }
}

