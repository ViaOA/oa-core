// Generated by OABuilder

package com.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.filter.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.model.search.*;
import com.remodel.resource.Resource;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class ColumnTypeModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ColumnTypeModel.class.getName());
    
    // Hubs
    protected Hub<ColumnType> hub;
    // selected columnTypes
    protected Hub<ColumnType> hubMultiSelect;
    // detail hubs
    protected Hub<DataType> hubCalcDataType;
    protected Hub<DatabaseType> hubDatabaseType;
    protected Hub<DataType> hubDataType;
    protected Hub<SqlType> hubSqlType;
    
    // AddHubs used for references
    protected Hub<DatabaseType> hubDatabaseTypeSelectFrom;
    protected Hub<DataType> hubDataTypeSelectFrom;
    protected Hub<SqlType> hubSqlTypeSelectFrom;
    
    // ObjectModels
    protected DataTypeModel modelCalcDataType;
    protected DatabaseTypeModel modelDatabaseType;
    protected DataTypeModel modelDataType;
    protected SqlTypeModel modelSqlType;
    
    // selectFrom
    protected DatabaseTypeModel modelDatabaseTypeSelectFrom;
    protected DataTypeModel modelDataTypeSelectFrom;
    protected SqlTypeModel modelSqlTypeSelectFrom;
    
    // SearchModels used for references
    protected SqlTypeSearchModel modelSqlTypeSearch;
    
    public ColumnTypeModel() {
        setDisplayName("Column Type");
        setPluralDisplayName("Column Types");
    }
    
    public ColumnTypeModel(Hub<ColumnType> hubColumnType) {
        this();
        if (hubColumnType != null) HubDelegate.setObjectClass(hubColumnType, ColumnType.class);
        this.hub = hubColumnType;
    }
    public ColumnTypeModel(ColumnType columnType) {
        this();
        getHub().add(columnType);
        getHub().setPos(0);
    }
    
    public Hub<ColumnType> getOriginalHub() {
        return getHub();
    }
    
    public Hub<DataType> getCalcDataTypeHub() {
        if (hubCalcDataType != null) return hubCalcDataType;
        // this is a calculated
        hubCalcDataType = getHub().getDetailHub(ColumnType.P_CalcDataType);
        return hubCalcDataType;
    }
    public Hub<DatabaseType> getDatabaseTypeHub() {
        if (hubDatabaseType != null) return hubDatabaseType;
        // this is the owner, use detailHub
        hubDatabaseType = getHub().getDetailHub(ColumnType.P_DatabaseType);
        return hubDatabaseType;
    }
    public Hub<DataType> getDataTypeHub() {
        if (hubDataType != null) return hubDataType;
        hubDataType = getHub().getDetailHub(ColumnType.P_DataType);
        return hubDataType;
    }
    public Hub<SqlType> getSqlTypeHub() {
        if (hubSqlType != null) return hubSqlType;
        hubSqlType = getHub().getDetailHub(ColumnType.P_SqlType);
        return hubSqlType;
    }
    public Hub<DatabaseType> getDatabaseTypeSelectFromHub() {
        if (hubDatabaseTypeSelectFrom != null) return hubDatabaseTypeSelectFrom;
        hubDatabaseTypeSelectFrom = new Hub<DatabaseType>(DatabaseType.class);
        Hub<DatabaseType> hubDatabaseTypeSelectFrom1 = ModelDelegate.getDatabaseTypes().createSharedHub();
        HubCombined<DatabaseType> hubCombined = new HubCombined(hubDatabaseTypeSelectFrom, hubDatabaseTypeSelectFrom1, getDatabaseTypeHub());
        hubDatabaseTypeSelectFrom.setLinkHub(getHub(), ColumnType.P_DatabaseType); 
        return hubDatabaseTypeSelectFrom;
    }
    public Hub<DataType> getDataTypeSelectFromHub() {
        if (hubDataTypeSelectFrom != null) return hubDataTypeSelectFrom;
        hubDataTypeSelectFrom = new Hub<DataType>(DataType.class);
        Hub<DataType> hubDataTypeSelectFrom1 = ModelDelegate.getDataTypes().createSharedHub();
        HubCombined<DataType> hubCombined = new HubCombined(hubDataTypeSelectFrom, hubDataTypeSelectFrom1, getDataTypeHub());
        hubDataTypeSelectFrom.setLinkHub(getHub(), ColumnType.P_DataType); 
        return hubDataTypeSelectFrom;
    }
    public Hub<SqlType> getSqlTypeSelectFromHub() {
        if (hubSqlTypeSelectFrom != null) return hubSqlTypeSelectFrom;
        hubSqlTypeSelectFrom = new Hub<SqlType>(SqlType.class);
        Hub<SqlType> hubSqlTypeSelectFrom1 = ModelDelegate.getSqlTypes().createSharedHub();
        HubCombined<SqlType> hubCombined = new HubCombined(hubSqlTypeSelectFrom, hubSqlTypeSelectFrom1, getSqlTypeHub());
        hubSqlTypeSelectFrom.setLinkHub(getHub(), ColumnType.P_SqlType); 
        return hubSqlTypeSelectFrom;
    }
    public ColumnType getColumnType() {
        return getHub().getAO();
    }
    
    public Hub<ColumnType> getHub() {
        if (hub == null) {
            hub = new Hub<ColumnType>(ColumnType.class);
        }
        return hub;
    }
    
    public Hub<ColumnType> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ColumnType>(ColumnType.class);
        }
        return hubMultiSelect;
    }
    
    public DataTypeModel getCalcDataTypeModel() {
        if (modelCalcDataType != null) return modelCalcDataType;
        modelCalcDataType = new DataTypeModel(getCalcDataTypeHub());
        modelCalcDataType.setDisplayName("Data Type");
        modelCalcDataType.setPluralDisplayName("Data Types");
        modelCalcDataType.setForJfc(getForJfc());
        modelCalcDataType.setAllowNew(false);
        modelCalcDataType.setAllowSave(false);
        modelCalcDataType.setAllowAdd(false);
        modelCalcDataType.setAllowRemove(false);
        modelCalcDataType.setAllowClear(false);
        modelCalcDataType.setAllowDelete(false);
        modelCalcDataType.setAllowSearch(false);
        modelCalcDataType.setAllowHubSearch(false);
        modelCalcDataType.setAllowGotoEdit(false);
        modelCalcDataType.setViewOnly(true);
        // call ColumnType.calcDataTypeModelCallback(DataTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ColumnType.class, ColumnType.P_CalcDataType, modelCalcDataType);
    
        return modelCalcDataType;
    }
    public DatabaseTypeModel getDatabaseTypeModel() {
        if (modelDatabaseType != null) return modelDatabaseType;
        modelDatabaseType = new DatabaseTypeModel(getDatabaseTypeHub());
        modelDatabaseType.setDisplayName("Database Type");
        modelDatabaseType.setPluralDisplayName("Database Types");
        modelDatabaseType.setForJfc(getForJfc());
        modelDatabaseType.setAllowNew(false);
        modelDatabaseType.setAllowSave(true);
        modelDatabaseType.setAllowAdd(false);
        modelDatabaseType.setAllowRemove(false);
        modelDatabaseType.setAllowClear(false);
        modelDatabaseType.setAllowDelete(false);
        modelDatabaseType.setAllowSearch(false);
        modelDatabaseType.setAllowHubSearch(false);
        modelDatabaseType.setAllowGotoEdit(false);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelDatabaseType.setCreateUI(li == null || !ColumnType.P_DatabaseType.equals(li.getName()) );
        modelDatabaseType.setViewOnly(getViewOnly());
        // call ColumnType.databaseTypeModelCallback(DatabaseTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ColumnType.class, ColumnType.P_DatabaseType, modelDatabaseType);
    
        return modelDatabaseType;
    }
    public DataTypeModel getDataTypeModel() {
        if (modelDataType != null) return modelDataType;
        modelDataType = new DataTypeModel(getDataTypeHub());
        modelDataType.setDisplayName("Data Type");
        modelDataType.setPluralDisplayName("Data Types");
        modelDataType.setForJfc(getForJfc());
        modelDataType.setAllowNew(false);
        modelDataType.setAllowSave(true);
        modelDataType.setAllowAdd(false);
        modelDataType.setAllowRemove(false);
        modelDataType.setAllowClear(false);
        modelDataType.setAllowDelete(false);
        modelDataType.setAllowSearch(false);
        modelDataType.setAllowHubSearch(false);
        modelDataType.setAllowGotoEdit(false);
        modelDataType.setViewOnly(true);
        // call ColumnType.dataTypeModelCallback(DataTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ColumnType.class, ColumnType.P_DataType, modelDataType);
    
        return modelDataType;
    }
    public SqlTypeModel getSqlTypeModel() {
        if (modelSqlType != null) return modelSqlType;
        modelSqlType = new SqlTypeModel(getSqlTypeHub());
        modelSqlType.setDisplayName("Sql Type");
        modelSqlType.setPluralDisplayName("Sql Types");
        modelSqlType.setForJfc(getForJfc());
        modelSqlType.setAllowNew(false);
        modelSqlType.setAllowSave(true);
        modelSqlType.setAllowAdd(false);
        modelSqlType.setAllowRemove(false);
        modelSqlType.setAllowClear(false);
        modelSqlType.setAllowDelete(false);
        modelSqlType.setAllowSearch(true);
        modelSqlType.setAllowHubSearch(true);
        modelSqlType.setAllowGotoEdit(false);
        modelSqlType.setViewOnly(true);
        // call ColumnType.sqlTypeModelCallback(SqlTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ColumnType.class, ColumnType.P_SqlType, modelSqlType);
    
        return modelSqlType;
    }
    
    public DatabaseTypeModel getDatabaseTypeSelectFromModel() {
        if (modelDatabaseTypeSelectFrom != null) return modelDatabaseTypeSelectFrom;
        modelDatabaseTypeSelectFrom = new DatabaseTypeModel(getDatabaseTypeSelectFromHub());
        modelDatabaseTypeSelectFrom.setDisplayName("Database Type");
        modelDatabaseTypeSelectFrom.setPluralDisplayName("Database Types");
        modelDatabaseTypeSelectFrom.setForJfc(getForJfc());
        modelDatabaseTypeSelectFrom.setAllowNew(false);
        modelDatabaseTypeSelectFrom.setAllowSave(true);
        modelDatabaseTypeSelectFrom.setAllowAdd(false);
        modelDatabaseTypeSelectFrom.setAllowMove(false);
        modelDatabaseTypeSelectFrom.setAllowRemove(false);
        modelDatabaseTypeSelectFrom.setAllowDelete(false);
        modelDatabaseTypeSelectFrom.setAllowSearch(false);
        modelDatabaseTypeSelectFrom.setAllowHubSearch(true);
        modelDatabaseTypeSelectFrom.setAllowGotoEdit(true);
        modelDatabaseTypeSelectFrom.setViewOnly(getViewOnly());
        modelDatabaseTypeSelectFrom.setAllowNew(false);
        modelDatabaseTypeSelectFrom.setAllowTableFilter(true);
        modelDatabaseTypeSelectFrom.setAllowTableSorting(true);
        modelDatabaseTypeSelectFrom.setAllowCut(false);
        modelDatabaseTypeSelectFrom.setAllowCopy(false);
        modelDatabaseTypeSelectFrom.setAllowPaste(false);
        modelDatabaseTypeSelectFrom.setAllowMultiSelect(false);
        return modelDatabaseTypeSelectFrom;
    }
    public DataTypeModel getDataTypeSelectFromModel() {
        if (modelDataTypeSelectFrom != null) return modelDataTypeSelectFrom;
        modelDataTypeSelectFrom = new DataTypeModel(getDataTypeSelectFromHub());
        modelDataTypeSelectFrom.setDisplayName("Data Type");
        modelDataTypeSelectFrom.setPluralDisplayName("Data Types");
        modelDataTypeSelectFrom.setForJfc(getForJfc());
        modelDataTypeSelectFrom.setAllowNew(false);
        modelDataTypeSelectFrom.setAllowSave(true);
        modelDataTypeSelectFrom.setAllowAdd(false);
        modelDataTypeSelectFrom.setAllowMove(false);
        modelDataTypeSelectFrom.setAllowRemove(false);
        modelDataTypeSelectFrom.setAllowDelete(false);
        modelDataTypeSelectFrom.setAllowSearch(false);
        modelDataTypeSelectFrom.setAllowHubSearch(true);
        modelDataTypeSelectFrom.setAllowGotoEdit(true);
        modelDataTypeSelectFrom.setViewOnly(getViewOnly());
        modelDataTypeSelectFrom.setAllowNew(false);
        modelDataTypeSelectFrom.setAllowTableFilter(true);
        modelDataTypeSelectFrom.setAllowTableSorting(true);
        modelDataTypeSelectFrom.setAllowCut(false);
        modelDataTypeSelectFrom.setAllowCopy(false);
        modelDataTypeSelectFrom.setAllowPaste(false);
        modelDataTypeSelectFrom.setAllowMultiSelect(false);
        return modelDataTypeSelectFrom;
    }
    public SqlTypeModel getSqlTypeSelectFromModel() {
        if (modelSqlTypeSelectFrom != null) return modelSqlTypeSelectFrom;
        modelSqlTypeSelectFrom = new SqlTypeModel(getSqlTypeSelectFromHub());
        modelSqlTypeSelectFrom.setDisplayName("Sql Type");
        modelSqlTypeSelectFrom.setPluralDisplayName("Sql Types");
        modelSqlTypeSelectFrom.setForJfc(getForJfc());
        modelSqlTypeSelectFrom.setAllowNew(false);
        modelSqlTypeSelectFrom.setAllowSave(true);
        modelSqlTypeSelectFrom.setAllowAdd(false);
        modelSqlTypeSelectFrom.setAllowMove(false);
        modelSqlTypeSelectFrom.setAllowRemove(false);
        modelSqlTypeSelectFrom.setAllowDelete(false);
        modelSqlTypeSelectFrom.setAllowSearch(true);
        modelSqlTypeSelectFrom.setAllowHubSearch(true);
        modelSqlTypeSelectFrom.setAllowGotoEdit(true);
        modelSqlTypeSelectFrom.setViewOnly(getViewOnly());
        modelSqlTypeSelectFrom.setAllowNew(false);
        modelSqlTypeSelectFrom.setAllowTableFilter(true);
        modelSqlTypeSelectFrom.setAllowTableSorting(true);
        modelSqlTypeSelectFrom.setAllowCut(false);
        modelSqlTypeSelectFrom.setAllowCopy(false);
        modelSqlTypeSelectFrom.setAllowPaste(false);
        modelSqlTypeSelectFrom.setAllowMultiSelect(false);
        return modelSqlTypeSelectFrom;
    }
    public SqlTypeSearchModel getSqlTypeSearchModel() {
        if (modelSqlTypeSearch != null) return modelSqlTypeSearch;
        modelSqlTypeSearch = new SqlTypeSearchModel();
        HubSelectDelegate.adoptWhereHub(modelSqlTypeSearch.getHub(), ColumnType.P_SqlType, getHub());
        return modelSqlTypeSearch;
    }
    
    public HubCopy<ColumnType> createHubCopy() {
        Hub<ColumnType> hubColumnTypex = new Hub<>(ColumnType.class);
        HubCopy<ColumnType> hc = new HubCopy<>(getHub(), hubColumnTypex, true);
        return hc;
    }
    public ColumnTypeModel createCopy() {
        ColumnTypeModel mod = new ColumnTypeModel(createHubCopy().getHub());
        return mod;
    }
}

