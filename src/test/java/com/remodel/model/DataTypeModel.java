// Generated by OABuilder

package com.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.filter.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.model.search.*;
import com.remodel.resource.Resource;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class DataTypeModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(DataTypeModel.class.getName());
    
    // Hubs
    protected Hub<DataType> hub;
    // selected dataTypes
    protected Hub<DataType> hubMultiSelect;
    // detail hubs
    protected Hub<JavaType> hubJavaTypes;
    
    // selectFrom
    protected Hub<JavaType> hubJavaTypesSelectFrom;
    
    // ObjectModels
    protected JavaTypeModel modelJavaTypes;
    
    // selectFrom
    protected JavaTypeModel modelJavaTypesSelectFrom;
    
    // SearchModels used for references
    protected JavaTypeSearchModel modelJavaTypesSearch;
    
    public DataTypeModel() {
        setDisplayName("Data Type");
        setPluralDisplayName("Data Types");
    }
    
    public DataTypeModel(Hub<DataType> hubDataType) {
        this();
        if (hubDataType != null) HubDelegate.setObjectClass(hubDataType, DataType.class);
        this.hub = hubDataType;
    }
    public DataTypeModel(DataType dataType) {
        this();
        getHub().add(dataType);
        getHub().setPos(0);
    }
    
    public Hub<DataType> getOriginalHub() {
        return getHub();
    }
    
    public Hub<JavaType> getJavaTypes() {
        if (hubJavaTypes == null) {
            hubJavaTypes = getHub().getDetailHub(DataType.P_JavaTypes);
        }
        return hubJavaTypes;
    }
    public Hub<JavaType> getJavaTypesSelectFromHub() {
        if (hubJavaTypesSelectFrom != null) return hubJavaTypesSelectFrom;
        hubJavaTypesSelectFrom = ModelDelegate.getJavaTypes().createSharedHub();
        return hubJavaTypesSelectFrom;
    }
    public DataType getDataType() {
        return getHub().getAO();
    }
    
    public Hub<DataType> getHub() {
        if (hub == null) {
            hub = new Hub<DataType>(DataType.class);
        }
        return hub;
    }
    
    public Hub<DataType> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<DataType>(DataType.class);
        }
        return hubMultiSelect;
    }
    
    public JavaTypeModel getJavaTypesModel() {
        if (modelJavaTypes != null) return modelJavaTypes;
        modelJavaTypes = new JavaTypeModel(getJavaTypes());
        modelJavaTypes.setDisplayName("Java Type");
        modelJavaTypes.setPluralDisplayName("Java Types");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getJavaTypes())) {
            modelJavaTypes.setCreateUI(false);
        }
        modelJavaTypes.setForJfc(getForJfc());
        modelJavaTypes.setAllowNew(false);
        modelJavaTypes.setAllowSave(true);
        modelJavaTypes.setAllowAdd(true);
        modelJavaTypes.setAllowMove(false);
        modelJavaTypes.setAllowRemove(true);
        modelJavaTypes.setAllowDelete(false);
        modelJavaTypes.setAllowSearch(false);
        modelJavaTypes.setAllowHubSearch(true);
        modelJavaTypes.setAllowGotoEdit(false);
        modelJavaTypes.setViewOnly(getViewOnly());
        modelJavaTypes.setAllowNew(false);
        modelJavaTypes.setAllowTableFilter(true);
        modelJavaTypes.setAllowTableSorting(true);
        modelJavaTypes.setAllowMultiSelect(false);
        modelJavaTypes.setAllowCopy(false);
        modelJavaTypes.setAllowCut(false);
        modelJavaTypes.setAllowPaste(false);
        // call DataType.javaTypesModelCallback(JavaTypeModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(DataType.class, DataType.P_JavaTypes, modelJavaTypes);
    
        return modelJavaTypes;
    }
    
    public JavaTypeModel getJavaTypesSelectFromModel() {
        if (modelJavaTypesSelectFrom != null) return modelJavaTypesSelectFrom;
        modelJavaTypesSelectFrom = new JavaTypeModel(getJavaTypesSelectFromHub());
        modelJavaTypesSelectFrom.setDisplayName("Java Type");
        modelJavaTypesSelectFrom.setPluralDisplayName("Java Types");
        modelJavaTypesSelectFrom.setForJfc(getForJfc());
        modelJavaTypesSelectFrom.setAllowNew(false);
        modelJavaTypesSelectFrom.setAllowSave(true);
        modelJavaTypesSelectFrom.setAllowAdd(false);
        modelJavaTypesSelectFrom.setAllowMove(false);
        modelJavaTypesSelectFrom.setAllowRemove(false);
        modelJavaTypesSelectFrom.setAllowDelete(false);
        modelJavaTypesSelectFrom.setAllowSearch(true);
        modelJavaTypesSelectFrom.setAllowHubSearch(true);
        modelJavaTypesSelectFrom.setAllowGotoEdit(true);
        modelJavaTypesSelectFrom.setViewOnly(getViewOnly());
        modelJavaTypesSelectFrom.setAllowNew(false);
        modelJavaTypesSelectFrom.setAllowTableFilter(true);
        modelJavaTypesSelectFrom.setAllowTableSorting(true);
        modelJavaTypesSelectFrom.setAllowCut(false);
        modelJavaTypesSelectFrom.setAllowCopy(false);
        modelJavaTypesSelectFrom.setAllowPaste(false);
        modelJavaTypesSelectFrom.setAllowMultiSelect(true);
        new HubMakeCopy(getJavaTypes(), modelJavaTypesSelectFrom.getMultiSelectHub());
        return modelJavaTypesSelectFrom;
    }
    public JavaTypeSearchModel getJavaTypesSearchModel() {
        if (modelJavaTypesSearch != null) return modelJavaTypesSearch;
        modelJavaTypesSearch = new JavaTypeSearchModel();
        return modelJavaTypesSearch;
    }
    
    public HubCopy<DataType> createHubCopy() {
        Hub<DataType> hubDataTypex = new Hub<>(DataType.class);
        HubCopy<DataType> hc = new HubCopy<>(getHub(), hubDataTypex, true);
        return hc;
    }
    public DataTypeModel createCopy() {
        DataTypeModel mod = new DataTypeModel(createHubCopy().getHub());
        return mod;
    }
}

