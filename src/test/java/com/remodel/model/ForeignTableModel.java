// Generated by OABuilder

package com.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.filter.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.model.search.*;
import com.remodel.resource.Resource;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class ForeignTableModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(ForeignTableModel.class.getName());
    
    // Hubs
    protected Hub<ForeignTable> hub;
    // selected foreignTables
    protected Hub<ForeignTable> hubMultiSelect;
    // detail hubs
    protected Hub<Table> hubTable;
    protected Hub<Table> hubToTable;
    protected Hub<ForeignTableColumn> hubForeignTableColumns;
    
    // AddHubs used for references
    protected Hub<Table> hubToTableSelectFrom;
    
    // ObjectModels
    protected TableModel modelTable;
    protected TableModel modelToTable;
    protected ForeignTableColumnModel modelForeignTableColumns;
    
    // selectFrom
    protected TableModel modelToTableSelectFrom;
    
    // SearchModels used for references
    protected TableSearchModel modelTableSearch;
    protected TableSearchModel modelToTableSearch;
    
    public ForeignTableModel() {
        setDisplayName("Foreign Table");
        setPluralDisplayName("Foreign Tables");
    }
    
    public ForeignTableModel(Hub<ForeignTable> hubForeignTable) {
        this();
        if (hubForeignTable != null) HubDelegate.setObjectClass(hubForeignTable, ForeignTable.class);
        this.hub = hubForeignTable;
    }
    public ForeignTableModel(ForeignTable foreignTable) {
        this();
        getHub().add(foreignTable);
        getHub().setPos(0);
    }
    
    public Hub<ForeignTable> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Table> getTableHub() {
        if (hubTable != null) return hubTable;
        // this is the owner, use detailHub
        hubTable = getHub().getDetailHub(ForeignTable.P_Table);
        return hubTable;
    }
    public Hub<Table> getToTableHub() {
        if (hubToTable != null) return hubToTable;
        hubToTable = getHub().getDetailHub(ForeignTable.P_ToTable);
        return hubToTable;
    }
    public Hub<ForeignTableColumn> getForeignTableColumns() {
        if (hubForeignTableColumns == null) {
            hubForeignTableColumns = getHub().getDetailHub(ForeignTable.P_ForeignTableColumns);
        }
        return hubForeignTableColumns;
    }
    public Hub<Table> getToTableSelectFromHub() {
        if (hubToTableSelectFrom != null) return hubToTableSelectFrom;
        hubToTableSelectFrom = new Hub<Table>(Table.class);
        Hub<Table>hubToTableSelectFrom1 = new Hub<Table>(Table.class);
        new HubMerger(getHub(), hubToTableSelectFrom1, ForeignTablePP.table().database().tables().pp, false);
        HubCombined<Table> hubCombined = new HubCombined(hubToTableSelectFrom, hubToTableSelectFrom1, getToTableHub());
        hubToTableSelectFrom.setLinkHub(getHub(), ForeignTable.P_ToTable); 
        return hubToTableSelectFrom;
    }
    public ForeignTable getForeignTable() {
        return getHub().getAO();
    }
    
    public Hub<ForeignTable> getHub() {
        if (hub == null) {
            hub = new Hub<ForeignTable>(ForeignTable.class);
        }
        return hub;
    }
    
    public Hub<ForeignTable> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<ForeignTable>(ForeignTable.class);
        }
        return hubMultiSelect;
    }
    
    public TableModel getTableModel() {
        if (modelTable != null) return modelTable;
        modelTable = new TableModel(getTableHub());
        modelTable.setDisplayName("Table");
        modelTable.setPluralDisplayName("Tables");
        modelTable.setForJfc(getForJfc());
        modelTable.setAllowNew(false);
        modelTable.setAllowSave(true);
        modelTable.setAllowAdd(false);
        modelTable.setAllowRemove(false);
        modelTable.setAllowClear(false);
        modelTable.setAllowDelete(false);
        modelTable.setAllowSearch(true);
        modelTable.setAllowHubSearch(true);
        modelTable.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelTable.setCreateUI(li == null || !ForeignTable.P_Table.equals(li.getName()) );
        modelTable.setViewOnly(getViewOnly());
        // call ForeignTable.tableModelCallback(TableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ForeignTable.class, ForeignTable.P_Table, modelTable);
    
        return modelTable;
    }
    public TableModel getToTableModel() {
        if (modelToTable != null) return modelToTable;
        modelToTable = new TableModel(getToTableHub());
        modelToTable.setDisplayName("Table");
        modelToTable.setPluralDisplayName("Tables");
        modelToTable.setForJfc(getForJfc());
        modelToTable.setAllowNew(false);
        modelToTable.setAllowSave(true);
        modelToTable.setAllowAdd(false);
        modelToTable.setAllowRemove(false);
        modelToTable.setAllowClear(false);
        modelToTable.setAllowDelete(false);
        modelToTable.setAllowSearch(true);
        modelToTable.setAllowHubSearch(true);
        modelToTable.setAllowGotoEdit(true);
        modelToTable.setViewOnly(getViewOnly());
        // call ForeignTable.toTableModelCallback(TableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ForeignTable.class, ForeignTable.P_ToTable, modelToTable);
    
        return modelToTable;
    }
    public ForeignTableColumnModel getForeignTableColumnsModel() {
        if (modelForeignTableColumns != null) return modelForeignTableColumns;
        modelForeignTableColumns = new ForeignTableColumnModel(getForeignTableColumns());
        modelForeignTableColumns.setDisplayName("Foreign Table Column");
        modelForeignTableColumns.setPluralDisplayName("Foreign Table Columns");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getForeignTableColumns())) {
            modelForeignTableColumns.setCreateUI(false);
        }
        modelForeignTableColumns.setForJfc(getForJfc());
        modelForeignTableColumns.setAllowNew(false);
        modelForeignTableColumns.setAllowSave(true);
        modelForeignTableColumns.setAllowAdd(false);
        modelForeignTableColumns.setAllowMove(false);
        modelForeignTableColumns.setAllowRemove(false);
        modelForeignTableColumns.setAllowDelete(false);
        modelForeignTableColumns.setAllowSearch(false);
        modelForeignTableColumns.setAllowHubSearch(false);
        modelForeignTableColumns.setAllowGotoEdit(true);
        modelForeignTableColumns.setViewOnly(getViewOnly());
        modelForeignTableColumns.setAllowNew(false);
        modelForeignTableColumns.setAllowTableFilter(true);
        modelForeignTableColumns.setAllowTableSorting(true);
        modelForeignTableColumns.setAllowMultiSelect(false);
        modelForeignTableColumns.setAllowCopy(false);
        modelForeignTableColumns.setAllowCut(false);
        modelForeignTableColumns.setAllowPaste(false);
        // call ForeignTable.foreignTableColumnsModelCallback(ForeignTableColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(ForeignTable.class, ForeignTable.P_ForeignTableColumns, modelForeignTableColumns);
    
        return modelForeignTableColumns;
    }
    
    public TableModel getToTableSelectFromModel() {
        if (modelToTableSelectFrom != null) return modelToTableSelectFrom;
        modelToTableSelectFrom = new TableModel(getToTableSelectFromHub());
        modelToTableSelectFrom.setDisplayName("Table");
        modelToTableSelectFrom.setPluralDisplayName("Tables");
        modelToTableSelectFrom.setForJfc(getForJfc());
        modelToTableSelectFrom.setAllowNew(false);
        modelToTableSelectFrom.setAllowSave(true);
        modelToTableSelectFrom.setAllowAdd(false);
        modelToTableSelectFrom.setAllowMove(false);
        modelToTableSelectFrom.setAllowRemove(false);
        modelToTableSelectFrom.setAllowDelete(false);
        modelToTableSelectFrom.setAllowSearch(true);
        modelToTableSelectFrom.setAllowHubSearch(true);
        modelToTableSelectFrom.setAllowGotoEdit(true);
        modelToTableSelectFrom.setViewOnly(getViewOnly());
        modelToTableSelectFrom.setAllowNew(false);
        modelToTableSelectFrom.setAllowTableFilter(true);
        modelToTableSelectFrom.setAllowTableSorting(true);
        modelToTableSelectFrom.setAllowCut(false);
        modelToTableSelectFrom.setAllowCopy(false);
        modelToTableSelectFrom.setAllowPaste(false);
        modelToTableSelectFrom.setAllowMultiSelect(false);
        return modelToTableSelectFrom;
    }
    public TableSearchModel getTableSearchModel() {
        if (modelTableSearch != null) return modelTableSearch;
        modelTableSearch = new TableSearchModel();
        HubSelectDelegate.adoptWhereHub(modelTableSearch.getHub(), ForeignTable.P_Table, getHub());
        return modelTableSearch;
    }
    public TableSearchModel getToTableSearchModel() {
        if (modelToTableSearch != null) return modelToTableSearch;
        modelToTableSearch = new TableSearchModel();
        OAFilter filter = new OAInFilter(ForeignTableModel.this.getHub(), ForeignTablePP.table().database().tables().pp);
        modelToTableSearch.getTableSearch().setExtraWhereFilter(filter);
        return modelToTableSearch;
    }
    
    public HubCopy<ForeignTable> createHubCopy() {
        Hub<ForeignTable> hubForeignTablex = new Hub<>(ForeignTable.class);
        HubCopy<ForeignTable> hc = new HubCopy<>(getHub(), hubForeignTablex, true);
        return hc;
    }
    public ForeignTableModel createCopy() {
        ForeignTableModel mod = new ForeignTableModel(createHubCopy().getHub());
        return mod;
    }
}

