// Generated by OABuilder

package com.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.filter.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.model.search.*;
import com.remodel.resource.Resource;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class QueryInfoModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(QueryInfoModel.class.getName());
    
    // Hubs
    protected Hub<QueryInfo> hub;
    // selected queryInfos
    protected Hub<QueryInfo> hubMultiSelect;
    // detail hubs
    protected Hub<Repository> hubRepository;
    protected Hub<QuerySort> hubQuerySorts;
    protected Hub<QueryTable> hubQueryTables;
    
    // pickFrom
    protected Hub<Column> hubQuerySortsPickFromColumn;
    protected Hub<Table> hubQueryTablesPickFromTable;
    
    // ObjectModels
    protected RepositoryModel modelRepository;
    protected QuerySortModel modelQuerySorts;
    protected QueryTableModel modelQueryTables;
    
    // pickFrom
    protected ColumnModel modelQuerySortsPickFromColumn;
    protected ColumnSearchModel modelQuerySortsPickFromColumnSearch;
    protected TableModel modelQueryTablesPickFromTable;
    protected TableSearchModel modelQueryTablesPickFromTableSearch;
    
    // SearchModels used for references
    protected RepositorySearchModel modelRepositorySearch;
    protected QueryTableSearchModel modelQueryTablesSearch;
    
    public QueryInfoModel() {
        setDisplayName("Query Info");
        setPluralDisplayName("Query Infos");
    }
    
    public QueryInfoModel(Hub<QueryInfo> hubQueryInfo) {
        this();
        if (hubQueryInfo != null) HubDelegate.setObjectClass(hubQueryInfo, QueryInfo.class);
        this.hub = hubQueryInfo;
    }
    public QueryInfoModel(QueryInfo queryInfo) {
        this();
        getHub().add(queryInfo);
        getHub().setPos(0);
    }
    
    public Hub<QueryInfo> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Repository> getRepositoryHub() {
        if (hubRepository != null) return hubRepository;
        // this is the owner, use detailHub
        hubRepository = getHub().getDetailHub(QueryInfo.P_Repository);
        return hubRepository;
    }
    public Hub<QuerySort> getQuerySorts() {
        if (hubQuerySorts == null) {
            hubQuerySorts = getHub().getDetailHub(QueryInfo.P_QuerySorts);
        }
        return hubQuerySorts;
    }
    public Hub<QueryTable> getQueryTables() {
        if (hubQueryTables == null) {
            hubQueryTables = getHub().getDetailHub(QueryInfo.P_QueryTables);
        }
        return hubQueryTables;
    }
    public Hub<Column> getQuerySortsPickFromColumnHub() {
        if (hubQuerySortsPickFromColumn != null) return hubQuerySortsPickFromColumn;
        hubQuerySortsPickFromColumn = new Hub<Column>(Column.class);
        return hubQuerySortsPickFromColumn;
    }
    public Hub<Table> getQueryTablesPickFromTableHub() {
        if (hubQueryTablesPickFromTable != null) return hubQueryTablesPickFromTable;
        hubQueryTablesPickFromTable = new Hub<Table>(Table.class);
        new HubMerger(getHub(), hubQueryTablesPickFromTable, QueryInfoPP.repository().project().databases().tables().pp, false);
        return hubQueryTablesPickFromTable;
    }
    public QueryInfo getQueryInfo() {
        return getHub().getAO();
    }
    
    public Hub<QueryInfo> getHub() {
        if (hub == null) {
            hub = new Hub<QueryInfo>(QueryInfo.class);
        }
        return hub;
    }
    
    public Hub<QueryInfo> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<QueryInfo>(QueryInfo.class);
        }
        return hubMultiSelect;
    }
    
    public RepositoryModel getRepositoryModel() {
        if (modelRepository != null) return modelRepository;
        modelRepository = new RepositoryModel(getRepositoryHub());
        modelRepository.setDisplayName("Repository");
        modelRepository.setPluralDisplayName("Repositories");
        modelRepository.setForJfc(getForJfc());
        modelRepository.setAllowNew(false);
        modelRepository.setAllowSave(true);
        modelRepository.setAllowAdd(false);
        modelRepository.setAllowRemove(false);
        modelRepository.setAllowClear(false);
        modelRepository.setAllowDelete(false);
        modelRepository.setAllowSearch(true);
        modelRepository.setAllowHubSearch(true);
        modelRepository.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelRepository.setCreateUI(li == null || !QueryInfo.P_Repository.equals(li.getName()) );
        modelRepository.setViewOnly(getViewOnly());
        // call QueryInfo.repositoryModelCallback(RepositoryModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(QueryInfo.class, QueryInfo.P_Repository, modelRepository);
    
        return modelRepository;
    }
    public QuerySortModel getQuerySortsModel() {
        if (modelQuerySorts != null) return modelQuerySorts;
        modelQuerySorts = new QuerySortModel(getQuerySorts());
        modelQuerySorts.setDisplayName("Query Sort");
        modelQuerySorts.setPluralDisplayName("Query Sorts");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getQuerySorts())) {
            modelQuerySorts.setCreateUI(false);
        }
        modelQuerySorts.setForJfc(getForJfc());
        modelQuerySorts.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Column
        modelQuerySorts.setAllowSave(true);
        modelQuerySorts.setAllowAdd(true); // Add is overwritten to create new QuerySort by first selecting Column
        modelQuerySorts.setAllowMove(true);
        modelQuerySorts.setAllowRemove(false);
        modelQuerySorts.setAllowDelete(true);
        modelQuerySorts.setAllowSearch(false);
        modelQuerySorts.setAllowHubSearch(false);
        modelQuerySorts.setAllowGotoEdit(true);
        modelQuerySorts.setViewOnly(getViewOnly());
        modelQuerySorts.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Column
        modelQuerySorts.setAllowTableFilter(false);
        modelQuerySorts.setAllowTableSorting(false);
        modelQuerySorts.setAllowMultiSelect(false);
        modelQuerySorts.setAllowCopy(false);
        modelQuerySorts.setAllowCut(false);
        modelQuerySorts.setAllowPaste(false);
        // call QueryInfo.querySortsModelCallback(QuerySortModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(QueryInfo.class, QueryInfo.P_QuerySorts, modelQuerySorts);
    
        return modelQuerySorts;
    }
    public QueryTableModel getQueryTablesModel() {
        if (modelQueryTables != null) return modelQueryTables;
        modelQueryTables = new QueryTableModel(getQueryTables());
        modelQueryTables.setDisplayName("Query Table");
        modelQueryTables.setPluralDisplayName("Query Tables");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getQueryTables())) {
            modelQueryTables.setCreateUI(false);
        }
        modelQueryTables.setForJfc(getForJfc());
        modelQueryTables.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Table
        modelQueryTables.setAllowSave(true);
        modelQueryTables.setAllowAdd(true); // Add is overwritten to create new QueryTable by first selecting Table
        modelQueryTables.setAllowMove(false);
        modelQueryTables.setAllowRemove(false);
        modelQueryTables.setAllowDelete(true);
        modelQueryTables.setAllowSearch(false);
        modelQueryTables.setAllowHubSearch(true);
        modelQueryTables.setAllowGotoEdit(true);
        modelQueryTables.setViewOnly(getViewOnly());
        modelQueryTables.setAllowNew(false); // turned off and replaced by allowAdd=true, so user must first pick Table
        modelQueryTables.setAllowTableFilter(true);
        modelQueryTables.setAllowTableSorting(true);
        modelQueryTables.setAllowMultiSelect(false);
        modelQueryTables.setAllowCopy(false);
        modelQueryTables.setAllowCut(false);
        modelQueryTables.setAllowPaste(false);
        // call QueryInfo.queryTablesModelCallback(QueryTableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(QueryInfo.class, QueryInfo.P_QueryTables, modelQueryTables);
    
        return modelQueryTables;
    }
    
    public ColumnModel getQuerySortsPickFromColumnModel() {
        if (modelQuerySortsPickFromColumn != null) return modelQuerySortsPickFromColumn;
        modelQuerySortsPickFromColumn = new ColumnModel(getQuerySortsPickFromColumnHub());
        modelQuerySortsPickFromColumn.setDisplayName("Query Sort");
        modelQuerySortsPickFromColumn.setPluralDisplayName("Query Sorts");
        modelQuerySortsPickFromColumn.setForJfc(getForJfc());
        modelQuerySortsPickFromColumn.setAllowNew(false);
        modelQuerySortsPickFromColumn.setAllowSave(true);
        modelQuerySortsPickFromColumn.setAllowAdd(false);
        modelQuerySortsPickFromColumn.setAllowMove(false);
        modelQuerySortsPickFromColumn.setAllowRemove(false);
        modelQuerySortsPickFromColumn.setAllowDelete(false);
        modelQuerySortsPickFromColumn.setAllowSearch(true);
        modelQuerySortsPickFromColumn.setAllowHubSearch(true);
        modelQuerySortsPickFromColumn.setAllowGotoEdit(true);
        modelQuerySortsPickFromColumn.setViewOnly(getViewOnly());
        modelQuerySortsPickFromColumn.setAllowNew(false);
        modelQuerySortsPickFromColumn.setAllowTableFilter(true);
        modelQuerySortsPickFromColumn.setAllowTableSorting(true);
        modelQuerySortsPickFromColumn.setAllowCut(false);
        modelQuerySortsPickFromColumn.setAllowCopy(false);
        modelQuerySortsPickFromColumn.setAllowPaste(false);
        modelQuerySortsPickFromColumn.setAllowMultiSelect(true);
        new HubMerger<QuerySort, Column>(getQuerySorts(), modelQuerySortsPickFromColumn.getMultiSelectHub(), QuerySort.P_Column);
        return modelQuerySortsPickFromColumn;
    }
    public ColumnSearchModel getQuerySortsPickFromColumnSearchModel() {
        if (modelQuerySortsPickFromColumnSearch != null) return modelQuerySortsPickFromColumnSearch;
        return modelQuerySortsPickFromColumnSearch;
    }
    public TableModel getQueryTablesPickFromTableModel() {
        if (modelQueryTablesPickFromTable != null) return modelQueryTablesPickFromTable;
        modelQueryTablesPickFromTable = new TableModel(getQueryTablesPickFromTableHub());
        modelQueryTablesPickFromTable.setDisplayName("Query Table");
        modelQueryTablesPickFromTable.setPluralDisplayName("Query Tables");
        modelQueryTablesPickFromTable.setForJfc(getForJfc());
        modelQueryTablesPickFromTable.setAllowNew(false);
        modelQueryTablesPickFromTable.setAllowSave(true);
        modelQueryTablesPickFromTable.setAllowAdd(false);
        modelQueryTablesPickFromTable.setAllowMove(false);
        modelQueryTablesPickFromTable.setAllowRemove(false);
        modelQueryTablesPickFromTable.setAllowDelete(false);
        modelQueryTablesPickFromTable.setAllowSearch(true);
        modelQueryTablesPickFromTable.setAllowHubSearch(true);
        modelQueryTablesPickFromTable.setAllowGotoEdit(true);
        modelQueryTablesPickFromTable.setViewOnly(getViewOnly());
        modelQueryTablesPickFromTable.setAllowNew(false);
        modelQueryTablesPickFromTable.setAllowTableFilter(true);
        modelQueryTablesPickFromTable.setAllowTableSorting(true);
        modelQueryTablesPickFromTable.setAllowCut(false);
        modelQueryTablesPickFromTable.setAllowCopy(false);
        modelQueryTablesPickFromTable.setAllowPaste(false);
        modelQueryTablesPickFromTable.setAllowMultiSelect(true);
        new HubMerger<QueryTable, Table>(getQueryTables(), modelQueryTablesPickFromTable.getMultiSelectHub(), QueryTable.P_Table);
        return modelQueryTablesPickFromTable;
    }
    public TableSearchModel getQueryTablesPickFromTableSearchModel() {
        if (modelQueryTablesPickFromTableSearch != null) return modelQueryTablesPickFromTableSearch;
        modelQueryTablesPickFromTableSearch = new TableSearchModel();
        OAFilter filter = new OAInFilter(getQueryTables(), QueryTablePP.queryInfo().repository().project().databases().tables().pp);
        modelQueryTablesPickFromTableSearch.getTableSearch().setExtraWhereFilter(filter);
        return modelQueryTablesPickFromTableSearch;
    }
    public RepositorySearchModel getRepositorySearchModel() {
        if (modelRepositorySearch != null) return modelRepositorySearch;
        modelRepositorySearch = new RepositorySearchModel();
        HubSelectDelegate.adoptWhereHub(modelRepositorySearch.getHub(), QueryInfo.P_Repository, getHub());
        return modelRepositorySearch;
    }
    public QueryTableSearchModel getQueryTablesSearchModel() {
        if (modelQueryTablesSearch != null) return modelQueryTablesSearch;
        modelQueryTablesSearch = new QueryTableSearchModel();
        return modelQueryTablesSearch;
    }
    
    public HubCopy<QueryInfo> createHubCopy() {
        Hub<QueryInfo> hubQueryInfox = new Hub<>(QueryInfo.class);
        HubCopy<QueryInfo> hc = new HubCopy<>(getHub(), hubQueryInfox, true);
        return hc;
    }
    public QueryInfoModel createCopy() {
        QueryInfoModel mod = new QueryInfoModel(createHubCopy().getHub());
        return mod;
    }
}

