// Generated by OABuilder

package com.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.filter.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.model.search.*;
import com.remodel.resource.Resource;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class QuerySortModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(QuerySortModel.class.getName());
    
    // Hubs
    protected Hub<QuerySort> hub;
    // selected querySorts
    protected Hub<QuerySort> hubMultiSelect;
    // detail hubs
    protected Hub<Column> hubColumn;
    protected Hub<QueryInfo> hubQueryInfo;
    
    // ObjectModels
    protected ColumnModel modelColumn;
    protected QueryInfoModel modelQueryInfo;
    
    // SearchModels used for references
    protected ColumnSearchModel modelColumnSearch;
    protected QueryInfoSearchModel modelQueryInfoSearch;
    
    public QuerySortModel() {
        setDisplayName("Query Sort");
        setPluralDisplayName("Query Sorts");
    }
    
    public QuerySortModel(Hub<QuerySort> hubQuerySort) {
        this();
        if (hubQuerySort != null) HubDelegate.setObjectClass(hubQuerySort, QuerySort.class);
        this.hub = hubQuerySort;
    }
    public QuerySortModel(QuerySort querySort) {
        this();
        getHub().add(querySort);
        getHub().setPos(0);
    }
    
    public Hub<QuerySort> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Column> getColumnHub() {
        if (hubColumn != null) return hubColumn;
        hubColumn = getHub().getDetailHub(QuerySort.P_Column);
        return hubColumn;
    }
    public Hub<QueryInfo> getQueryInfoHub() {
        if (hubQueryInfo != null) return hubQueryInfo;
        // this is the owner, use detailHub
        hubQueryInfo = getHub().getDetailHub(QuerySort.P_QueryInfo);
        return hubQueryInfo;
    }
    public QuerySort getQuerySort() {
        return getHub().getAO();
    }
    
    public Hub<QuerySort> getHub() {
        if (hub == null) {
            hub = new Hub<QuerySort>(QuerySort.class);
        }
        return hub;
    }
    
    public Hub<QuerySort> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<QuerySort>(QuerySort.class);
        }
        return hubMultiSelect;
    }
    
    public ColumnModel getColumnModel() {
        if (modelColumn != null) return modelColumn;
        modelColumn = new ColumnModel(getColumnHub());
        modelColumn.setDisplayName("Column");
        modelColumn.setPluralDisplayName("Columns");
        modelColumn.setForJfc(getForJfc());
        modelColumn.setAllowNew(false);
        modelColumn.setAllowSave(true);
        modelColumn.setAllowAdd(false);
        modelColumn.setAllowRemove(false);
        modelColumn.setAllowClear(false);
        modelColumn.setAllowDelete(false);
        modelColumn.setAllowSearch(true);
        modelColumn.setAllowHubSearch(true);
        modelColumn.setAllowGotoEdit(true);
        modelColumn.setViewOnly(getViewOnly());
        // call QuerySort.columnModelCallback(ColumnModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(QuerySort.class, QuerySort.P_Column, modelColumn);
    
        return modelColumn;
    }
    public QueryInfoModel getQueryInfoModel() {
        if (modelQueryInfo != null) return modelQueryInfo;
        modelQueryInfo = new QueryInfoModel(getQueryInfoHub());
        modelQueryInfo.setDisplayName("Query Info");
        modelQueryInfo.setPluralDisplayName("Query Infos");
        modelQueryInfo.setForJfc(getForJfc());
        modelQueryInfo.setAllowNew(false);
        modelQueryInfo.setAllowSave(true);
        modelQueryInfo.setAllowAdd(false);
        modelQueryInfo.setAllowRemove(false);
        modelQueryInfo.setAllowClear(false);
        modelQueryInfo.setAllowDelete(false);
        modelQueryInfo.setAllowSearch(true);
        modelQueryInfo.setAllowHubSearch(true);
        modelQueryInfo.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelQueryInfo.setCreateUI(li == null || !QuerySort.P_QueryInfo.equals(li.getName()) );
        modelQueryInfo.setViewOnly(getViewOnly());
        // call QuerySort.queryInfoModelCallback(QueryInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(QuerySort.class, QuerySort.P_QueryInfo, modelQueryInfo);
    
        return modelQueryInfo;
    }
    
    public ColumnSearchModel getColumnSearchModel() {
        if (modelColumnSearch != null) return modelColumnSearch;
        modelColumnSearch = new ColumnSearchModel();
        HubSelectDelegate.adoptWhereHub(modelColumnSearch.getHub(), QuerySort.P_Column, getHub());
        return modelColumnSearch;
    }
    public QueryInfoSearchModel getQueryInfoSearchModel() {
        if (modelQueryInfoSearch != null) return modelQueryInfoSearch;
        modelQueryInfoSearch = new QueryInfoSearchModel();
        HubSelectDelegate.adoptWhereHub(modelQueryInfoSearch.getHub(), QuerySort.P_QueryInfo, getHub());
        return modelQueryInfoSearch;
    }
    
    public HubCopy<QuerySort> createHubCopy() {
        Hub<QuerySort> hubQuerySortx = new Hub<>(QuerySort.class);
        HubCopy<QuerySort> hc = new HubCopy<>(getHub(), hubQuerySortx, true);
        return hc;
    }
    public QuerySortModel createCopy() {
        QuerySortModel mod = new QuerySortModel(createHubCopy().getHub());
        return mod;
    }
}

