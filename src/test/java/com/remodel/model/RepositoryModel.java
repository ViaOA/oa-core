// Generated by OABuilder

package com.remodel.model;

import java.util.logging.*;
import com.viaoa.object.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.filter.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.model.search.*;
import com.remodel.resource.Resource;
import com.viaoa.annotation.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.viaoa.datasource.*;

public class RepositoryModel extends OAObjectModel {
    private static Logger LOG = Logger.getLogger(RepositoryModel.class.getName());
    
    // Hubs
    protected Hub<Repository> hub;
    // selected repositories
    protected Hub<Repository> hubMultiSelect;
    // detail hubs
    protected Hub<Table> hubMainTable;
    protected Hub<Project> hubProject;
    protected Hub<QueryInfo> hubQueryInfos;
    
    // AddHubs used for references
    protected Hub<Table> hubMainTableSelectFrom;
    protected Hub<Project> hubProjectSelectFrom;
    
    // ObjectModels
    protected TableModel modelMainTable;
    protected ProjectModel modelProject;
    protected QueryInfoModel modelQueryInfos;
    
    // selectFrom
    protected TableModel modelMainTableSelectFrom;
    protected ProjectModel modelProjectSelectFrom;
    
    // SearchModels used for references
    protected TableSearchModel modelMainTableSearch;
    protected ProjectSearchModel modelProjectSearch;
    protected QueryInfoSearchModel modelQueryInfosSearch;
    
    public RepositoryModel() {
        setDisplayName("Repository");
        setPluralDisplayName("Repositories");
    }
    
    public RepositoryModel(Hub<Repository> hubRepository) {
        this();
        if (hubRepository != null) HubDelegate.setObjectClass(hubRepository, Repository.class);
        this.hub = hubRepository;
    }
    public RepositoryModel(Repository repository) {
        this();
        getHub().add(repository);
        getHub().setPos(0);
    }
    
    public Hub<Repository> getOriginalHub() {
        return getHub();
    }
    
    public Hub<Table> getMainTableHub() {
        if (hubMainTable != null) return hubMainTable;
        hubMainTable = getHub().getDetailHub(Repository.P_MainTable);
        return hubMainTable;
    }
    public Hub<Project> getProjectHub() {
        if (hubProject != null) return hubProject;
        // this is the owner, use detailHub
        hubProject = getHub().getDetailHub(Repository.P_Project);
        return hubProject;
    }
    public Hub<QueryInfo> getQueryInfos() {
        if (hubQueryInfos == null) {
            hubQueryInfos = getHub().getDetailHub(Repository.P_QueryInfos);
        }
        return hubQueryInfos;
    }
    public Hub<Table> getMainTableSelectFromHub() {
        if (hubMainTableSelectFrom != null) return hubMainTableSelectFrom;
        hubMainTableSelectFrom = new Hub<Table>(Table.class);
        Hub<Table>hubMainTableSelectFrom1 = new Hub<Table>(Table.class);
        new HubMerger(getHub(), hubMainTableSelectFrom1, RepositoryPP.project().databases().tables().pp, false);
        HubCombined<Table> hubCombined = new HubCombined(hubMainTableSelectFrom, hubMainTableSelectFrom1, getMainTableHub());
        hubMainTableSelectFrom.setLinkHub(getHub(), Repository.P_MainTable); 
        return hubMainTableSelectFrom;
    }
    public Hub<Project> getProjectSelectFromHub() {
        if (hubProjectSelectFrom != null) return hubProjectSelectFrom;
        hubProjectSelectFrom = new Hub<Project>(Project.class);
        Hub<Project> hubProjectSelectFrom1 = ModelDelegate.getProjects().createSharedHub();
        HubCombined<Project> hubCombined = new HubCombined(hubProjectSelectFrom, hubProjectSelectFrom1, getProjectHub());
        hubProjectSelectFrom.setLinkHub(getHub(), Repository.P_Project); 
        return hubProjectSelectFrom;
    }
    public Repository getRepository() {
        return getHub().getAO();
    }
    
    public Hub<Repository> getHub() {
        if (hub == null) {
            hub = new Hub<Repository>(Repository.class);
        }
        return hub;
    }
    
    public Hub<Repository> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<Repository>(Repository.class);
        }
        return hubMultiSelect;
    }
    
    public TableModel getMainTableModel() {
        if (modelMainTable != null) return modelMainTable;
        modelMainTable = new TableModel(getMainTableHub());
        modelMainTable.setDisplayName("Main Table");
        modelMainTable.setPluralDisplayName("Tables");
        modelMainTable.setForJfc(getForJfc());
        modelMainTable.setAllowNew(false);
        modelMainTable.setAllowSave(true);
        modelMainTable.setAllowAdd(false);
        modelMainTable.setAllowRemove(true);
        modelMainTable.setAllowClear(true);
        modelMainTable.setAllowDelete(false);
        modelMainTable.setAllowSearch(true);
        modelMainTable.setAllowHubSearch(true);
        modelMainTable.setAllowGotoEdit(true);
        modelMainTable.setViewOnly(true);
        // call Repository.mainTableModelCallback(TableModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Repository.class, Repository.P_MainTable, modelMainTable);
    
        return modelMainTable;
    }
    public ProjectModel getProjectModel() {
        if (modelProject != null) return modelProject;
        modelProject = new ProjectModel(getProjectHub());
        modelProject.setDisplayName("Project");
        modelProject.setPluralDisplayName("Projects");
        modelProject.setForJfc(getForJfc());
        modelProject.setAllowNew(false);
        modelProject.setAllowSave(true);
        modelProject.setAllowAdd(false);
        modelProject.setAllowRemove(false);
        modelProject.setAllowClear(false);
        modelProject.setAllowDelete(false);
        modelProject.setAllowSearch(true);
        modelProject.setAllowHubSearch(true);
        modelProject.setAllowGotoEdit(true);
        OALinkInfo li = HubDetailDelegate.getLinkInfoFromDetailToMaster(getOriginalHub());
        modelProject.setCreateUI(li == null || !Repository.P_Project.equals(li.getName()) );
        modelProject.setViewOnly(getViewOnly());
        // call Repository.projectModelCallback(ProjectModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Repository.class, Repository.P_Project, modelProject);
    
        return modelProject;
    }
    public QueryInfoModel getQueryInfosModel() {
        if (modelQueryInfos != null) return modelQueryInfos;
        modelQueryInfos = new QueryInfoModel(getQueryInfos());
        modelQueryInfos.setDisplayName("Query Info");
        modelQueryInfos.setPluralDisplayName("Query Infos");
        if (HubDetailDelegate.getIsFromSameMasterHub(getOriginalHub(), getQueryInfos())) {
            modelQueryInfos.setCreateUI(false);
        }
        modelQueryInfos.setForJfc(getForJfc());
        modelQueryInfos.setAllowNew(true);
        modelQueryInfos.setAllowSave(true);
        modelQueryInfos.setAllowAdd(false);
        modelQueryInfos.setAllowMove(true);
        modelQueryInfos.setAllowRemove(false);
        modelQueryInfos.setAllowDelete(true);
        modelQueryInfos.setAllowSearch(false);
        modelQueryInfos.setAllowHubSearch(true);
        modelQueryInfos.setAllowGotoEdit(true);
        modelQueryInfos.setViewOnly(getViewOnly());
        modelQueryInfos.setAllowNew(true);
        modelQueryInfos.setAllowTableFilter(false);
        modelQueryInfos.setAllowTableSorting(false);
        modelQueryInfos.setAllowMultiSelect(true);
        modelQueryInfos.setAllowCopy(false);
        modelQueryInfos.setAllowCut(false);
        modelQueryInfos.setAllowPaste(false);
        // call Repository.queryInfosModelCallback(QueryInfoModel) to be able to customize this model
        OAObjectCallbackDelegate.onObjectCallbackModel(Repository.class, Repository.P_QueryInfos, modelQueryInfos);
    
        return modelQueryInfos;
    }
    
    public TableModel getMainTableSelectFromModel() {
        if (modelMainTableSelectFrom != null) return modelMainTableSelectFrom;
        modelMainTableSelectFrom = new TableModel(getMainTableSelectFromHub());
        modelMainTableSelectFrom.setDisplayName("Table");
        modelMainTableSelectFrom.setPluralDisplayName("Tables");
        modelMainTableSelectFrom.setForJfc(getForJfc());
        modelMainTableSelectFrom.setAllowNew(false);
        modelMainTableSelectFrom.setAllowSave(true);
        modelMainTableSelectFrom.setAllowAdd(false);
        modelMainTableSelectFrom.setAllowMove(false);
        modelMainTableSelectFrom.setAllowRemove(false);
        modelMainTableSelectFrom.setAllowDelete(false);
        modelMainTableSelectFrom.setAllowSearch(true);
        modelMainTableSelectFrom.setAllowHubSearch(true);
        modelMainTableSelectFrom.setAllowGotoEdit(true);
        modelMainTableSelectFrom.setViewOnly(getViewOnly());
        modelMainTableSelectFrom.setAllowNew(false);
        modelMainTableSelectFrom.setAllowTableFilter(true);
        modelMainTableSelectFrom.setAllowTableSorting(true);
        modelMainTableSelectFrom.setAllowCut(false);
        modelMainTableSelectFrom.setAllowCopy(false);
        modelMainTableSelectFrom.setAllowPaste(false);
        modelMainTableSelectFrom.setAllowMultiSelect(false);
        return modelMainTableSelectFrom;
    }
    public ProjectModel getProjectSelectFromModel() {
        if (modelProjectSelectFrom != null) return modelProjectSelectFrom;
        modelProjectSelectFrom = new ProjectModel(getProjectSelectFromHub());
        modelProjectSelectFrom.setDisplayName("Project");
        modelProjectSelectFrom.setPluralDisplayName("Projects");
        modelProjectSelectFrom.setForJfc(getForJfc());
        modelProjectSelectFrom.setAllowNew(false);
        modelProjectSelectFrom.setAllowSave(true);
        modelProjectSelectFrom.setAllowAdd(false);
        modelProjectSelectFrom.setAllowMove(false);
        modelProjectSelectFrom.setAllowRemove(false);
        modelProjectSelectFrom.setAllowDelete(false);
        modelProjectSelectFrom.setAllowSearch(true);
        modelProjectSelectFrom.setAllowHubSearch(true);
        modelProjectSelectFrom.setAllowGotoEdit(true);
        modelProjectSelectFrom.setViewOnly(getViewOnly());
        modelProjectSelectFrom.setAllowNew(false);
        modelProjectSelectFrom.setAllowTableFilter(true);
        modelProjectSelectFrom.setAllowTableSorting(true);
        modelProjectSelectFrom.setAllowCut(false);
        modelProjectSelectFrom.setAllowCopy(false);
        modelProjectSelectFrom.setAllowPaste(false);
        modelProjectSelectFrom.setAllowMultiSelect(false);
        return modelProjectSelectFrom;
    }
    public TableSearchModel getMainTableSearchModel() {
        if (modelMainTableSearch != null) return modelMainTableSearch;
        modelMainTableSearch = new TableSearchModel();
        OAFilter filter = new OAInFilter(RepositoryModel.this.getHub(), RepositoryPP.project().databases().tables().pp);
        modelMainTableSearch.getTableSearch().setExtraWhereFilter(filter);
        return modelMainTableSearch;
    }
    public ProjectSearchModel getProjectSearchModel() {
        if (modelProjectSearch != null) return modelProjectSearch;
        modelProjectSearch = new ProjectSearchModel();
        HubSelectDelegate.adoptWhereHub(modelProjectSearch.getHub(), Repository.P_Project, getHub());
        return modelProjectSearch;
    }
    public QueryInfoSearchModel getQueryInfosSearchModel() {
        if (modelQueryInfosSearch != null) return modelQueryInfosSearch;
        modelQueryInfosSearch = new QueryInfoSearchModel();
        return modelQueryInfosSearch;
    }
    
    public HubCopy<Repository> createHubCopy() {
        Hub<Repository> hubRepositoryx = new Hub<>(Repository.class);
        HubCopy<Repository> hc = new HubCopy<>(getHub(), hubRepositoryx, true);
        return hc;
    }
    public RepositoryModel createCopy() {
        RepositoryModel mod = new RepositoryModel(createHubCopy().getHub());
        return mod;
    }
}

