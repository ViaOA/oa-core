// Generated by OABuilder
package com.remodel.model.oa;
 
import java.util.*;
import java.util.logging.*;
import java.sql.*;
import com.viaoa.util.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.scheduler.*;
import com.remodel.delegate.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;
 
@OAClass(
    lowerName = "jsonObject",
    pluralName = "JsonObjects",
    shortName = "jso",
    displayName = "Json Object",
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "JsonObjectColumn", fkey = true, columns = { @OAIndexColumn(name = "ColumnId") }), 
        @OAIndex(name = "JsonObjectParentJsonObject", fkey = true, columns = { @OAIndexColumn(name = "ParentJsonObjectId") })
    }
)
public class JsonObject extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(JsonObject.class.getName());

    public static final String P_Id = "Id";
    public static final String P_Created = "Created";
    public static final String P_Name = "Name";
    public static final String P_Type = "Type";
    public static final String P_TypeAsString = "TypeString";
    public static final String P_FileName = "FileName";
    public static final String P_PackageName = "PackageName";
    public static final String P_MatchValue = "MatchValue";
     
     
    public static final String P_Column = "Column";
    public static final String P_JsonColumns = "JsonColumns";
    public static final String P_JsonObjects = "JsonObjects";
    public static final String P_ParentJsonObject = "ParentJsonObject";
     
    public static final String M_Parse = "Parse";
    protected volatile int id;
    protected volatile OADateTime created;
    protected volatile String name;
    protected volatile int type;
    public static enum Type {
        ONE("One"),
        MANY("Many");

        private String display;
        Type(String display) {
            this.display = display;
        }

        public String getDisplay() {
            return display;
        }
    }
    public static final int TYPE_ONE = 0;
    public static final int TYPE_MANY = 1;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("One");
        hubType.addElement("Many");
    }
    protected volatile String fileName;
    protected volatile String packageName;
    protected volatile String matchValue;
     
    // Links to other objects.
    protected volatile transient Column column;
    protected transient Hub<JsonColumn> hubJsonColumns;
    protected transient Hub<JsonObject> hubJsonObjects;
    protected volatile transient JsonObject parentJsonObject;
     
    public JsonObject() {
        if (!isLoading()) setObjectDefaults();
    }
    @Override
    public void setObjectDefaults() {
        setCreated(new OADateTime());
    }
     
    public JsonObject(int id) {
        this();
        setId(id);
    }
     

    @OAProperty(isUnique = true, trackPrimitiveNull = false, displayLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        int old = id;
        fireBeforePropertyChange(P_Id, old, newValue);
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 45, displayLength = 20)
    @OAColumn(maxLength = 45)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(trackPrimitiveNull = false, displayLength = 6, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    public void setType(int newValue) {
        int old = type;
        fireBeforePropertyChange(P_Type, old, newValue);
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
        firePropertyChange(P_Type + "String");
        firePropertyChange(P_Type + "Enum");
    }

    public String getTypeString() {
        Type type = getTypeEnum();
        if (type == null) return null;
        return type.name();
    }
    public void setTypeString(String val) {
        int x = -1;
        if (OAString.isNotEmpty(val)) {
            Type type = Type.valueOf(val);
            if (type != null) x = type.ordinal();
        }
        if (x < 0) setNull(P_Type);
        else setType(x);
    }


    public Type getTypeEnum() {
        if (isNull(P_Type)) return null;
        final int val = getType();
        if (val < 0 || val >= Type.values().length) return null;
        return Type.values()[val];
    }

    public void setTypeEnum(Type val) {
        if (val == null) {
            setNull(P_Type);
        }
        else {
            setType(val.ordinal());
        }
    }
    @OAProperty(displayName = "File Name", maxLength = 250, displayLength = 20, hasCustomCode = true, isFileName = true)
    @OAColumn(maxLength = 250)
    public String getFileName() {
        return fileName;
    }
    
    public void setFileName(String newValue) {
        String[] ss = null;
        if (!isLoading()) {
            ss = convertFileName(newValue);
            newValue = ss[0];
        }
    
        String old = fileName;
        fireBeforePropertyChange(P_FileName, old, newValue);
        this.fileName = newValue;
        firePropertyChange(P_FileName, old, this.fileName);
    
        if (ss != null) {
            setPackageName(ss[1]);
        }
    }
    
    protected String[] convertFileName(String fn) {
        String[] ss = new String[2];
    
        ss[0] = fn;
        ss[1] = getPackageName();
    
        if (OAString.isEmpty(fn)) {
            return ss;
        }
    
        Database db = (Database) this.getProperty(JsonObjectPP.column().table().database().pp);
    
        if (db == null) {
            return ss;
        }
        String s = db.getCodeDirectory();
        if (OAString.isNotEmpty(s) && fn.startsWith(s)) {
            fn = fn.substring(s.length() + 1);
        }
    
        fn = OAString.convert(fn, "\\", "/");
    
        int dcnt = OAString.dcount(fn, "/");
        if (dcnt > 1) {
            s = OAString.field(fn, "/", 1, dcnt - 1);
            s = OAString.convert(s, "/", ".");
            ss[1] = s;
    
            fn = OAString.field(fn, "/", dcnt);
        }
        ss[0] = fn;
        return ss;
    }
    @OAProperty(displayName = "Package Name", maxLength = 150, displayLength = 20)
    @OAColumn(maxLength = 150)
    public String getPackageName() {
        return packageName;
    }
    public void setPackageName(String newValue) {
        String old = packageName;
        fireBeforePropertyChange(P_PackageName, old, newValue);
        this.packageName = newValue;
        firePropertyChange(P_PackageName, old, this.packageName);
    }
    @OAProperty(displayName = "Match Value", maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getMatchValue() {
        return matchValue;
    }
    public void setMatchValue(String newValue) {
        String old = matchValue;
        fireBeforePropertyChange(P_MatchValue, old, newValue);
        this.matchValue = newValue;
        firePropertyChange(P_MatchValue, old, this.matchValue);
    }
    @OAOne(
        reverseName = Column.P_JsonObject, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ColumnId"})
    public Column getColumn() {
        if (column == null) {
            column = (Column) getObject(P_Column);
        }
        return column;
    }
    public void setColumn(Column newValue) {
        Column old = this.column;
        fireBeforePropertyChange(P_Column, old, newValue);
        this.column = newValue;
        firePropertyChange(P_Column, old, this.column);
    }
    @OAMany(
        displayName = "Json Columns", 
        toClass = JsonColumn.class, 
        owner = true, 
        reverseName = JsonColumn.P_JsonObject, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = JsonColumn.P_Seq, 
        sortProperty = JsonColumn.P_Seq
    )
    public Hub<JsonColumn> getJsonColumns() {
        if (hubJsonColumns == null) {
            hubJsonColumns = (Hub<JsonColumn>) getHub(P_JsonColumns);
        }
        return hubJsonColumns;
    }
    @OAMany(
        displayName = "Json Objects", 
        toClass = JsonObject.class, 
        recursive = true, 
        owner = true, 
        reverseName = JsonObject.P_ParentJsonObject, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<JsonObject> getJsonObjects() {
        if (hubJsonObjects == null) {
            hubJsonObjects = (Hub<JsonObject>) getHub(P_JsonObjects);
        }
        return hubJsonObjects;
    }
    @OAOne(
        displayName = "Parent Json Object", 
        reverseName = JsonObject.P_JsonObjects, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ParentJsonObjectId"})
    public JsonObject getParentJsonObject() {
        if (parentJsonObject == null) {
            parentJsonObject = (JsonObject) getObject(P_ParentJsonObject);
        }
        return parentJsonObject;
    }
    public void setParentJsonObject(JsonObject newValue) {
        JsonObject old = this.parentJsonObject;
        fireBeforePropertyChange(P_ParentJsonObject, old, newValue);
        this.parentJsonObject = newValue;
        firePropertyChange(P_ParentJsonObject, old, this.parentJsonObject);
    }
    @OAMethod(displayName = "Parse")
    public void parse() {
        // todo: add custom code here
        //  qqqqqqqqqqqqqqqqqqqqqqqqqq
    }

    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.type = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, JsonObject.P_Type, true);
        }
        this.fileName = rs.getString(5);
        this.packageName = rs.getString(6);
        this.matchValue = rs.getString(7);
        int columnFkey = rs.getInt(8);
        if (!rs.wasNull() && columnFkey > 0) {
            setProperty(P_Column, new OAObjectKey(columnFkey));
        }
        int parentJsonObjectFkey = rs.getInt(9);
        if (!rs.wasNull() && parentJsonObjectFkey > 0) {
            setProperty(P_ParentJsonObject, new OAObjectKey(parentJsonObjectFkey));
        }
        if (rs.getMetaData().getColumnCount() != 9) {
            throw new SQLException("invalid number of columns for load method");
        }

        this.changedFlag = false;
        this.newFlag = false;
    }
}
 
