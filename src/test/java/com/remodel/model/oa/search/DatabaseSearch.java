// Generated by OABuilder
package com.remodel.model.oa.search;

import java.util.logging.Logger;

import com.remodel.model.oa.Database;
import com.remodel.model.oa.DatabaseType;
import com.remodel.model.oa.Table;
import com.remodel.model.oa.propertypath.DatabasePP;
import com.viaoa.annotation.OAClass;
import com.viaoa.annotation.OAOne;
import com.viaoa.datasource.OASelect;
import com.viaoa.filter.OAAndFilter;
import com.viaoa.filter.OAQueryFilter;
import com.viaoa.object.OAFinder;
import com.viaoa.object.OAObject;
import com.viaoa.util.OAArray;
import com.viaoa.util.OADateTime;
import com.viaoa.util.OAFilter;
import com.viaoa.util.OAString;

@OAClass(useDataSource = false, localOnly = true)
public class DatabaseSearch extends OAObject {
	private static final long serialVersionUID = 1L;
	private static Logger LOG = Logger.getLogger(DatabaseSearch.class.getName());
	public static final String P_Created = "Created";
	public static final String P_Name = "Name";
	public static final String P_SchemeName = "SchemeName";
	public static final String P_DatabaseType = "DatabaseType";
	public static final String P_UseDatabaseTypeSearch = "UseDatabaseTypeSearch";
	public static final String P_Tables = "Tables";
	public static final String P_UseTablesSearch = "UseTablesSearch";
	public static final String P_MaxResults = "MaxResults";

	protected OADateTime created;
	protected String name;
	protected String schemeName;
	protected DatabaseType databaseType;
	protected boolean useDatabaseTypeSearch;
	protected DatabaseTypeSearch searchDatabaseType;
	protected Table tables;
	protected boolean useTablesSearch;
	protected TableSearch searchTables;
	protected int maxResults;

	public OADateTime getCreated() {
		return created;
	}

	public void setCreated(OADateTime newValue) {
		OADateTime old = created;
		fireBeforePropertyChange(P_Created, old, newValue);
		this.created = newValue;
		firePropertyChange(P_Created, old, this.created);
	}

	public String getName() {
		return name;
	}

	public void setName(String newValue) {
		String old = name;
		fireBeforePropertyChange(P_Name, old, newValue);
		this.name = newValue;
		firePropertyChange(P_Name, old, this.name);
	}

	public String getSchemeName() {
		return schemeName;
	}

	public void setSchemeName(String newValue) {
		String old = schemeName;
		fireBeforePropertyChange(P_SchemeName, old, newValue);
		this.schemeName = newValue;
		firePropertyChange(P_SchemeName, old, this.schemeName);
	}

	public int getMaxResults() {
		return maxResults;
	}

	public void setMaxResults(int newValue) {
		fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
		int old = maxResults;
		this.maxResults = newValue;
		firePropertyChange(P_MaxResults, old, this.maxResults);
	}

	@OAOne
	public DatabaseType getDatabaseType() {
		if (databaseType == null) {
			databaseType = (DatabaseType) getObject(P_DatabaseType);
		}
		return databaseType;
	}

	public void setDatabaseType(DatabaseType newValue) {
		DatabaseType old = this.databaseType;
		this.databaseType = newValue;
		firePropertyChange(P_DatabaseType, old, this.databaseType);
	}

	public boolean getUseDatabaseTypeSearch() {
		return useDatabaseTypeSearch;
	}

	public void setUseDatabaseTypeSearch(boolean newValue) {
		boolean old = this.useDatabaseTypeSearch;
		this.useDatabaseTypeSearch = newValue;
		firePropertyChange(P_UseDatabaseTypeSearch, old, this.useDatabaseTypeSearch);
	}

	public DatabaseTypeSearch getDatabaseTypeSearch() {
		return this.searchDatabaseType;
	}

	public void setDatabaseTypeSearch(DatabaseTypeSearch newValue) {
		this.searchDatabaseType = newValue;
	}

	@OAOne
	public Table getTables() {
		if (tables == null) {
			tables = (Table) getObject(P_Tables);
		}
		return tables;
	}

	public void setTables(Table newValue) {
		Table old = this.tables;
		this.tables = newValue;
		firePropertyChange(P_Tables, old, this.tables);
	}

	public boolean getUseTablesSearch() {
		return useTablesSearch;
	}

	public void setUseTablesSearch(boolean newValue) {
		boolean old = this.useTablesSearch;
		this.useTablesSearch = newValue;
		firePropertyChange(P_UseTablesSearch, old, this.useTablesSearch);
	}

	public TableSearch getTablesSearch() {
		return this.searchTables;
	}

	public void setTablesSearch(TableSearch newValue) {
		this.searchTables = newValue;
	}

	public void reset() {
		setCreated(null);
		setName(null);
		setSchemeName(null);
		setDatabaseType(null);
		setUseDatabaseTypeSearch(false);
		setTables(null);
		setUseTablesSearch(false);
	}

	public boolean isDataEntered() {
		if (getCreated() != null) {
			return true;
		}
		if (getName() != null) {
			return true;
		}
		if (getSchemeName() != null) {
			return true;
		}
		if (getDatabaseType() != null) {
			return true;
		}
		if (getUseDatabaseTypeSearch()) {
			return true;
		}
		if (getTables() != null) {
			return true;
		}
		if (getUseTablesSearch()) {
			return true;
		}
		return false;
	}

	protected String extraWhere;
	protected Object[] extraWhereParams;
	protected OAFilter<Database> filterExtraWhere;

	public void setExtraWhere(String s, Object... args) {
		this.extraWhere = s;
		this.extraWhereParams = args;
		if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
			OAFilter<Database> f = new OAQueryFilter<Database>(Database.class, s, args);
			setExtraWhereFilter(f);
		}
	}

	public void setExtraWhereFilter(OAFilter<Database> filter) {
		this.filterExtraWhere = filter;
	}

	public OAFilter<Database> getExtraWhereFilter() {
		return this.filterExtraWhere;
	}

	public OASelect<Database> getSelect() {
		final String prefix = "";
		String sql = "";
		String sortOrder = null;
		Object[] args = new Object[0];
		OAFinder finder = null;
		if (created != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += Database.P_Created + " = ?";
			args = OAArray.add(Object.class, args, this.created);
		}
		if (OAString.isNotEmpty(this.name)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			String value = OAString.convertToLikeSearch(name);
			if (value.indexOf("%") >= 0) {
				sql += Database.P_Name + " LIKE ?";
			} else {
				sql += Database.P_Name + " = ?";
			}
			args = OAArray.add(Object.class, args, value);
		}
		if (OAString.isNotEmpty(this.schemeName)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			String value = OAString.convertToLikeSearch(schemeName);
			if (value.indexOf("%") >= 0) {
				sql += Database.P_SchemeName + " LIKE ?";
			} else {
				sql += Database.P_SchemeName + " = ?";
			}
			args = OAArray.add(Object.class, args, value);
		}
		if (!useDatabaseTypeSearch && getDatabaseType() != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += DatabasePP.databaseType().pp + " = ?";
			args = OAArray.add(Object.class, args, getDatabaseType());
		}
		if (!useTablesSearch && getTables() != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += DatabasePP.tables().pp + " = ?";
			args = OAArray.add(Object.class, args, getTables());
			finder = new OAFinder<Table, Database>(getTables(), Table.P_Database);
		}

		if (OAString.isNotEmpty(extraWhere)) {
			if (sql.length() > 0) {
				sql = "(" + sql + ") AND ";
			}
			sql += extraWhere;
			args = OAArray.add(Object.class, args, extraWhereParams);
		}

		OASelect<Database> select = new OASelect<Database>(Database.class, sql, args, sortOrder);
		if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
			select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
		} else {
			select.setFilter(this.getCustomFilter());
		}
		select.setDataSourceFilter(this.getDataSourceFilter());
		select.setFinder(finder);
		if (getMaxResults() > 0) {
			select.setMax(getMaxResults());
		}
		if (useDatabaseTypeSearch && getDatabaseTypeSearch() != null) {
			getDatabaseTypeSearch().appendSelect(DatabasePP.databaseType().pp, select);
		}
		if (useTablesSearch && getTablesSearch() != null) {
			getTablesSearch().appendSelect(DatabasePP.tables().pp, select);
		}
		return select;
	}

	public void appendSelect(final String fromName, final OASelect select) {
		final String prefix = fromName + ".";
		String sql = "";
		Object[] args = new Object[0];
		if (created != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += prefix + Database.P_Created + " = ?";
			args = OAArray.add(Object.class, args, this.created);
		}
		if (OAString.isNotEmpty(this.name)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			String value = OAString.convertToLikeSearch(name);
			if (value.indexOf("%") >= 0) {
				sql += prefix + Database.P_Name + " LIKE ?";
			} else {
				sql += prefix + Database.P_Name + " = ?";
			}
			args = OAArray.add(Object.class, args, value);
		}
		if (OAString.isNotEmpty(this.schemeName)) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			String value = OAString.convertToLikeSearch(schemeName);
			if (value.indexOf("%") >= 0) {
				sql += prefix + Database.P_SchemeName + " LIKE ?";
			} else {
				sql += prefix + Database.P_SchemeName + " = ?";
			}
			args = OAArray.add(Object.class, args, value);
		}
		if (!useDatabaseTypeSearch && getDatabaseType() != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += prefix + DatabasePP.databaseType().pp + " = ?";
			args = OAArray.add(Object.class, args, getDatabaseType());
		}
		if (useDatabaseTypeSearch && getDatabaseTypeSearch() != null) {
			getDatabaseTypeSearch().appendSelect(prefix + DatabasePP.databaseType().pp, select);
		}
		if (!useTablesSearch && getTables() != null) {
			if (sql.length() > 0) {
				sql += " AND ";
			}
			sql += prefix + DatabasePP.tables().pp + " = ?";
			args = OAArray.add(Object.class, args, getTables());
		}
		if (useTablesSearch && getTablesSearch() != null) {
			getTablesSearch().appendSelect(prefix + DatabasePP.tables().pp, select);
		}
		select.add(sql, args);
	}

	private OAFilter<Database> filterDataSourceFilter;

	public OAFilter<Database> getDataSourceFilter() {
		if (filterDataSourceFilter != null) {
			return filterDataSourceFilter;
		}
		filterDataSourceFilter = new OAFilter<Database>() {
			@Override
			public boolean isUsed(Database database) {
				return DatabaseSearch.this.isUsedForDataSourceFilter(database);
			}
		};
		return filterDataSourceFilter;
	}

	private OAFilter<Database> filterCustomFilter;

	public OAFilter<Database> getCustomFilter() {
		if (filterCustomFilter != null) {
			return filterCustomFilter;
		}
		filterCustomFilter = new OAFilter<Database>() {
			@Override
			public boolean isUsed(Database database) {
				boolean b = DatabaseSearch.this.isUsedForCustomFilter(database);
				return b;
			}
		};
		return filterCustomFilter;
	}

	public boolean isUsedForDataSourceFilter(Database searchDatabase) {
		return true;
	}

	public boolean isUsedForCustomFilter(Database searchDatabase) {
		return true;
	}
}
