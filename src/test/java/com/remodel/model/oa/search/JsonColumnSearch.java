// Generated by OABuilder
package com.remodel.model.oa.search;

import java.util.logging.*;

import com.remodel.model.oa.*;
import com.remodel.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class JsonColumnSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(JsonColumnSearch.class.getName());
    public static final String P_Name = "Name";
    public static final String P_JsonObject = "JsonObject";
    public static final String P_UseJsonObjectSearch = "UseJsonObjectSearch";
    public static final String P_DataType = "DataType";
    public static final String P_UseDataTypeSearch = "UseDataTypeSearch";
    public static final String P_JavaType = "JavaType";
    public static final String P_UseJavaTypeSearch = "UseJavaTypeSearch";
    public static final String P_MaxResults = "MaxResults";

    protected String name;
    protected JsonObject jsonObject;
    protected boolean useJsonObjectSearch;
    protected JsonObjectSearch searchJsonObject;
    protected DataType dataType;
    protected boolean useDataTypeSearch;
    protected DataTypeSearch searchDataType;
    protected JavaType javaType;
    protected boolean useJavaTypeSearch;
    protected JavaTypeSearch searchJavaType;
    protected int maxResults;

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public JsonObject getJsonObject() {
        if (jsonObject == null) {
            jsonObject = (JsonObject) getObject(P_JsonObject);
        }
        return jsonObject;
    }
    public void setJsonObject(JsonObject newValue) {
        JsonObject old = this.jsonObject;
        this.jsonObject = newValue;
        firePropertyChange(P_JsonObject, old, this.jsonObject);
    }
    public boolean getUseJsonObjectSearch() {
        return useJsonObjectSearch;
    }
    public void setUseJsonObjectSearch(boolean newValue) {
        boolean old = this.useJsonObjectSearch;
        this.useJsonObjectSearch = newValue;
        firePropertyChange(P_UseJsonObjectSearch, old, this.useJsonObjectSearch);
    }
    public JsonObjectSearch getJsonObjectSearch() {
        return this.searchJsonObject;
    }
    public void setJsonObjectSearch(JsonObjectSearch newValue) {
        this.searchJsonObject = newValue;
    }

    @OAOne
    public DataType getDataType() {
        if (dataType == null) {
            dataType = (DataType) getObject(P_DataType);
        }
        return dataType;
    }
    public void setDataType(DataType newValue) {
        DataType old = this.dataType;
        this.dataType = newValue;
        firePropertyChange(P_DataType, old, this.dataType);
    }
    public boolean getUseDataTypeSearch() {
        return useDataTypeSearch;
    }
    public void setUseDataTypeSearch(boolean newValue) {
        boolean old = this.useDataTypeSearch;
        this.useDataTypeSearch = newValue;
        firePropertyChange(P_UseDataTypeSearch, old, this.useDataTypeSearch);
    }
    public DataTypeSearch getDataTypeSearch() {
        return this.searchDataType;
    }
    public void setDataTypeSearch(DataTypeSearch newValue) {
        this.searchDataType = newValue;
    }

    @OAOne
    public JavaType getJavaType() {
        if (javaType == null) {
            javaType = (JavaType) getObject(P_JavaType);
        }
        return javaType;
    }
    public void setJavaType(JavaType newValue) {
        JavaType old = this.javaType;
        this.javaType = newValue;
        firePropertyChange(P_JavaType, old, this.javaType);
    }
    public boolean getUseJavaTypeSearch() {
        return useJavaTypeSearch;
    }
    public void setUseJavaTypeSearch(boolean newValue) {
        boolean old = this.useJavaTypeSearch;
        this.useJavaTypeSearch = newValue;
        firePropertyChange(P_UseJavaTypeSearch, old, this.useJavaTypeSearch);
    }
    public JavaTypeSearch getJavaTypeSearch() {
        return this.searchJavaType;
    }
    public void setJavaTypeSearch(JavaTypeSearch newValue) {
        this.searchJavaType = newValue;
    }

    public void reset() {
        setName(null);
        setJsonObject(null);
        setUseJsonObjectSearch(false);
        setDataType(null);
        setUseDataTypeSearch(false);
        setJavaType(null);
        setUseJavaTypeSearch(false);
    }

    public boolean isDataEntered() {
        if (getName() != null) return true;
        if (getJsonObject() != null) return true;
        if (getUseJsonObjectSearch()) return true;
        if (getDataType() != null) return true;
        if (getUseDataTypeSearch()) return true;
        if (getJavaType() != null) return true;
        if (getUseJavaTypeSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<JsonColumn> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<JsonColumn> f = new OAQueryFilter<JsonColumn>(JsonColumn.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<JsonColumn> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<JsonColumn> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<JsonColumn> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += JsonColumn.P_Name + " LIKE ?";
            }
            else {
                sql += JsonColumn.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useJsonObjectSearch && getJsonObject() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += JsonColumnPP.jsonObject().pp + " = ?";
            args = OAArray.add(Object.class, args, getJsonObject());
            finder = new OAFinder<JsonObject, JsonColumn>(getJsonObject(), JsonObject.P_JsonColumns);
        }
        if (!useDataTypeSearch && getDataType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += JsonColumnPP.dataType().pp + " = ?";
            args = OAArray.add(Object.class, args, getDataType());
        }
        if (!useJavaTypeSearch && getJavaType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += JsonColumnPP.javaType().pp + " = ?";
            args = OAArray.add(Object.class, args, getJavaType());
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<JsonColumn> select = new OASelect<JsonColumn>(JsonColumn.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useJsonObjectSearch && getJsonObjectSearch() != null) {
            getJsonObjectSearch().appendSelect(JsonColumnPP.jsonObject().pp, select);
        }
        if (useDataTypeSearch && getDataTypeSearch() != null) {
            getDataTypeSearch().appendSelect(JsonColumnPP.dataType().pp, select);
        }
        if (useJavaTypeSearch && getJavaTypeSearch() != null) {
            getJavaTypeSearch().appendSelect(JsonColumnPP.javaType().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += prefix + JsonColumn.P_Name + " LIKE ?";
            }
            else {
                sql += prefix + JsonColumn.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useJsonObjectSearch && getJsonObject() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + JsonColumnPP.jsonObject().pp + " = ?";
            args = OAArray.add(Object.class, args, getJsonObject());
        }
        if (useJsonObjectSearch && getJsonObjectSearch() != null) {
            getJsonObjectSearch().appendSelect(prefix + JsonColumnPP.jsonObject().pp, select);
        }
        if (!useDataTypeSearch && getDataType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + JsonColumnPP.dataType().pp + " = ?";
            args = OAArray.add(Object.class, args, getDataType());
        }
        if (useDataTypeSearch && getDataTypeSearch() != null) {
            getDataTypeSearch().appendSelect(prefix + JsonColumnPP.dataType().pp, select);
        }
        if (!useJavaTypeSearch && getJavaType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + JsonColumnPP.javaType().pp + " = ?";
            args = OAArray.add(Object.class, args, getJavaType());
        }
        if (useJavaTypeSearch && getJavaTypeSearch() != null) {
            getJavaTypeSearch().appendSelect(prefix + JsonColumnPP.javaType().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<JsonColumn> filterDataSourceFilter;
    public OAFilter<JsonColumn> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<JsonColumn>() {
            @Override
            public boolean isUsed(JsonColumn jsonColumn) {
                return JsonColumnSearch.this.isUsedForDataSourceFilter(jsonColumn);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<JsonColumn> filterCustomFilter;
    public OAFilter<JsonColumn> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<JsonColumn>() {
            @Override
            public boolean isUsed(JsonColumn jsonColumn) {
                boolean b = JsonColumnSearch.this.isUsedForCustomFilter(jsonColumn);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(JsonColumn searchJsonColumn) {
        return true;
    }
    public boolean isUsedForCustomFilter(JsonColumn searchJsonColumn) {
        return true;
    }
}
