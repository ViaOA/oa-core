// Generated by OABuilder
package com.remodel.model.oa.search;

import java.util.logging.*;

import com.remodel.model.oa.*;
import com.remodel.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class QueryInfoSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(QueryInfoSearch.class.getName());
    public static final String P_Name = "Name";
    public static final String P_SqlCode = "SqlCode";
    public static final String P_MaxResults = "MaxResults";

    protected String name;
    protected String sqlCode;
    protected int maxResults;

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      

    public String getSqlCode() {
        return sqlCode;
    }
    public void setSqlCode(String newValue) {
        String old = sqlCode;
        fireBeforePropertyChange(P_SqlCode, old, newValue);
        this.sqlCode = newValue;
        firePropertyChange(P_SqlCode, old, this.sqlCode);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    public void reset() {
        setName(null);
        setSqlCode(null);
    }

    public boolean isDataEntered() {
        if (getName() != null) return true;
        if (getSqlCode() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<QueryInfo> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<QueryInfo> f = new OAQueryFilter<QueryInfo>(QueryInfo.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<QueryInfo> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<QueryInfo> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<QueryInfo> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += QueryInfo.P_Name + " LIKE ?";
            }
            else {
                sql += QueryInfo.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.sqlCode)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(sqlCode);
            if (value.indexOf("%") >= 0) {
                sql += QueryInfo.P_SqlCode + " LIKE ?";
            }
            else {
                sql += QueryInfo.P_SqlCode + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<QueryInfo> select = new OASelect<QueryInfo>(QueryInfo.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += prefix + QueryInfo.P_Name + " LIKE ?";
            }
            else {
                sql += prefix + QueryInfo.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.sqlCode)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(sqlCode);
            if (value.indexOf("%") >= 0) {
                sql += prefix + QueryInfo.P_SqlCode + " LIKE ?";
            }
            else {
                sql += prefix + QueryInfo.P_SqlCode + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        select.add(sql, args);
    }

    private OAFilter<QueryInfo> filterDataSourceFilter;
    public OAFilter<QueryInfo> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<QueryInfo>() {
            @Override
            public boolean isUsed(QueryInfo queryInfo) {
                return QueryInfoSearch.this.isUsedForDataSourceFilter(queryInfo);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<QueryInfo> filterCustomFilter;
    public OAFilter<QueryInfo> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<QueryInfo>() {
            @Override
            public boolean isUsed(QueryInfo queryInfo) {
                boolean b = QueryInfoSearch.this.isUsedForCustomFilter(queryInfo);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(QueryInfo searchQueryInfo) {
        return true;
    }
    public boolean isUsedForCustomFilter(QueryInfo searchQueryInfo) {
        return true;
    }
}
