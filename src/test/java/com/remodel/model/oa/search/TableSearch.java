// Generated by OABuilder
package com.remodel.model.oa.search;

import java.util.logging.*;

import com.remodel.model.oa.*;
import com.remodel.model.oa.propertypath.*;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADateTime;
import com.viaoa.datasource.*;
import com.viaoa.filter.*;

@OAClass(useDataSource=false, localOnly=true)
public class TableSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(TableSearch.class.getName());
    public static final String P_Created = "Created";
    public static final String P_Name = "Name";
    public static final String P_NewName = "NewName";
    public static final String P_AbbrevName = "AbbrevName";
    public static final String P_Columns = "Columns";
    public static final String P_UseColumnsSearch = "UseColumnsSearch";
    public static final String P_Database = "Database";
    public static final String P_UseDatabaseSearch = "UseDatabaseSearch";
    public static final String P_MaxResults = "MaxResults";

    protected OADateTime created;
    protected String name;
    protected String newName;
    protected String abbrevName;
    protected Column columns;
    protected boolean useColumnsSearch;
    protected ColumnSearch searchColumns;
    protected Database database;
    protected boolean useDatabaseSearch;
    protected DatabaseSearch searchDatabase;
    protected int maxResults;

    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        OADateTime old = created;
        fireBeforePropertyChange(P_Created, old, newValue);
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
      

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        String old = name;
        fireBeforePropertyChange(P_Name, old, newValue);
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      

    public String getNewName() {
        return newName;
    }
    public void setNewName(String newValue) {
        String old = newName;
        fireBeforePropertyChange(P_NewName, old, newValue);
        this.newName = newValue;
        firePropertyChange(P_NewName, old, this.newName);
    }
      

    public String getAbbrevName() {
        return abbrevName;
    }
    public void setAbbrevName(String newValue) {
        String old = abbrevName;
        fireBeforePropertyChange(P_AbbrevName, old, newValue);
        this.abbrevName = newValue;
        firePropertyChange(P_AbbrevName, old, this.abbrevName);
    }
      

    public int getMaxResults() {
        return maxResults;
    }
    public void setMaxResults(int newValue) {
        fireBeforePropertyChange(P_MaxResults, this.maxResults, newValue);
        int old = maxResults;
        this.maxResults = newValue;
        firePropertyChange(P_MaxResults, old, this.maxResults);
    }

    @OAOne
    public Column getColumns() {
        if (columns == null) {
            columns = (Column) getObject(P_Columns);
        }
        return columns;
    }
    public void setColumns(Column newValue) {
        Column old = this.columns;
        this.columns = newValue;
        firePropertyChange(P_Columns, old, this.columns);
    }
    public boolean getUseColumnsSearch() {
        return useColumnsSearch;
    }
    public void setUseColumnsSearch(boolean newValue) {
        boolean old = this.useColumnsSearch;
        this.useColumnsSearch = newValue;
        firePropertyChange(P_UseColumnsSearch, old, this.useColumnsSearch);
    }
    public ColumnSearch getColumnsSearch() {
        return this.searchColumns;
    }
    public void setColumnsSearch(ColumnSearch newValue) {
        this.searchColumns = newValue;
    }

    @OAOne
    public Database getDatabase() {
        if (database == null) {
            database = (Database) getObject(P_Database);
        }
        return database;
    }
    public void setDatabase(Database newValue) {
        Database old = this.database;
        this.database = newValue;
        firePropertyChange(P_Database, old, this.database);
    }
    public boolean getUseDatabaseSearch() {
        return useDatabaseSearch;
    }
    public void setUseDatabaseSearch(boolean newValue) {
        boolean old = this.useDatabaseSearch;
        this.useDatabaseSearch = newValue;
        firePropertyChange(P_UseDatabaseSearch, old, this.useDatabaseSearch);
    }
    public DatabaseSearch getDatabaseSearch() {
        return this.searchDatabase;
    }
    public void setDatabaseSearch(DatabaseSearch newValue) {
        this.searchDatabase = newValue;
    }

    public void reset() {
        setCreated(null);
        setName(null);
        setNewName(null);
        setAbbrevName(null);
        setColumns(null);
        setUseColumnsSearch(false);
        setDatabase(null);
        setUseDatabaseSearch(false);
    }

    public boolean isDataEntered() {
        if (getCreated() != null) return true;
        if (getName() != null) return true;
        if (getNewName() != null) return true;
        if (getAbbrevName() != null) return true;
        if (getColumns() != null) return true;
        if (getUseColumnsSearch()) return true;
        if (getDatabase() != null) return true;
        if (getUseDatabaseSearch()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Table> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (OAString.isNotEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Table> f = new OAQueryFilter<Table>(Table.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Table> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Table> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Table> getSelect() {
        final String prefix = "";
        String sql = "";
        String sortOrder = null;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Table.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += Table.P_Name + " LIKE ?";
            }
            else {
                sql += Table.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.newName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(newName);
            if (value.indexOf("%") >= 0) {
                sql += Table.P_NewName + " LIKE ?";
            }
            else {
                sql += Table.P_NewName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.abbrevName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(abbrevName);
            if (value.indexOf("%") >= 0) {
                sql += Table.P_AbbrevName + " LIKE ?";
            }
            else {
                sql += Table.P_AbbrevName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useColumnsSearch && getColumns() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += TablePP.columns().pp + " = ?";
            args = OAArray.add(Object.class, args, getColumns());
            finder = new OAFinder<Column, Table>(getColumns(), Column.P_Table);
        }
        if (!useDatabaseSearch && getDatabase() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += TablePP.database().pp + " = ?";
            args = OAArray.add(Object.class, args, getDatabase());
            finder = new OAFinder<Database, Table>(getDatabase(), Database.P_Tables);
        }

        if (OAString.isNotEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Table> select = new OASelect<Table>(Table.class, sql, args, sortOrder);
        if (getExtraWhereFilter() != null && getExtraWhereFilter().updateSelect(select)) {
            select.setFilter(new OAAndFilter(this.getCustomFilter(), getExtraWhereFilter()));
        }
        else select.setFilter(this.getCustomFilter());
        select.setDataSourceFilter(this.getDataSourceFilter());
        select.setFinder(finder);
        if (getMaxResults() > 0) select.setMax(getMaxResults());
        if (useColumnsSearch && getColumnsSearch() != null) {
            getColumnsSearch().appendSelect(TablePP.columns().pp, select);
        }
        if (useDatabaseSearch && getDatabaseSearch() != null) {
            getDatabaseSearch().appendSelect(TablePP.database().pp, select);
        }
        return select;
    }

    public void appendSelect(final String fromName, final OASelect select) {
        final String prefix = fromName + ".";
        String sql = "";
        Object[] args = new Object[0];
        if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + Table.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (OAString.isNotEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(name);
            if (value.indexOf("%") >= 0) {
                sql += prefix + Table.P_Name + " LIKE ?";
            }
            else {
                sql += prefix + Table.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.newName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(newName);
            if (value.indexOf("%") >= 0) {
                sql += prefix + Table.P_NewName + " LIKE ?";
            }
            else {
                sql += prefix + Table.P_NewName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (OAString.isNotEmpty(this.abbrevName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = OAString.convertToLikeSearch(abbrevName);
            if (value.indexOf("%") >= 0) {
                sql += prefix + Table.P_AbbrevName + " LIKE ?";
            }
            else {
                sql += prefix + Table.P_AbbrevName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!useColumnsSearch && getColumns() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + TablePP.columns().pp + " = ?";
            args = OAArray.add(Object.class, args, getColumns());
        }
        if (useColumnsSearch && getColumnsSearch() != null) {
            getColumnsSearch().appendSelect(prefix + TablePP.columns().pp, select);
        }
        if (!useDatabaseSearch && getDatabase() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += prefix + TablePP.database().pp + " = ?";
            args = OAArray.add(Object.class, args, getDatabase());
        }
        if (useDatabaseSearch && getDatabaseSearch() != null) {
            getDatabaseSearch().appendSelect(prefix + TablePP.database().pp, select);
        }
        select.add(sql, args);
    }

    private OAFilter<Table> filterDataSourceFilter;
    public OAFilter<Table> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Table>() {
            @Override
            public boolean isUsed(Table table) {
                return TableSearch.this.isUsedForDataSourceFilter(table);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Table> filterCustomFilter;
    public OAFilter<Table> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Table>() {
            @Override
            public boolean isUsed(Table table) {
                boolean b = TableSearch.this.isUsedForCustomFilter(table);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Table searchTable) {
        return true;
    }
    public boolean isUsedForCustomFilter(Table searchTable) {
        return true;
    }
}
