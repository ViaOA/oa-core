// Generated by OABuilder
package com.remodel.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.resource.Resource;
import com.viaoa.datasource.*;

public class DatabaseSearchModel {
    private static Logger LOG = Logger.getLogger(DatabaseSearchModel.class.getName());
    
    protected Hub<Database> hub;  // search results
    protected Hub<Database> hubMultiSelect;
    protected Hub<Database> hubSearchFrom;  // hub (optional) to search from
    protected Hub<DatabaseSearch> hubDatabaseSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<DatabaseType> hubDatabaseType;
    protected Hub<Table> hubTables;
    
    // finder used to find objects in a path
    protected OAFinder<?, Database> finder;
    
    // ObjectModels
    protected DatabaseTypeModel modelDatabaseType;
    protected TableModel modelTables;
    
    // SearchModels
    protected DatabaseTypeSearchModel modelDatabaseTypeSearch;
    protected TableSearchModel modelTablesSearch;
    
    // object used for search data
    protected DatabaseSearch databaseSearch;
    
    public DatabaseSearchModel() {
    }
    
    public DatabaseSearchModel(Hub<Database> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Database> getHub() {
        if (hub == null) {
            hub = new Hub<Database>(Database.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Database> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Database> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    DatabaseSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Database> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Database.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Database> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Database> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public DatabaseSearch getDatabaseSearch() {
        if (databaseSearch != null) return databaseSearch;
        databaseSearch = new DatabaseSearch();
        return databaseSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<DatabaseSearch> getDatabaseSearchHub() {
        if (hubDatabaseSearch == null) {
            hubDatabaseSearch = new Hub<DatabaseSearch>(DatabaseSearch.class);
            hubDatabaseSearch.add(getDatabaseSearch());
            hubDatabaseSearch.setPos(0);
        }
        return hubDatabaseSearch;
    }
    public Hub<DatabaseType> getDatabaseTypeHub() {
        if (hubDatabaseType != null) return hubDatabaseType;
        hubDatabaseType = new Hub<>(DatabaseType.class);
        Hub<DatabaseType> hub = ModelDelegate.getDatabaseTypes();
        HubCopy<DatabaseType> hc = new HubCopy<>(hub, hubDatabaseType, false);
        hubDatabaseType.setLinkHub(getDatabaseSearchHub(), DatabaseSearch.P_DatabaseType); 
        return hubDatabaseType;
    }
    public Hub<Table> getTablesHub() {
        if (hubTables != null) return hubTables;
        hubTables = getDatabaseSearchHub().getDetailHub(DatabaseSearch.P_Tables);
        return hubTables;
    }
    
    public DatabaseTypeModel getDatabaseTypeModel() {
        if (modelDatabaseType != null) return modelDatabaseType;
        modelDatabaseType = new DatabaseTypeModel(getDatabaseTypeHub());
        modelDatabaseType.setDisplayName("Database Type");
        modelDatabaseType.setPluralDisplayName("Database Types");
        modelDatabaseType.setAllowNew(false);
        modelDatabaseType.setAllowSave(true);
        modelDatabaseType.setAllowAdd(false);
        modelDatabaseType.setAllowRemove(false);
        modelDatabaseType.setAllowClear(true);
        modelDatabaseType.setAllowDelete(false);
        modelDatabaseType.setAllowSearch(true);
        modelDatabaseType.setAllowHubSearch(false);
        modelDatabaseType.setAllowGotoEdit(true);
        modelDatabaseType.setViewOnly(true);
        return modelDatabaseType;
    }
    public TableModel getTablesModel() {
        if (modelTables != null) return modelTables;
        modelTables = new TableModel(getTablesHub());
        modelTables.setDisplayName("Tables");
        modelTables.setPluralDisplayName("Tables");
        modelTables.setAllowNew(false);
        modelTables.setAllowSave(true);
        modelTables.setAllowAdd(false);
        modelTables.setAllowRemove(false);
        modelTables.setAllowClear(true);
        modelTables.setAllowDelete(false);
        modelTables.setAllowSearch(true);
        modelTables.setAllowHubSearch(false);
        modelTables.setAllowGotoEdit(true);
        return modelTables;
    }
    
    public DatabaseTypeSearchModel getDatabaseTypeSearchModel() {
        if (modelDatabaseTypeSearch == null) {
            modelDatabaseTypeSearch = new DatabaseTypeSearchModel();
            getDatabaseSearch().setDatabaseTypeSearch(modelDatabaseTypeSearch.getDatabaseTypeSearch());
        }
        return modelDatabaseTypeSearch;
    }
    public TableSearchModel getTablesSearchModel() {
        if (modelTablesSearch == null) {
            modelTablesSearch = new TableSearchModel();
            getDatabaseSearch().setTablesSearch(modelTablesSearch.getTableSearch());
        }
        return modelTablesSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses DatabaseSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Database> sel = getDatabaseSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Database database, Hub<Database> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Database> hub) {
    }
}

