// Generated by OABuilder
package com.remodel.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.resource.Resource;
import com.viaoa.datasource.*;

public class ForeignTableSearchModel {
    private static Logger LOG = Logger.getLogger(ForeignTableSearchModel.class.getName());
    
    protected Hub<ForeignTable> hub;  // search results
    protected Hub<ForeignTable> hubMultiSelect;
    protected Hub<ForeignTable> hubSearchFrom;  // hub (optional) to search from
    protected Hub<ForeignTableSearch> hubForeignTableSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Table> hubTable;
    protected Hub<Table> hubToTable;
    
    // finder used to find objects in a path
    protected OAFinder<?, ForeignTable> finder;
    
    // ObjectModels
    protected TableModel modelTable;
    protected TableModel modelToTable;
    
    // SearchModels
    protected TableSearchModel modelTableSearch;
    protected TableSearchModel modelToTableSearch;
    
    // object used for search data
    protected ForeignTableSearch foreignTableSearch;
    
    public ForeignTableSearchModel() {
    }
    
    public ForeignTableSearchModel(Hub<ForeignTable> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<ForeignTable> getHub() {
        if (hub == null) {
            hub = new Hub<ForeignTable>(ForeignTable.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<ForeignTable> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<ForeignTable> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    ForeignTableSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<ForeignTable> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(ForeignTable.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, ForeignTable> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, ForeignTable> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public ForeignTableSearch getForeignTableSearch() {
        if (foreignTableSearch != null) return foreignTableSearch;
        foreignTableSearch = new ForeignTableSearch();
        return foreignTableSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<ForeignTableSearch> getForeignTableSearchHub() {
        if (hubForeignTableSearch == null) {
            hubForeignTableSearch = new Hub<ForeignTableSearch>(ForeignTableSearch.class);
            hubForeignTableSearch.add(getForeignTableSearch());
            hubForeignTableSearch.setPos(0);
        }
        return hubForeignTableSearch;
    }
    public Hub<Table> getTableHub() {
        if (hubTable != null) return hubTable;
        hubTable = getForeignTableSearchHub().getDetailHub(ForeignTableSearch.P_Table);
        return hubTable;
    }
    public Hub<Table> getToTableHub() {
        if (hubToTable != null) return hubToTable;
        hubToTable = getForeignTableSearchHub().getDetailHub(ForeignTableSearch.P_ToTable);
        return hubToTable;
    }
    
    public TableModel getTableModel() {
        if (modelTable != null) return modelTable;
        modelTable = new TableModel(getTableHub());
        modelTable.setDisplayName("Table");
        modelTable.setPluralDisplayName("Tables");
        modelTable.setAllowNew(false);
        modelTable.setAllowSave(true);
        modelTable.setAllowAdd(false);
        modelTable.setAllowRemove(false);
        modelTable.setAllowClear(true);
        modelTable.setAllowDelete(false);
        modelTable.setAllowSearch(true);
        modelTable.setAllowHubSearch(false);
        modelTable.setAllowGotoEdit(true);
        return modelTable;
    }
    public TableModel getToTableModel() {
        if (modelToTable != null) return modelToTable;
        modelToTable = new TableModel(getToTableHub());
        modelToTable.setDisplayName("Table");
        modelToTable.setPluralDisplayName("Tables");
        modelToTable.setAllowNew(false);
        modelToTable.setAllowSave(true);
        modelToTable.setAllowAdd(false);
        modelToTable.setAllowRemove(false);
        modelToTable.setAllowClear(true);
        modelToTable.setAllowDelete(false);
        modelToTable.setAllowSearch(true);
        modelToTable.setAllowHubSearch(false);
        modelToTable.setAllowGotoEdit(true);
        return modelToTable;
    }
    
    public TableSearchModel getTableSearchModel() {
        if (modelTableSearch == null) {
            modelTableSearch = new TableSearchModel();
            getForeignTableSearch().setTableSearch(modelTableSearch.getTableSearch());
        }
        return modelTableSearch;
    }
    public TableSearchModel getToTableSearchModel() {
        if (modelToTableSearch == null) {
            modelToTableSearch = new TableSearchModel();
            getForeignTableSearch().setToTableSearch(modelToTableSearch.getTableSearch());
        }
        return modelToTableSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses ForeignTableSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<ForeignTable> sel = getForeignTableSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(ForeignTable foreignTable, Hub<ForeignTable> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<ForeignTable> hub) {
    }
}

