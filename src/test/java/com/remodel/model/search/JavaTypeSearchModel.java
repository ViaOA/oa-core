// Generated by OABuilder
package com.remodel.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.resource.Resource;
import com.viaoa.datasource.*;

public class JavaTypeSearchModel {
    private static Logger LOG = Logger.getLogger(JavaTypeSearchModel.class.getName());
    
    protected Hub<JavaType> hub;  // search results
    protected Hub<JavaType> hubMultiSelect;
    protected Hub<JavaType> hubSearchFrom;  // hub (optional) to search from
    protected Hub<JavaTypeSearch> hubJavaTypeSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<DataType> hubDataType;
    
    // finder used to find objects in a path
    protected OAFinder<?, JavaType> finder;
    
    // ObjectModels
    protected DataTypeModel modelDataType;
    
    // SearchModels
    protected DataTypeSearchModel modelDataTypeSearch;
    
    // object used for search data
    protected JavaTypeSearch javaTypeSearch;
    
    public JavaTypeSearchModel() {
    }
    
    public JavaTypeSearchModel(Hub<JavaType> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<JavaType> getHub() {
        if (hub == null) {
            hub = new Hub<JavaType>(JavaType.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<JavaType> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<JavaType> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    JavaTypeSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<JavaType> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(JavaType.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, JavaType> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, JavaType> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public JavaTypeSearch getJavaTypeSearch() {
        if (javaTypeSearch != null) return javaTypeSearch;
        javaTypeSearch = new JavaTypeSearch();
        return javaTypeSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<JavaTypeSearch> getJavaTypeSearchHub() {
        if (hubJavaTypeSearch == null) {
            hubJavaTypeSearch = new Hub<JavaTypeSearch>(JavaTypeSearch.class);
            hubJavaTypeSearch.add(getJavaTypeSearch());
            hubJavaTypeSearch.setPos(0);
        }
        return hubJavaTypeSearch;
    }
    public Hub<DataType> getDataTypeHub() {
        if (hubDataType != null) return hubDataType;
        hubDataType = new Hub<>(DataType.class);
        Hub<DataType> hub = ModelDelegate.getDataTypes();
        HubCopy<DataType> hc = new HubCopy<>(hub, hubDataType, false);
        hubDataType.setLinkHub(getJavaTypeSearchHub(), JavaTypeSearch.P_DataType); 
        return hubDataType;
    }
    
    public DataTypeModel getDataTypeModel() {
        if (modelDataType != null) return modelDataType;
        modelDataType = new DataTypeModel(getDataTypeHub());
        modelDataType.setDisplayName("Data Type");
        modelDataType.setPluralDisplayName("Data Types");
        modelDataType.setAllowNew(false);
        modelDataType.setAllowSave(true);
        modelDataType.setAllowAdd(false);
        modelDataType.setAllowRemove(false);
        modelDataType.setAllowClear(true);
        modelDataType.setAllowDelete(false);
        modelDataType.setAllowSearch(true);
        modelDataType.setAllowHubSearch(false);
        modelDataType.setAllowGotoEdit(true);
        modelDataType.setViewOnly(true);
        return modelDataType;
    }
    
    public DataTypeSearchModel getDataTypeSearchModel() {
        if (modelDataTypeSearch == null) {
            modelDataTypeSearch = new DataTypeSearchModel();
            getJavaTypeSearch().setDataTypeSearch(modelDataTypeSearch.getDataTypeSearch());
        }
        return modelDataTypeSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses JavaTypeSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<JavaType> sel = getJavaTypeSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(JavaType javaType, Hub<JavaType> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<JavaType> hub) {
    }
}

