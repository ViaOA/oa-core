// Generated by OABuilder
package com.remodel.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.resource.Resource;
import com.viaoa.datasource.*;

public class JsonColumnSearchModel {
    private static Logger LOG = Logger.getLogger(JsonColumnSearchModel.class.getName());
    
    protected Hub<JsonColumn> hub;  // search results
    protected Hub<JsonColumn> hubMultiSelect;
    protected Hub<JsonColumn> hubSearchFrom;  // hub (optional) to search from
    protected Hub<JsonColumnSearch> hubJsonColumnSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<JsonObject> hubJsonObject;
    protected Hub<DataType> hubDataType;
    protected Hub<JavaType> hubJavaType;
    
    // finder used to find objects in a path
    protected OAFinder<?, JsonColumn> finder;
    
    // ObjectModels
    protected JsonObjectModel modelJsonObject;
    protected DataTypeModel modelDataType;
    protected JavaTypeModel modelJavaType;
    
    // SearchModels
    protected JsonObjectSearchModel modelJsonObjectSearch;
    protected DataTypeSearchModel modelDataTypeSearch;
    protected JavaTypeSearchModel modelJavaTypeSearch;
    
    // object used for search data
    protected JsonColumnSearch jsonColumnSearch;
    
    public JsonColumnSearchModel() {
    }
    
    public JsonColumnSearchModel(Hub<JsonColumn> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<JsonColumn> getHub() {
        if (hub == null) {
            hub = new Hub<JsonColumn>(JsonColumn.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<JsonColumn> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<JsonColumn> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    JsonColumnSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<JsonColumn> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(JsonColumn.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, JsonColumn> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, JsonColumn> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public JsonColumnSearch getJsonColumnSearch() {
        if (jsonColumnSearch != null) return jsonColumnSearch;
        jsonColumnSearch = new JsonColumnSearch();
        return jsonColumnSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<JsonColumnSearch> getJsonColumnSearchHub() {
        if (hubJsonColumnSearch == null) {
            hubJsonColumnSearch = new Hub<JsonColumnSearch>(JsonColumnSearch.class);
            hubJsonColumnSearch.add(getJsonColumnSearch());
            hubJsonColumnSearch.setPos(0);
        }
        return hubJsonColumnSearch;
    }
    public Hub<JsonObject> getJsonObjectHub() {
        if (hubJsonObject != null) return hubJsonObject;
        hubJsonObject = getJsonColumnSearchHub().getDetailHub(JsonColumnSearch.P_JsonObject);
        return hubJsonObject;
    }
    public Hub<DataType> getDataTypeHub() {
        if (hubDataType != null) return hubDataType;
        hubDataType = new Hub<>(DataType.class);
        Hub<DataType> hub = ModelDelegate.getDataTypes();
        HubCopy<DataType> hc = new HubCopy<>(hub, hubDataType, false);
        hubDataType.setLinkHub(getJsonColumnSearchHub(), JsonColumnSearch.P_DataType); 
        return hubDataType;
    }
    public Hub<JavaType> getJavaTypeHub() {
        if (hubJavaType != null) return hubJavaType;
        hubJavaType = new Hub<>(JavaType.class);
        Hub<JavaType> hub = ModelDelegate.getJavaTypes();
        HubCopy<JavaType> hc = new HubCopy<>(hub, hubJavaType, false);
        hubJavaType.setLinkHub(getJsonColumnSearchHub(), JsonColumnSearch.P_JavaType); 
        return hubJavaType;
    }
    
    public JsonObjectModel getJsonObjectModel() {
        if (modelJsonObject != null) return modelJsonObject;
        modelJsonObject = new JsonObjectModel(getJsonObjectHub());
        modelJsonObject.setDisplayName("Json Object");
        modelJsonObject.setPluralDisplayName("Json Objects");
        modelJsonObject.setAllowNew(false);
        modelJsonObject.setAllowSave(true);
        modelJsonObject.setAllowAdd(false);
        modelJsonObject.setAllowRemove(false);
        modelJsonObject.setAllowClear(true);
        modelJsonObject.setAllowDelete(false);
        modelJsonObject.setAllowSearch(true);
        modelJsonObject.setAllowHubSearch(false);
        modelJsonObject.setAllowGotoEdit(true);
        return modelJsonObject;
    }
    public DataTypeModel getDataTypeModel() {
        if (modelDataType != null) return modelDataType;
        modelDataType = new DataTypeModel(getDataTypeHub());
        modelDataType.setDisplayName("Data Type");
        modelDataType.setPluralDisplayName("Data Types");
        modelDataType.setAllowNew(false);
        modelDataType.setAllowSave(true);
        modelDataType.setAllowAdd(false);
        modelDataType.setAllowRemove(false);
        modelDataType.setAllowClear(true);
        modelDataType.setAllowDelete(false);
        modelDataType.setAllowSearch(true);
        modelDataType.setAllowHubSearch(false);
        modelDataType.setAllowGotoEdit(true);
        modelDataType.setViewOnly(true);
        return modelDataType;
    }
    public JavaTypeModel getJavaTypeModel() {
        if (modelJavaType != null) return modelJavaType;
        modelJavaType = new JavaTypeModel(getJavaTypeHub());
        modelJavaType.setDisplayName("Java Type");
        modelJavaType.setPluralDisplayName("Java Types");
        modelJavaType.setAllowNew(false);
        modelJavaType.setAllowSave(true);
        modelJavaType.setAllowAdd(false);
        modelJavaType.setAllowRemove(false);
        modelJavaType.setAllowClear(true);
        modelJavaType.setAllowDelete(false);
        modelJavaType.setAllowSearch(true);
        modelJavaType.setAllowHubSearch(false);
        modelJavaType.setAllowGotoEdit(true);
        modelJavaType.setViewOnly(true);
        return modelJavaType;
    }
    
    public JsonObjectSearchModel getJsonObjectSearchModel() {
        if (modelJsonObjectSearch == null) {
            modelJsonObjectSearch = new JsonObjectSearchModel();
            getJsonColumnSearch().setJsonObjectSearch(modelJsonObjectSearch.getJsonObjectSearch());
        }
        return modelJsonObjectSearch;
    }
    public DataTypeSearchModel getDataTypeSearchModel() {
        if (modelDataTypeSearch == null) {
            modelDataTypeSearch = new DataTypeSearchModel();
            getJsonColumnSearch().setDataTypeSearch(modelDataTypeSearch.getDataTypeSearch());
        }
        return modelDataTypeSearch;
    }
    public JavaTypeSearchModel getJavaTypeSearchModel() {
        if (modelJavaTypeSearch == null) {
            modelJavaTypeSearch = new JavaTypeSearchModel();
            getJsonColumnSearch().setJavaTypeSearch(modelJavaTypeSearch.getJavaTypeSearch());
        }
        return modelJavaTypeSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses JsonColumnSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<JsonColumn> sel = getJsonColumnSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(JsonColumn jsonColumn, Hub<JsonColumn> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<JsonColumn> hub) {
    }
}

