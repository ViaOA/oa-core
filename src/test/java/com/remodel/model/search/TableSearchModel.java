// Generated by OABuilder
package com.remodel.model.search;

import java.util.logging.*;

import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.*;
import com.remodel.delegate.ModelDelegate;
import com.remodel.model.*;
import com.remodel.model.oa.*;
import com.remodel.model.oa.filter.*;
import com.remodel.model.oa.propertypath.*;
import com.remodel.model.oa.search.*;
import com.remodel.resource.Resource;
import com.viaoa.datasource.*;

public class TableSearchModel {
    private static Logger LOG = Logger.getLogger(TableSearchModel.class.getName());
    
    protected Hub<Table> hub;  // search results
    protected Hub<Table> hubMultiSelect;
    protected Hub<Table> hubSearchFrom;  // hub (optional) to search from
    protected Hub<TableSearch> hubTableSearch;  // search data, size=1, AO
    // references used in search
    protected Hub<Column> hubColumns;
    protected Hub<Database> hubDatabase;
    
    // finder used to find objects in a path
    protected OAFinder<?, Table> finder;
    
    // ObjectModels
    protected ColumnModel modelColumns;
    protected DatabaseModel modelDatabase;
    
    // SearchModels
    protected ColumnSearchModel modelColumnsSearch;
    protected DatabaseSearchModel modelDatabaseSearch;
    
    // object used for search data
    protected TableSearch tableSearch;
    
    public TableSearchModel() {
    }
    
    public TableSearchModel(Hub<Table> hub) {
        this.hub = hub;
    }
    
    // hub used for search results
    public Hub<Table> getHub() {
        if (hub == null) {
            hub = new Hub<Table>(Table.class);
        }
        return hub;
    }
    
    // hub used to search within
    private HubListener hlSearchFromHub;
    public Hub<Table> getSearchFromHub() {
        return hubSearchFrom;
    }
    public void setSearchFromHub(Hub<Table> hub) {
        if (this.hlSearchFromHub != null) {
            hubSearchFrom.removeListener(hlSearchFromHub);
            hlSearchFromHub = null;
        }
    
        hubSearchFrom = hub;
        if (hubSearchFrom != null) {
            hlSearchFromHub = new HubListenerAdapter() {
                @Override
                public void onNewList(HubEvent e) {
                    TableSearchModel.this.getHub().clear();
                }
            };
            hubSearchFrom.addHubListener(hlSearchFromHub);
        }
    }
    public void close() {
        setSearchFromHub(null);
    }
    
    public Hub<Table> getMultiSelectHub() {
        if (hubMultiSelect == null) {
            hubMultiSelect = new Hub<>(Table.class);
        }
        return hubMultiSelect;
    }
    
    public OAFinder<?, Table> getFinder() {
        return finder;
    }
    public void setFinder(OAFinder<?, Table> finder) {
        this.finder = finder;
    }
    
    // object used to input query data, to be used by searchHub
    public TableSearch getTableSearch() {
        if (tableSearch != null) return tableSearch;
        tableSearch = new TableSearch();
        return tableSearch;
    }
    
    // hub for search object - used to bind with UI components for entering search data
    public Hub<TableSearch> getTableSearchHub() {
        if (hubTableSearch == null) {
            hubTableSearch = new Hub<TableSearch>(TableSearch.class);
            hubTableSearch.add(getTableSearch());
            hubTableSearch.setPos(0);
        }
        return hubTableSearch;
    }
    public Hub<Column> getColumnsHub() {
        if (hubColumns != null) return hubColumns;
        hubColumns = getTableSearchHub().getDetailHub(TableSearch.P_Columns);
        return hubColumns;
    }
    public Hub<Database> getDatabaseHub() {
        if (hubDatabase != null) return hubDatabase;
        hubDatabase = new Hub<>(Database.class);
        Hub<Database> hub = ModelDelegate.getDatabases();
        HubCopy<Database> hc = new HubCopy<>(hub, hubDatabase, false);
        hubDatabase.setLinkHub(getTableSearchHub(), TableSearch.P_Database); 
        return hubDatabase;
    }
    
    public ColumnModel getColumnsModel() {
        if (modelColumns != null) return modelColumns;
        modelColumns = new ColumnModel(getColumnsHub());
        modelColumns.setDisplayName("Columns");
        modelColumns.setPluralDisplayName("Columns");
        modelColumns.setAllowNew(false);
        modelColumns.setAllowSave(true);
        modelColumns.setAllowAdd(false);
        modelColumns.setAllowRemove(false);
        modelColumns.setAllowClear(true);
        modelColumns.setAllowDelete(false);
        modelColumns.setAllowSearch(true);
        modelColumns.setAllowHubSearch(false);
        modelColumns.setAllowGotoEdit(true);
        return modelColumns;
    }
    public DatabaseModel getDatabaseModel() {
        if (modelDatabase != null) return modelDatabase;
        modelDatabase = new DatabaseModel(getDatabaseHub());
        modelDatabase.setDisplayName("Database");
        modelDatabase.setPluralDisplayName("Databases");
        modelDatabase.setAllowNew(false);
        modelDatabase.setAllowSave(true);
        modelDatabase.setAllowAdd(false);
        modelDatabase.setAllowRemove(false);
        modelDatabase.setAllowClear(true);
        modelDatabase.setAllowDelete(false);
        modelDatabase.setAllowSearch(true);
        modelDatabase.setAllowHubSearch(false);
        modelDatabase.setAllowGotoEdit(true);
        return modelDatabase;
    }
    
    public ColumnSearchModel getColumnsSearchModel() {
        if (modelColumnsSearch == null) {
            modelColumnsSearch = new ColumnSearchModel();
            getTableSearch().setColumnsSearch(modelColumnsSearch.getColumnSearch());
        }
        return modelColumnsSearch;
    }
    public DatabaseSearchModel getDatabaseSearchModel() {
        if (modelDatabaseSearch == null) {
            modelDatabaseSearch = new DatabaseSearchModel();
            getTableSearch().setDatabaseSearch(modelDatabaseSearch.getDatabaseSearch());
        }
        return modelDatabaseSearch;
    }
    
    public void beforeInput() {
        // hook that is called before search input starts
    }
    
    // uses TableSearch to build query, and populate Hub 
    public void performSearch() {
        OASelect<Table> sel = getTableSearch().getSelect();
        sel.setSearchHub(getSearchFromHub());
        sel.setFinder(getFinder());
        getHub().select(sel);
    }
    
    // can to overwritten to know when a selection is made
    public void onSelect(Table table, Hub<Table> hub) {
    }
    // can to overwritten to know when a multi-select is made
    public void onSelect(Hub<Table> hub) {
    }
}

